/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.6.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						// Support: Chrome 86+
						// In Chrome, if an element having a focusout handler is blurred by
						// clicking outside of it, it invokes the handler synchronously. If
						// that handler calls `.remove()` on the element, the data is cleared,
						// leaving `result` undefined. We need to guard against this.
						return result && result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		// Suppress native focus or blur as it's already being fired
		// in leverageNative.
		_default: function() {
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));


/***/ }),

/***/ "./node_modules/owl.carousel/dist/owl.carousel.js":
/*!********************************************************!*\
  !*** ./node_modules/owl.carousel/dist/owl.carousel.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* provided dependency */ var __webpack_provided_window_dot_jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/**
 * Owl Carousel v2.3.4
 * Copyright 2013-2018 David Deutsch
 * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE
 */
/**
 * Owl carousel
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 * @todo Lazy Load Icon
 * @todo prevent animationend bubling
 * @todo itemsScaleUp
 * @todo Test Zepto
 * @todo stagePadding calculate wrong active classes
 */
;(function($, window, document, undefined) {

	/**
	 * Creates a carousel.
	 * @class The Owl Carousel.
	 * @public
	 * @param {HTMLElement|jQuery} element - The element to create the carousel for.
	 * @param {Object} [options] - The options
	 */
	function Owl(element, options) {

		/**
		 * Current settings for the carousel.
		 * @public
		 */
		this.settings = null;

		/**
		 * Current options set by the caller including defaults.
		 * @public
		 */
		this.options = $.extend({}, Owl.Defaults, options);

		/**
		 * Plugin element.
		 * @public
		 */
		this.$element = $(element);

		/**
		 * Proxied event handlers.
		 * @protected
		 */
		this._handlers = {};

		/**
		 * References to the running plugins of this carousel.
		 * @protected
		 */
		this._plugins = {};

		/**
		 * Currently suppressed events to prevent them from being retriggered.
		 * @protected
		 */
		this._supress = {};

		/**
		 * Absolute current position.
		 * @protected
		 */
		this._current = null;

		/**
		 * Animation speed in milliseconds.
		 * @protected
		 */
		this._speed = null;

		/**
		 * Coordinates of all items in pixel.
		 * @todo The name of this member is missleading.
		 * @protected
		 */
		this._coordinates = [];

		/**
		 * Current breakpoint.
		 * @todo Real media queries would be nice.
		 * @protected
		 */
		this._breakpoint = null;

		/**
		 * Current width of the plugin element.
		 */
		this._width = null;

		/**
		 * All real items.
		 * @protected
		 */
		this._items = [];

		/**
		 * All cloned items.
		 * @protected
		 */
		this._clones = [];

		/**
		 * Merge values of all items.
		 * @todo Maybe this could be part of a plugin.
		 * @protected
		 */
		this._mergers = [];

		/**
		 * Widths of all items.
		 */
		this._widths = [];

		/**
		 * Invalidated parts within the update process.
		 * @protected
		 */
		this._invalidated = {};

		/**
		 * Ordered list of workers for the update process.
		 * @protected
		 */
		this._pipe = [];

		/**
		 * Current state information for the drag operation.
		 * @todo #261
		 * @protected
		 */
		this._drag = {
			time: null,
			target: null,
			pointer: null,
			stage: {
				start: null,
				current: null
			},
			direction: null
		};

		/**
		 * Current state information and their tags.
		 * @type {Object}
		 * @protected
		 */
		this._states = {
			current: {},
			tags: {
				'initializing': [ 'busy' ],
				'animating': [ 'busy' ],
				'dragging': [ 'interacting' ]
			}
		};

		$.each([ 'onResize', 'onThrottledResize' ], $.proxy(function(i, handler) {
			this._handlers[handler] = $.proxy(this[handler], this);
		}, this));

		$.each(Owl.Plugins, $.proxy(function(key, plugin) {
			this._plugins[key.charAt(0).toLowerCase() + key.slice(1)]
				= new plugin(this);
		}, this));

		$.each(Owl.Workers, $.proxy(function(priority, worker) {
			this._pipe.push({
				'filter': worker.filter,
				'run': $.proxy(worker.run, this)
			});
		}, this));

		this.setup();
		this.initialize();
	}

	/**
	 * Default options for the carousel.
	 * @public
	 */
	Owl.Defaults = {
		items: 3,
		loop: false,
		center: false,
		rewind: false,
		checkVisibility: true,

		mouseDrag: true,
		touchDrag: true,
		pullDrag: true,
		freeDrag: false,

		margin: 0,
		stagePadding: 0,

		merge: false,
		mergeFit: true,
		autoWidth: false,

		startPosition: 0,
		rtl: false,

		smartSpeed: 250,
		fluidSpeed: false,
		dragEndSpeed: false,

		responsive: {},
		responsiveRefreshRate: 200,
		responsiveBaseElement: window,

		fallbackEasing: 'swing',
		slideTransition: '',

		info: false,

		nestedItemSelector: false,
		itemElement: 'div',
		stageElement: 'div',

		refreshClass: 'owl-refresh',
		loadedClass: 'owl-loaded',
		loadingClass: 'owl-loading',
		rtlClass: 'owl-rtl',
		responsiveClass: 'owl-responsive',
		dragClass: 'owl-drag',
		itemClass: 'owl-item',
		stageClass: 'owl-stage',
		stageOuterClass: 'owl-stage-outer',
		grabClass: 'owl-grab'
	};

	/**
	 * Enumeration for width.
	 * @public
	 * @readonly
	 * @enum {String}
	 */
	Owl.Width = {
		Default: 'default',
		Inner: 'inner',
		Outer: 'outer'
	};

	/**
	 * Enumeration for types.
	 * @public
	 * @readonly
	 * @enum {String}
	 */
	Owl.Type = {
		Event: 'event',
		State: 'state'
	};

	/**
	 * Contains all registered plugins.
	 * @public
	 */
	Owl.Plugins = {};

	/**
	 * List of workers involved in the update process.
	 */
	Owl.Workers = [ {
		filter: [ 'width', 'settings' ],
		run: function() {
			this._width = this.$element.width();
		}
	}, {
		filter: [ 'width', 'items', 'settings' ],
		run: function(cache) {
			cache.current = this._items && this._items[this.relative(this._current)];
		}
	}, {
		filter: [ 'items', 'settings' ],
		run: function() {
			this.$stage.children('.cloned').remove();
		}
	}, {
		filter: [ 'width', 'items', 'settings' ],
		run: function(cache) {
			var margin = this.settings.margin || '',
				grid = !this.settings.autoWidth,
				rtl = this.settings.rtl,
				css = {
					'width': 'auto',
					'margin-left': rtl ? margin : '',
					'margin-right': rtl ? '' : margin
				};

			!grid && this.$stage.children().css(css);

			cache.css = css;
		}
	}, {
		filter: [ 'width', 'items', 'settings' ],
		run: function(cache) {
			var width = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,
				merge = null,
				iterator = this._items.length,
				grid = !this.settings.autoWidth,
				widths = [];

			cache.items = {
				merge: false,
				width: width
			};

			while (iterator--) {
				merge = this._mergers[iterator];
				merge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge;

				cache.items.merge = merge > 1 || cache.items.merge;

				widths[iterator] = !grid ? this._items[iterator].width() : width * merge;
			}

			this._widths = widths;
		}
	}, {
		filter: [ 'items', 'settings' ],
		run: function() {
			var clones = [],
				items = this._items,
				settings = this.settings,
				// TODO: Should be computed from number of min width items in stage
				view = Math.max(settings.items * 2, 4),
				size = Math.ceil(items.length / 2) * 2,
				repeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0,
				append = '',
				prepend = '';

			repeat /= 2;

			while (repeat > 0) {
				// Switch to only using appended clones
				clones.push(this.normalize(clones.length / 2, true));
				append = append + items[clones[clones.length - 1]][0].outerHTML;
				clones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, true));
				prepend = items[clones[clones.length - 1]][0].outerHTML + prepend;
				repeat -= 1;
			}

			this._clones = clones;

			$(append).addClass('cloned').appendTo(this.$stage);
			$(prepend).addClass('cloned').prependTo(this.$stage);
		}
	}, {
		filter: [ 'width', 'items', 'settings' ],
		run: function() {
			var rtl = this.settings.rtl ? 1 : -1,
				size = this._clones.length + this._items.length,
				iterator = -1,
				previous = 0,
				current = 0,
				coordinates = [];

			while (++iterator < size) {
				previous = coordinates[iterator - 1] || 0;
				current = this._widths[this.relative(iterator)] + this.settings.margin;
				coordinates.push(previous + current * rtl);
			}

			this._coordinates = coordinates;
		}
	}, {
		filter: [ 'width', 'items', 'settings' ],
		run: function() {
			var padding = this.settings.stagePadding,
				coordinates = this._coordinates,
				css = {
					'width': Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2,
					'padding-left': padding || '',
					'padding-right': padding || ''
				};

			this.$stage.css(css);
		}
	}, {
		filter: [ 'width', 'items', 'settings' ],
		run: function(cache) {
			var iterator = this._coordinates.length,
				grid = !this.settings.autoWidth,
				items = this.$stage.children();

			if (grid && cache.items.merge) {
				while (iterator--) {
					cache.css.width = this._widths[this.relative(iterator)];
					items.eq(iterator).css(cache.css);
				}
			} else if (grid) {
				cache.css.width = cache.items.width;
				items.css(cache.css);
			}
		}
	}, {
		filter: [ 'items' ],
		run: function() {
			this._coordinates.length < 1 && this.$stage.removeAttr('style');
		}
	}, {
		filter: [ 'width', 'items', 'settings' ],
		run: function(cache) {
			cache.current = cache.current ? this.$stage.children().index(cache.current) : 0;
			cache.current = Math.max(this.minimum(), Math.min(this.maximum(), cache.current));
			this.reset(cache.current);
		}
	}, {
		filter: [ 'position' ],
		run: function() {
			this.animate(this.coordinates(this._current));
		}
	}, {
		filter: [ 'width', 'position', 'items', 'settings' ],
		run: function() {
			var rtl = this.settings.rtl ? 1 : -1,
				padding = this.settings.stagePadding * 2,
				begin = this.coordinates(this.current()) + padding,
				end = begin + this.width() * rtl,
				inner, outer, matches = [], i, n;

			for (i = 0, n = this._coordinates.length; i < n; i++) {
				inner = this._coordinates[i - 1] || 0;
				outer = Math.abs(this._coordinates[i]) + padding * rtl;

				if ((this.op(inner, '<=', begin) && (this.op(inner, '>', end)))
					|| (this.op(outer, '<', begin) && this.op(outer, '>', end))) {
					matches.push(i);
				}
			}

			this.$stage.children('.active').removeClass('active');
			this.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass('active');

			this.$stage.children('.center').removeClass('center');
			if (this.settings.center) {
				this.$stage.children().eq(this.current()).addClass('center');
			}
		}
	} ];

	/**
	 * Create the stage DOM element
	 */
	Owl.prototype.initializeStage = function() {
		this.$stage = this.$element.find('.' + this.settings.stageClass);

		// if the stage is already in the DOM, grab it and skip stage initialization
		if (this.$stage.length) {
			return;
		}

		this.$element.addClass(this.options.loadingClass);

		// create stage
		this.$stage = $('<' + this.settings.stageElement + '>', {
			"class": this.settings.stageClass
		}).wrap( $( '<div/>', {
			"class": this.settings.stageOuterClass
		}));

		// append stage
		this.$element.append(this.$stage.parent());
	};

	/**
	 * Create item DOM elements
	 */
	Owl.prototype.initializeItems = function() {
		var $items = this.$element.find('.owl-item');

		// if the items are already in the DOM, grab them and skip item initialization
		if ($items.length) {
			this._items = $items.get().map(function(item) {
				return $(item);
			});

			this._mergers = this._items.map(function() {
				return 1;
			});

			this.refresh();

			return;
		}

		// append content
		this.replace(this.$element.children().not(this.$stage.parent()));

		// check visibility
		if (this.isVisible()) {
			// update view
			this.refresh();
		} else {
			// invalidate width
			this.invalidate('width');
		}

		this.$element
			.removeClass(this.options.loadingClass)
			.addClass(this.options.loadedClass);
	};

	/**
	 * Initializes the carousel.
	 * @protected
	 */
	Owl.prototype.initialize = function() {
		this.enter('initializing');
		this.trigger('initialize');

		this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl);

		if (this.settings.autoWidth && !this.is('pre-loading')) {
			var imgs, nestedSelector, width;
			imgs = this.$element.find('img');
			nestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined;
			width = this.$element.children(nestedSelector).width();

			if (imgs.length && width <= 0) {
				this.preloadAutoWidthImages(imgs);
			}
		}

		this.initializeStage();
		this.initializeItems();

		// register event handlers
		this.registerEventHandlers();

		this.leave('initializing');
		this.trigger('initialized');
	};

	/**
	 * @returns {Boolean} visibility of $element
	 *                    if you know the carousel will always be visible you can set `checkVisibility` to `false` to
	 *                    prevent the expensive browser layout forced reflow the $element.is(':visible') does
	 */
	Owl.prototype.isVisible = function() {
		return this.settings.checkVisibility
			? this.$element.is(':visible')
			: true;
	};

	/**
	 * Setups the current settings.
	 * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?
	 * @todo Support for media queries by using `matchMedia` would be nice.
	 * @public
	 */
	Owl.prototype.setup = function() {
		var viewport = this.viewport(),
			overwrites = this.options.responsive,
			match = -1,
			settings = null;

		if (!overwrites) {
			settings = $.extend({}, this.options);
		} else {
			$.each(overwrites, function(breakpoint) {
				if (breakpoint <= viewport && breakpoint > match) {
					match = Number(breakpoint);
				}
			});

			settings = $.extend({}, this.options, overwrites[match]);
			if (typeof settings.stagePadding === 'function') {
				settings.stagePadding = settings.stagePadding();
			}
			delete settings.responsive;

			// responsive class
			if (settings.responsiveClass) {
				this.$element.attr('class',
					this.$element.attr('class').replace(new RegExp('(' + this.options.responsiveClass + '-)\\S+\\s', 'g'), '$1' + match)
				);
			}
		}

		this.trigger('change', { property: { name: 'settings', value: settings } });
		this._breakpoint = match;
		this.settings = settings;
		this.invalidate('settings');
		this.trigger('changed', { property: { name: 'settings', value: this.settings } });
	};

	/**
	 * Updates option logic if necessery.
	 * @protected
	 */
	Owl.prototype.optionsLogic = function() {
		if (this.settings.autoWidth) {
			this.settings.stagePadding = false;
			this.settings.merge = false;
		}
	};

	/**
	 * Prepares an item before add.
	 * @todo Rename event parameter `content` to `item`.
	 * @protected
	 * @returns {jQuery|HTMLElement} - The item container.
	 */
	Owl.prototype.prepare = function(item) {
		var event = this.trigger('prepare', { content: item });

		if (!event.data) {
			event.data = $('<' + this.settings.itemElement + '/>')
				.addClass(this.options.itemClass).append(item)
		}

		this.trigger('prepared', { content: event.data });

		return event.data;
	};

	/**
	 * Updates the view.
	 * @public
	 */
	Owl.prototype.update = function() {
		var i = 0,
			n = this._pipe.length,
			filter = $.proxy(function(p) { return this[p] }, this._invalidated),
			cache = {};

		while (i < n) {
			if (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {
				this._pipe[i].run(cache);
			}
			i++;
		}

		this._invalidated = {};

		!this.is('valid') && this.enter('valid');
	};

	/**
	 * Gets the width of the view.
	 * @public
	 * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.
	 * @returns {Number} - The width of the view in pixel.
	 */
	Owl.prototype.width = function(dimension) {
		dimension = dimension || Owl.Width.Default;
		switch (dimension) {
			case Owl.Width.Inner:
			case Owl.Width.Outer:
				return this._width;
			default:
				return this._width - this.settings.stagePadding * 2 + this.settings.margin;
		}
	};

	/**
	 * Refreshes the carousel primarily for adaptive purposes.
	 * @public
	 */
	Owl.prototype.refresh = function() {
		this.enter('refreshing');
		this.trigger('refresh');

		this.setup();

		this.optionsLogic();

		this.$element.addClass(this.options.refreshClass);

		this.update();

		this.$element.removeClass(this.options.refreshClass);

		this.leave('refreshing');
		this.trigger('refreshed');
	};

	/**
	 * Checks window `resize` event.
	 * @protected
	 */
	Owl.prototype.onThrottledResize = function() {
		window.clearTimeout(this.resizeTimer);
		this.resizeTimer = window.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);
	};

	/**
	 * Checks window `resize` event.
	 * @protected
	 */
	Owl.prototype.onResize = function() {
		if (!this._items.length) {
			return false;
		}

		if (this._width === this.$element.width()) {
			return false;
		}

		if (!this.isVisible()) {
			return false;
		}

		this.enter('resizing');

		if (this.trigger('resize').isDefaultPrevented()) {
			this.leave('resizing');
			return false;
		}

		this.invalidate('width');

		this.refresh();

		this.leave('resizing');
		this.trigger('resized');
	};

	/**
	 * Registers event handlers.
	 * @todo Check `msPointerEnabled`
	 * @todo #261
	 * @protected
	 */
	Owl.prototype.registerEventHandlers = function() {
		if ($.support.transition) {
			this.$stage.on($.support.transition.end + '.owl.core', $.proxy(this.onTransitionEnd, this));
		}

		if (this.settings.responsive !== false) {
			this.on(window, 'resize', this._handlers.onThrottledResize);
		}

		if (this.settings.mouseDrag) {
			this.$element.addClass(this.options.dragClass);
			this.$stage.on('mousedown.owl.core', $.proxy(this.onDragStart, this));
			this.$stage.on('dragstart.owl.core selectstart.owl.core', function() { return false });
		}

		if (this.settings.touchDrag){
			this.$stage.on('touchstart.owl.core', $.proxy(this.onDragStart, this));
			this.$stage.on('touchcancel.owl.core', $.proxy(this.onDragEnd, this));
		}
	};

	/**
	 * Handles `touchstart` and `mousedown` events.
	 * @todo Horizontal swipe threshold as option
	 * @todo #261
	 * @protected
	 * @param {Event} event - The event arguments.
	 */
	Owl.prototype.onDragStart = function(event) {
		var stage = null;

		if (event.which === 3) {
			return;
		}

		if ($.support.transform) {
			stage = this.$stage.css('transform').replace(/.*\(|\)| /g, '').split(',');
			stage = {
				x: stage[stage.length === 16 ? 12 : 4],
				y: stage[stage.length === 16 ? 13 : 5]
			};
		} else {
			stage = this.$stage.position();
			stage = {
				x: this.settings.rtl ?
					stage.left + this.$stage.width() - this.width() + this.settings.margin :
					stage.left,
				y: stage.top
			};
		}

		if (this.is('animating')) {
			$.support.transform ? this.animate(stage.x) : this.$stage.stop()
			this.invalidate('position');
		}

		this.$element.toggleClass(this.options.grabClass, event.type === 'mousedown');

		this.speed(0);

		this._drag.time = new Date().getTime();
		this._drag.target = $(event.target);
		this._drag.stage.start = stage;
		this._drag.stage.current = stage;
		this._drag.pointer = this.pointer(event);

		$(document).on('mouseup.owl.core touchend.owl.core', $.proxy(this.onDragEnd, this));

		$(document).one('mousemove.owl.core touchmove.owl.core', $.proxy(function(event) {
			var delta = this.difference(this._drag.pointer, this.pointer(event));

			$(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));

			if (Math.abs(delta.x) < Math.abs(delta.y) && this.is('valid')) {
				return;
			}

			event.preventDefault();

			this.enter('dragging');
			this.trigger('drag');
		}, this));
	};

	/**
	 * Handles the `touchmove` and `mousemove` events.
	 * @todo #261
	 * @protected
	 * @param {Event} event - The event arguments.
	 */
	Owl.prototype.onDragMove = function(event) {
		var minimum = null,
			maximum = null,
			pull = null,
			delta = this.difference(this._drag.pointer, this.pointer(event)),
			stage = this.difference(this._drag.stage.start, delta);

		if (!this.is('dragging')) {
			return;
		}

		event.preventDefault();

		if (this.settings.loop) {
			minimum = this.coordinates(this.minimum());
			maximum = this.coordinates(this.maximum() + 1) - minimum;
			stage.x = (((stage.x - minimum) % maximum + maximum) % maximum) + minimum;
		} else {
			minimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());
			maximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());
			pull = this.settings.pullDrag ? -1 * delta.x / 5 : 0;
			stage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull);
		}

		this._drag.stage.current = stage;

		this.animate(stage.x);
	};

	/**
	 * Handles the `touchend` and `mouseup` events.
	 * @todo #261
	 * @todo Threshold for click event
	 * @protected
	 * @param {Event} event - The event arguments.
	 */
	Owl.prototype.onDragEnd = function(event) {
		var delta = this.difference(this._drag.pointer, this.pointer(event)),
			stage = this._drag.stage.current,
			direction = delta.x > 0 ^ this.settings.rtl ? 'left' : 'right';

		$(document).off('.owl.core');

		this.$element.removeClass(this.options.grabClass);

		if (delta.x !== 0 && this.is('dragging') || !this.is('valid')) {
			this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);
			this.current(this.closest(stage.x, delta.x !== 0 ? direction : this._drag.direction));
			this.invalidate('position');
			this.update();

			this._drag.direction = direction;

			if (Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) {
				this._drag.target.one('click.owl.core', function() { return false; });
			}
		}

		if (!this.is('dragging')) {
			return;
		}

		this.leave('dragging');
		this.trigger('dragged');
	};

	/**
	 * Gets absolute position of the closest item for a coordinate.
	 * @todo Setting `freeDrag` makes `closest` not reusable. See #165.
	 * @protected
	 * @param {Number} coordinate - The coordinate in pixel.
	 * @param {String} direction - The direction to check for the closest item. Ether `left` or `right`.
	 * @return {Number} - The absolute position of the closest item.
	 */
	Owl.prototype.closest = function(coordinate, direction) {
		var position = -1,
			pull = 30,
			width = this.width(),
			coordinates = this.coordinates();

		if (!this.settings.freeDrag) {
			// check closest item
			$.each(coordinates, $.proxy(function(index, value) {
				// on a left pull, check on current index
				if (direction === 'left' && coordinate > value - pull && coordinate < value + pull) {
					position = index;
				// on a right pull, check on previous index
				// to do so, subtract width from value and set position = index + 1
				} else if (direction === 'right' && coordinate > value - width - pull && coordinate < value - width + pull) {
					position = index + 1;
				} else if (this.op(coordinate, '<', value)
					&& this.op(coordinate, '>', coordinates[index + 1] !== undefined ? coordinates[index + 1] : value - width)) {
					position = direction === 'left' ? index + 1 : index;
				}
				return position === -1;
			}, this));
		}

		if (!this.settings.loop) {
			// non loop boundries
			if (this.op(coordinate, '>', coordinates[this.minimum()])) {
				position = coordinate = this.minimum();
			} else if (this.op(coordinate, '<', coordinates[this.maximum()])) {
				position = coordinate = this.maximum();
			}
		}

		return position;
	};

	/**
	 * Animates the stage.
	 * @todo #270
	 * @public
	 * @param {Number} coordinate - The coordinate in pixels.
	 */
	Owl.prototype.animate = function(coordinate) {
		var animate = this.speed() > 0;

		this.is('animating') && this.onTransitionEnd();

		if (animate) {
			this.enter('animating');
			this.trigger('translate');
		}

		if ($.support.transform3d && $.support.transition) {
			this.$stage.css({
				transform: 'translate3d(' + coordinate + 'px,0px,0px)',
				transition: (this.speed() / 1000) + 's' + (
					this.settings.slideTransition ? ' ' + this.settings.slideTransition : ''
				)
			});
		} else if (animate) {
			this.$stage.animate({
				left: coordinate + 'px'
			}, this.speed(), this.settings.fallbackEasing, $.proxy(this.onTransitionEnd, this));
		} else {
			this.$stage.css({
				left: coordinate + 'px'
			});
		}
	};

	/**
	 * Checks whether the carousel is in a specific state or not.
	 * @param {String} state - The state to check.
	 * @returns {Boolean} - The flag which indicates if the carousel is busy.
	 */
	Owl.prototype.is = function(state) {
		return this._states.current[state] && this._states.current[state] > 0;
	};

	/**
	 * Sets the absolute position of the current item.
	 * @public
	 * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.
	 * @returns {Number} - The absolute position of the current item.
	 */
	Owl.prototype.current = function(position) {
		if (position === undefined) {
			return this._current;
		}

		if (this._items.length === 0) {
			return undefined;
		}

		position = this.normalize(position);

		if (this._current !== position) {
			var event = this.trigger('change', { property: { name: 'position', value: position } });

			if (event.data !== undefined) {
				position = this.normalize(event.data);
			}

			this._current = position;

			this.invalidate('position');

			this.trigger('changed', { property: { name: 'position', value: this._current } });
		}

		return this._current;
	};

	/**
	 * Invalidates the given part of the update routine.
	 * @param {String} [part] - The part to invalidate.
	 * @returns {Array.<String>} - The invalidated parts.
	 */
	Owl.prototype.invalidate = function(part) {
		if ($.type(part) === 'string') {
			this._invalidated[part] = true;
			this.is('valid') && this.leave('valid');
		}
		return $.map(this._invalidated, function(v, i) { return i });
	};

	/**
	 * Resets the absolute position of the current item.
	 * @public
	 * @param {Number} position - The absolute position of the new item.
	 */
	Owl.prototype.reset = function(position) {
		position = this.normalize(position);

		if (position === undefined) {
			return;
		}

		this._speed = 0;
		this._current = position;

		this.suppress([ 'translate', 'translated' ]);

		this.animate(this.coordinates(position));

		this.release([ 'translate', 'translated' ]);
	};

	/**
	 * Normalizes an absolute or a relative position of an item.
	 * @public
	 * @param {Number} position - The absolute or relative position to normalize.
	 * @param {Boolean} [relative=false] - Whether the given position is relative or not.
	 * @returns {Number} - The normalized position.
	 */
	Owl.prototype.normalize = function(position, relative) {
		var n = this._items.length,
			m = relative ? 0 : this._clones.length;

		if (!this.isNumeric(position) || n < 1) {
			position = undefined;
		} else if (position < 0 || position >= n + m) {
			position = ((position - m / 2) % n + n) % n + m / 2;
		}

		return position;
	};

	/**
	 * Converts an absolute position of an item into a relative one.
	 * @public
	 * @param {Number} position - The absolute position to convert.
	 * @returns {Number} - The converted position.
	 */
	Owl.prototype.relative = function(position) {
		position -= this._clones.length / 2;
		return this.normalize(position, true);
	};

	/**
	 * Gets the maximum position for the current item.
	 * @public
	 * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
	 * @returns {Number}
	 */
	Owl.prototype.maximum = function(relative) {
		var settings = this.settings,
			maximum = this._coordinates.length,
			iterator,
			reciprocalItemsWidth,
			elementWidth;

		if (settings.loop) {
			maximum = this._clones.length / 2 + this._items.length - 1;
		} else if (settings.autoWidth || settings.merge) {
			iterator = this._items.length;
			if (iterator) {
				reciprocalItemsWidth = this._items[--iterator].width();
				elementWidth = this.$element.width();
				while (iterator--) {
					reciprocalItemsWidth += this._items[iterator].width() + this.settings.margin;
					if (reciprocalItemsWidth > elementWidth) {
						break;
					}
				}
			}
			maximum = iterator + 1;
		} else if (settings.center) {
			maximum = this._items.length - 1;
		} else {
			maximum = this._items.length - settings.items;
		}

		if (relative) {
			maximum -= this._clones.length / 2;
		}

		return Math.max(maximum, 0);
	};

	/**
	 * Gets the minimum position for the current item.
	 * @public
	 * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
	 * @returns {Number}
	 */
	Owl.prototype.minimum = function(relative) {
		return relative ? 0 : this._clones.length / 2;
	};

	/**
	 * Gets an item at the specified relative position.
	 * @public
	 * @param {Number} [position] - The relative position of the item.
	 * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
	 */
	Owl.prototype.items = function(position) {
		if (position === undefined) {
			return this._items.slice();
		}

		position = this.normalize(position, true);
		return this._items[position];
	};

	/**
	 * Gets an item at the specified relative position.
	 * @public
	 * @param {Number} [position] - The relative position of the item.
	 * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
	 */
	Owl.prototype.mergers = function(position) {
		if (position === undefined) {
			return this._mergers.slice();
		}

		position = this.normalize(position, true);
		return this._mergers[position];
	};

	/**
	 * Gets the absolute positions of clones for an item.
	 * @public
	 * @param {Number} [position] - The relative position of the item.
	 * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.
	 */
	Owl.prototype.clones = function(position) {
		var odd = this._clones.length / 2,
			even = odd + this._items.length,
			map = function(index) { return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2 };

		if (position === undefined) {
			return $.map(this._clones, function(v, i) { return map(i) });
		}

		return $.map(this._clones, function(v, i) { return v === position ? map(i) : null });
	};

	/**
	 * Sets the current animation speed.
	 * @public
	 * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.
	 * @returns {Number} - The current animation speed in milliseconds.
	 */
	Owl.prototype.speed = function(speed) {
		if (speed !== undefined) {
			this._speed = speed;
		}

		return this._speed;
	};

	/**
	 * Gets the coordinate of an item.
	 * @todo The name of this method is missleanding.
	 * @public
	 * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.
	 * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.
	 */
	Owl.prototype.coordinates = function(position) {
		var multiplier = 1,
			newPosition = position - 1,
			coordinate;

		if (position === undefined) {
			return $.map(this._coordinates, $.proxy(function(coordinate, index) {
				return this.coordinates(index);
			}, this));
		}

		if (this.settings.center) {
			if (this.settings.rtl) {
				multiplier = -1;
				newPosition = position + 1;
			}

			coordinate = this._coordinates[position];
			coordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;
		} else {
			coordinate = this._coordinates[newPosition] || 0;
		}

		coordinate = Math.ceil(coordinate);

		return coordinate;
	};

	/**
	 * Calculates the speed for a translation.
	 * @protected
	 * @param {Number} from - The absolute position of the start item.
	 * @param {Number} to - The absolute position of the target item.
	 * @param {Number} [factor=undefined] - The time factor in milliseconds.
	 * @returns {Number} - The time in milliseconds for the translation.
	 */
	Owl.prototype.duration = function(from, to, factor) {
		if (factor === 0) {
			return 0;
		}

		return Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs((factor || this.settings.smartSpeed));
	};

	/**
	 * Slides to the specified item.
	 * @public
	 * @param {Number} position - The position of the item.
	 * @param {Number} [speed] - The time in milliseconds for the transition.
	 */
	Owl.prototype.to = function(position, speed) {
		var current = this.current(),
			revert = null,
			distance = position - this.relative(current),
			direction = (distance > 0) - (distance < 0),
			items = this._items.length,
			minimum = this.minimum(),
			maximum = this.maximum();

		if (this.settings.loop) {
			if (!this.settings.rewind && Math.abs(distance) > items / 2) {
				distance += direction * -1 * items;
			}

			position = current + distance;
			revert = ((position - minimum) % items + items) % items + minimum;

			if (revert !== position && revert - distance <= maximum && revert - distance > 0) {
				current = revert - distance;
				position = revert;
				this.reset(current);
			}
		} else if (this.settings.rewind) {
			maximum += 1;
			position = (position % maximum + maximum) % maximum;
		} else {
			position = Math.max(minimum, Math.min(maximum, position));
		}

		this.speed(this.duration(current, position, speed));
		this.current(position);

		if (this.isVisible()) {
			this.update();
		}
	};

	/**
	 * Slides to the next item.
	 * @public
	 * @param {Number} [speed] - The time in milliseconds for the transition.
	 */
	Owl.prototype.next = function(speed) {
		speed = speed || false;
		this.to(this.relative(this.current()) + 1, speed);
	};

	/**
	 * Slides to the previous item.
	 * @public
	 * @param {Number} [speed] - The time in milliseconds for the transition.
	 */
	Owl.prototype.prev = function(speed) {
		speed = speed || false;
		this.to(this.relative(this.current()) - 1, speed);
	};

	/**
	 * Handles the end of an animation.
	 * @protected
	 * @param {Event} event - The event arguments.
	 */
	Owl.prototype.onTransitionEnd = function(event) {

		// if css2 animation then event object is undefined
		if (event !== undefined) {
			event.stopPropagation();

			// Catch only owl-stage transitionEnd event
			if ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {
				return false;
			}
		}

		this.leave('animating');
		this.trigger('translated');
	};

	/**
	 * Gets viewport width.
	 * @protected
	 * @return {Number} - The width in pixel.
	 */
	Owl.prototype.viewport = function() {
		var width;
		if (this.options.responsiveBaseElement !== window) {
			width = $(this.options.responsiveBaseElement).width();
		} else if (window.innerWidth) {
			width = window.innerWidth;
		} else if (document.documentElement && document.documentElement.clientWidth) {
			width = document.documentElement.clientWidth;
		} else {
			console.warn('Can not detect viewport width.');
		}
		return width;
	};

	/**
	 * Replaces the current content.
	 * @public
	 * @param {HTMLElement|jQuery|String} content - The new content.
	 */
	Owl.prototype.replace = function(content) {
		this.$stage.empty();
		this._items = [];

		if (content) {
			content = (content instanceof jQuery) ? content : $(content);
		}

		if (this.settings.nestedItemSelector) {
			content = content.find('.' + this.settings.nestedItemSelector);
		}

		content.filter(function() {
			return this.nodeType === 1;
		}).each($.proxy(function(index, item) {
			item = this.prepare(item);
			this.$stage.append(item);
			this._items.push(item);
			this._mergers.push(item.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
		}, this));

		this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);

		this.invalidate('items');
	};

	/**
	 * Adds an item.
	 * @todo Use `item` instead of `content` for the event arguments.
	 * @public
	 * @param {HTMLElement|jQuery|String} content - The item content to add.
	 * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.
	 */
	Owl.prototype.add = function(content, position) {
		var current = this.relative(this._current);

		position = position === undefined ? this._items.length : this.normalize(position, true);
		content = content instanceof jQuery ? content : $(content);

		this.trigger('add', { content: content, position: position });

		content = this.prepare(content);

		if (this._items.length === 0 || position === this._items.length) {
			this._items.length === 0 && this.$stage.append(content);
			this._items.length !== 0 && this._items[position - 1].after(content);
			this._items.push(content);
			this._mergers.push(content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
		} else {
			this._items[position].before(content);
			this._items.splice(position, 0, content);
			this._mergers.splice(position, 0, content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
		}

		this._items[current] && this.reset(this._items[current].index());

		this.invalidate('items');

		this.trigger('added', { content: content, position: position });
	};

	/**
	 * Removes an item by its position.
	 * @todo Use `item` instead of `content` for the event arguments.
	 * @public
	 * @param {Number} position - The relative position of the item to remove.
	 */
	Owl.prototype.remove = function(position) {
		position = this.normalize(position, true);

		if (position === undefined) {
			return;
		}

		this.trigger('remove', { content: this._items[position], position: position });

		this._items[position].remove();
		this._items.splice(position, 1);
		this._mergers.splice(position, 1);

		this.invalidate('items');

		this.trigger('removed', { content: null, position: position });
	};

	/**
	 * Preloads images with auto width.
	 * @todo Replace by a more generic approach
	 * @protected
	 */
	Owl.prototype.preloadAutoWidthImages = function(images) {
		images.each($.proxy(function(i, element) {
			this.enter('pre-loading');
			element = $(element);
			$(new Image()).one('load', $.proxy(function(e) {
				element.attr('src', e.target.src);
				element.css('opacity', 1);
				this.leave('pre-loading');
				!this.is('pre-loading') && !this.is('initializing') && this.refresh();
			}, this)).attr('src', element.attr('src') || element.attr('data-src') || element.attr('data-src-retina'));
		}, this));
	};

	/**
	 * Destroys the carousel.
	 * @public
	 */
	Owl.prototype.destroy = function() {

		this.$element.off('.owl.core');
		this.$stage.off('.owl.core');
		$(document).off('.owl.core');

		if (this.settings.responsive !== false) {
			window.clearTimeout(this.resizeTimer);
			this.off(window, 'resize', this._handlers.onThrottledResize);
		}

		for (var i in this._plugins) {
			this._plugins[i].destroy();
		}

		this.$stage.children('.cloned').remove();

		this.$stage.unwrap();
		this.$stage.children().contents().unwrap();
		this.$stage.children().unwrap();
		this.$stage.remove();
		this.$element
			.removeClass(this.options.refreshClass)
			.removeClass(this.options.loadingClass)
			.removeClass(this.options.loadedClass)
			.removeClass(this.options.rtlClass)
			.removeClass(this.options.dragClass)
			.removeClass(this.options.grabClass)
			.attr('class', this.$element.attr('class').replace(new RegExp(this.options.responsiveClass + '-\\S+\\s', 'g'), ''))
			.removeData('owl.carousel');
	};

	/**
	 * Operators to calculate right-to-left and left-to-right.
	 * @protected
	 * @param {Number} [a] - The left side operand.
	 * @param {String} [o] - The operator.
	 * @param {Number} [b] - The right side operand.
	 */
	Owl.prototype.op = function(a, o, b) {
		var rtl = this.settings.rtl;
		switch (o) {
			case '<':
				return rtl ? a > b : a < b;
			case '>':
				return rtl ? a < b : a > b;
			case '>=':
				return rtl ? a <= b : a >= b;
			case '<=':
				return rtl ? a >= b : a <= b;
			default:
				break;
		}
	};

	/**
	 * Attaches to an internal event.
	 * @protected
	 * @param {HTMLElement} element - The event source.
	 * @param {String} event - The event name.
	 * @param {Function} listener - The event handler to attach.
	 * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.
	 */
	Owl.prototype.on = function(element, event, listener, capture) {
		if (element.addEventListener) {
			element.addEventListener(event, listener, capture);
		} else if (element.attachEvent) {
			element.attachEvent('on' + event, listener);
		}
	};

	/**
	 * Detaches from an internal event.
	 * @protected
	 * @param {HTMLElement} element - The event source.
	 * @param {String} event - The event name.
	 * @param {Function} listener - The attached event handler to detach.
	 * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.
	 */
	Owl.prototype.off = function(element, event, listener, capture) {
		if (element.removeEventListener) {
			element.removeEventListener(event, listener, capture);
		} else if (element.detachEvent) {
			element.detachEvent('on' + event, listener);
		}
	};

	/**
	 * Triggers a public event.
	 * @todo Remove `status`, `relatedTarget` should be used instead.
	 * @protected
	 * @param {String} name - The event name.
	 * @param {*} [data=null] - The event data.
	 * @param {String} [namespace=carousel] - The event namespace.
	 * @param {String} [state] - The state which is associated with the event.
	 * @param {Boolean} [enter=false] - Indicates if the call enters the specified state or not.
	 * @returns {Event} - The event arguments.
	 */
	Owl.prototype.trigger = function(name, data, namespace, state, enter) {
		var status = {
			item: { count: this._items.length, index: this.current() }
		}, handler = $.camelCase(
			$.grep([ 'on', name, namespace ], function(v) { return v })
				.join('-').toLowerCase()
		), event = $.Event(
			[ name, 'owl', namespace || 'carousel' ].join('.').toLowerCase(),
			$.extend({ relatedTarget: this }, status, data)
		);

		if (!this._supress[name]) {
			$.each(this._plugins, function(name, plugin) {
				if (plugin.onTrigger) {
					plugin.onTrigger(event);
				}
			});

			this.register({ type: Owl.Type.Event, name: name });
			this.$element.trigger(event);

			if (this.settings && typeof this.settings[handler] === 'function') {
				this.settings[handler].call(this, event);
			}
		}

		return event;
	};

	/**
	 * Enters a state.
	 * @param name - The state name.
	 */
	Owl.prototype.enter = function(name) {
		$.each([ name ].concat(this._states.tags[name] || []), $.proxy(function(i, name) {
			if (this._states.current[name] === undefined) {
				this._states.current[name] = 0;
			}

			this._states.current[name]++;
		}, this));
	};

	/**
	 * Leaves a state.
	 * @param name - The state name.
	 */
	Owl.prototype.leave = function(name) {
		$.each([ name ].concat(this._states.tags[name] || []), $.proxy(function(i, name) {
			this._states.current[name]--;
		}, this));
	};

	/**
	 * Registers an event or state.
	 * @public
	 * @param {Object} object - The event or state to register.
	 */
	Owl.prototype.register = function(object) {
		if (object.type === Owl.Type.Event) {
			if (!$.event.special[object.name]) {
				$.event.special[object.name] = {};
			}

			if (!$.event.special[object.name].owl) {
				var _default = $.event.special[object.name]._default;
				$.event.special[object.name]._default = function(e) {
					if (_default && _default.apply && (!e.namespace || e.namespace.indexOf('owl') === -1)) {
						return _default.apply(this, arguments);
					}
					return e.namespace && e.namespace.indexOf('owl') > -1;
				};
				$.event.special[object.name].owl = true;
			}
		} else if (object.type === Owl.Type.State) {
			if (!this._states.tags[object.name]) {
				this._states.tags[object.name] = object.tags;
			} else {
				this._states.tags[object.name] = this._states.tags[object.name].concat(object.tags);
			}

			this._states.tags[object.name] = $.grep(this._states.tags[object.name], $.proxy(function(tag, i) {
				return $.inArray(tag, this._states.tags[object.name]) === i;
			}, this));
		}
	};

	/**
	 * Suppresses events.
	 * @protected
	 * @param {Array.<String>} events - The events to suppress.
	 */
	Owl.prototype.suppress = function(events) {
		$.each(events, $.proxy(function(index, event) {
			this._supress[event] = true;
		}, this));
	};

	/**
	 * Releases suppressed events.
	 * @protected
	 * @param {Array.<String>} events - The events to release.
	 */
	Owl.prototype.release = function(events) {
		$.each(events, $.proxy(function(index, event) {
			delete this._supress[event];
		}, this));
	};

	/**
	 * Gets unified pointer coordinates from event.
	 * @todo #261
	 * @protected
	 * @param {Event} - The `mousedown` or `touchstart` event.
	 * @returns {Object} - Contains `x` and `y` coordinates of current pointer position.
	 */
	Owl.prototype.pointer = function(event) {
		var result = { x: null, y: null };

		event = event.originalEvent || event || window.event;

		event = event.touches && event.touches.length ?
			event.touches[0] : event.changedTouches && event.changedTouches.length ?
				event.changedTouches[0] : event;

		if (event.pageX) {
			result.x = event.pageX;
			result.y = event.pageY;
		} else {
			result.x = event.clientX;
			result.y = event.clientY;
		}

		return result;
	};

	/**
	 * Determines if the input is a Number or something that can be coerced to a Number
	 * @protected
	 * @param {Number|String|Object|Array|Boolean|RegExp|Function|Symbol} - The input to be tested
	 * @returns {Boolean} - An indication if the input is a Number or can be coerced to a Number
	 */
	Owl.prototype.isNumeric = function(number) {
		return !isNaN(parseFloat(number));
	};

	/**
	 * Gets the difference of two vectors.
	 * @todo #261
	 * @protected
	 * @param {Object} - The first vector.
	 * @param {Object} - The second vector.
	 * @returns {Object} - The difference.
	 */
	Owl.prototype.difference = function(first, second) {
		return {
			x: first.x - second.x,
			y: first.y - second.y
		};
	};

	/**
	 * The jQuery Plugin for the Owl Carousel
	 * @todo Navigation plugin `next` and `prev`
	 * @public
	 */
	$.fn.owlCarousel = function(option) {
		var args = Array.prototype.slice.call(arguments, 1);

		return this.each(function() {
			var $this = $(this),
				data = $this.data('owl.carousel');

			if (!data) {
				data = new Owl(this, typeof option == 'object' && option);
				$this.data('owl.carousel', data);

				$.each([
					'next', 'prev', 'to', 'destroy', 'refresh', 'replace', 'add', 'remove'
				], function(i, event) {
					data.register({ type: Owl.Type.Event, name: event });
					data.$element.on(event + '.owl.carousel.core', $.proxy(function(e) {
						if (e.namespace && e.relatedTarget !== this) {
							this.suppress([ event ]);
							data[event].apply(this, [].slice.call(arguments, 1));
							this.release([ event ]);
						}
					}, data));
				});
			}

			if (typeof option == 'string' && option.charAt(0) !== '_') {
				data[option].apply(data, args);
			}
		});
	};

	/**
	 * The constructor for the jQuery Plugin
	 * @public
	 */
	$.fn.owlCarousel.Constructor = Owl;

})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);

/**
 * AutoRefresh Plugin
 * @version 2.3.4
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function($, window, document, undefined) {

	/**
	 * Creates the auto refresh plugin.
	 * @class The Auto Refresh Plugin
	 * @param {Owl} carousel - The Owl Carousel
	 */
	var AutoRefresh = function(carousel) {
		/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */
		this._core = carousel;

		/**
		 * Refresh interval.
		 * @protected
		 * @type {number}
		 */
		this._interval = null;

		/**
		 * Whether the element is currently visible or not.
		 * @protected
		 * @type {Boolean}
		 */
		this._visible = null;

		/**
		 * All event handlers.
		 * @protected
		 * @type {Object}
		 */
		this._handlers = {
			'initialized.owl.carousel': $.proxy(function(e) {
				if (e.namespace && this._core.settings.autoRefresh) {
					this.watch();
				}
			}, this)
		};

		// set default options
		this._core.options = $.extend({}, AutoRefresh.Defaults, this._core.options);

		// register event handlers
		this._core.$element.on(this._handlers);
	};

	/**
	 * Default options.
	 * @public
	 */
	AutoRefresh.Defaults = {
		autoRefresh: true,
		autoRefreshInterval: 500
	};

	/**
	 * Watches the element.
	 */
	AutoRefresh.prototype.watch = function() {
		if (this._interval) {
			return;
		}

		this._visible = this._core.isVisible();
		this._interval = window.setInterval($.proxy(this.refresh, this), this._core.settings.autoRefreshInterval);
	};

	/**
	 * Refreshes the element.
	 */
	AutoRefresh.prototype.refresh = function() {
		if (this._core.isVisible() === this._visible) {
			return;
		}

		this._visible = !this._visible;

		this._core.$element.toggleClass('owl-hidden', !this._visible);

		this._visible && (this._core.invalidate('width') && this._core.refresh());
	};

	/**
	 * Destroys the plugin.
	 */
	AutoRefresh.prototype.destroy = function() {
		var handler, property;

		window.clearInterval(this._interval);

		for (handler in this._handlers) {
			this._core.$element.off(handler, this._handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;

})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);

/**
 * Lazy Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function($, window, document, undefined) {

	/**
	 * Creates the lazy plugin.
	 * @class The Lazy Plugin
	 * @param {Owl} carousel - The Owl Carousel
	 */
	var Lazy = function(carousel) {

		/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */
		this._core = carousel;

		/**
		 * Already loaded items.
		 * @protected
		 * @type {Array.<jQuery>}
		 */
		this._loaded = [];

		/**
		 * Event handlers.
		 * @protected
		 * @type {Object}
		 */
		this._handlers = {
			'initialized.owl.carousel change.owl.carousel resized.owl.carousel': $.proxy(function(e) {
				if (!e.namespace) {
					return;
				}

				if (!this._core.settings || !this._core.settings.lazyLoad) {
					return;
				}

				if ((e.property && e.property.name == 'position') || e.type == 'initialized') {
					var settings = this._core.settings,
						n = (settings.center && Math.ceil(settings.items / 2) || settings.items),
						i = ((settings.center && n * -1) || 0),
						position = (e.property && e.property.value !== undefined ? e.property.value : this._core.current()) + i,
						clones = this._core.clones().length,
						load = $.proxy(function(i, v) { this.load(v) }, this);
					//TODO: Need documentation for this new option
					if (settings.lazyLoadEager > 0) {
						n += settings.lazyLoadEager;
						// If the carousel is looping also preload images that are to the "left"
						if (settings.loop) {
              position -= settings.lazyLoadEager;
              n++;
            }
					}

					while (i++ < n) {
						this.load(clones / 2 + this._core.relative(position));
						clones && $.each(this._core.clones(this._core.relative(position)), load);
						position++;
					}
				}
			}, this)
		};

		// set the default options
		this._core.options = $.extend({}, Lazy.Defaults, this._core.options);

		// register event handler
		this._core.$element.on(this._handlers);
	};

	/**
	 * Default options.
	 * @public
	 */
	Lazy.Defaults = {
		lazyLoad: false,
		lazyLoadEager: 0
	};

	/**
	 * Loads all resources of an item at the specified position.
	 * @param {Number} position - The absolute position of the item.
	 * @protected
	 */
	Lazy.prototype.load = function(position) {
		var $item = this._core.$stage.children().eq(position),
			$elements = $item && $item.find('.owl-lazy');

		if (!$elements || $.inArray($item.get(0), this._loaded) > -1) {
			return;
		}

		$elements.each($.proxy(function(index, element) {
			var $element = $(element), image,
                url = (window.devicePixelRatio > 1 && $element.attr('data-src-retina')) || $element.attr('data-src') || $element.attr('data-srcset');

			this._core.trigger('load', { element: $element, url: url }, 'lazy');

			if ($element.is('img')) {
				$element.one('load.owl.lazy', $.proxy(function() {
					$element.css('opacity', 1);
					this._core.trigger('loaded', { element: $element, url: url }, 'lazy');
				}, this)).attr('src', url);
            } else if ($element.is('source')) {
                $element.one('load.owl.lazy', $.proxy(function() {
                    this._core.trigger('loaded', { element: $element, url: url }, 'lazy');
                }, this)).attr('srcset', url);
			} else {
				image = new Image();
				image.onload = $.proxy(function() {
					$element.css({
						'background-image': 'url("' + url + '")',
						'opacity': '1'
					});
					this._core.trigger('loaded', { element: $element, url: url }, 'lazy');
				}, this);
				image.src = url;
			}
		}, this));

		this._loaded.push($item.get(0));
	};

	/**
	 * Destroys the plugin.
	 * @public
	 */
	Lazy.prototype.destroy = function() {
		var handler, property;

		for (handler in this.handlers) {
			this._core.$element.off(handler, this.handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;

})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);

/**
 * AutoHeight Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function($, window, document, undefined) {

	/**
	 * Creates the auto height plugin.
	 * @class The Auto Height Plugin
	 * @param {Owl} carousel - The Owl Carousel
	 */
	var AutoHeight = function(carousel) {
		/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */
		this._core = carousel;

		this._previousHeight = null;

		/**
		 * All event handlers.
		 * @protected
		 * @type {Object}
		 */
		this._handlers = {
			'initialized.owl.carousel refreshed.owl.carousel': $.proxy(function(e) {
				if (e.namespace && this._core.settings.autoHeight) {
					this.update();
				}
			}, this),
			'changed.owl.carousel': $.proxy(function(e) {
				if (e.namespace && this._core.settings.autoHeight && e.property.name === 'position'){
					this.update();
				}
			}, this),
			'loaded.owl.lazy': $.proxy(function(e) {
				if (e.namespace && this._core.settings.autoHeight
					&& e.element.closest('.' + this._core.settings.itemClass).index() === this._core.current()) {
					this.update();
				}
			}, this)
		};

		// set default options
		this._core.options = $.extend({}, AutoHeight.Defaults, this._core.options);

		// register event handlers
		this._core.$element.on(this._handlers);
		this._intervalId = null;
		var refThis = this;

		// These changes have been taken from a PR by gavrochelegnou proposed in #1575
		// and have been made compatible with the latest jQuery version
		$(window).on('load', function() {
			if (refThis._core.settings.autoHeight) {
				refThis.update();
			}
		});

		// Autoresize the height of the carousel when window is resized
		// When carousel has images, the height is dependent on the width
		// and should also change on resize
		$(window).resize(function() {
			if (refThis._core.settings.autoHeight) {
				if (refThis._intervalId != null) {
					clearTimeout(refThis._intervalId);
				}

				refThis._intervalId = setTimeout(function() {
					refThis.update();
				}, 250);
			}
		});

	};

	/**
	 * Default options.
	 * @public
	 */
	AutoHeight.Defaults = {
		autoHeight: false,
		autoHeightClass: 'owl-height'
	};

	/**
	 * Updates the view.
	 */
	AutoHeight.prototype.update = function() {
		var start = this._core._current,
			end = start + this._core.settings.items,
			lazyLoadEnabled = this._core.settings.lazyLoad,
			visible = this._core.$stage.children().toArray().slice(start, end),
			heights = [],
			maxheight = 0;

		$.each(visible, function(index, item) {
			heights.push($(item).height());
		});

		maxheight = Math.max.apply(null, heights);

		if (maxheight <= 1 && lazyLoadEnabled && this._previousHeight) {
			maxheight = this._previousHeight;
		}

		this._previousHeight = maxheight;

		this._core.$stage.parent()
			.height(maxheight)
			.addClass(this._core.settings.autoHeightClass);
	};

	AutoHeight.prototype.destroy = function() {
		var handler, property;

		for (handler in this._handlers) {
			this._core.$element.off(handler, this._handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] !== 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;

})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);

/**
 * Video Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function($, window, document, undefined) {

	/**
	 * Creates the video plugin.
	 * @class The Video Plugin
	 * @param {Owl} carousel - The Owl Carousel
	 */
	var Video = function(carousel) {
		/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */
		this._core = carousel;

		/**
		 * Cache all video URLs.
		 * @protected
		 * @type {Object}
		 */
		this._videos = {};

		/**
		 * Current playing item.
		 * @protected
		 * @type {jQuery}
		 */
		this._playing = null;

		/**
		 * All event handlers.
		 * @todo The cloned content removale is too late
		 * @protected
		 * @type {Object}
		 */
		this._handlers = {
			'initialized.owl.carousel': $.proxy(function(e) {
				if (e.namespace) {
					this._core.register({ type: 'state', name: 'playing', tags: [ 'interacting' ] });
				}
			}, this),
			'resize.owl.carousel': $.proxy(function(e) {
				if (e.namespace && this._core.settings.video && this.isInFullScreen()) {
					e.preventDefault();
				}
			}, this),
			'refreshed.owl.carousel': $.proxy(function(e) {
				if (e.namespace && this._core.is('resizing')) {
					this._core.$stage.find('.cloned .owl-video-frame').remove();
				}
			}, this),
			'changed.owl.carousel': $.proxy(function(e) {
				if (e.namespace && e.property.name === 'position' && this._playing) {
					this.stop();
				}
			}, this),
			'prepared.owl.carousel': $.proxy(function(e) {
				if (!e.namespace) {
					return;
				}

				var $element = $(e.content).find('.owl-video');

				if ($element.length) {
					$element.css('display', 'none');
					this.fetch($element, $(e.content));
				}
			}, this)
		};

		// set default options
		this._core.options = $.extend({}, Video.Defaults, this._core.options);

		// register event handlers
		this._core.$element.on(this._handlers);

		this._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function(e) {
			this.play(e);
		}, this));
	};

	/**
	 * Default options.
	 * @public
	 */
	Video.Defaults = {
		video: false,
		videoHeight: false,
		videoWidth: false
	};

	/**
	 * Gets the video ID and the type (YouTube/Vimeo/vzaar only).
	 * @protected
	 * @param {jQuery} target - The target containing the video data.
	 * @param {jQuery} item - The item containing the video.
	 */
	Video.prototype.fetch = function(target, item) {
			var type = (function() {
					if (target.attr('data-vimeo-id')) {
						return 'vimeo';
					} else if (target.attr('data-vzaar-id')) {
						return 'vzaar'
					} else {
						return 'youtube';
					}
				})(),
				id = target.attr('data-vimeo-id') || target.attr('data-youtube-id') || target.attr('data-vzaar-id'),
				width = target.attr('data-width') || this._core.settings.videoWidth,
				height = target.attr('data-height') || this._core.settings.videoHeight,
				url = target.attr('href');

		if (url) {

			/*
					Parses the id's out of the following urls (and probably more):
					https://www.youtube.com/watch?v=:id
					https://youtu.be/:id
					https://vimeo.com/:id
					https://vimeo.com/channels/:channel/:id
					https://vimeo.com/groups/:group/videos/:id
					https://app.vzaar.com/videos/:id

					Visual example: https://regexper.com/#(http%3A%7Chttps%3A%7C)%5C%2F%5C%2F(player.%7Cwww.%7Capp.)%3F(vimeo%5C.com%7Cyoutu(be%5C.com%7C%5C.be%7Cbe%5C.googleapis%5C.com)%7Cvzaar%5C.com)%5C%2F(video%5C%2F%7Cvideos%5C%2F%7Cembed%5C%2F%7Cchannels%5C%2F.%2B%5C%2F%7Cgroups%5C%2F.%2B%5C%2F%7Cwatch%5C%3Fv%3D%7Cv%5C%2F)%3F(%5BA-Za-z0-9._%25-%5D*)(%5C%26%5CS%2B)%3F
			*/

			id = url.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/);

			if (id[3].indexOf('youtu') > -1) {
				type = 'youtube';
			} else if (id[3].indexOf('vimeo') > -1) {
				type = 'vimeo';
			} else if (id[3].indexOf('vzaar') > -1) {
				type = 'vzaar';
			} else {
				throw new Error('Video URL not supported.');
			}
			id = id[6];
		} else {
			throw new Error('Missing video URL.');
		}

		this._videos[url] = {
			type: type,
			id: id,
			width: width,
			height: height
		};

		item.attr('data-video', url);

		this.thumbnail(target, this._videos[url]);
	};

	/**
	 * Creates video thumbnail.
	 * @protected
	 * @param {jQuery} target - The target containing the video data.
	 * @param {Object} info - The video info object.
	 * @see `fetch`
	 */
	Video.prototype.thumbnail = function(target, video) {
		var tnLink,
			icon,
			path,
			dimensions = video.width && video.height ? 'width:' + video.width + 'px;height:' + video.height + 'px;' : '',
			customTn = target.find('img'),
			srcType = 'src',
			lazyClass = '',
			settings = this._core.settings,
			create = function(path) {
				icon = '<div class="owl-video-play-icon"></div>';

				if (settings.lazyLoad) {
					tnLink = $('<div/>',{
						"class": 'owl-video-tn ' + lazyClass,
						"srcType": path
					});
				} else {
					tnLink = $( '<div/>', {
						"class": "owl-video-tn",
						"style": 'opacity:1;background-image:url(' + path + ')'
					});
				}
				target.after(tnLink);
				target.after(icon);
			};

		// wrap video content into owl-video-wrapper div
		target.wrap( $( '<div/>', {
			"class": "owl-video-wrapper",
			"style": dimensions
		}));

		if (this._core.settings.lazyLoad) {
			srcType = 'data-src';
			lazyClass = 'owl-lazy';
		}

		// custom thumbnail
		if (customTn.length) {
			create(customTn.attr(srcType));
			customTn.remove();
			return false;
		}

		if (video.type === 'youtube') {
			path = "//img.youtube.com/vi/" + video.id + "/hqdefault.jpg";
			create(path);
		} else if (video.type === 'vimeo') {
			$.ajax({
				type: 'GET',
				url: '//vimeo.com/api/v2/video/' + video.id + '.json',
				jsonp: 'callback',
				dataType: 'jsonp',
				success: function(data) {
					path = data[0].thumbnail_large;
					create(path);
				}
			});
		} else if (video.type === 'vzaar') {
			$.ajax({
				type: 'GET',
				url: '//vzaar.com/api/videos/' + video.id + '.json',
				jsonp: 'callback',
				dataType: 'jsonp',
				success: function(data) {
					path = data.framegrab_url;
					create(path);
				}
			});
		}
	};

	/**
	 * Stops the current video.
	 * @public
	 */
	Video.prototype.stop = function() {
		this._core.trigger('stop', null, 'video');
		this._playing.find('.owl-video-frame').remove();
		this._playing.removeClass('owl-video-playing');
		this._playing = null;
		this._core.leave('playing');
		this._core.trigger('stopped', null, 'video');
	};

	/**
	 * Starts the current video.
	 * @public
	 * @param {Event} event - The event arguments.
	 */
	Video.prototype.play = function(event) {
		var target = $(event.target),
			item = target.closest('.' + this._core.settings.itemClass),
			video = this._videos[item.attr('data-video')],
			width = video.width || '100%',
			height = video.height || this._core.$stage.height(),
			html,
			iframe;

		if (this._playing) {
			return;
		}

		this._core.enter('playing');
		this._core.trigger('play', null, 'video');

		item = this._core.items(this._core.relative(item.index()));

		this._core.reset(item.index());

		html = $( '<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>' );
		html.attr( 'height', height );
		html.attr( 'width', width );
		if (video.type === 'youtube') {
			html.attr( 'src', '//www.youtube.com/embed/' + video.id + '?autoplay=1&rel=0&v=' + video.id );
		} else if (video.type === 'vimeo') {
			html.attr( 'src', '//player.vimeo.com/video/' + video.id + '?autoplay=1' );
		} else if (video.type === 'vzaar') {
			html.attr( 'src', '//view.vzaar.com/' + video.id + '/player?autoplay=true' );
		}

		iframe = $(html).wrap( '<div class="owl-video-frame" />' ).insertAfter(item.find('.owl-video'));

		this._playing = item.addClass('owl-video-playing');
	};

	/**
	 * Checks whether an video is currently in full screen mode or not.
	 * @todo Bad style because looks like a readonly method but changes members.
	 * @protected
	 * @returns {Boolean}
	 */
	Video.prototype.isInFullScreen = function() {
		var element = document.fullscreenElement || document.mozFullScreenElement ||
				document.webkitFullscreenElement;

		return element && $(element).parent().hasClass('owl-video-frame');
	};

	/**
	 * Destroys the plugin.
	 */
	Video.prototype.destroy = function() {
		var handler, property;

		this._core.$element.off('click.owl.video');

		for (handler in this._handlers) {
			this._core.$element.off(handler, this._handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.Video = Video;

})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);

/**
 * Animate Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function($, window, document, undefined) {

	/**
	 * Creates the animate plugin.
	 * @class The Navigation Plugin
	 * @param {Owl} scope - The Owl Carousel
	 */
	var Animate = function(scope) {
		this.core = scope;
		this.core.options = $.extend({}, Animate.Defaults, this.core.options);
		this.swapping = true;
		this.previous = undefined;
		this.next = undefined;

		this.handlers = {
			'change.owl.carousel': $.proxy(function(e) {
				if (e.namespace && e.property.name == 'position') {
					this.previous = this.core.current();
					this.next = e.property.value;
				}
			}, this),
			'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function(e) {
				if (e.namespace) {
					this.swapping = e.type == 'translated';
				}
			}, this),
			'translate.owl.carousel': $.proxy(function(e) {
				if (e.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {
					this.swap();
				}
			}, this)
		};

		this.core.$element.on(this.handlers);
	};

	/**
	 * Default options.
	 * @public
	 */
	Animate.Defaults = {
		animateOut: false,
		animateIn: false
	};

	/**
	 * Toggles the animation classes whenever an translations starts.
	 * @protected
	 * @returns {Boolean|undefined}
	 */
	Animate.prototype.swap = function() {

		if (this.core.settings.items !== 1) {
			return;
		}

		if (!$.support.animation || !$.support.transition) {
			return;
		}

		this.core.speed(0);

		var left,
			clear = $.proxy(this.clear, this),
			previous = this.core.$stage.children().eq(this.previous),
			next = this.core.$stage.children().eq(this.next),
			incoming = this.core.settings.animateIn,
			outgoing = this.core.settings.animateOut;

		if (this.core.current() === this.previous) {
			return;
		}

		if (outgoing) {
			left = this.core.coordinates(this.previous) - this.core.coordinates(this.next);
			previous.one($.support.animation.end, clear)
				.css( { 'left': left + 'px' } )
				.addClass('animated owl-animated-out')
				.addClass(outgoing);
		}

		if (incoming) {
			next.one($.support.animation.end, clear)
				.addClass('animated owl-animated-in')
				.addClass(incoming);
		}
	};

	Animate.prototype.clear = function(e) {
		$(e.target).css( { 'left': '' } )
			.removeClass('animated owl-animated-out owl-animated-in')
			.removeClass(this.core.settings.animateIn)
			.removeClass(this.core.settings.animateOut);
		this.core.onTransitionEnd();
	};

	/**
	 * Destroys the plugin.
	 * @public
	 */
	Animate.prototype.destroy = function() {
		var handler, property;

		for (handler in this.handlers) {
			this.core.$element.off(handler, this.handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.Animate = Animate;

})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);

/**
 * Autoplay Plugin
 * @version 2.3.4
 * @author Bartosz Wojciechowski
 * @author Artus Kolanowski
 * @author David Deutsch
 * @author Tom De Caluwé
 * @license The MIT License (MIT)
 */
;(function($, window, document, undefined) {

	/**
	 * Creates the autoplay plugin.
	 * @class The Autoplay Plugin
	 * @param {Owl} scope - The Owl Carousel
	 */
	var Autoplay = function(carousel) {
		/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */
		this._core = carousel;

		/**
		 * The autoplay timeout id.
		 * @type {Number}
		 */
		this._call = null;

		/**
		 * Depending on the state of the plugin, this variable contains either
		 * the start time of the timer or the current timer value if it's
		 * paused. Since we start in a paused state we initialize the timer
		 * value.
		 * @type {Number}
		 */
		this._time = 0;

		/**
		 * Stores the timeout currently used.
		 * @type {Number}
		 */
		this._timeout = 0;

		/**
		 * Indicates whenever the autoplay is paused.
		 * @type {Boolean}
		 */
		this._paused = true;

		/**
		 * All event handlers.
		 * @protected
		 * @type {Object}
		 */
		this._handlers = {
			'changed.owl.carousel': $.proxy(function(e) {
				if (e.namespace && e.property.name === 'settings') {
					if (this._core.settings.autoplay) {
						this.play();
					} else {
						this.stop();
					}
				} else if (e.namespace && e.property.name === 'position' && this._paused) {
					// Reset the timer. This code is triggered when the position
					// of the carousel was changed through user interaction.
					this._time = 0;
				}
			}, this),
			'initialized.owl.carousel': $.proxy(function(e) {
				if (e.namespace && this._core.settings.autoplay) {
					this.play();
				}
			}, this),
			'play.owl.autoplay': $.proxy(function(e, t, s) {
				if (e.namespace) {
					this.play(t, s);
				}
			}, this),
			'stop.owl.autoplay': $.proxy(function(e) {
				if (e.namespace) {
					this.stop();
				}
			}, this),
			'mouseover.owl.autoplay': $.proxy(function() {
				if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
					this.pause();
				}
			}, this),
			'mouseleave.owl.autoplay': $.proxy(function() {
				if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
					this.play();
				}
			}, this),
			'touchstart.owl.core': $.proxy(function() {
				if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
					this.pause();
				}
			}, this),
			'touchend.owl.core': $.proxy(function() {
				if (this._core.settings.autoplayHoverPause) {
					this.play();
				}
			}, this)
		};

		// register event handlers
		this._core.$element.on(this._handlers);

		// set default options
		this._core.options = $.extend({}, Autoplay.Defaults, this._core.options);
	};

	/**
	 * Default options.
	 * @public
	 */
	Autoplay.Defaults = {
		autoplay: false,
		autoplayTimeout: 5000,
		autoplayHoverPause: false,
		autoplaySpeed: false
	};

	/**
	 * Transition to the next slide and set a timeout for the next transition.
	 * @private
	 * @param {Number} [speed] - The animation speed for the animations.
	 */
	Autoplay.prototype._next = function(speed) {
		this._call = window.setTimeout(
			$.proxy(this._next, this, speed),
			this._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read()
		);

		if (this._core.is('interacting') || document.hidden) {
			return;
		}
		this._core.next(speed || this._core.settings.autoplaySpeed);
	}

	/**
	 * Reads the current timer value when the timer is playing.
	 * @public
	 */
	Autoplay.prototype.read = function() {
		return new Date().getTime() - this._time;
	};

	/**
	 * Starts the autoplay.
	 * @public
	 * @param {Number} [timeout] - The interval before the next animation starts.
	 * @param {Number} [speed] - The animation speed for the animations.
	 */
	Autoplay.prototype.play = function(timeout, speed) {
		var elapsed;

		if (!this._core.is('rotating')) {
			this._core.enter('rotating');
		}

		timeout = timeout || this._core.settings.autoplayTimeout;

		// Calculate the elapsed time since the last transition. If the carousel
		// wasn't playing this calculation will yield zero.
		elapsed = Math.min(this._time % (this._timeout || timeout), timeout);

		if (this._paused) {
			// Start the clock.
			this._time = this.read();
			this._paused = false;
		} else {
			// Clear the active timeout to allow replacement.
			window.clearTimeout(this._call);
		}

		// Adjust the origin of the timer to match the new timeout value.
		this._time += this.read() % timeout - elapsed;

		this._timeout = timeout;
		this._call = window.setTimeout($.proxy(this._next, this, speed), timeout - elapsed);
	};

	/**
	 * Stops the autoplay.
	 * @public
	 */
	Autoplay.prototype.stop = function() {
		if (this._core.is('rotating')) {
			// Reset the clock.
			this._time = 0;
			this._paused = true;

			window.clearTimeout(this._call);
			this._core.leave('rotating');
		}
	};

	/**
	 * Pauses the autoplay.
	 * @public
	 */
	Autoplay.prototype.pause = function() {
		if (this._core.is('rotating') && !this._paused) {
			// Pause the clock.
			this._time = this.read();
			this._paused = true;

			window.clearTimeout(this._call);
		}
	};

	/**
	 * Destroys the plugin.
	 */
	Autoplay.prototype.destroy = function() {
		var handler, property;

		this.stop();

		for (handler in this._handlers) {
			this._core.$element.off(handler, this._handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;

})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);

/**
 * Navigation Plugin
 * @version 2.3.4
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function($, window, document, undefined) {
	'use strict';

	/**
	 * Creates the navigation plugin.
	 * @class The Navigation Plugin
	 * @param {Owl} carousel - The Owl Carousel.
	 */
	var Navigation = function(carousel) {
		/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */
		this._core = carousel;

		/**
		 * Indicates whether the plugin is initialized or not.
		 * @protected
		 * @type {Boolean}
		 */
		this._initialized = false;

		/**
		 * The current paging indexes.
		 * @protected
		 * @type {Array}
		 */
		this._pages = [];

		/**
		 * All DOM elements of the user interface.
		 * @protected
		 * @type {Object}
		 */
		this._controls = {};

		/**
		 * Markup for an indicator.
		 * @protected
		 * @type {Array.<String>}
		 */
		this._templates = [];

		/**
		 * The carousel element.
		 * @type {jQuery}
		 */
		this.$element = this._core.$element;

		/**
		 * Overridden methods of the carousel.
		 * @protected
		 * @type {Object}
		 */
		this._overrides = {
			next: this._core.next,
			prev: this._core.prev,
			to: this._core.to
		};

		/**
		 * All event handlers.
		 * @protected
		 * @type {Object}
		 */
		this._handlers = {
			'prepared.owl.carousel': $.proxy(function(e) {
				if (e.namespace && this._core.settings.dotsData) {
					this._templates.push('<div class="' + this._core.settings.dotClass + '">' +
						$(e.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot') + '</div>');
				}
			}, this),
			'added.owl.carousel': $.proxy(function(e) {
				if (e.namespace && this._core.settings.dotsData) {
					this._templates.splice(e.position, 0, this._templates.pop());
				}
			}, this),
			'remove.owl.carousel': $.proxy(function(e) {
				if (e.namespace && this._core.settings.dotsData) {
					this._templates.splice(e.position, 1);
				}
			}, this),
			'changed.owl.carousel': $.proxy(function(e) {
				if (e.namespace && e.property.name == 'position') {
					this.draw();
				}
			}, this),
			'initialized.owl.carousel': $.proxy(function(e) {
				if (e.namespace && !this._initialized) {
					this._core.trigger('initialize', null, 'navigation');
					this.initialize();
					this.update();
					this.draw();
					this._initialized = true;
					this._core.trigger('initialized', null, 'navigation');
				}
			}, this),
			'refreshed.owl.carousel': $.proxy(function(e) {
				if (e.namespace && this._initialized) {
					this._core.trigger('refresh', null, 'navigation');
					this.update();
					this.draw();
					this._core.trigger('refreshed', null, 'navigation');
				}
			}, this)
		};

		// set default options
		this._core.options = $.extend({}, Navigation.Defaults, this._core.options);

		// register event handlers
		this.$element.on(this._handlers);
	};

	/**
	 * Default options.
	 * @public
	 * @todo Rename `slideBy` to `navBy`
	 */
	Navigation.Defaults = {
		nav: false,
		navText: [
			'<span aria-label="' + 'Previous' + '">&#x2039;</span>',
			'<span aria-label="' + 'Next' + '">&#x203a;</span>'
		],
		navSpeed: false,
		navElement: 'button type="button" role="presentation"',
		navContainer: false,
		navContainerClass: 'owl-nav',
		navClass: [
			'owl-prev',
			'owl-next'
		],
		slideBy: 1,
		dotClass: 'owl-dot',
		dotsClass: 'owl-dots',
		dots: true,
		dotsEach: false,
		dotsData: false,
		dotsSpeed: false,
		dotsContainer: false
	};

	/**
	 * Initializes the layout of the plugin and extends the carousel.
	 * @protected
	 */
	Navigation.prototype.initialize = function() {
		var override,
			settings = this._core.settings;

		// create DOM structure for relative navigation
		this._controls.$relative = (settings.navContainer ? $(settings.navContainer)
			: $('<div>').addClass(settings.navContainerClass).appendTo(this.$element)).addClass('disabled');

		this._controls.$previous = $('<' + settings.navElement + '>')
			.addClass(settings.navClass[0])
			.html(settings.navText[0])
			.prependTo(this._controls.$relative)
			.on('click', $.proxy(function(e) {
				this.prev(settings.navSpeed);
			}, this));
		this._controls.$next = $('<' + settings.navElement + '>')
			.addClass(settings.navClass[1])
			.html(settings.navText[1])
			.appendTo(this._controls.$relative)
			.on('click', $.proxy(function(e) {
				this.next(settings.navSpeed);
			}, this));

		// create DOM structure for absolute navigation
		if (!settings.dotsData) {
			this._templates = [ $('<button role="button">')
				.addClass(settings.dotClass)
				.append($('<span>'))
				.prop('outerHTML') ];
		}

		this._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer)
			: $('<div>').addClass(settings.dotsClass).appendTo(this.$element)).addClass('disabled');

		this._controls.$absolute.on('click', 'button', $.proxy(function(e) {
			var index = $(e.target).parent().is(this._controls.$absolute)
				? $(e.target).index() : $(e.target).parent().index();

			e.preventDefault();

			this.to(index, settings.dotsSpeed);
		}, this));

		/*$el.on('focusin', function() {
			$(document).off(".carousel");

			$(document).on('keydown.carousel', function(e) {
				if(e.keyCode == 37) {
					$el.trigger('prev.owl')
				}
				if(e.keyCode == 39) {
					$el.trigger('next.owl')
				}
			});
		});*/

		// override public methods of the carousel
		for (override in this._overrides) {
			this._core[override] = $.proxy(this[override], this);
		}
	};

	/**
	 * Destroys the plugin.
	 * @protected
	 */
	Navigation.prototype.destroy = function() {
		var handler, control, property, override, settings;
		settings = this._core.settings;

		for (handler in this._handlers) {
			this.$element.off(handler, this._handlers[handler]);
		}
		for (control in this._controls) {
			if (control === '$relative' && settings.navContainer) {
				this._controls[control].html('');
			} else {
				this._controls[control].remove();
			}
		}
		for (override in this.overides) {
			this._core[override] = this._overrides[override];
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	/**
	 * Updates the internal state.
	 * @protected
	 */
	Navigation.prototype.update = function() {
		var i, j, k,
			lower = this._core.clones().length / 2,
			upper = lower + this._core.items().length,
			maximum = this._core.maximum(true),
			settings = this._core.settings,
			size = settings.center || settings.autoWidth || settings.dotsData
				? 1 : settings.dotsEach || settings.items;

		if (settings.slideBy !== 'page') {
			settings.slideBy = Math.min(settings.slideBy, settings.items);
		}

		if (settings.dots || settings.slideBy == 'page') {
			this._pages = [];

			for (i = lower, j = 0, k = 0; i < upper; i++) {
				if (j >= size || j === 0) {
					this._pages.push({
						start: Math.min(maximum, i - lower),
						end: i - lower + size - 1
					});
					if (Math.min(maximum, i - lower) === maximum) {
						break;
					}
					j = 0, ++k;
				}
				j += this._core.mergers(this._core.relative(i));
			}
		}
	};

	/**
	 * Draws the user interface.
	 * @todo The option `dotsData` wont work.
	 * @protected
	 */
	Navigation.prototype.draw = function() {
		var difference,
			settings = this._core.settings,
			disabled = this._core.items().length <= settings.items,
			index = this._core.relative(this._core.current()),
			loop = settings.loop || settings.rewind;

		this._controls.$relative.toggleClass('disabled', !settings.nav || disabled);

		if (settings.nav) {
			this._controls.$previous.toggleClass('disabled', !loop && index <= this._core.minimum(true));
			this._controls.$next.toggleClass('disabled', !loop && index >= this._core.maximum(true));
		}

		this._controls.$absolute.toggleClass('disabled', !settings.dots || disabled);

		if (settings.dots) {
			difference = this._pages.length - this._controls.$absolute.children().length;

			if (settings.dotsData && difference !== 0) {
				this._controls.$absolute.html(this._templates.join(''));
			} else if (difference > 0) {
				this._controls.$absolute.append(new Array(difference + 1).join(this._templates[0]));
			} else if (difference < 0) {
				this._controls.$absolute.children().slice(difference).remove();
			}

			this._controls.$absolute.find('.active').removeClass('active');
			this._controls.$absolute.children().eq($.inArray(this.current(), this._pages)).addClass('active');
		}
	};

	/**
	 * Extends event data.
	 * @protected
	 * @param {Event} event - The event object which gets thrown.
	 */
	Navigation.prototype.onTrigger = function(event) {
		var settings = this._core.settings;

		event.page = {
			index: $.inArray(this.current(), this._pages),
			count: this._pages.length,
			size: settings && (settings.center || settings.autoWidth || settings.dotsData
				? 1 : settings.dotsEach || settings.items)
		};
	};

	/**
	 * Gets the current page position of the carousel.
	 * @protected
	 * @returns {Number}
	 */
	Navigation.prototype.current = function() {
		var current = this._core.relative(this._core.current());
		return $.grep(this._pages, $.proxy(function(page, index) {
			return page.start <= current && page.end >= current;
		}, this)).pop();
	};

	/**
	 * Gets the current succesor/predecessor position.
	 * @protected
	 * @returns {Number}
	 */
	Navigation.prototype.getPosition = function(successor) {
		var position, length,
			settings = this._core.settings;

		if (settings.slideBy == 'page') {
			position = $.inArray(this.current(), this._pages);
			length = this._pages.length;
			successor ? ++position : --position;
			position = this._pages[((position % length) + length) % length].start;
		} else {
			position = this._core.relative(this._core.current());
			length = this._core.items().length;
			successor ? position += settings.slideBy : position -= settings.slideBy;
		}

		return position;
	};

	/**
	 * Slides to the next item or page.
	 * @public
	 * @param {Number} [speed=false] - The time in milliseconds for the transition.
	 */
	Navigation.prototype.next = function(speed) {
		$.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);
	};

	/**
	 * Slides to the previous item or page.
	 * @public
	 * @param {Number} [speed=false] - The time in milliseconds for the transition.
	 */
	Navigation.prototype.prev = function(speed) {
		$.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);
	};

	/**
	 * Slides to the specified item or page.
	 * @public
	 * @param {Number} position - The position of the item or page.
	 * @param {Number} [speed] - The time in milliseconds for the transition.
	 * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.
	 */
	Navigation.prototype.to = function(position, speed, standard) {
		var length;

		if (!standard && this._pages.length) {
			length = this._pages.length;
			$.proxy(this._overrides.to, this._core)(this._pages[((position % length) + length) % length].start, speed);
		} else {
			$.proxy(this._overrides.to, this._core)(position, speed);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;

})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);

/**
 * Hash Plugin
 * @version 2.3.4
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function($, window, document, undefined) {
	'use strict';

	/**
	 * Creates the hash plugin.
	 * @class The Hash Plugin
	 * @param {Owl} carousel - The Owl Carousel
	 */
	var Hash = function(carousel) {
		/**
		 * Reference to the core.
		 * @protected
		 * @type {Owl}
		 */
		this._core = carousel;

		/**
		 * Hash index for the items.
		 * @protected
		 * @type {Object}
		 */
		this._hashes = {};

		/**
		 * The carousel element.
		 * @type {jQuery}
		 */
		this.$element = this._core.$element;

		/**
		 * All event handlers.
		 * @protected
		 * @type {Object}
		 */
		this._handlers = {
			'initialized.owl.carousel': $.proxy(function(e) {
				if (e.namespace && this._core.settings.startPosition === 'URLHash') {
					$(window).trigger('hashchange.owl.navigation');
				}
			}, this),
			'prepared.owl.carousel': $.proxy(function(e) {
				if (e.namespace) {
					var hash = $(e.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash');

					if (!hash) {
						return;
					}

					this._hashes[hash] = e.content;
				}
			}, this),
			'changed.owl.carousel': $.proxy(function(e) {
				if (e.namespace && e.property.name === 'position') {
					var current = this._core.items(this._core.relative(this._core.current())),
						hash = $.map(this._hashes, function(item, hash) {
							return item === current ? hash : null;
						}).join();

					if (!hash || window.location.hash.slice(1) === hash) {
						return;
					}

					window.location.hash = hash;
				}
			}, this)
		};

		// set default options
		this._core.options = $.extend({}, Hash.Defaults, this._core.options);

		// register the event handlers
		this.$element.on(this._handlers);

		// register event listener for hash navigation
		$(window).on('hashchange.owl.navigation', $.proxy(function(e) {
			var hash = window.location.hash.substring(1),
				items = this._core.$stage.children(),
				position = this._hashes[hash] && items.index(this._hashes[hash]);

			if (position === undefined || position === this._core.current()) {
				return;
			}

			this._core.to(this._core.relative(position), false, true);
		}, this));
	};

	/**
	 * Default options.
	 * @public
	 */
	Hash.Defaults = {
		URLhashListener: false
	};

	/**
	 * Destroys the plugin.
	 * @public
	 */
	Hash.prototype.destroy = function() {
		var handler, property;

		$(window).off('hashchange.owl.navigation');

		for (handler in this._handlers) {
			this._core.$element.off(handler, this._handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.Hash = Hash;

})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);

/**
 * Support Plugin
 *
 * @version 2.3.4
 * @author Vivid Planet Software GmbH
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function($, window, document, undefined) {

	var style = $('<support>').get(0).style,
		prefixes = 'Webkit Moz O ms'.split(' '),
		events = {
			transition: {
				end: {
					WebkitTransition: 'webkitTransitionEnd',
					MozTransition: 'transitionend',
					OTransition: 'oTransitionEnd',
					transition: 'transitionend'
				}
			},
			animation: {
				end: {
					WebkitAnimation: 'webkitAnimationEnd',
					MozAnimation: 'animationend',
					OAnimation: 'oAnimationEnd',
					animation: 'animationend'
				}
			}
		},
		tests = {
			csstransforms: function() {
				return !!test('transform');
			},
			csstransforms3d: function() {
				return !!test('perspective');
			},
			csstransitions: function() {
				return !!test('transition');
			},
			cssanimations: function() {
				return !!test('animation');
			}
		};

	function test(property, prefixed) {
		var result = false,
			upper = property.charAt(0).toUpperCase() + property.slice(1);

		$.each((property + ' ' + prefixes.join(upper + ' ') + upper).split(' '), function(i, property) {
			if (style[property] !== undefined) {
				result = prefixed ? property : true;
				return false;
			}
		});

		return result;
	}

	function prefixed(property) {
		return test(property, true);
	}

	if (tests.csstransitions()) {
		/* jshint -W053 */
		$.support.transition = new String(prefixed('transition'))
		$.support.transition.end = events.transition.end[ $.support.transition ];
	}

	if (tests.cssanimations()) {
		/* jshint -W053 */
		$.support.animation = new String(prefixed('animation'))
		$.support.animation.end = events.animation.end[ $.support.animation ];
	}

	if (tests.csstransforms()) {
		/* jshint -W053 */
		$.support.transform = new String(prefixed('transform'));
		$.support.transform3d = tests.csstransforms3d();
	}

})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);


/***/ }),

/***/ "./Theme/ts/Action.ts":
/*!****************************!*\
  !*** ./Theme/ts/Action.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ActionControl = void 0;
var lodash_1 = __importDefault(__webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"));
var Control_1 = __webpack_require__(/*! ./Control */ "./Theme/ts/Control.ts");
var ActionControl = /** @class */ (function (_super) {
    __extends(ActionControl, _super);
    function ActionControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ActionControl.prototype.GetDefaultDefinition = function () {
        return lodash_1.default.extend({}, _super.prototype.GetDefaultDefinition.call(this), {});
    };
    ;
    return ActionControl;
}(Control_1.Control));
exports.ActionControl = ActionControl;
exports.default = ActionControl;


/***/ }),

/***/ "./Theme/ts/ActionContainer.ts":
/*!*************************************!*\
  !*** ./Theme/ts/ActionContainer.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ActionContainer = void 0;
var Container_1 = __webpack_require__(/*! ./Container */ "./Theme/ts/Container.ts");
var ActionContainer = /** @class */ (function (_super) {
    __extends(ActionContainer, _super);
    function ActionContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ActionContainer;
}(Container_1.Container));
exports.ActionContainer = ActionContainer;
exports.default = ActionContainer;


/***/ }),

/***/ "./Theme/ts/ButtonControl.ts":
/*!***********************************!*\
  !*** ./Theme/ts/ButtonControl.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ButtonControl = void 0;
var lodash_1 = __importDefault(__webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"));
var Control_1 = __webpack_require__(/*! ./Control */ "./Theme/ts/Control.ts");
var ButtonControl = /** @class */ (function (_super) {
    __extends(ButtonControl, _super);
    function ButtonControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ButtonControl.prototype, "_action", {
        get: function () {
            var _a;
            if (!!!((_a = this._options.ActionId) !== null && _a !== void 0 ? _a : '')) {
                return;
            }
            var action = document.querySelector("[data-id=\"" + this._options.ActionId + "\"]");
            if (!!!action) {
                return;
            }
            return action.Control;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ButtonControl.prototype, "Enabled", {
        get: function () {
            var action = this._action;
            if (!!!action) {
                return false;
            }
            return action.Enabled;
        },
        enumerable: false,
        configurable: true
    });
    ButtonControl.prototype.GetDefaultDefinition = function () {
        return lodash_1.default.extend({}, _super.prototype.GetDefaultDefinition.call(this), {
            Title: "text",
            PlaceHolder: "text",
            AriaLabel: "text",
            ReadOnly: false,
            Type: 'button'
        });
    };
    ;
    ButtonControl.prototype.Build = function () {
        var _a;
        this._template = "<button type=\"" + ((_a = this._options.Type) !== null && _a !== void 0 ? _a : 'button') + "\" class=\"btn btn-block btn-primary\">" + this._options.Title + "</button>";
    };
    ButtonControl.prototype.Render = function (wrapper) {
        _super.prototype.Render.call(this, wrapper);
        this._wrapper.innerHTML = this._template;
    };
    ButtonControl.prototype.Bind = function () {
        var _this = this;
        var buttonElement = this._wrapper.getElementsByClassName('btn')[0];
        buttonElement.addEventListener('click', function (x) {
            x.preventDefault();
            x.stopPropagation();
            if (!_this.Enabled) {
                return;
            }
            var action = _this._action;
            if (!action) {
                return;
            }
            action.Execute();
        });
    };
    return ButtonControl;
}(Control_1.Control));
exports.ButtonControl = ButtonControl;
exports.default = ButtonControl;


/***/ }),

/***/ "./Theme/ts/ColumnContainer.ts":
/*!*************************************!*\
  !*** ./Theme/ts/ColumnContainer.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColumnContainer = void 0;
var lodash_1 = __importDefault(__webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"));
var Container_1 = __webpack_require__(/*! ./Container */ "./Theme/ts/Container.ts");
var ColumnContainer = /** @class */ (function (_super) {
    __extends(ColumnContainer, _super);
    function ColumnContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnContainer.prototype.GetDefaultDefinition = function () {
        return lodash_1.default.extend({}, _super.prototype.GetDefaultDefinition.call(this), {
            Width: 12,
        });
    };
    ;
    ColumnContainer.prototype.Render = function (wrapper) {
        var _a;
        _super.prototype.Render.call(this, wrapper);
        this._wrapper.classList.add("col-" + this._options.Width);
        if (((_a = this._options.WidthDesktop) !== null && _a !== void 0 ? _a : -1) > 0) {
            this._wrapper.classList.add("col-lg-" + this._options.WidthDesktop);
        }
    };
    return ColumnContainer;
}(Container_1.Container));
exports.ColumnContainer = ColumnContainer;
exports.default = ColumnContainer;


/***/ }),

/***/ "./Theme/ts/Container.ts":
/*!*******************************!*\
  !*** ./Theme/ts/Container.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Container = void 0;
var Control_1 = __webpack_require__(/*! ./Control */ "./Theme/ts/Control.ts");
var lodash_1 = __importDefault(__webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"));
var Container = /** @class */ (function (_super) {
    __extends(Container, _super);
    function Container() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Container.prototype.Build = function () {
        this._options.Children.forEach(function (x) { return x.Build(); });
    };
    Container.prototype.Render = function (wrapper) {
        var _this = this;
        _super.prototype.Render.call(this, wrapper);
        this._options.Children.forEach(function (x) { return x.Render(_this._wrapper); });
    };
    Container.prototype.Bind = function () {
        this._options.Children.forEach(function (x) { return x.Bind(); });
    };
    Container.prototype.FindControl = function (predicate) {
        if (predicate(this)) {
            return this;
        }
        var result = lodash_1.default.find(this._options.Children, function (x) {
            if (predicate(x)) {
                return true;
            }
        });
        if (!!result) {
            return result;
        }
        for (var child in this._options.Children) {
            if (!(child.FindControl === 'function')) {
                continue;
            }
            result = child.FindControl(predicate);
            if (!!result) {
                return result;
            }
        }
        return undefined;
    };
    return Container;
}(Control_1.Control));
exports.Container = Container;
exports.default = Container;


/***/ }),

/***/ "./Theme/ts/Control.ts":
/*!*****************************!*\
  !*** ./Theme/ts/Control.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Control = void 0;
var lodash_1 = __importDefault(__webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"));
var Guid_1 = __importDefault(__webpack_require__(/*! ./Guid */ "./Theme/ts/Guid.ts"));
var Control = /** @class */ (function () {
    function Control(options, dataContext) {
        this._options = lodash_1.default.extend({}, this.GetDefaultDefinition(), options);
        this._dataContext = dataContext;
    }
    Control.prototype.GetDefaultDefinition = function () {
        return lodash_1.default.extend({}, {
            Id: Guid_1.default.NewGuid(),
            ElementType: 'div'
        });
    };
    ;
    Control.prototype.Build = function () {
    };
    Control.prototype.Render = function (wrapper) {
        var _this = this;
        var _a;
        this._wrapper = document.createElement(this._options.ElementType);
        this._wrapper.setAttribute('data-id', this._options.Id);
        this._wrapper.Control = this;
        ((_a = this._options.CssClasses) !== null && _a !== void 0 ? _a : []).forEach(function (x) { return _this._wrapper.classList.add(x); });
        wrapper.appendChild(this._wrapper);
    };
    Control.prototype.Bind = function () {
    };
    return Control;
}());
exports.Control = Control;


/***/ }),

/***/ "./Theme/ts/DataContext.ts":
/*!*********************************!*\
  !*** ./Theme/ts/DataContext.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DataContext = void 0;
var DataContext = /** @class */ (function () {
    function DataContext() {
        this._dataSources = new Map();
    }
    DataContext.prototype.AddDataSource = function (dataSource) {
        if (this._dataSources.has(dataSource.Name)) {
            throw new Error('An item has already be added to the collection');
        }
        this._dataSources.set(dataSource.Name, dataSource);
    };
    DataContext.prototype.Get = function (dataSourceName) {
        if (!this._dataSources.has(dataSourceName)) {
            throw new Error('DataSource not found in the backing store.');
        }
        return this._dataSources.get(dataSourceName);
    };
    return DataContext;
}());
exports.DataContext = DataContext;


/***/ }),

/***/ "./Theme/ts/DataSource.ts":
/*!********************************!*\
  !*** ./Theme/ts/DataSource.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Observable_1 = __importDefault(__webpack_require__(/*! ./Observable */ "./Theme/ts/Observable.ts"));
var DataSource = /** @class */ (function () {
    function DataSource(name, data) {
        this.__name = name;
        if (!(data instanceof Array)) {
            throw new Error('Invalid Operation');
        }
        this.__data = new Observable_1.default(data);
    }
    Object.defineProperty(DataSource.prototype, "Data", {
        get: function () {
            var _this = this;
            var result = [];
            Object.getOwnPropertyNames(this.__data).forEach(function (propertyName) {
                var value = _this.__data[propertyName];
                if (value instanceof Observable_1.default) {
                    result.push(value);
                }
            });
            return result;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "Name", {
        get: function () {
            return this.__name.slice();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "HasChanges", {
        get: function () {
            return this.__data.HasChanges;
        },
        enumerable: false,
        configurable: true
    });
    DataSource.prototype.DiscardChanges = function () {
        this.__data.DiscardChanges();
    };
    return DataSource;
}());
exports.default = DataSource;


/***/ }),

/***/ "./Theme/ts/FormContainer.ts":
/*!***********************************!*\
  !*** ./Theme/ts/FormContainer.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormContainer = void 0;
var lodash_1 = __importDefault(__webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"));
var Container_1 = __webpack_require__(/*! ./Container */ "./Theme/ts/Container.ts");
var FormContainer = /** @class */ (function (_super) {
    __extends(FormContainer, _super);
    function FormContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FormContainer.prototype, "_formWrapper", {
        get: function () {
            return this._wrapper;
        },
        enumerable: false,
        configurable: true
    });
    FormContainer.prototype.GetDefaultDefinition = function () {
        return lodash_1.default.extend({}, _super.prototype.GetDefaultDefinition.call(this), {
            ElementType: 'form',
        });
    };
    ;
    FormContainer.prototype.Render = function (wrapper) {
        _super.prototype.Render.call(this, wrapper);
        this._formWrapper.action = 'index-2.html';
    };
    return FormContainer;
}(Container_1.Container));
exports.FormContainer = FormContainer;
exports.default = FormContainer;


/***/ }),

/***/ "./Theme/ts/FormSubmitAction.ts":
/*!**************************************!*\
  !*** ./Theme/ts/FormSubmitAction.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FormSubmitActionControl = void 0;
var lodash_1 = __importDefault(__webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"));
var Action_1 = __webpack_require__(/*! ./Action */ "./Theme/ts/Action.ts");
var FormSubmitActionControl = /** @class */ (function (_super) {
    __extends(FormSubmitActionControl, _super);
    function FormSubmitActionControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FormSubmitActionControl.prototype, "Enabled", {
        get: function () {
            var _a;
            if (!!!((_a = this._options.FormId) !== null && _a !== void 0 ? _a : '')) {
                return false;
            }
            var form = document.querySelector("[data-id=\"" + this._options.FormId + "\"]");
            return !!form;
        },
        enumerable: false,
        configurable: true
    });
    FormSubmitActionControl.prototype.GetDefaultDefinition = function () {
        return lodash_1.default.extend({}, _super.prototype.GetDefaultDefinition.call(this), {});
    };
    ;
    FormSubmitActionControl.prototype.Execute = function () {
        var _a;
        if (!!!((_a = this._options.FormId) !== null && _a !== void 0 ? _a : '')) {
            return;
        }
        var form = document.querySelector("[data-id=\"" + this._options.FormId + "\"]");
        if (!!!form) {
            return;
        }
        form.submit();
    };
    return FormSubmitActionControl;
}(Action_1.ActionControl));
exports.FormSubmitActionControl = FormSubmitActionControl;
exports.default = FormSubmitActionControl;


/***/ }),

/***/ "./Theme/ts/Guid.ts":
/*!**************************!*\
  !*** ./Theme/ts/Guid.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Guid = /** @class */ (function () {
    function Guid() {
    }
    Guid.NewGuid = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (x) {
            var r = Math.random() * 16 | 0;
            var v = x == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
    return Guid;
}());
exports.default = Guid;


/***/ }),

/***/ "./Theme/ts/Observable.ts":
/*!********************************!*\
  !*** ./Theme/ts/Observable.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var lodash_1 = __importDefault(__webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"));
var Observable = /** @class */ (function () {
    function Observable(obj) {
        var _this = this;
        this.__internalObject = obj;
        if (obj instanceof Array) {
            this.__originalValues = lodash_1.default.extend([], JSON.parse(JSON.stringify(obj)));
            this.__currentValues = [];
        }
        else if (obj instanceof Object) {
            this.__originalValues = lodash_1.default.extend({}, JSON.parse(JSON.stringify(obj)));
            this.__currentValues = {};
        }
        else {
            throw new Error('Invalid Operation');
        }
        Object.keys(this.__internalObject).forEach(function (x) {
            Object.defineProperty(_this, x, {
                get: function () {
                    return this.GetProperty(x);
                },
                set: function (value) {
                    this.SetProperty(x, value);
                }
            });
            _this.SetProperty(x, _this.__internalObject[x]);
        });
    }
    Observable.prototype.GetProperty = function (propertyName) {
        if (!!!lodash_1.default.some(Object.keys(this.__internalObject), function (x) { return x === propertyName; })) {
            throw new Error("Invalid property name " + propertyName);
        }
        return this.__currentValues[propertyName];
    };
    Observable.prototype.SetProperty = function (propertyName, value) {
        if (!!!lodash_1.default.some(Object.keys(this.__internalObject), function (x) { return x === propertyName; })) {
            throw new Error("Invalid property name " + propertyName);
        }
        if (value instanceof Array) {
            this.__currentValues[propertyName] = new Observable(value);
            this.__internalObject[propertyName] = value;
            return;
        }
        if (value instanceof Object) {
            this.__currentValues[propertyName] = new Observable(value);
            this.__internalObject[propertyName] = value;
            return;
        }
        this.__internalObject[propertyName] = this.__currentValues[propertyName] = value;
    };
    Object.defineProperty(Observable.prototype, "HasChanges", {
        get: function () {
            var _this = this;
            return lodash_1.default.some(Object.keys(this.__internalObject), function (x) {
                var currentValue = _this.__currentValues[x];
                if (currentValue instanceof Observable) {
                    return currentValue.HasChanges;
                }
                return currentValue !== _this.__originalValues[x];
            });
        },
        enumerable: false,
        configurable: true
    });
    Observable.prototype.DiscardChanges = function () {
        var _this = this;
        if (!this.HasChanges) {
            return;
        }
        Object.keys(this.__internalObject).forEach(function (x) {
            var currentValue = _this.__currentValues[x];
            if (currentValue instanceof Observable) {
                if (currentValue.HasChanges) {
                    currentValue.DiscardChanges();
                }
                return;
            }
            if (_this.__currentValues[x] !== _this.__originalValues[x]) {
                _this.SetProperty(x, _this.__originalValues[x]);
            }
        });
    };
    return Observable;
}());
exports.default = Observable;


/***/ }),

/***/ "./Theme/ts/RowContainer.ts":
/*!**********************************!*\
  !*** ./Theme/ts/RowContainer.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RowContainer = void 0;
var Container_1 = __webpack_require__(/*! ./Container */ "./Theme/ts/Container.ts");
var RowContainer = /** @class */ (function (_super) {
    __extends(RowContainer, _super);
    function RowContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RowContainer.prototype.Render = function (wrapper) {
        _super.prototype.Render.call(this, wrapper);
        this._wrapper.classList.add('row');
    };
    return RowContainer;
}(Container_1.Container));
exports.RowContainer = RowContainer;
exports.default = RowContainer;


/***/ }),

/***/ "./Theme/ts/SelectControl.ts":
/*!***********************************!*\
  !*** ./Theme/ts/SelectControl.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectControl = void 0;
var lodash_1 = __importDefault(__webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"));
var Control_1 = __webpack_require__(/*! ./Control */ "./Theme/ts/Control.ts");
var SelectControl = /** @class */ (function (_super) {
    __extends(SelectControl, _super);
    function SelectControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectControl.prototype.GetDefaultDefinition = function () {
        return lodash_1.default.extend({}, _super.prototype.GetDefaultDefinition.call(this), {
            Title: "text",
            AriaLabel: "text",
            PleaseSelect: false,
            Required: false
        });
    };
    ;
    SelectControl.prototype.Build = function () {
        var _a;
        this._template = "\n<div class=\"input-group my-3\">\n    <span class=\"input-group-text\" id=\"" + this._options.Id + "-at\">" + this._options.Title + "</span>\n    <select class=\"form-select\" aria-label=\"" + this._options.AriaLabel + "\"\n        aria-describedby=\"" + this._options.Id + "-at\" " + (((_a = this._options.Required) !== null && _a !== void 0 ? _a : false) ? 'required' : '') + ">\n    </select>\n</div>";
    };
    SelectControl.prototype.Render = function (wrapper) {
        _super.prototype.Render.call(this, wrapper);
        this._wrapper.innerHTML = this._template;
    };
    SelectControl.prototype.Bind = function () {
        var _this = this;
        var _a;
        var selectElement = this._wrapper.getElementsByClassName('form-select')[0];
        var options = [];
        if ((_a = this._options.PleaseSelect) !== null && _a !== void 0 ? _a : false) {
            options.push({
                text: 'Παρακαλώ επίλεξε',
                value: '',
                disabled: true
            });
        }
        var dataSource = this._dataContext.Get(this._options.LookupDataSource.Name);
        options = lodash_1.default.concat([], options, lodash_1.default.map(dataSource.Data, function (x, i) {
            return {
                text: x.GetProperty(_this._options.LookupDataSource.TextField),
                value: x.GetProperty(_this._options.LookupDataSource.ValueField),
                disabled: false
            };
        }));
        options.map(function (x, i) {
            var option = document.createElement('option');
            option.text = x.text;
            option.value = x.value;
            option.disabled = x.disabled;
            option.selected = i == 0;
            return option;
        }).forEach(function (x) {
            selectElement.add(x);
        });
    };
    return SelectControl;
}(Control_1.Control));
exports.SelectControl = SelectControl;
exports.default = SelectControl;


/***/ }),

/***/ "./Theme/ts/TextAreaControl.ts":
/*!*************************************!*\
  !*** ./Theme/ts/TextAreaControl.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextArea = void 0;
var lodash_1 = __importDefault(__webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"));
var Control_1 = __webpack_require__(/*! ./Control */ "./Theme/ts/Control.ts");
var TextAreaControl = /** @class */ (function (_super) {
    __extends(TextAreaControl, _super);
    function TextAreaControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextAreaControl.prototype.GetDefaultDefinition = function () {
        return lodash_1.default.extend({}, _super.prototype.GetDefaultDefinition.call(this), {
            Title: "text area",
            PlaceHolder: "text area",
            AriaLabel: "text area"
        });
    };
    ;
    TextAreaControl.prototype.Build = function () {
        _super.prototype.Build.call(this);
        this._template = "                                        \n<div class=\"input-group my-3\">\n    <span class=\"input-group-text\" id=\"" + this._options.Id + "-at\">" + this._options.Title + "</span>\n    <textarea class=\"form-control\" rows=\"3\" placeholder=\"" + this._options.PlaceHolder + "\" aria-label=\"" + this._options.AriaLabel + "\"\n        aria-describedby=\"" + this._options.Id + "-at\" required></textarea>\n</div>";
    };
    TextAreaControl.prototype.Render = function (wrapper) {
        _super.prototype.Render.call(this, wrapper);
        this._wrapper.innerHTML = this._template;
    };
    TextAreaControl.prototype.Bind = function () {
        _super.prototype.Bind.call(this);
    };
    return TextAreaControl;
}(Control_1.Control));
exports.TextArea = TextAreaControl;
exports.default = TextAreaControl;


/***/ }),

/***/ "./Theme/ts/TextControl.ts":
/*!*********************************!*\
  !*** ./Theme/ts/TextControl.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextControl = void 0;
var lodash_1 = __importDefault(__webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"));
var Control_1 = __webpack_require__(/*! ./Control */ "./Theme/ts/Control.ts");
var TextControl = /** @class */ (function (_super) {
    __extends(TextControl, _super);
    function TextControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextControl.prototype.GetDefaultDefinition = function () {
        return lodash_1.default.extend({}, _super.prototype.GetDefaultDefinition.call(this), {
            Title: "text",
            PlaceHolder: "text",
            AriaLabel: "text",
            ReadOnly: false,
            Required: false
        });
    };
    ;
    TextControl.prototype.Build = function () {
        var _a, _b;
        this._template = "\n<span class=\"input-group-text\" id=\"" + this._options.Id + "-at\">" + this._options.Title + "</span>\n<input type=\"text\" class=\"form-control\" placeholder=\"" + this._options.PlaceHolder + "\" aria-label=\"" + this._options.AriaLabel + "\"\n    aria-describedby=\"" + this._options.Id + "-at\" " + (((_a = this._options.ReadOnly) !== null && _a !== void 0 ? _a : false) ? 'disabled' : '') + " " + (((_b = this._options.Required) !== null && _b !== void 0 ? _b : false) ? 'required' : '') + ">";
    };
    TextControl.prototype.Render = function (wrapper) {
        _super.prototype.Render.call(this, wrapper);
        this._wrapper.classList.add('input-group');
        this._wrapper.classList.add('my-3');
        this._wrapper.innerHTML = this._template;
    };
    TextControl.prototype.Bind = function () {
    };
    return TextControl;
}(Control_1.Control));
exports.TextControl = TextControl;
exports.default = TextControl;


/***/ }),

/***/ "./Theme/ts/custom.ts":
/*!****************************!*\
  !*** ./Theme/ts/custom.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));
var lodash_1 = __importDefault(__webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"));
__webpack_require__(/*! owl.carousel */ "./node_modules/owl.carousel/dist/owl.carousel.js");
var Gender;
(function (Gender) {
    Gender[Gender["Male"] = 0] = "Male";
    Gender[Gender["Female"] = 1] = "Female";
})(Gender || (Gender = {}));
var isCheckbox = function (element) {
    return element instanceof HTMLInputElement && element.type === 'checkbox';
};
var isRadio = function (element) {
    return element instanceof HTMLInputElement && element.type === 'radio';
};
var isNumber = function (element) {
    return element instanceof HTMLInputElement && element.type === 'number';
};
var isText = function (element) {
    return element instanceof HTMLInputElement && element.type === 'text';
};
var FormStore = /** @class */ (function () {
    function FormStore() {
    }
    FormStore.prototype.Get = function () {
        var _form = window.sessionStorage.getItem(FormStore.key);
        return JSON.parse(_form);
    };
    FormStore.prototype.Set = function (model) {
        var _form = JSON.stringify(model);
        window.sessionStorage.setItem(FormStore.key, _form);
    };
    FormStore.prototype.Reset = function () {
        window.sessionStorage.removeItem(FormStore.key);
    };
    FormStore.key = 'form';
    return FormStore;
}());
(function () {
    jquery_1.default('.form-select.postalcode').on('change', function () {
        var option = jquery_1.default(':selected', this);
        jquery_1.default('.form-select.area').val(option.data('area'));
        jquery_1.default('.form-select.prefecture').val(option.data('prefecture'));
    });
})();
(function () {
    'use strict';
    var forms = document.querySelectorAll('.needs-validation');
    lodash_1.default.each(forms, function (form) {
        form.addEventListener('submit', function (event) {
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
                jquery_1.default('form.needs-validation :invalid')[0].scrollIntoView();
            }
            form.classList.add('was-validated');
        }, false);
    });
})();
(function () {
    'use strict';
    var elements = document.querySelectorAll('.needs-validation input, .needs-validation textarea, .needs-validation select');
    var store = new FormStore();
    var form = store.Get();
    var defaultForm = {
        Name: '',
        Surname: '',
        FathersName: '',
        Gender: null,
        Department: '',
        StudentId: '',
        Disability: '',
        Phone: '',
        Mobile: '',
        Email: '',
        Address: '',
        PostalCode: '',
        QualificationType: '',
        QualificationTypeText: '',
        QualificationYear: 0,
        Vision: '',
        Hearing: '',
        Speech: '',
        Stretching: '',
        Dexterity: '',
        Movement: '',
        Understanding: '',
        DisabilityAppearanceYear: 0,
        Library: false,
        Wc: false,
        Elevator: false,
        Classroom: false,
        Amphitheater: false,
        Laboratory: false,
        Secretary: false,
        Canteen: false,
        Orientation: false,
        Hearingaid: false,
        Wheelchair: false,
        Speechcomposer: false,
        Virtualkeyboard: false,
        Wwitches: false,
        Screenreader: false,
        Braillescreen: false,
        PhsyicalAidOtherText: '',
        DigitalAidOtherText: '',
        Keyboard: false,
        KeyboardText: '',
        Mouse: false,
        MouseText: '',
        Screen: false,
        ScreenText: '',
        Speakers: false,
        SpeakersText: '',
        TeacherSpeech: false,
        TeacherSpeechText: '',
        TeacherWriting: false,
        TeacherWritingText: '',
        TeacherScreen: false,
        TeacherScreenText: '',
        StudentNotes: false,
        StudentNotesText: '',
        StudentQuestions: false,
        StudentQuestionsText: '',
        LearningDifficultyOtherText: '',
        HelpOptions: false,
        HelpOptionsText: '',
        StudyProcess: false,
        StudyProcessText: '',
        LabParticipation: false,
        LabParticipationText: '',
        PcUsage: false,
        PcUsageText: '',
        OralExams: false,
        DifferentQuestions: false,
        Braille: false,
        Computer: false,
        ExamsAidOtherText: '',
        PassedCourses: 0,
        Courses: 0,
        LastExamParticipationYear: null,
        ParticipationDifficulty: 0,
        Suggestions: ''
    };
    form = lodash_1.default.extend({}, defaultForm, form || {});
    store.Set(form);
    lodash_1.default.each(elements, function (element) {
        var key = Object.keys(form).find(function (x) { return x.toLowerCase() === (element.type === 'radio' ? element.name.toLowerCase() : element.id.toLowerCase()); });
        if (!key) {
            return;
        }
        var value = form[key];
        if (typeof value !== 'boolean' && !!!value) {
            return;
        }
        switch (true) {
            case element instanceof HTMLSelectElement:
            case element instanceof HTMLInputElement:
            case element instanceof HTMLTextAreaElement:
                if (isCheckbox(element)) {
                    element.checked = value;
                }
                else if (isRadio(element)) {
                    var elementId = element.name + "-" + value.toString();
                    element.checked = element.id === elementId;
                }
                else {
                    element.value = value.toString();
                }
                element.dispatchEvent(new Event('change'));
                break;
            default:
                throw new Error('invalid element');
        }
    });
    lodash_1.default.each(elements, function (element) {
        element.addEventListener('focusout', function (event) {
            element.classList.remove('is-valid', 'is-invalid');
            var isValid = element.checkValidity();
            element.classList.add(isValid ? 'is-valid' : 'is-invalid');
            if (!isValid) {
                event.preventDefault();
                event.stopPropagation();
            }
            else {
                var key = Object.keys(form).find(function (x) { return x.toLowerCase() === (element.type === 'radio' ? element.name.toLowerCase() : element.id.toLowerCase()); });
                if (!key) {
                    return;
                }
                var value = void 0;
                switch (true) {
                    case element instanceof HTMLSelectElement:
                    case element instanceof HTMLInputElement:
                    case element instanceof HTMLTextAreaElement:
                        if (isCheckbox(element)) {
                            value = element.checked;
                        }
                        else if (isRadio(element)) {
                            var valueText = element.id.replace(element.name, '').replace('-', '');
                            if (valueText === 'true' || valueText === 'false') {
                                value = valueText === 'true';
                            }
                            else {
                                value = valueText;
                            }
                        }
                        else if (isNumber(element)) {
                            value = Number(element.value);
                        }
                        else {
                            value = element.value;
                        }
                        break;
                    default:
                        throw new Error('invalid element');
                }
                form[key] = value;
                store.Set(form);
            }
        }, false);
    });
})();
(function () {
    var applyRules = function (element) {
        if (element instanceof HTMLSelectElement) {
            return true;
        }
        if (element instanceof HTMLInputElement) {
            if (isCheckbox(element)) {
                return true;
            }
            if (isRadio(element)) {
                if (!element.checked) {
                    return false;
                }
                var valueText = element.id.replace(element.name, '').replace('-', '');
                if (!(valueText === 'true' || valueText === 'false')) {
                    return false;
                }
                return true;
            }
        }
        throw new Error('Argument out of range exception');
    };
    var getCssClass = function (element) {
        if (element instanceof HTMLSelectElement) {
            return jquery_1.default(element).val() === 'other' ? '' : 'd-none';
        }
        if (element instanceof HTMLInputElement) {
            if (isCheckbox(element)) {
                return element.checked ? '' : 'd-none';
            }
            if (isRadio(element)) {
                var valueText = element.id.replace(element.name, '').replace('-', '');
                return element.checked && valueText === 'true' ? '' : 'd-none';
            }
        }
        throw new Error('Argument out of range exception');
    };
    var applyOtherElement = function (element) {
        var otherElement = document.querySelector("#" + jquery_1.default(element).data('form-select-other-textby'));
        if (!!!otherElement) {
            return;
        }
        var otherElementWrapper = otherElement.closest('.input-group');
        if (!!!otherElementWrapper) {
            return;
        }
        if (!applyRules(element)) {
            return;
        }
        var _class = getCssClass(element);
        otherElementWrapper.classList.remove('d-none');
        if (otherElement.hasAttribute('hidden-required')) {
            otherElement.removeAttribute('hidden-required');
            otherElement.setAttribute('required', '');
        }
        if (!!_class) {
            if (otherElement.hasAttribute('required')) {
                otherElement.removeAttribute('required');
                otherElement.setAttribute('hidden-required', '');
            }
            otherElementWrapper.classList.add(_class);
        }
    };
    var elements = document.querySelectorAll('.needs-validation select, .needs-validation input[type=radio], .needs-validation input[type=checkbox]');
    lodash_1.default.each(elements, function (element) {
        if (!jquery_1.default(element).data('form-select-other-textby')) {
            return;
        }
        applyOtherElement(element);
        element.addEventListener('change', function (event) { applyOtherElement(element); }, false);
    });
})();
window.Form = (function (form) {
    'use strict';
    form.submit = function () {
        var store = new FormStore();
        var form = store.Get();
        return new Promise(function (resolve, reject) {
            jquery_1.default.ajax({
                type: "POST",
                data: JSON.stringify(form),
                url: window.Form.baseUrl + "/form",
                contentType: "application/json charset=utf-8",
                headers: {
                    Accept: "application/json charset=utf-8"
                },
                success: function (data) {
                    store.Reset();
                    resolve(data);
                },
                error: function (error) {
                    reject(error);
                },
            });
        });
    };
    return form;
})(window.Form || {});
(function () {
    'use strict';
    var carouselWrap = jquery_1.default('.owl-carousel');
    carouselWrap.owlCarousel({
        items: 1,
        loop: true,
        autoplay: true,
        dots: false
    });
})();


/***/ }),

/***/ "./Theme/ts/index.ts":
/*!***************************!*\
  !*** ./Theme/ts/index.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Guid_1 = __importDefault(__webpack_require__(/*! ./Guid */ "./Theme/ts/Guid.ts"));
var TextAreaControl_1 = __importDefault(__webpack_require__(/*! ./TextAreaControl */ "./Theme/ts/TextAreaControl.ts"));
var TextControl_1 = __importDefault(__webpack_require__(/*! ./TextControl */ "./Theme/ts/TextControl.ts"));
var SelectControl_1 = __importDefault(__webpack_require__(/*! ./SelectControl */ "./Theme/ts/SelectControl.ts"));
var FormContainer_1 = __importDefault(__webpack_require__(/*! ./FormContainer */ "./Theme/ts/FormContainer.ts"));
var RowContainer_1 = __importDefault(__webpack_require__(/*! ./RowContainer */ "./Theme/ts/RowContainer.ts"));
var ColumnContainer_1 = __importDefault(__webpack_require__(/*! ./ColumnContainer */ "./Theme/ts/ColumnContainer.ts"));
var ButtonControl_1 = __importDefault(__webpack_require__(/*! ./ButtonControl */ "./Theme/ts/ButtonControl.ts"));
var ActionContainer_1 = __importDefault(__webpack_require__(/*! ./ActionContainer */ "./Theme/ts/ActionContainer.ts"));
var FormSubmitAction_1 = __importDefault(__webpack_require__(/*! ./FormSubmitAction */ "./Theme/ts/FormSubmitAction.ts"));
var DataSource_1 = __importDefault(__webpack_require__(/*! ./DataSource */ "./Theme/ts/DataSource.ts"));
var DataContext_1 = __webpack_require__(/*! ./DataContext */ "./Theme/ts/DataContext.ts");
__webpack_require__(/*! ./custom.ts */ "./Theme/ts/custom.ts");
var formId = Guid_1.default.NewGuid();
var submitActionId = Guid_1.default.NewGuid();
var postalCodes = [
    { PostalCode: '30001', Area: 'ΒΑΛΤΙ ΑΙΤΩΛ/ΝΙΑΣ, ΓΟΥΡΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΛΕΣΙΝΙ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΝΙΝΑ ΒΛΙΖΙΑΝΩΝ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΡΜΑΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΣΤΡΟ ΑΙΤΩΛ/ΝΙΑΣ, ΝΕΟΧΩΡΙ ΜΕΣΟΛΟΓΓΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΑΙΟΜΑΝΙΝΑ  ΑΙΤΩΛ/ΝΙΑΣ, ΠΕΝΤΑΛΟΦΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΛΑΤΑΝΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΡΙΓΑΝΗ ΑΙΤΩΛ/ΝΙΑΣ, ΣΤΡΟΓΓΥΛΟΒΟΥΝΙ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30002', Area: 'ΑΓΙΑ ΒΑΡΒΑΡΑ ΒΟΝΙΤΣΗΣ ΛΕΥΚΑΔΑΣ, ΑΚΤΙΟ ΠΡΕΒΕΖΑΣ, ΑΛΥΚΕΣ ΤΟΥΡΛΙΔΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΜΜΟΥΣΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΤΩΝΗ ΛΕΥΚΑΔΑΣ, ΒΑΓΙΑ ΝΗΣΟΣ ΛΕΥΚΑΔΑΣ, ΒΟΝΙΤΣΑ ΛΕΥΚΑΔΑΣ, ΓΟΥΡΓΟΥΒΛΗ ΛΕΥΚΑΔΑΣ, ΔΡΥΜΟΣ ΛΕΥΚΑΔΑΣ, ΘΥΡΙΟ ΛΕΥΚΑΔΑΣ, ΚΟΡΠΗ ΛΕΥΚΑΔΑΣ, ΝΕΑ ΚΑΜΑΡΙΝΑ ΛΕΥΚΑΔΑΣ, ΠΑΛΙΑΜΠΕΛΑ ΒΟΝΙΤΣΗΣ ΛΕΥΚΑΔΑΣ, ΠΕΡΑΤΙΑ ΛΕΥΚΑΔΑΣ, ΠΕΤΡΑ ΛΕΥΚΑΔΑΣ, ΠΛΑΓΙΑ ΛΕΥΚΑΔΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30003', Area: 'ΞΗΡΑΚΙΑ ΠΑΝΑΙΤΩΛΙΚΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΑΙΟΚΑΡΥΑ ΚΕΡΑΣΕΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΑΙΟΚΕΡΑΣΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΝΑΙΤΩΛΙΟ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30004', Area: 'ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΒΟΝΙΤΣΗΣ ΛΕΥΚΑΔΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΚΑΤΟΥΝΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΕΤΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΧΥΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΟΥΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΜΠΩΤΗ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΝΟΠΙΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΛΟΥΤΡΑΚΙ ΚΑΤΟΥΝΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΤΡΥΦΟΣ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30005', Area: 'ΚΑΙΝΟΥΡΓΙΟ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30006', Area: 'ΑΓΡΑΜΠΕΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΣΤΑΚΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΒΑΣΙΛΟΠΟΥΛΟ ΑΙΤΩΛ/ΝΙΑΣ, ΒΛΙΖΙΑΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΡΑΙΣΚΑΚΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΡΟΔΡΟΜΟΣ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30008', Area: 'ΑΒΑΡΙΚΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΑ ΣΟΦΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΑ ΤΡΙΑΔΑ ΔΡΥΜΩΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΘΕΟΔΩΡΟΣ ΚΟΚΚΙΝΟΒΡΥΣΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΤΡΙΧΩΝΙΔΑΣ(ΚΟΝΙΣΚΗΣ) ΑΙΤΩΛ/ΝΙΑΣ, ΑΕΤΟΠΕΤΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΜΒΡΑΚΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΜΠΕΛΙΑ ΚΟΚΚΙΝΟΒΡΥΣΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΑΛΗΨΗ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΩ ΔΡΥΜΩΝΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΡΓΥΡΟ ΠΗΓΑΔΙ ΑΙΤΩΛ/ΝΙΑΣ, ΔΑΦΝΗ ΑΜΒΡΑΚΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΔΙΑΣΕΛΛΟ ΤΡΙΧΩΝΙΔΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΔΙΠΛΑΤΑΝΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΔΟΚΙΜΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΔΟΣΟΥΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΔΟΥΝΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΔΡΥΜΩΝΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΘΕΟΤΟΚΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΘΕΡΜΟ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΗΜΕΝΑ ΑΜΠΕΛΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΛΛΙΘΕΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΛΟΥΔΙ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΛΑΜΠΙΡΙ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΜΑΚΡΙΑ ΛΟΓΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΧΡΥΣΟΒΙΤΣΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΛΟΠΟΤΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΝΙΣΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΣΚΙΝΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΥΛΟΥΡΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΥΤΣΟΜΗΛΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΦΤΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΛΑΔΙΚΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΛΑΜΠΙΡΙ ΑΙΤΩΛ/ΝΙΑΣ, ΛΕΥΚΟ ΑΙΤΩΛ/ΝΙΑΣ, ΛΟΥΣΤΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΛΟΥΤΡΑ  ΜΥΡΤΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΚΡΙΑ ΛΟΓΓΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΝΔΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΡΑΘΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΡΑΘΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΡΑΘΟΥΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΥΡΟΒΟΡΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΕΓΑΣ ΔΕΝΔΡΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΕΛΙΓΚΟΒΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΙΣΑΜΠΕΛΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΥΡΤΕΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΥΡΤΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΝΕΡΟΣΥΡΤΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΝΕΡΟΧΩΡΙ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΑΙΟΜΥΛΟΣ ΜΥΡΤΕΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΙΟΥΡΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΜΦΙΟ ΑΙΤΩΛ/ΝΙΑΣ, ΠΕΡΕΒΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΕΤΡΟΧΩΡΙ ΑΙΤΩΛ/ΝΙΑΣ, ΠΙΝΗ ΑΙΤΩΛ/ΝΙΑΣ, ΠΟΥΛΙΝΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΟΥΡΝΑΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΡΙΟΝΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΡΟΓΓΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΙΤΑΡΑΛΩΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΠΑΡΤΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΤΕΚΟΥΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΤΡΙΓΑΝΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΤΑΞΙΑΡΧΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΧΑΛΙΚΙ ΑΜΒΡΑΚΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΧΡΥΣΟΒΙΤΣΑ ΒΟΝΙΤΣΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΧΡΥΣΟΒΙΤΣΑ ΤΡΙΧΩΝΙΔΟΣ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30009', Area: 'ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΥΒΑΡΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΧΑΙΡΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΠΑΜΠΙΝΗ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΠΑΔΑΤΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΡΙΒΙΟ ΑΙΤΩΛ/ΝΙΑΣ, ΣΚΟΥΡΤΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΦΥΤΕΙΕΣ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30010', Area: 'ΑΓΙΑ ΒΑΡΒΑΡΑ ΠΑΡΑΒΟΛΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΑ ΒΑΡΒΑΡΑ ΤΡΙΧΩΝΙΔΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΠΑΛΑΙΟΚΑΡΥΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΠΑΡΑΒΟΛΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΩ ΒΛΟΧΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΦΡΑΤΟ ΑΙΤΩΛ/ΝΙΑΣ, ΒΑΡΕΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΔΟΓΡΗ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΚΑΒΑΣ ΚΑΙΝΟΥΡΓΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΡΡΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΤΡΑΓΑΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΡΥΟ ΝΕΡΟ ΑΙΤΩΛ/ΝΙΑΣ, ΚΥΡΑ ΒΓΕΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΝΕΡΟΜΑΝΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΑΙΟΚΑΡΥΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΝΤΑΝΑΣΣΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΡΑΒΟΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΕΡΙΣΤΕΡΙ ΑΙΤΩΛ/ΝΙΑΣ, ΠΛΑΤΑΝΙΑΣ ΠΑΡΑΒΟΛΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΡΟΣΗΛΙΑ ΤΡΙΧΩΝΙΔΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΣΧΟΙΝΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΤΡΑΓΑΝΑ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30011', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΜΑΤΑΡΑΓΚΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΩ ΖΕΥΓΑΡΑΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΩ ΚΕΡΑΣΟΒΟ ΑΙΤΩΛ/ΝΙΑΣ, ΖΕΥΓΑΡΑΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΖΕΥΓΑΡΑΚΙ ΑΡΑΚΥΝΘΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΜΑΡΕΤΣΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΚΕΡΑΣΟΒΟ ΑΙΤΩΛ/ΝΙΑΣ, ΛΩΛΕΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΓΟΥΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΤΑΡΑΓΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΑΙΟΠΛΑΤΑΝΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΠΠΑΔΑΤΕΣ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30012', Area: 'ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΚΕΚΡΟΠΙΑΣ ΛΕΥΚΑΔΑΣ, ΒΑΡΚΟ ΛΕΥΚΑΔΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΔΗΜΗΤΡΙΟΥ ΠΑΛΑΙΡΟΥ ΛΕΥΚΑΔΑΣ, ΠΑΛΑΙΡΟΣ ΛΕΥΚΑΔΑΣ, ΠΑΛΙΑ ΠΛΑΓΙΑ ΛΕΥΚΑΔΑΣ, ΠΕΡΙΒΟΛΙΑ ΚΑΛΑΜΙΩΝΑΣ ΛΕΥΚΑΔΑΣ, ΠΟΓΩΝΙΑ ΛΕΥΚΑΔΑΣ, ΣΚΛΑΒΑΙΝΑ ΛΕΥΚΑΔΑΣ, ΣΤΕΝΟ ΠΟΓΩΝΙΑΣ ΛΕΥΚΑΔΑΣ, ΣΤΕΝΟ ΧΑΡΑΔΙΑΤΙΚΩΝ ΛΕΥΚΑΔΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30014', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΚΛΕΙΣΟΡΡΕΥΜΑΤΩΝ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΜΕΣΟΛΟΓΓΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΩ ΒΑΣΙΛΙΚΗ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΩ ΚΟΥΔΟΥΝΙ ΑΙΤΩΛ/ΝΙΑΣ, ΓΑΛΑΤΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΕΥΗΝΟΧΩΡΙ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΛΑΒΡΟΥΖΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΒΑΣΙΛΙΚΗ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΚΑΛΑΒΡΟΥΖΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΚΟΥΔΟΥΝΙ ΑΙΤΩΛ/ΝΙΑΣ, ΚΛΕΙΣΟΡΡΕΥΜΑΤΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΛΗΜΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΚΩΡΗ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΥΤΣΟΧΕΡΙ ΑΙΤΩΛ/ΝΙΑΣ, ΚΡΥΟΝΕΡΙ ΑΙΤΩΛ/ΝΙΑΣ, ΜΕΛΙΚΙΝΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΠΡΕΣΙΑΚΟ ΑΙΤΩΛ/ΝΙΑΣ, ΝΕΑ ΚΑΛΥΔΩΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΞΗΡΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΕΡΑΜΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΕΡΙΘΩΡΙΟ ΑΙΤΩΛ/ΝΙΑΣ, ΤΡΙΚΟΡΦΟ ΕΥΗΝΟΧΩΡΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30015', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΜΑΚΡΙΝΟΥΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΙ ΑΠΟΣΤΟΛΟΙ ΜΑΚΡΙΝΟΥΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΚΡΕΣ (ΛΙΘΟΒΟΥΝΙΟ) ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΩ ΜΕΤΑΠΑ ΑΙΤΩΛ/ΝΙΑΣ, ΒΑΡΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΓΑΒΑΛΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΓΡΑΜΜΑΤΙΚΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΔΑΦΝΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΖΑΝΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΜΑΚΡΙΝΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΨΟΡΡΑΧΗ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΥΡΤΕΛΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΥΨΕΛΗ ΜΑΚΡΙΝΟΥΣ ΑΙΤΩΛ/ΝΙΑΣ, ΛΙΘΟΒΟΥΝΙ (ΑΚΡΕΣ) ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΚΡΙΝΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΜΕΣΑΡΙΣΤΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΕΤΑΞΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΠΟΥΡΛΕΣΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΑΙΟΖΕΥΓΑΡΟ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΚΑΨΟΡΑΧΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΡΑΔΕΙΣΙ ΑΙΤΩΛ/ΝΙΑΣ, ΠΟΤΑΜΟΥΛΑ ΜΕΣΟΛΟΓΓΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΣΑΡΑΝΤΗ ΑΙΤΩΛ/ΝΙΑΣ, ΤΡΙΧΩΝΙΟ ΑΙΤΩΛ/ΝΙΑΣ, ΤΣΙΛΙΓΙΑΝΝΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30017', Area: 'ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΒΑΛΤΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΜΗΝΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΡΑΠΙΔΟΚΑΜΠΟΣ ΒΑΛΤΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΑΜΠΕΛΙ ΑΙΤΩΛ/ΝΙΑΣ, ΑΥΛΑΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΒΡΟΥΒΙΑΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΓΡΑΜΜΑΤΣΟΥΛΙ ΑΙΤΩΛ/ΝΙΑΣ, ΔΡΟΜΙΤΣΑ ΑΙΤΩΛ/ΝΙΑΣ, ΕΜΠΕΣΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΘΥΑΜΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΜΙΝΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΝΕΟ ΑΓΡΙΔΙ ΑΙΤΩΛ/ΝΙΑΣ, ΝΕΟ ΧΑΛΚΙΟΠΟΥΛΟ ΑΙΤΩΛ/ΝΙΑΣ, ΞΗΡΑΚΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΞΩΜΕΡΗ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΙΑΜΠΕΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΤΙΟΠΟΥΛΟ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΥΛΙΑΔΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΕΡΔΙΚΑΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΠΕΤΣΑΛΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΗΓΑΔΙΑ ΠΕΡΔΙΚΑΚΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΠΟΤΑΜΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΡΟΣΗΛΙΑ ΒΑΛΤΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΣΚΑΤΖΟΚΑΜΠΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΣΤΑΘΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΣΥΚΕΑ ΑΡΤΑΣ, ΤΡΙΚΛΙΝΟ ΑΙΤΩΛ/ΝΙΑΣ, ΦΡΑΓΚΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΧΑΛΚΙΟΠΟΥΛΟ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30019', Area: 'ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΛΕΥΚΑΔΑΣ, ΑΡΧΟΝΤΟΧΩΡΙ ΛΕΥΚΑΔΑΣ, ΒΑΡΝΑΚΑΣ ΛΕΥΚΑΔΑΣ, ΒΑΤΟΣ ΛΕΥΚΑΔΑΣ, ΚΑΝΔΗΛΑ ΛΕΥΚΑΔΑΣ, ΜΥΤΙΚΑΣ ΛΕΥΚΑΔΑΣ, ΠΑΛΙΟΒΑΡΚΑ ΛΕΥΚΑΔΑΣ, ΠΑΝΑΓΟΥΛΑ ΛΕΥΚΑΔΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30020', Area: 'ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΠΟΛΥΚΑΡΠΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΡΑΠΙΔΟΚΑΜΠΟΣ ΝΑΥΠΑΚΤΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΤΙΡΡΙΟ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΩ ΠΛΑΤΑΝΙΤΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΒΑΛΤΟΣ ΝΑΥΠΑΚΤΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΡΑΟΥΛΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΚΥΝΕΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΙΣΟΚΑΜΠΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΟΛΥΚΡΕΙΟ ΑΙΤΩΛ/ΝΙΑΣ, ΠΛΑΤΑΝΙΤΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΡΙΖΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΠΑΡΤΟΡΑΧΗ ΑΙΤΩΛ/ΝΙΑΣ, ΦΡΑΓΚΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30021', Area: 'ΑΓΑΛΙΑΝΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΑ ΒΑΡΒΑΡΑ ΣΑΡΔΙΑΔΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΑ ΔΕΥΤΕΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΒΛΑΣΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΠΕΝΤΑΚΟΡΦΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΑ ΤΡΙΑΔΑ ΓΟΥΝΑΡΗ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΠΑΡΑΚΑΜΠΥΛΙΩΝ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΒΛΑΣΙΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΚΡΙΔΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΔΡΩΝΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΩ ΑΓΙΟΣ ΒΛΑΣΙΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΜΠΟΣ ΧΟΥΝΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΡΑΜΑΝΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΑΓΙΟΣ ΒΛΑΣΙΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΚΑΜΠΟΣ ΑΓΙΟΥ ΒΛΑΣΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΚΡΕΜΑΣΤΑ ΣΥΚΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΛΑΚΚΕΣ ΧΟΥΝΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΛΑΚΩΜΑΤΑ ΑΙΤΩΛ/ΝΙΑΣ, ΛΑΠΑΤΟ ΑΙΤΩΛ/ΝΙΑΣ, ΛΕΝΤΙΝΗ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΥΡΟΜΥΤΗ ΑΙΤΩΛ/ΝΙΑΣ, ΜΠΑΣΔΟΥΝΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΠΟΚΡΙ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΑΙΟΧΟΥΝΗ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΑΙΟΧΩΡΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΟΤΙΣΤΙΚΟ ΑΙΤΩΛ/ΝΙΑΣ, ΡΙΟ ΧΟΥΝΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΣΚΑΛΙΤΙΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΚΙΑΔΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΟΒΟΛΑΚΙΤΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΧΑΡΑΜΑ ΑΙΤΩΛ/ΝΙΑΣ, ΧΑΡΑΥΓΗ ΑΙΤΩΛ/ΝΙΑΣ, ΧΟΥΝΗ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30022', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΧΟΜΟΡΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΧΛΑΔΟΚΑΣΤΡΟ ΑΙΤΩΛ/ΝΙΑΣ, ΔΙΑΣΕΛΛΑΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΔΙΑΣΕΛΛΟ ΝΑΥΠΑΚΤΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΣΤΑΝΕΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΠΛΑΤΑΝΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΕΡΙΣΤΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΕΡΚΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΛΑΤΑΝΟΣ ΝΑΥΠΑΚΤΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΧΟΜΟΡΗ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30023', Area: 'ΑΜΠΕΛΑΚΙΩΤΙΣΣΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΩ ΧΩΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΧΩΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΟΔΟΣ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30027', Area: 'ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30100', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ  ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΚΑΛΥΒΙΩΝ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΡΗΓΑΝΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΤΡΙΧΩΝΙΔΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΡΙΝΙΟ ΑΙΤΩΛ/ΝΙΑΣ, ΑΚΡΟΠΟΤΑΜΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΛΩΝΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΜΠΕΛΙΑ ΤΡΙΧΩΝΙΔΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΥΛΑΚΙΕΣ ΑΙΤΩΛ/ΝΙΑΣ, ΒΑΙΝΑΡΙΟ ΑΙΤΩΛ/ΝΙΑΣ, ΒΑΡΚΟΥΛΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΒΕΛΟΥΧΙ ΑΙΤΩΛ/ΝΙΑΣ, ΓΕΡΟΒΑΣΙΛΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΓΙΑΝΟΥΖΙ ΑΙΤΩΛ/ΝΙΑΣ, ΓΟΥΡΙΩΤΙΣΣΑ ΑΙΤΩΛ/ΝΙΑΣ, ΔΙΑΜΑΝΤΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΔΟΚΙΜΙ ΑΙΤΩΛ/ΝΙΑΣ, ΔΡΟΣΙΝΙΑΤΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΕΛΑΙΟΦΥΤΟ ΝΕΑΠΟΛΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΕΛΕΥΘΕΡΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΕΛΛΗΝΙΚΑ ΑΓΡΙΝΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΕΛΛΗΝΙΚΟ ΣΚΟΥΤΕΡΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΚΑΒΑΣ ΣΚΟΥΤΕΡΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΛΥΒΙΑ ΤΡΙΧΩΝΙΔΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΜΑΡΟΥΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΣΤΑΝΟΥΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΣΤΡΑΚΙ ΒΑΛΤΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΚΕΛΑΝΙΤΗΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΕΛΛΑΚΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΕΡΑΣΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΚΚΙΝΟΒΡΥΣΗ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΚΚΙΝΟΛΟΓΓΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΚΚΙΝΟΠΥΛΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΡΑΨΗ ΑΙΤΩΛ/ΝΙΑΣ, ΚΥΠΑΡΙΣΣΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΥΨΕΛΗ (ΣΦΗΝΑΣ) ΑΙΤΩΛ/ΝΙΑΣ, ΛΑΓΚΑΔΙ ΛΕΠΕΝΟΥΣ ΑΙΤΩΛ/ΝΙΑΣ, ΛΑΣΠΕΣ ΑΙΤΩΛ/ΝΙΑΣ, ΛΕΠΕΝΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΛΕΥΚΑ  ΑΓΡΙΝΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΛΕΥΚΑ ΔΟΚΙΜΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΛΙΑΓΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΛΙΜΝΗ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΛΕΒΡΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΤΣΟΥΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΜΕΓΑΛΗ ΧΩΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΠΟΥΖΙΟ ΑΙΤΩΛ/ΝΙΑΣ, ΝΕΑ ΑΒΟΡΑΝΗ ΑΙΤΩΛ/ΝΙΑΣ, ΝΕΑΠΟΛΗ ΑΙΤΩΛ/ΝΙΑΣ, ΟΧΘΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΤΟΥΛΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΕΝΤΑΚΟΡΦΟ ΑΙΤΩΛ/ΝΙΑΣ, ΠΛΑΤΑΝΟΣ ΑΜΠΕΛΙΩΝ ΑΙΤΩΛ/ΝΙΑΣ, ΠΛΑΤΑΝΟΣ ΚΑΛΥΒΙΩΝ ΑΙΤΩΛ/ΝΙΑΣ, ΠΟΤΑΜΟΥΛΑ ΤΡΙΧΩΝΙΔΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΥΡΓΙ ΑΙΤΩΛ/ΝΙΑΣ, ΡΑΙΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΑΡΓΙΑΔΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΙΓΚΟΥΝΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΙΤΟΜΕΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΚΟΥΤΕΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΚΟΥΤΕΣΙΑΔΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΠΟΛΑΙΤΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΤΑΜΑΤΟΓΙΑΝΝΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΤΑΥΡΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΣΤΡΑΤΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΣΤΡΟΓΓΥΛΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΧΙΝΟΣ ΑΓΡΙΝΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΤΡΙΑΝΤΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΤΣΟΥΝΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΦΡΑΓΚΟΣΚΑΛΑ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30150', Area: 'ΑΓΊΑ ΒΑΡΒΆΡΑ ΠΑΡΑΒΌΛ ΑΙΤΩΛΟΑΚΑΡΝΑΝΙΑΣ, ΑΓΊΑ ΠΑΡΑΣΚΕΥΉ ΠΑΡΑΒ ΑΙΤΩΛΟΑΚΑΡΝΑΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30200', Area: 'ΑΓΙΟΣ ΘΩΜΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΣΥΜΕΩΝ ΜΕΣΟΛΟΓΓΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΡΑΦΟΡΡΑΧΗ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΡΙΛΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΩ ΜΟΥΣΟΥΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΡΒΑΝΙΤΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΡΧΑΙΑ ΑΛΙΚΑΡΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΒΑΣΙΛΑΔΙ ΝΗΣΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΕΛΛΗΝΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΖΕΣΤΗ ΑΙΤΩΛ/ΝΙΑΣ, ΘΕΟΔΩΡΑΚΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΕΛΛΗΝΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΡΕΤΣΙΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΜΜΑ ΝΗΣΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΕΣΟΚΑΜΠΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΕΣΟΛΟΓΓΙ ΑΙΤΩΛ/ΝΙΑΣ, ΜΕΤΟΧΙ ΑΓΙΟΥ ΘΩΜΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΠΑΜΠΑΚΟΥΛΑ ΝΗΣΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΝΕΑ ΥΔΡΑΓΩΓΕΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΝΟΤΙΟΣ ΔΙΑΥΛΟΣ ΝΗΣΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΣΠΑΛΙΑΡΕΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΡΟΚΟΠΑΝΗΣΤΟΣ ΝΗΣΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΣΧΙΝΟΣ ΜΕΣΟΛΟΓΓΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΣΧΟΙΝΙΑΣ ΝΗΣΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΤΟΥΡΛΙΣ ΝΗΣΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΤΡΕΛΑΓΚΑΘΑ ΑΙΤΩΛ/ΝΙΑΣ, ΤΡΥΠΕΣ ΑΙΤΩΛ/ΝΙΑΣ, ΧΟΥΝΙΣΤΑ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30300', Area: 'ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΒΟΜΒΟΚΟΥΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΑΒΡΥΤΗ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΘΟΦΥΤΟ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΩ ΑΦΡΟΞΥΛΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΒΕΛΒΙΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΒΛΑΧΟΜΑΝΔΡΑ ΑΙΤΩΛ/ΝΙΑΣ, ΒΟΜΒΟΚΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΓΑΒΡΟΛΙΜΝΗ ΑΙΤΩΛ/ΝΙΑΣ, ΓΑΒΡΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΓΕΦΥΡΑ ΜΠΑΝΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΓΟΛΕΜΙ ΑΙΤΩΛ/ΝΙΑΣ, ΔΑΦΝΗ ΜΕΣΟΛΟΓΓΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΔΑΦΝΗ ΝΑΥΠΑΚΤΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΣΤΡΑΚΙ ΝΑΥΠΑΚΤΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΑΦΥΓΙΟ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΑΦΡΟΞΥΛΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΔΑΦΝΗ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΩ ΜΑΜΟΥΛΑΔΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΥΤΣΟΓΙΑΝΝΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΛΕΥΚΑ ΒΟΜΒΟΚΟΥΣ ΑΙΤΩΛ/ΝΙΑΣ, ΛΥΓΙΑ ΝΕΟΚΑΣΤΡΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΜΟΥΛΑΔΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΡΜΑΡΑ ΝΑΥΠΑΚΤΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΙΚΡΟ ΠΑΛΑΙΟΧΩΡΑΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΙΩΑΝΝΗ ΑΙΤΩΛ/ΝΙΑΣ, ΝΑΥΠΑΚΤΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΞΗΡΟΠΗΓΑΔΟ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΑΙΟΧΩΡΑΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΠΙΤΣΙΝΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΡΙΓΑΝΙ ΑΙΤΩΛ/ΝΙΑΣ, ΣΚΑΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΥΚΙΑ ΠΙΤΣΙΝΑΙΙΚΩΝ ΑΙΤΩΛ/ΝΙΑΣ, ΣΦΗΚΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30400', Area: 'ΑΓΓΕΛΟΚΑΣΤΡΟ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΗΛΙΑΣ ΜΕΣΟΛΟΓΓΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΑΙΤΩΛΙΚΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΑΙΤΩΛΙΚΟ ΑΙΤΩΛ/ΝΙΑΣ, ΓΙΑΤΣΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΕΦΑΛΟΒΡΥΣΟ ΑΙΤΩΛΙΚΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΚΕΦΑΛΟΒΡΥΣΟΣ ΣΤΑΜΝΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΛΥΣΙΜΑΧΕΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΕΣΑ ΠΗΓΑΔΙ ΑΙΤΩΛ/ΝΙΑΣ, ΜΠΟΥΖΑ ΑΙΤΩΛ/ΝΙΑΣ, ΝΗΣΑΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΠΟΡΟΣ ΜΕΣΟΛΟΓΓΙΟΥ ΝΗΣΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΣΤΑΘΜΟΣ ΑΓΓΕΛΟΚΑΣΤΡΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΣΤΑΘΜΟΣ ΣΤΑΜΝΩΝ ΑΙΤΩΛ/ΝΙΑΣ, ΣΤΑΜΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΦΡΑΓΚΟΥΛΑΙΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΧΑΛΙΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΧΡΥΣΟΒΕΡΓΙ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '30500', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΒΑΛΤΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΚΕΧΡΙΝΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΜΠΕΛΑΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΑΜΦΙΛΟΧΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΑΜΦΙΛΟΧΙΚΟ ΑΡΓΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΝΟΙΞΙΑΤΙΚΟ ΑΙΤΩΛ/ΝΙΑΣ, ΑΡΙΑΔΑ ΑΙΤΩΛ/ΝΙΑΣ, ΒΑΡΕΤΑΔΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΛΥΒΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΜΠΟΣ ΑΜΠΕΛΑΚΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΝΑΛΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΤΑΦΟΥΡΚΟ ΑΙΤΩΛ/ΝΙΑΣ, ΚΕΡΑΜΙΔΙ ΑΙΤΩΛ/ΝΙΑΣ, ΚΕΧΡΙΝΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΟΜΠΟΘΕΚΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΡΙΚΕΛΛΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΛΙΜΝΑΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΚΡΥΧΩΡΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΥΡΟΡΑΧΗ ΑΙΤΩΛ/ΝΙΑΣ, ΜΕΓΑΣ ΚΑΜΠΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΟΝΗ ΡΕΘΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΠΟΥΚΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΞΗΡΟΛΙΒΑΔΟ ΑΙΤΩΛ/ΝΙΑΣ, ΠΕΤΡΑΛΩΝΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΗΓΑΔΑΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΠΛΑΤΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΒΑΛΤΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΠΤΕΛΕΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΑΡΔΙΝΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΚΡΕΙΚΟ ΑΙΤΩΛ/ΝΙΑΣ, ΣΠΑΡΤΟ ΑΙΤΩΛ/ΝΙΑΣ, ΣΤΑΝΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΤΡΙΑ ΑΛΩΝΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΤΡΙΑΝΤΑΦΥΛΛΟΥΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΤΣΟΥΚΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΦΑΛΑΓΓΙΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΦΤΕΛΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΨΗΛΑ ΑΛΩΝΙΑ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Αιτωλοακαρνανίας' },
    { PostalCode: '21051', Area: 'ΑΓΙΑ ΑΙΚΑΤΕΡΙΝΗ ΑΡΓΟΛΙΔΑΣ, ΑΓΙΟΙ ΑΝΑΡΓΥΡΟΙ ΑΡΓΟΛΙΔΑΣ, ΑΚΤΗ ΥΔΡΑΣ ΑΡΓΟΛΙΔΑΣ, ΑΧΛΑΔΙΤΣΑ ΑΡΓΟΛΙΔΑΣ, ΕΡΜΙΟΝΗ ΑΡΓΟΛΙΔΑΣ, ΗΛΙΟΚΑΣΤΡΟ ΑΡΓΟΛΙΔΑΣ, ΘΕΡΜΗΣΙΑ ΑΡΓΟΛΙΔΑΣ, ΚΑΜΠΟΣ ΕΡΜΙΟΝΗΣ ΑΡΓΟΛΙΔΑΣ, ΚΙΝΕΤΑ ΑΡΓΟΛΙΔΑΣ, ΚΟΥΒΕΡΤΑ ΑΡΓΟΛΙΔΑΣ, ΛΟΥΚΑΙΤΙΟ ΑΡΓΟΛΙΔΑΣ, ΜΕΤΟΧΙ ΘΕΡΜΗΣΙΑΣ ΑΡΓΟΛΙΔΑΣ, ΜΟΝΗ ΑΓΙΩΝ ΑΝΑΡΓΥΡΩΝ ΑΡΓΟΛΙΔΑΣ, ΠΕΤΡΟΘΑΛΑΣΣΑ ΕΡΜΙΟΝΗΣ ΑΡΓΟΛΙΔΑΣ, ΠΗΓΑΔΙΑ ΑΡΓΟΛΙΔΑΣ, ΠΛΕΠΙΟ ΑΡΓΟΛΙΔΑΣ, ΠΟΔΑΡΙ ΑΡΓΟΛΙΔΑΣ, ΣΩΛΗΝΑΡΙ ΑΡΓΟΛΙΔΑΣ', Prefecture: 'Αργολίδας' },
    { PostalCode: '21052', Area: 'ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΑΡΓΟΛΙΔΑΣ, ΑΔΑΜΙ ΑΡΓΟΛΙΔΑΣ, ΑΝΑΣΤΑΣΟΠΟΥΛΑΙΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΑΡΚΑΔΙΚΟ ΑΡΓΟΛΙΔΑΣ, ΑΡΧΑΙΑ ΕΠΙΔΑΥΡΟΣ ΑΡΓΟΛΙΔΑΣ, ΑΣΚΛΗΠΙΕΙΟ ΕΠΙΔΑΥΡΟΥ ΑΡΓΟΛΙΔΑΣ, ΒΟΘΙΚΙΟ ΑΡΓΟΛΙΔΑΣ, ΓΙΑΝΝΟΥΛΑΙΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΔΗΜΟΣΙΑ ΑΡΓΟΛΙΔΑΣ, ΕΞΟΧΗ ΤΡΑΧΕΙΑΣ ΑΡΓΟΛΙΔΑΣ, ΚΟΚΚΙΝΑΔΕΣ ΑΡΓΟΛΙΔΑΣ, ΚΟΛΙΑΚΙ ΑΡΓΟΛΙΔΑΣ, ΚΟΡΩΝΗ ΑΡΓΟΛΙΔΑΣ, ΛΥΓΟΥΡΙΟ ΑΡΓΟΛΙΔΑΣ, ΜΑΤΑΡΑΓΚΑ ΑΡΓΟΛΙΔΑΣ, ΡΟΥΣΒΑΝΑΙΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΣΠΗΛΕΙΑ ΑΡΓΟΛΙΔΑΣ, ΣΤΑΜΑΤΑΙΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΣΤΑΥΡΟΣ ΑΡΓΟΛΙΔΑΣ, ΤΡΑΧΕΙΑ ΑΡΓΟΛΙΔΑΣ, ΧΑΝΙ ΜΕΡΚΟΥΡΗ ΑΡΓΟΛΙΔΑΣ, ΧΟΥΤΑΛΑΙΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΧΡΥΣΟΣΠΗΛΙΩΤΙΣΣΑ ΑΡΓΟΛΙΔΑΣ', Prefecture: 'Αργολίδας' },
    { PostalCode: '21054', Area: 'ΓΑΛΑΝΑΙΙΚΑ ΝΑΥΠΛΙΑΣ ΑΡΓΟΛΙΔΑΣ, ΔΗΜΑΙΝΑ ΑΡΓΟΛΙΔΑΣ, ΜΟΝΗ ΤΑΞΙΑΡΧΩΝ ΑΡΓΟΛΙΔΑΣ, ΝΕΑ ΔΗΜΑΙΝΑ ΑΡΓΟΛΙΔΑΣ, ΝΕΑ ΕΠΙΔΑΥΡΟΣ ΑΡΓΟΛΙΔΑΣ, ΠΑΡΑΛΙΑ ΝΕΑΣ ΕΠΙΔΑΥΡΟΥ ΑΡΓΟΛΙΔΑΣ', Prefecture: 'Αργολίδας' },
    { PostalCode: '21055', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΑΡΓΟΛΙΔΑΣ, ΑΜΑΡΙΑΝΟΣ ΑΡΓΟΛΙΔΑΣ, ΑΜΥΓΔΑΛΙΤΣΑ ΑΡΓΟΛΙΔΑΣ, ΑΝΥΦΙ ΑΡΓΟΛΙΔΑΣ, ΑΡΑΧΝΑΙΟ ΑΡΓΟΛΙΔΑΣ, ΓΚΑΤΖΙΑ ΑΡΓΟΛΙΔΑΣ, ΗΡΑΙΟ ΑΡΓΟΛΙΔΑΣ, ΜΑΝΕΣΗΣ ΑΡΓΟΛΙΔΑΣ, ΜΕΤΟΧΙ ΑΓΙΟΥ ΔΗΜΗΤΡΙΟΥ ΑΡΓΟΛΙΔΑΣ, ΜΕΤΟΧΙ ΝΑΥΠΛΙΑΣ ΑΡΓΟΛΙΔΑΣ, ΜΙΔΕΑ ΑΡΓΟΛΙΔΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΘΕΟΔΟΣΙΟΥ ΑΡΓΟΛΙΔΑΣ, ΠΑΝΑΡΙΤΗΣ ΑΡΓΟΛΙΔΑΣ, ΠΛΑΤΑΝΙΤΗΣ ΑΡΓΟΛΙΔΑΣ, ΠΟΥΛΛΑΚΙΔΑ ΑΡΓΟΛΙΔΑΣ', Prefecture: 'Αργολίδας' },
    { PostalCode: '21056', Area: 'ΤΟΛΟ ΑΡΓΟΛΙΔΑΣ', Prefecture: 'Αργολίδας' },
    { PostalCode: '21059', Area: 'ΕΠΑΝΩ ΕΠΙΔΑΥΡΟΣ ΑΡΓΟΛΙΔΑΣ, ΠΑΛΑΙΑ ΕΠΙΔΑΥΡΟΣ ΑΡΓΟΛΙΔΑΣ, ΠΑΝΑΓΙΑ ΑΡΓΟΛΙΔΑΣ, ΣΠΗΛΙΑ ΑΡΓΟΛΙΔΑΣ', Prefecture: 'Αργολίδας' },
    { PostalCode: '21100', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΑΡΓΟΛΙΔΑΣ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΑΡΓΟΛΙΔΑΣ, ΑΓΙΟΣ ΑΔΡΙΑΝΟΣ ΑΡΓΟΛΙΔΑΣ, ΑΡΓΟΛΙΚΟ ΑΡΓΟΛΙΔΑΣ, ΑΡΙΑ ΝΑΥΠΛΙΑΣ ΑΡΓΟΛΙΔΑΣ, ΑΣΙΝΗ ΑΡΓΟΛΙΔΑΣ, ΑΣΠΡΟΒΡΥΣΗ ΑΡΓΟΛΙΔΑΣ, ΓΑΛΑΝΑΙΙΚΑ ΑΡΓΟΥΣ ΑΡΓΟΛΙΔΑΣ, ΕΞΩΣΤΗΣ ΑΡΓΟΛΙΔΑΣ, ΚΑΠΟΔΙΣΤΡΙΑΣ ΑΡΓΟΛΙΔΑΣ, ΛΕΥΚΑΚΙΑ ΑΡΓΟΛΙΔΑΣ, ΜΟΝΗ ΚΑΡΑΚΑΛΑ ΑΡΓΟΛΙΔΑΣ, ΜΟΝΗ ΠΑΝΑΓΙΑΣ ΑΡΓΟΛΙΔΑΣ, ΝΑΥΠΛΙΟ ΑΡΓΟΛΙΔΑΣ, ΝΕΑ ΤΙΡΥΝΘΟΣ ΑΡΓΟΛΙΔΑΣ, ΝΕΟ ΡΟΕΙΝΟ ΑΡΓΟΛΙΔΑΣ, ΠΑΛΙΟΧΩΡΑ ΑΡΓΟΛΙΔΑΣ, ΠΑΝΑΓΙΑ ΑΓΙΟΥ ΑΝΔΡΙΑΝΟΥ ΑΡΓΟΛΙΔΑΣ, ΠΑΡΑΛΙΑ ΑΣΙΝΗΣ ΑΡΓΟΛΙΔΑΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΑΡΓΟΛΙΔΑΣ, ΠΥΡΓΙΩΤΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΤΙΡΥΝΘΟΣ ΑΡΓΟΛΙΔΑΣ', Prefecture: 'Αργολίδας' },
    { PostalCode: '21200', Area: 'ΑΓΙΑ ΑΙΚΑΤΕΡΙΝΗ ΚΟΥΤΣΟΠΟΔΙΟΥ ΑΡΓΟΛΙΔΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΚΑΡΥΑΣ ΑΡΓΟΛΙΔΑΣ, ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΑΡΓΟΛΙΔΑΣ, ΑΓΡΙΛΙΤΣΑ ΑΡΓΟΛΙΔΑΣ, ΑΕΡΟΔΡΟΜΙΟ ΑΡΓΟΛΙΔΑΣ, ΑΚΟΒΑ ΑΡΓΟΛΙΔΑΣ, ΑΛΜΥΡΟΣ ΑΡΓΟΛΙΔΑΣ, ΑΝΔΡΙΤΣΑ ΑΡΓΟΛΙΔΑΣ, ΑΡΓΟΣ ΑΡΓΟΛΙΔΑΣ, ΑΡΙΑ ΑΡΓΟΥΣ ΑΡΓΟΛΙΔΑΣ, ΒΕΛΑΝΙΔΙΑ ΑΡΓΟΛΙΔΑΣ, ΒΡΟΥΣΤΙΟ ΑΡΓΟΛΙΔΑΣ, ΓΑΛΑΤΙ ΑΡΓΟΛΙΔΑΣ, ΔΑΛΑΜΑΝΑΡΑ ΑΡΓΟΛΙΔΑΣ, ΔΙΧΑΛΙΑ ΑΡΓΟΛΙΔΑΣ, ΕΛΛΗΝΙΚΟ ΑΡΓΟΛΙΔΑΣ, ΖΟΓΚΑ ΑΡΓΟΛΙΔΑΣ, ΗΡΑ ΑΡΓΟΛΙΔΑΣ, ΙΝΑΧΟΣ ΑΡΓΟΛΙΔΑΣ, ΚΑΛΑΜΑΚΙ ΑΡΓΟΛΙΔΑΣ, ΚΑΡΥΑ ΑΡΓΟΛΙΔΑΣ, ΚΕΦΑΛΑΡΙ ΑΡΓΟΛΙΔΑΣ, ΚΙΒΕΡΙ ΑΡΓΟΛΙΔΑΣ, ΚΟΚΛΑ ΑΡΓΟΛΙΔΑΣ, ΚΟΥΓΑΙΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΚΟΥΡΤΑΚΙ ΑΡΓΟΛΙΔΑΣ, ΚΟΥΤΣΟΠΟΔΙ ΑΡΓΟΛΙΔΑΣ, ΚΡΥΑ ΒΡΥΣΗ ΑΡΓΟΛΙΔΑΣ, ΚΡΥΟΝΕΡΙ ΑΡΓΟΛΙΔΑΣ, ΛΑΛΟΥΚΑΣ ΑΡΓΟΛΙΔΑΣ, ΛΙΜΝΕΣ ΑΡΓΟΛΙΔΑΣ, ΜΑΓΟΥΛΑ ΑΡΓΟΛΙΔΑΣ, ΜΑΛΑΝΤΡΕΝΙ ΑΡΓΟΛΙΔΑΣ, ΜΕΡΚΟΥΡΙ ΑΡΓΟΛΙΔΑΣ, ΜΟΝΑΣΤΗΡΑΚΙ ΑΡΓΟΛΙΔΑΣ, ΜΠΟΖΙΟΝΕΛΑΙΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΜΠΟΡΣΑΣ ΑΡΓΟΛΙΔΑΣ, ΜΥΛΟΙ ΑΡΓΟΛΙΔΑΣ, ΝΕΟ ΗΡΑΙΟ ΑΡΓΟΛΙΔΑΣ, ΠΑΝΟΡΑΜΑ ΑΡΓΟΛΙΔΑΣ, ΠΡΟΣΥΜΝΑ ΑΡΓΟΛΙΔΑΣ, ΠΥΡΓΕΛΛΑ ΑΡΓΟΛΙΔΑΣ, ΣΚΑΦΙΔΑΚΙΟ ΑΡΓΟΛΙΔΑΣ, ΣΠΑΝΑΙΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΣΠΗΛΙΩΤΑΚΗΣ ΑΡΓΟΛΙΔΑΣ, ΣΤΑΘΑΙΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΣΤΕΡΝΙΤΣΑ ΑΡΓΟΛΙΔΑΣ, ΣΤΡΑΒΗ ΡΑΧΗ ΑΡΓΟΛΙΔΑΣ, ΣΥΝΟΡΟ ΑΡΓΟΛΙΔΑΣ, ΣΧΙΝΟΧΩΡΙ ΑΡΓΟΛΙΔΑΣ, ΤΗΜΕΝΙ ΑΡΓΟΛΙΔΑΣ, ΤΟΥΡΝΙΚΙ ΑΡΓΟΛΙΔΑΣ, ΤΡΙΣΤΡΑΤΟ ΑΡΓΟΛΙΔΑΣ, ΦΙΧΤΙΟ ΑΡΓΟΛΙΔΑΣ, ΦΡΕΓΚΑΙΝΑ ΑΡΓΟΛΙΔΑΣ, ΧΑΝΤΑΚΙΑ ΒΡΟΥΣΤΙΟΥ ΑΡΓΟΛΙΔΑΣ, ΧΕΛΜΗΣ ΑΡΓΟΛΙΔΑΣ', Prefecture: 'Αργολίδας' },
    { PostalCode: '21300', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΑΡΓΟΛΙΔΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΚΡΑΝΙΔΙΟΥ ΑΡΓΟΛΙΔΑΣ, ΒΛΑΧΟΠΟΥΛΕΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΔΙΔΥΜΑ ΑΡΓΟΛΙΔΑΣ, ΔΟΡΟΥΦΙ ΚΟΙΛΑΔΟΣ ΑΡΓΟΛΙΔΑΣ, ΔΟΡΟΥΦΙ ΚΡΑΝΙΔΙΟΥ ΑΡΓΟΛΙΔΑΣ, ΘΥΝΙ ΑΡΓΟΛΙΔΑΣ, ΚΑΜΠΟΣ ΚΟΙΛΑΔΟΣ ΑΡΓΟΛΙΔΑΣ, ΚΟΙΛΑΔΑ ΑΡΓΟΛΙΔΑΣ, ΚΟΡΩΝΙΔΑ ΝΗΣΟΣ ΑΡΓΟΛΙΔΑΣ, ΚΟΥΝΟΥΠΙ ΑΡΓΟΛΙΔΑΣ, ΚΡΑΝΙΔΙ ΑΡΓΟΛΙΔΑΣ, ΛΑΚΚΕΣ ΑΡΓΟΛΙΔΑΣ, ΠΑΝΟΡΑΜΑ ΕΡΜΙΟΝΙΔΑΣ ΑΡΓΟΛΙΔΑΣ, ΠΑΡΑΛΙΑ ΦΟΥΡΝΩΝ ΑΡΓΟΛΙΔΑΣ, ΠΕΛΕΗ ΑΡΓΟΛΙΔΑΣ, ΠΕΤΡΟΘΑΛΑΣΣΑ ΚΡΑΝΙΔΙΟΥ ΑΡΓΟΛΙΔΑΣ, ΡΑΔΟ ΑΡΓΟΛΙΔΑΣ, ΣΑΛΑΝΤΙΟ ΑΡΓΟΛΙΔΑΣ, ΤΖΕΜΙ ΑΡΓΟΛΙΔΑΣ, ΦΛΑΜΠΟΥΡΑ ΑΡΓΟΛΙΔΑΣ, ΦΟΥΡΝΟΙ ΑΡΓΟΛΙΔΑΣ', Prefecture: 'Αργολίδας' },
    { PostalCode: '22001', Area: 'ΑΓΙΑ ΑΝΑΣΤΑΣΙΑ ΑΡΓΟΛΙΔΑΣ, ΑΓΙΟΙ ΑΣΩΜΑΤΟΙ ΑΡΓΟΛΙΔΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΚΥΝΟΥΡΙΑΣ ΑΡΚΑΔΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΑΡΧΑΙΑΣ ΗΡΑΙΑΣ ΑΡΓΟΛΙΔΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΑΣΤΡΟΥΣ ΑΡΓΟΛΙΔΑΣ, ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΑΣΤΡΟΥΣ ΑΡΓΟΛΙΔΑΣ, ΑΓΙΟΣ ΧΡΙΣΤΟΦΟΡΟΣ ΑΡΓΟΛΙΔΑΣ, ΑΕΤΟΧΩΡΙΟ ΑΡΓΟΛΙΔΑΣ, ΑΡΚΑΔΙΚΟ ΧΩΡΙΟ ΑΡΓΟΛΙΔΑΣ, ΑΣΤΡΟΣ ΑΡΓΟΛΙΔΑΣ, ΒΑΘΙΑ ΑΡΓΟΛΙΔΑΣ, ΒΑΡΒΟΓΛΗ ΑΡΓΟΛΙΔΑΣ, ΙΕΡΑ ΜΟΝΗ ΛΟΥΚΟΥΣ ΑΣΤΡΟΥΣ ΑΡΓΟΛΙΔΑΣ, ΚΑΜΙΝΑΡΙ ΑΡΓΟΛΙΔΑΣ, ΚΑΣΤΑΝΙΤΣΑ ΑΡΓΟΛΙΔΑΣ, ΚΑΤΩ ΒΕΡΒΕΝΑ ΑΡΓΟΛΙΔΑΣ, ΚΑΤΩ ΔΟΛΙΑΝΑ ΑΡΓΟΛΙΔΑΣ, ΛΟΥΛΟΥΔΙΑ ΑΡΓΟΛΙΔΑΣ, ΜΕΛΙΣΣΙ ΑΡΓΟΛΙΔΑΣ, ΜΕΤΑΜΟΡΦΩΣΗ ΑΡΓΟΛΙΔΑΣ, ΝΕΟΧΩΡΙ ΚΟΡΑΚΟΒΟΥΝΙΟΥ ΑΡΓΟΛΙΔΑΣ, ΞΗΡΟΠΗΓΑΔΟ ΑΡΓΟΛΙΔΑΣ, ΟΡΕΙΝΗ ΜΕΛΙΓΟΥ ΑΡΓΟΛΙΔΑΣ, ΠΛΑΚΑ ΞΗΡΟΠΗΓΑΔΟΥ ΑΡΓΟΛΙΔΑΣ, ΠΛΑΤΑΝΟΣ ΑΡΓΟΛΙΔΑΣ, ΠΟΡΤΕΣ ΑΡΓΟΛΙΔΑΣ, ΠΡΟΣΗΛΙΑ ΑΡΓΟΛΙΔΑΣ, ΡΟΥΝΑΙΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΣΙΤΑΙΝΑ ΑΡΓΟΛΙΔΑΣ, ΣΤΟΛΟΣ ΑΡΓΟΛΙΔΑΣ, ΦΟΥΝΤΩΜΑ ΑΡΓΟΛΙΔΑΣ, ΧΑΝΤΑΚΙΑ ΑΣΤΡΟΥΣ ΑΡΓΟΛΙΔΑΣ, ΧΑΡΑΔΡΟΣ ΑΡΓΟΛΙΔΑΣ, ΧΕΙΜΕΡΙΝΗ ΜΕΛΙΓΟΥ ΑΡΓΟΛΙΔΑΣ', Prefecture: 'Αρκαδίας' },
    { PostalCode: '22002', Area: 'ΑΓΡΙΔΙ ΑΡΚΑΔΙΑΣ, ΒΛΑΧΕΡΝΑ ΑΡΚΑΔΙΑΣ, ΔΡΑΚΟΒΟΥΝΙΟ ΑΡΚΑΔΙΑΣ, ΘΕΟΚΤΙΣΤΟ ΑΡΚΑΔΙΑΣ, ΚΑΛΥΒΙΑ ΚΑΡΝΕΣΗ ΑΡΚΑΔΙΑΣ, ΚΑΜΕΝΙΤΣΑ ΑΡΚΑΔΙΑΣ, ΚΑΡΒΟΥΝΙ ΑΡΚΑΔΙΑΣ, ΚΑΡΔΑΡΑΣ ΑΡΚΑΔΙΑΣ, ΛΕΒΙΔΙ ΑΡΚΑΔΙΑΣ, ΝΕΟΣ ΚΑΡΔΑΡΑΣ ΑΡΚΑΔΙΑΣ, ΟΡΧΟΜΕΝΟΣ ΑΡΚΑΔΙΑΣ, ΠΑΛΑΙΟΠΥΡΓΟΣ ΜΑΝΤΙΝΕΙΑΣ ΑΡΚΑΔΙΑΣ, ΠΡΑΣΙΝΟ ΑΡΚΑΔΙΑΣ, ΡΟΥΣΣΗΣ ΑΡΚΑΔΙΑΣ, ΣΙΜΙΑΔΕΣ ΑΡΚΑΔΙΑΣ', Prefecture: 'Αρκαδίας' },
    { PostalCode: '22007', Area: 'ΑΡΑΧΟΒΑ ΑΡΚΑΔΙΑΣ, ΒΛΟΓΓΟΣ ΑΡΚΑΔΙΑΣ, ΔΗΜΗΤΣΑΝΑ ΑΡΚΑΔΙΑΣ, ΖΑΤΟΥΝΑ ΑΡΚΑΔΙΑΣ, ΖΙΓΟΒΙΣΤΙΟ ΑΡΚΑΔΙΑΣ, ΚΑΡΚΑΛΟΥ ΑΡΚΑΔΙΑΣ, ΚΑΤΩ ΡΙΖΟΣΠΗΛΙΑ ΑΡΚΑΔΙΑΣ, ΜΑΡΚΟΣ ΑΡΚΑΔΙΑΣ, ΜΕΛΙΣΣΟΠΕΤΡΑ ΑΡΚΑΔΙΑΣ, ΜΟΝΗ ΑΙΜΥΑΛΩΝ ΑΡΚΑΔΙΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΔΗΜΗΤΣΑΝΑΣ ΑΡΚΑΔΙΑΣ, ΠΑΝΑΓΙΑ ΑΡΚΑΔΙΑΣ, ΡΑΔΟΣ ΑΡΚΑΔΙΑΣ, ΡΙΖΟΣΠΗΛΙΑ ΑΡΚΑΔΙΑΣ', Prefecture: 'Αρκαδίας' },
    { PostalCode: '22008', Area: 'ΑΡΧΑΙΑ ΒΑΝΝΑΙΝΑ ΑΡΚΑΔΙΑΣ, ΒΥΖΙΚΙ ΑΡΚΑΔΙΑΣ, ΓΑΛΑΤΑΣ ΑΡΚΑΔΙΑΣ, ΔΟΞΑ ΑΡΚΑΔΙΑΣ, ΔΩΔΕΚΑΜΕΤΡΟ ΑΡΚΑΔΙΑΣ, ΕΛΑΙΑ ΑΡΚΑΔΙΑΣ, ΚΑΛΛΙΑΝΙ ΑΡΚΑΔΙΑΣ, ΚΑΠΕΛΛΙΤΣΑ ΑΡΚΑΔΙΑΣ, ΚΑΣΤΡΑΚΙ ΑΡΚΑΔΙΑΣ, ΚΑΤΩ ΣΠΑΘΑΡΗΣ ΑΡΚΑΔΙΑΣ, ΛΙΒΑΔΑΚΙ ΑΡΚΑΔΙΑΣ, ΜΕΛΙΔΟΝΙ ΑΡΚΑΔΙΑΣ, ΜΠΕΡΤΣΙΑ ΑΡΚΑΔΙΑΣ, ΜΠΟΥΛΙΑΡΗΣ ΑΡΚΑΔΙΑΣ, ΝΕΑ ΔΑΦΝΗ ΑΡΚΑΔΙΑΣ, ΝΕΟΧΩΡΙΟ  ΓΟΡΤΥΝΙΑΣ ΑΡΚΑΔΙΑΣ, ΠΕΡΔΙΚΟΝΕΡΙ ΑΡΚΑΔΙΑΣ, ΠΤΕΡΙΑ ΑΡΚΑΔΙΑΣ, ΡΑΧΕΣ ΑΡΚΑΔΙΑΣ, ΣΠΑΘΑΡΗΣ ΑΡΚΑΔΙΑΣ, ΣΤΑΥΡΟΔΡΟΜΙΟ ΑΡΚΑΔΙΑΣ, ΣΥΡΙΑΜΑΚΟΣ ΑΡΚΑΔΙΑΣ, ΤΟΥΜΠΙΤΣΙΟ ΑΡΚΑΔΙΑΣ, ΤΡΑΝΗ ΛΑΚΚΑ ΑΡΚΑΔΙΑΣ, ΤΡΙΠΟΤΑΜΙΑ ΑΡΚΑΔΙΑΣ, ΤΡΟΠΑΙΑ ΑΡΚΑΔΙΑΣ, ΦΑΝΑΡΑΚΙ ΑΡΚΑΔΙΑΣ, ΧΑΝΙΑ ΓΟΡΤΥΝΙΑΣ ΑΡΚΑΔΙΑΣ, ΧΩΡΑ ΑΡΚΑΔΙΑΣ', Prefecture: 'Αρκαδίας' },
    { PostalCode: '22010', Area: 'ΑΓΡΙΔΑΚΙ ΑΡΚΑΔΙΑΣ, ΒΥΤΙΝΑ ΑΡΚΑΔΙΑΣ, ΕΛΑΤΗ ΑΡΚΑΔΙΑΣ, ΛΑΣΤΑ ΑΡΚΑΔΙΑΣ, ΜΕΘΥΔΡΙ ΑΡΚΑΔΙΑΣ, ΜΟΝΗ ΑΓΙΩΝ ΘΕΟΔΩΡΩΝ ΑΡΚΑΔΙΑΣ, ΜΟΝΗ ΠΑΝΑΓΙΑΣ ΚΕΡΝΙΤΣΗΣ ΑΡΚΑΔΙΑΣ, ΝΥΜΦΑΣΙΑ ΑΡΚΑΔΙΑΣ, ΠΑΝ ΑΡΚΑΔΙΑΣ, ΠΥΡΓΑΚΙ ΑΡΚΑΔΙΑΣ', Prefecture: 'Αρκαδίας' },
    { PostalCode: '22012', Area: 'ΑΓΙΑ ΣΟΦΙΑ ΑΡΚΑΔΙΑΣ, ΑΓΙΟΣ ΣΩΣΤΗΣ ΑΡΚΑΔΙΑΣ, ΑΚΡΑ ΑΡΚΑΔΙΑΣ, ΑΛΕΑ ΑΡΚΑΔΙΑΣ, ΑΧΟΥΡΙ ΑΡΚΑΔΙΑΣ, ΒΕΡΒΕΝΑ ΑΡΚΑΔΙΑΣ, ΒΟΥΝΟ ΑΡΚΑΔΙΑΣ, ΓΑΡΕΑ ΑΡΚΑΔΙΑΣ, ΓΙΟΚΑΡΑΙΙΚΑ ΑΡΚΑΔΙΑΣ, ΔΕΜΙΡΙ ΑΡΚΑΔΙΑΣ, ΕΠΙΣΚΟΠΗ ΑΡΚΑΔΙΑΣ, ΚΑΜΑΡΙΟ ΑΡΚΑΔΙΑΣ, ΚΑΝΔΑΛΟΣ ΑΡΚΑΔΙΑΣ, ΚΕΡΑΣΙΤΣΑ ΑΡΚΑΔΙΑΣ, ΛΙΘΟΒΟΥΝΙΑ ΑΡΚΑΔΙΑΣ, ΜΑΓΟΥΛΑ ΑΡΚΑΔΙΑΣ, ΜΑΝΘΥΡΕΑ ΑΡΚΑΔΙΑΣ, ΜΑΥΡΙΚΙΟ ΑΡΚΑΔΙΑΣ, ΜΠΟΥΖΑΝΑΙΙΚΑ ΑΡΚΑΔΙΑΣ, ΞΗΡΟΚΑΜΠΙ ΑΡΚΑΔΙΑΣ, ΡΙΖΕΣ ΑΡΚΑΔΙΑΣ, ΣΤΑΔΙΟ ΑΡΚΑΔΙΑΣ, ΣΤΡΙΓΚΟΣ ΑΡΚΑΔΙΑΣ, ΤΖΙΒΑΣ ΑΡΚΑΔΙΑΣ, ΨΗΛΗ ΒΡΥΣΗ ΑΡΚΑΔΙΑΣ', Prefecture: 'Αρκαδίας' },
    { PostalCode: '22015', Area: 'ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΠΑΡΑΛΟΓΓΩΝ ΑΡΚΑΔΙΑΣ, ΑΠΟΣΚΙΑ ΑΡΚΑΔΙΑΣ, ΑΡΣΙΝΑΙΑ ΑΡΚΑΔΙΑΣ, ΒΑΧΛΙΑ ΑΡΚΑΔΙΑΣ, ΒΕΛΗΜΑΧΙ ΑΡΚΑΔΙΑΣ, ΒΙΔΙΑΚΙ ΑΡΚΑΔΙΑΣ, ΒΟΥΤΣΗΣ ΑΡΚΑΔΙΑΣ, ΔΗΜΗΤΡΑ ΑΡΚΑΔΙΑΣ, ΚΑΡΔΑΡΙΤΣΙ ΑΡΚΑΔΙΑΣ, ΚΟΝΤΟΒΑΖΑΙΝΑ ΑΡΚΑΔΙΑΣ, ΜΟΝΑΣΤΗΡΑΚΙ ΑΡΚΑΔΙΑΣ, ΞΗΡΟΚΑΡΙΤΑΙΝΑ ΑΡΚΑΔΙΑΣ, ΠΑΡΑΛΟΓΓΟΙ ΑΡΚΑΔΙΑΣ, ΠΕΛΕΚΙ ΑΡΚΑΔΙΑΣ, ΠΕΡΑ ΒΑΧΛΙΑ ΑΡΚΑΔΙΑΣ, ΠΕΤΑΣ ΑΡΚΑΔΙΑΣ, ΣΟΥΔΕΛΗ ΑΡΚΑΔΙΑΣ, ΣΤΑΥΡΙ ΑΡΚΑΔΙΑΣ', Prefecture: 'Αρκαδίας' },
    { PostalCode: '22027', Area: 'ΑΓΙΩΡΓΙΤΙΚΑ ΑΡΚΑΔΙΑΣ, ΑΓΡΙΑΚΟΝΑ ΑΡΚΑΔΙΑΣ, ΑΘΗΝΑΙΟ ΑΡΚΑΔΙΑΣ, ΑΜΠΕΛΑΚΙ ΑΡΚΑΔΙΑΣ, ΑΡΑΧΑΜΙΤΕΣ ΑΡΚΑΔΙΑΣ, ΑΣΕΑ ΑΡΚΑΔΙΑΣ, ΔΑΦΝΗ ΑΡΚΑΔΙΑΣ, ΔΟΡΙΖΑ ΑΡΚΑΔΙΑΣ, ΚΑΛΤΕΖΕΣ ΑΡΚΑΔΙΑΣ, ΚΑΤΩ ΑΣΕΑ ΑΡΚΑΔΙΑΣ, ΚΕΡΑΣΤΑΡΗΣ ΑΡΚΑΔΙΑΣ, ΚΟΥΒΕΛΙΑ ΑΡΚΑΔΙΑΣ, ΛΙΑΝΟΣ ΑΡΚΑΔΙΑΣ, ΜΑΝΑΡΗΣ ΑΡΚΑΔΙΑΣ, ΜΑΝΙΑΤΗΣ ΑΡΚΑΔΙΑΣ, ΜΑΡΜΑΡΙΑ ΑΡΚΑΔΙΑΣ, ΜΑΥΡΟΓΙΑΝΝΗΣ ΑΡΚΑΔΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΝΙΚΟΛΑΟΥ ΚΑΛΤΕΖΩΝ ΑΡΚΑΔΙΑΣ, ΠΑΛΑΙΟΧΟΥΝΗ ΑΡΚΑΔΙΑΣ, ΠΑΠΑΡΗΣ ΑΡΚΑΔΙΑΣ', Prefecture: 'Αρκαδίας' },
    { PostalCode: '22028', Area: 'ΑΓΑΛΩ ΑΡΚΑΔΙΑΣ, ΑΓΙΟΝΕΡΙ ΑΡΚΑΔΙΑΣ, ΑΕΤΟΡΡΑΧΗ ΑΡΚΑΔΙΑΣ, ΑΡΑΠΗΔΕΣ ΑΡΚΑΔΙΑΣ, ΙΑΜΑΤΙΚΕΣ ΠΗΓΕΣ ΗΡΑΙΑΣ ΑΡΚΑΔΙΑΣ, ΚΑΚΟΥΡΑΙΙΚΑ ΑΡΚΑΔΙΑΣ, ΚΟΚΚΙΝΟΡΡΑΧΗ ΑΡΚΑΔΙΑΣ, ΚΟΚΚΟΡΑΣ ΑΡΚΑΔΙΑΣ, ΛΙΘΑΡΟΣ ΑΡΚΑΔΙΑΣ, ΛΙΟΔΩΡΑ ΑΡΚΑΔΙΑΣ, ΛΟΥΤΡΑ ΗΡΑΙΑΣ ΑΡΚΑΔΙΑΣ, ΛΥΚΟΥΡΕΣΗΣ ΑΡΚΑΔΙΑΣ, ΛΥΣΣΑΡΕΑ ΑΡΚΑΔΙΑΣ, ΛΩΤΗΣ ΑΡΚΑΔΙΑΣ, ΜΠΑΡΔΑΚΙ ΑΡΚΑΔΙΑΣ, ΟΧΘΙΑ ΑΡΚΑΔΙΑΣ, ΠΑΛΟΥΜΠΑ ΑΡΚΑΔΙΑΣ, ΠΑΠΠΑΔΑΣ ΑΡΚΑΔΙΑΣ, ΠΑΡΝΑΣΣΟΣ ΑΡΚΑΔΙΑΣ, ΠΥΡΡΗΣ ΑΡΚΑΔΙΑΣ, ΡΑΠΤΗΣ ΑΡΚΑΔΙΑΣ, ΣΑΡΑΚΙΝΙΟ ΗΡΑΙΑΣ ΑΡΚΑΔΙΑΣ, ΣΑΡΛΑΙΙΚΑ ΑΡΚΑΔΙΑΣ, ΣΕΡΒΟΣ ΑΡΚΑΔΙΑΣ, ΧΡΥΣΟΧΩΡΙΟ ΑΡΚΑΔΙΑΣ, ΨΑΡΙ ΓΟΡΤΥΝΙΑΣ ΑΡΚΑΔΙΑΣ, ΨΑΡΙ ΠΑΛΑΜΑΡΙΟΥ ΑΡΚΑΔΙΑΣ', Prefecture: 'Αρκαδίας' },
    { PostalCode: '22029', Area: 'ΠΑΛΑΙΟΧΩΡΑ ΤΥΡΟΥ ΑΡΓΟΛΙΔΑΣ, ΠΑΡΑΛΙΑ ΣΑΠΟΥΝΑΚΑΙΙΚΩΝ ΑΡΓΟΛΙΔΑΣ, ΠΑΡΑΛΙΑ ΤΥΡΟΥ ΑΡΓΟΛΙΔΑΣ, ΠΕΡΑ ΜΕΛΑΝΑ ΑΡΓΟΛΙΔΑΣ, ΠΕΤΡΑ ΑΡΓΟΛΙΔΑΣ, ΣΑΠΟΥΝΑΚΑΙΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΤΥΡΟΣ ΑΡΓΟΛΙΔΑΣ', Prefecture: 'Αρκαδίας' },
    { PostalCode: '22100', Area: 'ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΚΥΝΟΥΡΙΑΣ ΑΡΓΟΛΙΔΑΣ, ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΜΑΝΤΙΝΕΙΑΣ ΑΡΚΑΔΙΑΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΑΡΚΑΔΙΑΣ, ΑΓΙΩΡΓΙΤΙΚΑ ΑΡΚΑΔΙΑΣ, ΑΛΩΝΙΣΤΑΙΝΑ ΑΡΚΑΔΙΑΣ, ΑΡΤΕΜΙΣΙΟ ΑΡΚΑΔΙΑΣ, ΒΑΛΤΕΤΣΙ ΑΡΚΑΔΙΑΣ, ΔΑΒΙΑ ΑΡΚΑΔΙΑΣ, ΕΥΑΝΔΡΟ ΑΡΚΑΔΙΑΣ, ΖΕΥΓΟΛΑΤΕΙΟ ΑΡΚΑΔΙΑΣ, ΘΑΝΑΣ ΑΡΚΑΔΙΑΣ, ΚΑΤΩ ΔΑΒΙΑ ΑΡΚΑΔΙΑΣ, ΚΑΨΑΣ ΑΡΚΑΔΙΑΣ, ΛΟΥΚΑΣ ΑΡΚΑΔΙΑΣ, ΜΑΙΝΑΛΟ ΑΡΚΑΔΙΑΣ, ΜΑΚΡΗ ΑΡΚΑΔΙΑΣ, ΜΑΝΤΑΙΙΚΑ ΑΡΚΑΔΙΑΣ, ΜΕΡΚΟΒΟΥΝΙΟ ΑΡΚΑΔΙΑΣ, ΜΗΛΙΑ ΛΟΥΚΑ ΑΡΚΑΔΙΑΣ, ΜΗΛΙΑ ΤΡΙΠΟΛΕΩΣ ΑΡΚΑΔΙΑΣ, ΜΟΝΗ ΒΑΡΣΩΝ ΑΡΚΑΔΙΑΣ, ΜΟΝΗ ΕΠΑΝΩ ΧΡΕΠΑΣ ΑΡΚΑΔΙΑΣ, ΝΕΟΧΩΡΙΟ ΜΑΝΤΙΝΕΙΑΣ ΑΡΚΑΔΙΑΣ, ΠΑΛΛΑΝΤΙΟ ΑΡΚΑΔΙΑΣ, ΠΑΡΘΕΝΙΟ ΑΡΚΑΔΙΑΣ, ΠΑΡΟΡΙΟ ΑΡΚΑΔΙΑΣ, ΠΕΛΑΓΟΣ ΑΡΚΑΔΙΑΣ, ΠΕΡΘΩΡΙΟ ΑΡΚΑΔΙΑΣ, ΠΕΡΠΑΤΑΡΗΣ ΑΡΚΑΔΙΑΣ, ΠΙΑΝΑ ΑΡΚΑΔΙΑΣ, ΠΙΚΕΡΝΗΣ ΑΡΚΑΔΙΑΣ, ΡΟΕΙΝΟ ΑΡΚΑΔΙΑΣ, ΣΑΓΚΑΣ ΑΡΚΑΔΙΑΣ, ΣΑΝΑΤΟΡΙΟ ΜΑΚΡΗΣ ΑΡΚΑΔΙΑΣ, ΣΙΛΙΜΝΑ ΑΡΚΑΔΙΑΣ, ΣΚΟΠΗ ΑΡΚΑΔΙΑΣ, ΣΤΕΝΟ ΑΡΚΑΔΙΑΣ, ΤΡΙΠΟΛΗ ΑΡΚΑΔΙΑΣ, ΤΣΕΛΕΠΑΚΟΣ ΑΡΚΑΔΙΑΣ, ΧΑΝΙΑ ΣΚΟΠΗΣ ΑΡΚΑΔΙΑΣ, ΧΡΥΣΟΒΙΤΣΙ ΑΡΚΑΔΙΑΣ', Prefecture: 'Αρκαδίας' },
    { PostalCode: '22200', Area: 'ΑΝΘΟΧΩΡΙ ΑΡΚΑΔΙΑΣ, ΑΠΙΔΙΤΣΑ ΑΡΚΑΔΙΑΣ, ΒΑΓΓΟΣ ΑΡΚΑΔΙΑΣ, ΒΡΥΣΟΥΛΕΣ ΑΡΚΑΔΙΑΣ, ΓΕΦΥΡΑ ΑΡΚΑΔΙΑΣ, ΓΕΦΥΡΑΚΙΑ ΑΡΚΑΔΙΑΣ, ΔΕΡΒΕΝΙ ΑΡΚΑΔΙΑΣ, ΘΩΚΝΙΑ ΑΡΚΑΔΙΑΣ, ΙΣΩΜΑ ΚΑΡΥΩΝ ΑΡΚΑΔΙΑΣ, ΚΑΡΑΤΟΥΛΑΣ ΜΕΓΑΛΟΠΟΛΗΣ ΑΡΚΑΔΙΑΣ, ΚΑΡΥΕΣ ΜΕΓΑΛΟΠΟΛΗΣ ΑΡΚΑΔΙΑΣ, ΚΑΤΩ ΚΑΡΥΕΣ ΑΡΚΑΔΙΑΣ, ΚΑΤΩ ΜΑΚΡΥΣΙ ΑΡΚΑΔΙΑΣ, ΜΑΚΡΥΣΙΟ ΑΡΚΑΔΙΑΣ, ΜΑΛΛΩΤΑ ΑΡΚΑΔΙΑΣ, ΜΑΡΑΘΟΥΣΣΑ ΑΡΚΑΔΙΑΣ, ΜΕΓΑΛΟΠΟΛΗ ΑΡΚΑΔΙΑΣ, ΝΕΑ ΕΚΚΛΗΣΟΥΛΑ ΑΡΚΑΔΙΑΣ, ΝΕΟΧΩΡΙΟ ΛΥΚΟΣΟΥΡΑΣ ΑΡΚΑΔΙΑΣ, ΟΡΕΣΤΕΙΟ ΑΡΚΑΔΙΑΣ, ΠΑΡΑΔΕΙΣΙΑ ΑΡΚΑΔΙΑΣ, ΠΕΡΙΒΟΛΙΑ ΑΡΚΑΔΙΑΣ, ΠΛΑΚΑ ΜΕΓΑΛΟΠΟΛΗΣ ΑΡΚΑΔΙΑΣ, ΡΑΨΟΜΜΑΤΗΣ ΑΡΚΑΔΙΑΣ, ΣΟΥΛΙ ΑΡΚΑΔΙΑΣ, ΣΟΥΛΟΣ ΑΡΚΑΔΙΑΣ, ΤΡΙΛΟΦΟ ΑΡΚΑΔΙΑΣ, ΤΡΙΠΟΤΑΜΟ ΑΡΚΑΔΙΑΣ, ΦΑΝΑΙΤΗ ΑΡΚΑΔΙΑΣ, ΧΙΡΑΔΕΣ ΑΡΚΑΔΙΑΣ, ΧΡΑΝΟΙ ΑΡΚΑΔΙΑΣ, ΧΩΡΕΜΗΣ ΑΡΚΑΔΙΑΣ', Prefecture: 'Αρκαδίας' },
    { PostalCode: '22300', Area: 'ΑΜΥΓΔΑΛΙΑ ΑΡΓΟΛΙΔΑΣ, ΒΙΓΛΑ ΑΡΓΟΛΙΔΑΣ, ΒΛΗΣΙΔΙΑ ΑΡΓΟΛΙΔΑΣ, ΒΟΣΚΙΝΑ ΑΡΓΟΛΙΔΑΣ, ΚΟΥΝΟΥΠΙΑ ΑΡΓΟΛΙΔΑΣ, ΛΕΩΝΙΔΙ ΑΡΓΟΛΙΔΑΣ, ΛΙΒΑΔΙ ΠΕΡΑ ΜΕΛΑΝΩΝ ΑΡΓΟΛΙΔΑΣ, ΛΙΒΑΔΙ ΠΡΑΓΜΑΤΕΥΤΗ ΑΡΓΟΛΙΔΑΣ, ΛΟΓΓΑΡΙ ΑΡΓΟΛΙΔΑΣ, ΜΑΡΙ ΑΡΓΟΛΙΔΑΣ, ΜΟΝΗ ΕΛΩΝΗΣ ΛΑΚΩΝΙΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΚΥΝΟΥΡΙΑΣ ΑΡΓΟΛΙΔΑΣ, ΠΕΛΕΤΑ ΑΡΓΟΛΙΔΑΣ, ΠΗΓΑΔΙ ΑΡΓΟΛΙΔΑΣ, ΠΛΑΤΑΝΑΚΙ ΑΡΓΟΛΙΔΑΣ, ΠΟΥΛΙΘΡΑ ΑΡΓΟΛΙΔΑΣ, ΠΡΑΓΜΑΤΕΥΤΗΣ ΑΡΓΟΛΙΔΑΣ, ΠΥΡΓΟΥΔΙ ΑΡΓΟΛΙΔΑΣ, ΣΑΜΠΑΤΙΚΗ ΑΡΓΟΛΙΔΑΣ, ΤΣΙΤΑΛΙΑ ΑΡΓΟΛΙΔΑΣ, ΦΥΛΑΤΙΚΑ ΑΡΓΟΛΙΔΑΣ, ΦΩΚΙΑΝΟ ΑΡΓΟΛΙΔΑΣ', Prefecture: 'Αρκαδίας' },
    { PostalCode: '47040', Area: 'ΒΑΛΜΑΔΑ ΑΡΤΑΣ, ΕΛΑΙΟΦΥΤΟ ΦΛΩΡΙΑΔΟΣ ΑΡΤΑΣ, ΕΛΑΙΟΧΩΡΙ ΑΡΤΑΣ, ΘΕΡΙΑΚΗΣΙ ΑΡΤΑΣ, ΚΑΘΑΡΟΒΟΥΝΙ ΦΛΩΡΙΑΔΟΣ ΑΡΤΑΣ, ΚΑΣΤΡΙΩΤΙΣΣΑ ΑΡΤΑΣ, ΚΟΜΠΟΤΙ ΑΡΤΑΣ, ΛΑΓΚΑΔΑ ΜΕΝΙΔΙΟΥ ΑΡΤΑΣ, ΛΑΓΚΑΔΑ ΜΗΛΙΑΝΩΝ ΑΡΤΑΣ, ΜΑΡΛΕΣΙ ΑΡΤΑΣ, ΠΑΛΑΙΑ ΦΛΩΡΙΑΔΑ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΑΙΟΚΑΣΤΡΟ ΑΙΤΩΛ/ΝΙΑΣ, ΣΕΛΛΑΔΕΣ ΑΡΤΑΣ, ΣΥΚΟΥΛΑ ΑΡΤΑΣ, ΦΛΩΡΙΑΔΑ ΑΡΤΑΣ, ΧΡΥΣΟΠΗΓΗ ΑΡΤΑΣ, ΧΡΥΣΟΡΡΑΧΗ ΑΡΤΑΣ', Prefecture: 'Άρτας' },
    { PostalCode: '47041', Area: 'ΝΕΟΧΩΡΙ ΑΡΤΑΣ ΑΡΤΑΣ', Prefecture: 'Άρτας' },
    { PostalCode: '47044', Area: 'ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΚΑΛΕΝΤΙΝΗΣ ΑΡΤΑΣ, ΑΓΙΟΣ ΒΛΑΣΙΟΣ ΑΡΤΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΔΙΧΟΜΟΙΡΙΟΥ ΑΡΤΑΣ, ΑΝΩ ΚΑΛΕΝΤΙΝΗ ΑΡΤΑΣ, ΑΣΦΑΚΕΡΟ ΑΡΤΑΣ, ΒΑΡΚΑ ΑΡΤΑΣ, ΒΕΛΕΝΤΖΙΚΟ ΑΡΤΑΣ, ΔΙΧΟΜΟΙΡΙ ΑΡΤΑΣ, ΕΠΑΝΩ ΣΕΣΗ ΑΡΤΑΣ, ΖΥΓΟΣ ΔΙΧΟΜΟΙΡΙΟΥ ΑΡΤΑΣ, ΚΑΡΠΙΝΟ ΑΡΤΑΣ, ΚΟΚΚΙΝΟ ΛΙΘΑΡΙ ΑΡΤΑΣ, ΚΟΥΦΑΛΟΣ ΑΡΤΑΣ, ΚΡΑΝΙΕΣ ΑΡΤΑΣ, ΚΡΙΣΕΛΙΑ ΑΡΤΑΣ, ΛΙΤΕΣΙΟ ΑΡΤΑΣ, ΜΕΓΑΣ ΚΑΜΠΟΣ ΑΡΤΑΣ, ΞΗΡΟΚΑΜΠΟΣ ΓΟΡΓΟΜΥΛΟΥ ΑΡΤΑΣ, ΞΗΡΟΚΑΜΠΟΣ ΔΙΧΟΜΟΙΡΙΟΥ ΑΡΤΑΣ, ΠΕΡΑ ΚΑΛΕΝΤΙΝΗ ΑΡΤΑΣ, ΠΗΓΗ ΒΕΛΕΝΤΖΙΚΟΥ ΑΡΤΑΣ, ΠΛΑΚΟΥΤΣΑΙΙΚΑ ΑΡΤΑΣ, ΠΡΟΣΗΛΙΑ ΑΡΤΑΣ, ΡΕΤΣΙΑΝΑ ΑΡΤΑΣ, ΣΕΛΙΟ ΑΡΤΑΣ, ΣΕΣΗ ΑΡΤΑΣ, ΦΙΣΟΤΑ ΑΡΤΑΣ', Prefecture: 'Άρτας' },
    { PostalCode: '47045', Area: 'ΑΓΓΕΛΑΙΙΚΑ ΑΡΤΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΑΘΑΜΑΝΙΟΥ ΑΡΤΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΚΥΨΕΛΗΣ ΑΡΤΑΣ, ΑΓΙΟΣ ΜΗΝΑΣ ΑΡΤΑΣ, ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΑΡΤΑΣ, ΑΓΙΟΣ ΧΑΡΑΛΑΜΠΟΣ ΑΡΤΑΣ, ΑΘΑΜΑΝΙ ΑΡΤΑΣ, ΑΜΠΕΛΙΑ ΑΘΑΜΑΝΙΟΥ ΑΡΤΑΣ, ΑΜΠΕΛΙΑ ΠΑΛΑΙΟΚΑΤΟΥΝΟΥ ΑΡΤΑΣ, ΑΡΙΑ ΑΡΤΑΣ, ΒΟΥΛΓΑΡΕΛΙ ΑΡΤΑΣ, ΓΙΑΝΝΙΤΣΙ ΑΡΤΑΣ, ΓΩΝΙΑ ΚΑΤΩ ΑΘΑΜΑΝΙΟΥ ΑΡΤΑΣ, ΓΩΝΙΑ ΠΑΝΑΓΙΑΣ ΑΡΤΑΣ, ΔΡΟΣΙΑ ΜΕΣΟΥΝΤΑΣ ΑΡΤΑΣ, ΖΑΛΟΣ ΑΡΤΑΣ, ΘΑΝΑΣΙΑ ΑΡΤΑΣ, ΘΕΟΔΩΡΙΑΝΑ ΑΡΤΑΣ, ΚΑΛΛΟΝΗ ΑΡΤΑΣ, ΚΑΜΠΟΣ ΒΟΥΡΓΑΡΕΛΙΟΥ ΑΡΤΑΣ, ΚΑΜΠΟΣ ΣΚΟΥΠΑΣ ΑΡΤΑΣ, ΚΑΡΥΑ ΑΡΤΑΣ, ΚΑΤΩ ΧΩΡΑ ΑΡΤΑΣ, ΚΑΨΑΛΑ ΑΡΤΑΣ, ΚΕΡΑΝΙ ΑΡΤΑΣ, ΚΟΡΑΚΑΔΑ ΑΡΤΑΣ, ΚΟΥΒΕΛΙ ΑΡΤΑΣ, ΚΥΨΕΛΗ ΑΡΤΑΣ, ΛΟΓΑΡΟΥ ΑΡΤΑΣ, ΛΟΥΤΣΑ ΑΡΤΑΣ, ΜΕΣΟΥΝΤΑ ΑΡΤΑΣ, ΜΗΤΣΟΡΟΥΒΑ ΑΡΤΑΣ, ΜΟΝΗ ΕΥΑΓΓΕΛΙΣΤΡΙΑΣ ΑΡΤΑΣ, ΝΕΒΡΟΠΟΛΗ ΑΡΤΑΣ, ΟΜΑΛΗ ΑΡΤΑΣ, ΠΑΛΑΙΟΚΑΤΟΥΝΟ ΑΡΤΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΑΘΑΜΑΝΙΟΥ ΑΡΤΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΒΟΥΛΓΑΡΕΛΙΟΥ ΑΡΤΑΣ, ΠΑΝΑΓΙΑ ΚΑΨΑΛΩΝ ΑΡΤΑΣ, ΠΕΡΑ ΝΕΒΡΟΠΟΛΗ ΑΡΤΑΣ, ΠΕΤΡΑΛΩΝΟ ΑΡΤΑΣ, ΠΕΥΚΟΣ ΑΡΤΑΣ, ΠΗΓΗ ΤΕΤΡΑΚΩΜΟΥ ΑΡΤΑΣ, ΠΛΑΤΑΝΟΣ ΑΘΑΜΑΝΙΟΥ ΑΡΤΑΣ, ΠΟΤΑΜΙΑ ΑΡΤΑΣ, ΡΟΥΠΑΚΙΑ ΑΡΤΑΣ, ΣΚΑΛΟΥΛΑ ΑΡΤΑΣ, ΣΚΑΡΠΑΡΙ ΑΡΤΑΣ, ΣΚΙΑΔΑΔΕΣ ΑΡΤΑΣ, ΣΤΕΝΟ ΑΡΤΑΣ, ΤΑΥΛΑ ΑΡΤΑΣ, ΤΕΛΗΣΙΟ ΑΘΑΜΑΝΙΟΥ ΑΡΤΑΣ, ΤΕΛΗΣΙΟ ΤΕΤΡΑΚΩΜΟΥ ΑΡΤΑΣ, ΤΕΡΠΝΑΣ ΑΡΤΑΣ, ΤΕΤΡΑΚΩΜΟ ΑΡΤΑΣ, ΦΩΤΑΙΙΚΑ ΑΡΤΑΣ', Prefecture: 'Άρτας' },
    { PostalCode: '47047', Area: 'ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΑΡΤΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΜΕΓΑΛΟΧΑΡΗΣ ΑΡΤΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΚΟΜΠΟΤΙΟΥ ΑΡΤΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΠΗΓΩΝ ΑΡΤΑΣ, ΑΗΔΟΝΙΑ ΑΡΤΑΣ, ΑΛΩΝΑΚΙ ΑΡΤΑΣ, ΑΛΩΝΙΑ ΜΗΛΙΑΝΩΝ ΑΡΤΑΣ, ΑΛΩΝΙΑ ΣΕΛΛΑΔΩΝ ΑΡΤΑΣ, ΑΝΩ ΚΑΡΥΕΣ ΑΡΤΑΣ, ΑΣΤΡΟΧΩΡΙ ΑΡΤΑΣ, ΑΦΡΟΞΥΛΙΑ ΑΡΤΑΣ, ΒΕΛΑΝΙΔΙΑ ΑΡΤΑΣ, ΒΟΥΛΙΑΓΜΕΝΟ ΑΡΤΑΣ, ΒΟΥΤΑΝΙΑΔΑ ΑΡΤΑΣ, ΒΡΥΣΟΥΛΑ ΑΡΤΑΣ, ΔΙΛΟΦΟ ΠΗΓΩΝ ΑΡΤΑΣ, ΕΛΑΤΗ ΑΡΤΑΣ, ΙΤΕΑ ΑΡΤΑΣ, ΚΑΝΑΛΙΑ ΑΡΤΑΣ, ΚΑΣΙΑΝΟΣ ΑΡΤΑΣ, ΚΑΣΤΑΝΕΑ ΑΡΤΑΣ, ΚΑΣΤΑΝΙΕΣ ΑΡΤΑΣ, ΚΡΥΑ ΒΡΥΣΗ ΑΡΤΑΣ, ΛΑΜΠΙΡΙ ΑΡΤΑΣ, ΜΕΓΑΛΟΧΑΡΗ ΑΡΤΑΣ, ΜΕΣΟΠΥΡΓΟΣ ΑΡΤΑΣ, ΜΗΛΕΑ ΚΑΣΤΑΝΙΑΣ ΑΡΤΑΣ, ΜΗΛΙΑΝΑ ΑΡΤΑΣ, ΜΗΛΙΕΣ ΑΡΤΑΣ, ΠΑΛΑΙΟΜΥΛΙΑ ΑΡΤΑΣ, ΠΑΛΑΙΟΜΥΛΟΣ ΑΡΤΑΣ, ΠΕΡΔΙΚΑ ΑΡΤΑΣ, ΠΕΤΡΟΥ ΑΡΤΑΣ, ΠΗΓΕΣ ΑΡΤΑΣ, ΠΛΑΤΑΝΟΣ ΑΣΤΡΟΧΩΡΙΟΥ ΑΡΤΑΣ, ΠΟΤΙΣΤΙΚΑ ΜΕΓΑΛΟΧΑΡΗΣ ΑΡΤΑΣ, ΠΥΡΓΟΣ ΑΡΤΑΣ, ΡΙΣΕΣΙ ΑΡΤΑΣ, ΣΤΑΥΡΟΒΡΥΣΗ ΑΡΤΑΣ, ΤΣΕΛΙΓΓΑΔΕΣ ΑΡΤΑΣ, ΦΡΑΞΟ ΑΡΤΑΣ, ΧΟΥΤΙΑΝΑ ΑΡΤΑΣ', Prefecture: 'Άρτας' },
    { PostalCode: '47100', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΑΡΤΑΣ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΓΟΡΓΟΜΥΛΟΥ ΑΡΤΑΣ, ΑΓΙΑ ΤΡΙΑΔΑ ΑΡΤΑΣ, ΑΓΙΟΙ ΑΝΑΡΓΥΡΟΙ ΑΡΤΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΓΛΥΚΟΡΡΙΖΟΥ ΑΡΤΑΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΑΡΤΑΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΚΑΤΩ ΚΑΛΕΝΤΙΝΗΣ ΑΡΤΑΣ, ΑΓΙΟΣ ΣΠΥΡΙΔΩΝΑΣ ΑΡΤΑΣ, ΑΚΡΟΠΟΤΑΜΙΑ ΑΡΤΑΣ, ΑΚΡΟΠΟΤΑΜΙΑ ΚΛΕΙΔΙΟΥ ΑΡΤΑΣ, ΑΛΥΚΗ ΑΡΤΑΣ, ΑΜΦΙΘΕΑ ΑΡΤΑΣ, ΑΝΔΡΕΑΣ ΑΡΤΑΣ, ΑΝΕΖΑ ΑΡΤΑΣ, ΑΝΕΜΟΡΡΑΧΗ ΑΡΤΑΣ, ΑΝΘΟΤΟΠΟΣ ΑΡΤΑΣ, ΑΝΩ ΑΓΙΟΙ ΑΝΑΡΓΥΡΟΙ ΑΡΤΑΣ, ΑΠΟΜΕΡΟ ΑΡΤΑΣ, ΑΡΤΑ ΑΡΤΑΣ, ΒΑΘΥΚΑΜΠΟΣ ΑΡΤΑΣ, ΒΑΘΥΠΕΔΟ ΑΡΤΑΣ, ΒΙΓΛΑ ΑΡΤΑΣ, ΒΛΑΧΕΡΝΑ ΑΡΤΑΣ, ΒΡΥΣΟΥΛΕΣ ΑΡΤΑΣ, ΓΑΒΡΙΑ ΑΡΤΑΣ, ΓΛΥΚΟΡΡΙΖΟ ΑΡΤΑΣ, ΓΡΑΜΜΕΝΤΣΑ ΑΡΤΑΣ, ΓΡΙΜΠΟΒΟ ΑΡΤΑΣ, ΔΑΦΝΗ ΑΡΤΑΣ, ΔΑΦΝΟΥΛΑ ΑΡΤΑΣ, ΔΙΑΣΕΛΛΑ ΑΡΤΑΣ, ΔΙΣΤΡΑΤΟ ΑΡΤΑΣ, ΔΟΚΙΜΙΑ ΑΡΤΑΣ, ΔΡΥΩΝ ΑΡΤΑΣ, ΕΛΑΤΟΣ ΑΡΤΑΣ, ΕΛΕΟΥΣΑ ΑΡΤΑΣ, ΖΑΡΚΑΔΑΙΙΚΑ ΑΡΤΑΣ, ΖΥΓΟΣ ΜΑΡΚΙΝΙΑΔΑΣ ΑΡΤΑΣ, ΘΑΝΑΣΑΙΙΚΑ ΑΡΤΑΣ, ΚΑΚΟΒΑΤΟΣ ΑΡΤΑΣ, ΚΑΛΟΒΑΤΟΣ ΑΡΤΑΣ, ΚΑΛΟΓΕΡΙΚΟ ΑΡΤΑΣ, ΚΑΛΟΜΟΔΙΑ ΑΡΤΑΣ, ΚΑΤΩ ΚΑΛΕΝΤΙΝΗ ΑΡΤΑΣ, ΚΕΝΤΡΙΚΟ ΑΡΤΑΣ, ΚΕΡΑΜΑΤΕΣ ΑΡΤΑΣ, ΚΙΡΚΙΖΑΤΕΣ ΑΡΤΑΣ, ΚΛΕΙΣΤΟ ΑΡΤΑΣ, ΚΟΜΜΕΝΟ ΑΡΤΑΣ, ΚΟΡΦΟΒΟΥΝΙ ΑΡΤΑΣ, ΚΟΡΩΝΗΣΙΑ ΑΡΤΑΣ, ΚΡΥΟΝΕΡΙ ΑΡΤΑΣ, ΚΩΣΤΑΚΙΟΙ ΑΡΤΑΣ, ΛΑΓΚΑΔΙΑ ΚΕΝΤΡΙΚΟΥ ΑΡΤΑΣ, ΛΙΜΙΝΗ ΑΡΤΑΣ, ΛΟΥΤΡΟΤΟΠΟΣ ΑΡΤΑΣ, ΜΑΡΑΘΟΒΟΥΝΙ ΑΡΤΑΣ, ΜΑΡΚΙΝΙΑΔΑ ΑΡΤΑΣ, ΜΕΓΑΡΧΗ ΑΡΤΑΣ, ΜΕΓΚΛΑ ΑΡΤΑΣ, ΜΕΛΑΤΕΣ ΑΡΤΑΣ, ΜΟΝΗ ΓΕΝΝΗΣΕΩΣ ΘΕΟΤΟΚΟΥ ΑΡΤΑΣ, ΜΥΤΙΚΑΣ ΑΡΤΑΣ, ΝΕΟΣ ΣΥΝΟΙΚΙΣΜΟΣ ΚΟΜΜΕΝΟΥ ΑΡΤΑΣ, ΝΕΟΣ ΣΥΝΟΙΚΙΣΜΟΣ ΛΟΥΤΡΟΤΟΠΟΥ ΑΡΤΑΣ, ΝΕΟΧΩΡΑΚΙ ΑΡΤΑΣ, ΠΑΛΑΙΟΣΚΑΜΙΑ ΑΡΤΑΣ, ΠΑΧΥΚΑΛΑΜΟΣ ΑΡΤΑΣ, ΠΕΡΑΝΘΗ ΑΡΤΑΣ, ΠΛΗΣΙΟΙ ΑΡΤΑΣ, ΠΟΛΥΔΡΟΣΟ ΑΡΤΑΣ, ΠΟΥΡΝΑΡΙ ΑΡΤΑΣ, ΠΤΕΡΗ ΑΡΤΑΣ, ΡΑΧΗ ΑΡΤΑΣ, ΡΟΚΚΑ ΑΡΤΑΣ, ΡΟΥΜΑΝΙΑ ΑΡΤΑΣ, ΣΑΛΑΩΡΑ ΑΡΤΑΣ, ΣΕΛΙΝΑ ΑΡΤΑΣ, ΣΚΑΜΝΙΑ ΑΡΤΑΣ, ΣΥΓΓΟΥΝΕΙΚΑ ΑΡΤΑΣ, ΣΥΚIΕΣ ΑΡΤΑΣ, ΤΖΑΠΑΔΑ ΑΡΤΑΣ, ΤΡΑΠΕΖΑΚΙ ΑΡΤΑΣ, ΦΑΓΚΟΣ ΑΡΤΑΣ, ΦΤΕΡΗ ΑΡΤΑΣ, ΦΩΤΕΙΝΟ ΑΡΤΑΣ, ΨΑΘΟΤΟΠΙ ΑΡΤΑΣ', Prefecture: 'Άρτας' },
    { PostalCode: '47150', Area: 'ΆΜΜΟΣ ΑΡΤΑΣ, ΔΑΦΝΩΤΉ ΑΡΤΑΣ, ΚΑΘΑΡΟΒΟΎΝΙΟΝ ΑΡΤΑΣ, ΚΑΛΛΙΘΈΑ ΠΙΣΤΙΑΝΏΝ ΑΡΤΑΣ, ΚΆΜΠΟΣ ΣΚΟΎΠΑΣ ΑΡΤΑΣ, ΚΆΡΔΑΜΟΣ ΑΡΤΑΣ, ΠΑΛΑΙΟΧΏΡΙΟΝ ΣΚΟΎΠΑΣ ΑΡΤΑΣ, ΠΕΡΔΙΚΆΡΙΟΝ ΑΡΤΑΣ, ΠΙΣΤΙΑΝΆ ΑΡΤΑΣ, ΠΛΑΤΑΝΆΚΙΑ ΑΡΤΑΣ, ΠΛΑΤΆΝΙΑ ΑΡΤΑΣ, ΠΡΟΦΉΤΗΣ ΗΛΊΑΣ ΑΡΤΑΣ, ΡΟΔΑΥΓΉ ΑΡΤΑΣ, ΣΚΟΎΠΑ ΑΡΤΑΣ, ΣΟΥΜΈΣΙΟΝ ΑΡΤΑΣ, ΤΣΙΑΠΑΛΑΊΪΚΑ ΑΡΤΑΣ, ΦΑΝΕΡΩΜΈΝΗ ΑΡΤΑΣ, ΦΡΆΞΟΣ ΑΡΤΑΣ', Prefecture: 'Άρτας' },
    { PostalCode: '10431', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10432', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10433', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10434', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10435', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10436', Area: 'ΑΘΗΝΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '10437', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10438', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10439', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10440', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10441', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10442', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10443', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10444', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10445', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10446', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10447', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10551', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10552', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10553', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10554', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10555', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10556', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10557', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10558', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10559', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10560', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10561', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10562', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10563', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10564', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10671', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10672', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10673', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10674', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10675', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10676', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10677', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10678', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10679', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10680', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10681', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10682', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '10683', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11141', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11142', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11143', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11144', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11145', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11146', Area: 'ΓΑΛΑΤΣΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11147', Area: 'ΓΑΛΑΤΣΙ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '11251', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11252', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11253', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11254', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11255', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11256', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11257', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11361', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11362', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11363', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11364', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11471', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11472', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11473', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11474', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11475', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11476', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11521', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11522', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11523', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11524', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11525', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11526', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11527', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11528', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11631', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11632', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11633', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11634', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11635', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11636', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11741', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11742', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11743', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11744', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11745', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11851', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11852', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11853', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11854', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '11855', Area: 'ΑΘΗΝΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '12131', Area: 'ΠΕΡΙΣΤΕΡΙ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '12132', Area: 'ΠΕΡΙΣΤΕΡΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '12133', Area: 'ΠΕΡΙΣΤΕΡΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '12134', Area: 'ΠΕΡΙΣΤΕΡΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '12135', Area: 'ΠΕΡΙΣΤΕΡΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '12136', Area: 'ΠΕΡΙΣΤΕΡΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '12137', Area: 'ΠΕΡΙΣΤΕΡΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '12241', Area: 'ΑΙΓΑΛΕΩ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '12242', Area: 'ΑΙΓΑΛΕΩ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '12243', Area: 'ΑΙΓΑΛΕΩ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '12244', Area: 'ΑΙΓΑΛΕΩ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '12351', Area: 'ΑΓΙΑ ΒΑΡΒΑΡΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '12461', Area: 'ΧΑΙΔΑΡΙ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '12462', Area: 'ΣΚΑΡΑΜΑΓΚΑΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13121', Area: 'ΙΛΙΟΝ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '13122', Area: 'ΙΛΙΟΝ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13123', Area: 'ΙΛΙΟΝ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '13223', Area: 'ΙΛΙΟΥ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13231', Area: 'ΠΕΤΡΟΥΠΟΛΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13232', Area: 'ΠΕΤΡΟΥΠΟΛΕΩΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13341', Area: 'ΑΝΩ ΛΙΟΣΙΑ ΑΤΤΙΚΗΣ, ΠΑΠΑΓΟΥ ΑΤΤΙΚΗΣ, ΦΥΛΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13342', Area: 'ΑΝΩ ΛΙΟΣΙΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '13343', Area: 'ΑΝΩ ΛΙΟΣΙΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '13344', Area: 'ΑΝΩ ΛΙΟΣΙΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '13351', Area: 'ΦΥΛΗΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13451', Area: 'ΚΑΜΑΤΕΡΟ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13461', Area: 'ΖΕΦΥΡΙ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13561', Area: 'ΑΓΙΟΙ ΑΝΑΡΓΥΡΟΙ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13562', Area: 'ΑΓΙΟΙ ΑΝΑΡΓΥΡΟΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '13671', Area: 'ΑΧΑΡΝΕΣ (ΜΕΝΙΔΙ) ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13672', Area: 'ΒΑΡΥΜΠΟΜΠΗ ΑΤΤΙΚΗΣ, ΞΕΝΙΑ ΠΑΡΝΗΘΟΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13673', Area: 'ΑΧΑΡΝΕΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '13674', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΠΑΡΝΗΘΟΣ ΑΤΤΙΚΗΣ, ΠΑΡΝΗΘΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13675', Area: 'ΑΧΑΡΝΕΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '13676', Area: 'ΘΡΑΚΟΜΑΚΕΔΟΝΕΣ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΚΟΙΜΗΣΕΩΣ ΘΕΟΤΟΚΟΥ ΚΛΕΙΣΤΩΝ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13677', Area: 'ΑΧΑΡΝΕΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '13678', Area: 'ΑΧΑΡΝΕΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '13679', Area: 'ΑΧΑΡΝΕΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14121', Area: 'ΗΡΑΚΛΕΙΟ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14122', Area: 'ΗΡΑΚΛΕΙΟ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '14123', Area: 'ΛΥΚΟΒΡΥΣΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14231', Area: 'ΝΕΑ ΙΩΝΙΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '14232', Area: 'ΝΕΑ ΙΩΝΙΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '14233', Area: 'ΝΕΑ ΙΩΝΙΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '14234', Area: 'ΝΕΑ ΙΩΝΙΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14235', Area: 'ΝΕΑ ΙΩΝΙΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '14341', Area: 'ΝΕΑ ΦΙΛΑΔΕΛΦΕΙΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14342', Area: 'ΝΕΑ ΦΙΛΑΔΕΛΦΕΙΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '14343', Area: 'ΝΕΑ ΧΑΛΚΗΔΩΝΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14451', Area: 'ΜΕΤΑΜΟΡΦΩΣΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14452', Area: 'ΜΕΤΑΜΟΡΦΩΣΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '14561', Area: 'ΚΗΦΙΣΙΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '14562', Area: 'ΚΗΦΙΣΙΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '14563', Area: 'ΚΗΦΙΣΙΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14564', Area: 'ΚΗΦΙΣΙΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '14565', Area: 'ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΑΤΤΙΚΗΣ, ΔΙΟΝΥΣΟΣ ΑΤΤΙΚΗΣ, ΔΡΟΣΙΑ ΑΤΤΙΚΗΣ, ΠΕΥΚΟΦΥΤΟ ΑΤΤΙΚΗΣ, ΡΑΠΕΝΤΩΣΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14568', Area: 'ΚΡΥΟΝΕΡΙ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14569', Area: 'ΑΝΟΙΞΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14572', Area: 'ΔΡΟΣΙΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '14574', Area: 'ΡΟΔΟΠΟΛΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14575', Area: 'ΣΤΑΜΑΤΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14576', Area: 'ΔΙΟΝΥΣΟΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '14578', Area: 'ΕΚΑΛΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14671', Area: 'ΝΕΑ ΕΡΥΘΡΑΙΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '14678', Area: 'ΚΗΦΙΣΙΑΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15121', Area: 'ΠΕΥΚΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15122', Area: 'ΜΑΡΟΥΣΙ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15123', Area: 'ΜΑΡΟΥΣΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '15124', Area: 'ΜΑΡΟΥΣΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '15125', Area: 'ΜΑΡΟΥΣΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '15126', Area: 'ΜΑΡΟΥΣΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '15127', Area: 'ΜΕΛΙΣΣΙΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15223', Area: 'ΑΜΑΡΟΥΣΙΟΥ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15231', Area: 'ΧΑΛΑΝΔΡΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '15232', Area: 'ΧΑΛΑΝΔΡΙ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15233', Area: 'ΧΑΛΑΝΔΡΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '15234', Area: 'ΧΑΛΑΝΔΡΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '15235', Area: 'ΒΡΙΛΗΣΣΙΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15236', Area: 'ΜΠΟΥΡΜΠΑΧΤΙ ΑΤΤΙΚΗΣ, ΝΕΑ ΠΕΝΤΕΛΗ ΑΤΤΙΚΗΣ, ΠΕΝΤΕΛΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15237', Area: 'ΦΙΛΟΘΕΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15238', Area: 'ΧΑΛΑΝΔΡΙ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '15341', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '15342', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '15343', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15344', Area: 'ΓΕΡΑΚΑΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15349', Area: 'ΑΝΘΟΥΣΑ ΑΤΤΙΚΗΣ, ΓΑΛΗΝΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15351', Area: 'ΑΡΓΙΘΕΑ ΑΤΤΙΚΗΣ, ΛΕΟΝΤΑΡΙ ΑΤΤΙΚΗΣ, ΠΑΛΛΗΝΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15353', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15354', Area: 'ΓΛΥΚΑ ΝΕΡΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15451', Area: 'ΝΕΟ ΨΥΧΙΚΟ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15452', Area: 'ΨΥΧΙΚΟ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15561', Area: 'ΧΟΛΑΡΓΟΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '15562', Area: 'ΧΟΛΑΡΓΟΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15669', Area: 'ΠΑΠΑΓΟΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '15771', Area: 'ΖΩΓΡΑΦΟΥ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '15772', Area: 'ΖΩΓΡΑΦΟΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '15773', Area: 'ΖΩΓΡΑΦΟΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '16121', Area: 'ΚΑΙΣΑΡΙΑΝΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '16122', Area: 'ΚΑΙΣΑΡΙΑΝΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '16231', Area: 'ΒΥΡΩΝΑΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '16232', Area: 'ΒΥΡΩΝΑΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '16233', Area: 'ΒΥΡΩΝΑΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '16341', Area: 'ΗΛΙΟΥΠΟΛΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '16342', Area: 'ΗΛΙΟΥΠΟΛΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '16343', Area: 'ΗΛΙΟΥΠΟΛΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '16344', Area: 'ΗΛΙΟΥΠΟΛΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '16345', Area: 'ΗΛΙΟΥΠΟΛΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '16346', Area: 'ΗΛΙΟΥΠΟΛΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '16451', Area: 'ΑΡΓΥΡΟΥΠΟΛΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '16452', Area: 'ΑΡΓΥΡΟΥΠΟΛΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '16531', Area: 'ΓΛΥΦΑΔΑΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '16561', Area: 'ΓΛΥΦΑΔΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '16562', Area: 'ΓΛΥΦΑΔΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '16574', Area: 'ΓΛΥΦΑΔΑΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '16671', Area: 'ΒΟΥΛΙΑΓΜΕΝΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '16672', Area: 'ΒΑΡΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '16673', Area: 'ΒΟΥΛΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '16674', Area: 'ΓΛΥΦΑΔΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '16675', Area: 'ΓΛΥΦΑΔΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '16777', Area: 'ΕΛΛΗΝΙΚΟ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '17121', Area: 'ΝΕΑ ΣΜΥΡΝΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17122', Area: 'ΝΕΑ ΣΜΥΡΝΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '17123', Area: 'ΝΕΑ ΣΜΥΡΝΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17124', Area: 'ΝΕΑ ΣΜΥΡΝΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17234', Area: 'ΔΑΦΝΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '17235', Area: 'ΔΑΦΝΗ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17236', Area: 'ΥΜΗΤΤΟΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '17237', Area: 'ΥΜΗΤΤΟΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17341', Area: 'ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '17342', Area: 'ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17343', Area: 'ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17455', Area: 'ΚΑΛΑΜΑΚΙ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '17456', Area: 'ΑΛΙΜΟΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17556', Area: 'ΑΛΙΜΟΥ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '17561', Area: 'ΠΑΛΑΙΟ ΦΑΛΗΡΟ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '17562', Area: 'ΠΑΛΑΙΟ ΦΑΛΗΡΟ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17563', Area: 'ΠΑΛΑΙΟ ΦΑΛΗΡΟ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17564', Area: 'ΠΑΛΑΙΟ ΦΑΛΗΡΟ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17655', Area: 'ΑΛΙΜΟΣ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17671', Area: 'ΚΑΛΛΙΘΕΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17672', Area: 'ΚΑΛΛΙΘΕΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17673', Area: 'ΚΑΛΛΙΘΕΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17674', Area: 'ΚΑΛΛΙΘΕΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17675', Area: 'ΚΑΛΛΙΘΕΑ ΑΘΗΝΑ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '17676', Area: 'ΚΑΛΛΙΘΕΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '17778', Area: 'ΤΑΥΡΟΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18010', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΑΤΤΙΚΗΣ, ΑΓΚΙΣΤΡΙ ΝΗΣΟΣ ΑΤΤΙΚΗΣ, ΑΙΓΙΝΑ ΑΤΤΙΚΗΣ, ΑΛΩΝΕΣ ΑΤΤΙΚΗΣ, ΑΝΙΤΣΑΙΟ ΑΤΤΙΚΗΣ, ΒΑΘΥ ΑΓΚΙΣΤΡΙΟΥ ΑΤΤΙΚΗΣ, ΒΑΘΥ ΑΙΓΙΝΑΣ ΑΤΤΙΚΗΣ, ΒΑΙΑ ΑΤΤΙΚΗΣ, ΒΛΑΧΗΔΕΣ ΑΤΤΙΚΗΣ, ΚΑΒΟΣ ΑΤΤΙΚΗΣ, ΚΑΠΟΤΗΔΕΣ ΑΤΤΙΚΗΣ, ΚΟΝΤΟΣ ΑΤΤΙΚΗΣ, ΚΥΛΙΝΔΡΑΣ ΑΤΤΙΚΗΣ, ΚΥΨΕΛΗ ΑΙΓΙΝΑΣ ΑΤΤΙΚΗΣ, ΛΑΓΟΥΣΑ ΝΗΣΟΣ ΑΤΤΙΚΗΣ, ΛΑΓΟΥΣΑΚΙ ΝΗΣΟΣ ΑΤΤΙΚΗΣ, ΛΑΖΑΡΗΔΕΣ ΑΤΤΙΚΗΣ, ΛΙΜΕΝΑΡΙΑ ΑΓΚΙΣΤΡΙΟΥ ΑΤΤΙΚΗΣ, ΜΕΓΑΛΟΧΩΡΙ ΑΓΚΙΣΤΡΙΟΥ ΑΤΤΙΚΗΣ, ΜΕΣΑΓΡΟΣ ΑΤΤΙΚΗΣ, ΜΕΤΟΧΙ ΑΓΚΙΣΤΡΙΟΥ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΚΟΙΜΗΣΕΩΣ ΘΕΟΤΟΚΟΥ  ΑΙΓΙΝΑΣ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΝΗΣΟΣ ΑΤΤΙΚΗΣ, ΠΑΧΕΙΑ ΡΑΧΗ ΑΤΤΙΚΗΣ, ΠΕΡΔΙΚΑ ΑΤΤΙΚΗΣ, ΠΟΡΤΕΣ ΑΤΤΙΚΗΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΑΤΤΙΚΗΣ, ΣΚΑΛΑ ΑΓΚΙΣΤΡΙΟΥ ΑΤΤΙΚΗΣ, ΣΟΥΒΑΛΑ ΑΤΤΙΚΗΣ, ΣΤΑΧΤΟΡΡΟΗ ΝΗΣΟΣ ΑΤΤΙΚΗΣ, ΣΦΕΝΤΟΥΡΙ ΑΤΤΙΚΗΣ, ΤΖΙΚΗΔΕΣ ΑΤΤΙΚΗΣ, ΥΨΗΛΗ ΝΗΣΟΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18020', Area: 'ΑΓΙΑ ΕΛΕΝΗ ΑΤΤΙΚΗΣ, ΑΓΙΑ ΣΩΤΗΡΑ ΓΑΛΑΤΑ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΤΡΟΙΖΗΝΑΣ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΤΡΟΙΖΗΝΟΣ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΝΕΚΤΑΡΙΟΣ ΑΤΤΙΚΗΣ, ΑΚΤΗ ΑΓΑΠΗΣ ΑΤΤΙΚΗΣ, ΑΝΩ ΦΑΝΑΡΙ ΑΤΤΙΚΗΣ, ΒΛΑΧΑΙΙΚΑ ΑΤΤΙΚΗΣ, ΒΥΔΙΟ ΑΤΤΙΚΗΣ, ΓΑΛΑΤΑΣ ΑΤΤΙΚΗΣ, ΔΡΥΟΠΗ ΑΤΤΙΚΗΣ, ΖΕΡΒΑΙΙΚΑ ΑΤΤΙΚΗΣ, ΚΑΛΛΟΝΗ ΑΤΤΙΚΗΣ, ΚΑΡΑΤΖΑΣ ΑΤΤΙΚΗΣ, ΚΥΑΝΗ ΑΚΤΗ ΑΤΤΙΚΗΣ, ΜΕΤΑΜΟΡΦΩΣΗ ΠΟΡΟΥ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΖΩΟΔΟΧΟΥ ΠΗΓΗΣ ΚΑΛΑΥΡΕΙΑΣ ΑΤΤΙΚΗΣ, ΜΥΛΟΣ ΑΤΤΙΚΗΣ, ΝΕΡΑΤΖΙΑ ΑΤΤΙΚΗΣ, ΝΗΣΙΔΑ ΑΤΤΙΚΗΣ, ΠΟΡΟΣ ΑΤΤΙΚΗΣ, ΣΑΡΩΝΙΔΑ ΓΑΛΑΤΑ ΑΤΤΙΚΗΣ, ΣΚΑΠΕΤΙ ΑΤΤΙΚΗΣ, ΤΑΚΤΙΚΟΥΠΟΛΗ ΑΤΤΙΚΗΣ, ΤΡΟΙΖΗΝΑ ΑΤΤΙΚΗΣ, ΧΩΡΑ ΑΤΤΙΚΗΣ, ΨΗΦΤΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18030', Area: 'ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΜΕΘΑΝΩΝ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΜΕΘΑΝΩΝ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΜΕΘΑΝΩΝ ΑΤΤΙΚΗΣ, ΒΑΘΥ ΜΕΘΑΝΩΝ ΑΤΤΙΚΗΣ, ΔΡΙΤΣΑΙΙΚΑ ΜΕΘΑΝΩΝ ΑΤΤΙΚΗΣ, ΚΑΗΜΕΝΗ ΧΩΡΑ ΜΕΘΑΝΩΝ ΑΤΤΙΚΗΣ, ΚΟΥΝΟΥΠΙΤΣΑ ΜΕΘΑΝΩΝ ΑΤΤΙΚΗΣ, ΚΥΨΕΛΗ ΜΕΘΑΝΩΝ ΑΤΤΙΚΗΣ, ΜΑΚΡΥΛΟΓΓΟΣ ΜΕΘΑΝΩΝ ΑΤΤΙΚΗΣ, ΜΕΓΑΛΟ ΠΟΤΑΜΙ ΜΕΘΑΝΩΝ ΑΤΤΙΚΗΣ, ΜΕΓΑΛΟΧΩΡΙ ΜΕΘΑΝΩΝ ΑΤΤΙΚΗΣ, ΜΕΘΑΝΑ ΑΤΤΙΚΗΣ, ΠΑΛΑΙΑ ΛΟΥΤΡΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18040', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΝΗΣΟΣ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΥΔΡΑΣ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΥΔΡΑΣ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΥΔΡΑΣ ΑΤΤΙΚΗΣ, ΒΛΥΧΟΣ ΑΤΤΙΚΗΣ, ΔΟΚΟΣ ΝΗΣΟΣ ΑΤΤΙΚΗΣ, ΕΠΙΣΚΟΠΗ ΑΤΤΙΚΗΣ, ΖΩΓΕΡΙ ΑΤΤΙΚΗΣ, ΚΙΒΩΤΟΣ ΑΤΤΙΚΗΣ, ΚΛΙΜΑΚΙ ΑΤΤΙΚΗΣ, ΛΙΜΙΟΝΙΖΑ ΑΤΤΙΚΗΣ, ΜΑΝΔΡΑΚΙ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΑΓΙΑΣ ΕΥΠΡΑΞΙΑΣ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΑΓΙΑΣ ΤΡΙΑΔΟΣ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΑΓΙΟΥ ΝΙΚΟΛΑΟΥ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΓΕΝΝΗΣΙΟΥ ΘΕΟΤΟΚΟΥ ΖΟΥΡΒΑΣ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΠΡΟΦΗΤΟΥ ΗΛΙΟΥ ΑΤΤΙΚΗΣ, ΜΩΛΟΣ ΑΤΤΙΚΗΣ, ΠΑΛΑΜΙΔΑΣ ΑΤΤΙΚΗΣ, ΠΑΡΑΠΟΛΑ ΑΤΤΙΚΗΣ, ΠΕΤΑΣΙ ΑΤΤΙΚΗΣ, ΠΛΑΤΟΝΗΣΙ ΑΤΤΙΚΗΣ, ΣΤΑΥΡΟΝΗΣΙ ΑΤΤΙΚΗΣ, ΤΡΙΚΕΡΙ ΑΤΤΙΚΗΣ, ΥΔΡΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18050', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΣΠΕΤΣΩΝ ΑΤΤΙΚΗΣ, ΑΓΙΟΙ ΑΝΑΡΓΥΡΟΙ ΣΠΕΤΣΩΝ ΑΤΤΙΚΗΣ, ΒΕΛΟΠΟΥΛΑ ΝΗΣΟΣ ΑΤΤΙΚΗΣ, ΚΟΥΖΟΥΝΟΣ ΑΤΤΙΚΗΣ, ΛΙΓΟΝΕΡΙ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΑΓΙΩΝ ΠΑΝΤΩΝ ΑΤΤΙΚΗΣ, ΣΠΕΤΣΕΣ ΑΤΤΙΚΗΣ, ΣΠΕΤΣΟΠΟΥΛΑ  ΝΗΣΟΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18120', Area: 'ΚΟΡΥΔΑΛΛΟΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18121', Area: 'ΚΟΡΥΔΑΛΛΟΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18122', Area: 'ΚΟΡΥΔΑΛΛΟΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18233', Area: 'ΑΓ. ΙΩΑΝΝΗΣ ΡΕΝΤΗΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18344', Area: 'ΜΟΣΧΑΤΟ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18345', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΡΕΝΤΗΣ ΑΤΤΙΚΗΣ, ΜΟΣΧΑΤΟ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18346', Area: 'ΜΟΣΧΑΤΟ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18450', Area: 'ΝΙΚΑΙΑ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18451', Area: 'ΝΙΚΑΙΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18452', Area: 'ΝΙΚΑΙΑ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18453', Area: 'ΝΙΚΑΙΑ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18454', Area: 'ΝΙΚΑΙΑ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18531', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18532', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18533', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18534', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18535', Area: 'ΠΕΙΡΑΙΑΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18536', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18537', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18538', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18539', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18540', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18541', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18542', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18543', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18544', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18545', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18546', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18547', Area: 'ΠΕΙΡΑΙΑΣ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18648', Area: 'ΔΡΑΠΕΤΣΩΝΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18755', Area: 'ΚΕΡΑΤΣΙΝΙ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18756', Area: 'ΚΕΡΑΤΣΙΝΙ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18757', Area: 'ΚΕΡΑΤΣΙΝΙ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18758', Area: 'ΚΕΡΑΤΣΙΝΙ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Αττικής' },
    { PostalCode: '18863', Area: 'ΠΕΡΑΜΑ ΑΤΤΙΚΗΣ, ΨΥΤΤΑΛΕΙΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18900', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΣΑΛΑΜΙΝΑΣ ΑΤΤΙΚΗΣ, ΕΛΛΗΝΙΚΟ ΑΤΤΙΚΗΣ, ΚΑΝΑΚΙΑ ΑΤΤΙΚΗΣ, ΛΕΡΟΣ ΣΑΛΑΜΙΝΑΣ ΑΤΤΙΚΗΣ, ΜΑΚΡΟΝΗΣΟΣ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΚΟΙΜΗΣΕΩΣ ΘΕΟΤΟΚΟΥ ΦΑΝΕΡΩΜΕΝΗΣ ΑΤΤΙΚΗΣ, ΜΠΑΤΣΙ ΑΤΤΙΚΗΣ, ΝΗΣΟΣ ΚΑΝΑΚΙΑ ΑΤΤΙΚΗΣ, ΡΕΒΥΘΟΥΣΑ ΑΤΤΙΚΗΣ, ΣΑΛΑΜΙΝΑ ΑΤΤΙΚΗΣ, ΣΤΕΝΟ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '18950', Area: 'ΑΓΊΑ ΜΑΡΊΝΑ ΑΤΤΙΚΗΣ, ΑΙΆΝΤΕΙΟ ΑΤΤΙΚΗΣ, ΑΊΑΣ ΚΛΆΜΠ ΑΤΤΙΚΗΣ, ΑΜΥΓΔΑΛΙΈΣ ΑΤΤΙΚΗΣ, ΆΝΩ ΖΟΡΜΠΑΛΆ ΑΤΤΙΚΗΣ, ΑΦΡΟΔΊΤΗ ΑΤΤΙΚΗΣ, ΓΥΆΛΑ ΑΤΤΙΚΗΣ, ΔΕΗ (ΧΑΛΙΏΤΗ) ΑΤΤΙΚΗΣ, ΔΗΜΗΤΡΆΝΙ ΑΤΤΙΚΗΣ, ΚΑΚΉ ΒΊΓΛΑ ΑΤΤΙΚΗΣ, ΚΑΜΠΌΛΙ ΑΤΤΙΚΗΣ, ΚΑΝΆΚΙΑ ΑΤΤΙΚΗΣ, ΚΆΤΩ ΖΟΡΜΠΑΛΆ ΑΤΤΙΚΗΣ, ΚΟΛΏΝΕΣ ΑΤΤΙΚΗΣ, ΜΕΝΕΜΈΝΗ ΑΤΤΙΚΗΣ, ΜΠΌΝΙ ΑΤΤΙΚΗΣ, ΝΑΤΟ ΑΤΤΙΚΗΣ, ΝΤΟΥΛΆΠΙ ΑΤΤΙΚΗΣ, ΠΑΝΌΡΑΜΑ ΑΤΤΙΚΗΣ, ΠΕΡΆΝΙ ΑΤΤΙΚΗΣ, ΠΕΡΙΣΤΈΡΙΑ ΑΤΤΙΚΗΣ, ΠΌΡΤΟ ΦΊΝΟ ΑΤΤΙΚΗΣ, ΣΑΤΕΡΛΊ ΑΤΤΙΚΗΣ, ΧΑΡΟΥΠΙΆ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19001', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΜΙΚΡΟΛΙΜΑΝΟΥ ΑΤΤΙΚΗΣ, ΑΓΙΑΣΜΑ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΚΕΡΑΤΕΑΣ ΑΤΤΙΚΗΣ, ΑΝΩ ΔΑΣΚΑΛΕΙΟ ΑΤΤΙΚΗΣ, ΑΡΙ ΑΤΤΙΚΗΣ, ΑΥΡΟΚΑΣΤΡΟ ΑΤΤΙΚΗΣ, ΒΕΝΙΟ ΔΑΣΚΑΛΕΙΟΥ ΑΤΤΙΚΗΣ, ΒΙΝΤΖΙ ΔΑΣΚΑΛΕΙΟΥ ΑΤΤΙΚΗΣ, ΔΑΣΚΑΛΕΙΟ ΑΤΤΙΚΗΣ, ΔΗΜΟΛΑΚΙ ΑΤΤΙΚΗΣ, ΔΙΟΝΥΣΟΣ ΚΕΡΑΤΕΑΣ ΑΤΤΙΚΗΣ, ΔΙΨΕΛΙΖΑ ΑΤΤΙΚΗΣ, ΕΛΑΙΟΧΩΡΙ ΑΤΤΙΚΗΣ, ΕΛΙΕΣ ΔΑΣΚΑΛΕΙΟΥ ΑΤΤΙΚΗΣ, ΖΑΠΑΝΙ ΑΤΤΙΚΗΣ, ΖΑΣΤΑΝΟ ΑΤΤΙΚΗΣ, ΚΑΚΗ ΘΑΛΑΣΣΑ ΑΤΤΙΚΗΣ, ΚΑΛΟΠΗΓΑΔΟ ΑΤΤΙΚΗΣ, ΚΕΡΑΤΕΑ ΑΤΤΙΚΗΣ, ΚΟΝΤΡΑ ΒΙΛΑΡΑ ΑΤΤΙΚΗΣ, ΜΑΛΙΑΚΟΥΚΙ ΑΤΤΙΚΗΣ, ΜΑΛΙΑΣΤΕΚΑ ΑΤΤΙΚΗΣ, ΜΑΝΟΥΤΣΟ ΑΤΤΙΚΗΣ, ΜΑΡΙΣΤΡΑ ΑΤΤΙΚΗΣ, ΜΑΡΚΑΤΙ ΑΤΤΙΚΗΣ, ΜΕΓΑΛΑ ΠΕΥΚΑ ΑΤΤΙΚΗΣ, ΜΕΓΑΛΗ ΑΥΛΗ ΑΤΤΙΚΗΣ, ΜΗΤΡΟΠΗΣΙ ΑΤΤΙΚΗΣ, ΜΙΚΡΟΛΙΜΑΝΟ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΚΑΚΗΣ ΘΑΛΑΣΣΑΣ ΑΤΤΙΚΗΣ, ΜΠΟΥΖΑΛΑΔΕΣ ΑΤΤΙΚΗΣ, ΜΥΡΤΕΖΑ ΑΤΤΙΚΗΣ, ΝΤΑΡΔΕΖΑ ΑΤΤΙΚΗΣ, ΠΑΝΟΡΑΜΑ ΜΙΚΡΟΛΙΜΑΝΟΥ ΑΤΤΙΚΗΣ, ΠΕΥΚΑ ΑΤΤΙΚΗΣ, ΠΟΡΤΟ ΕΝΝΙΑ ΑΤΤΙΚΗΣ, ΠΡΙΣΙΛΙΜΕΣ ΑΤΤΙΚΗΣ, ΡΙΜΠΑΡΙ ΑΤΤΙΚΗΣ, ΡΟΥΜΟΥΝΤΙ ΑΤΤΙΚΗΣ, ΡΟΥΝΤΖΕΡΙ ΛΕΜΠΡΟΥ ΑΤΤΙΚΗΣ, ΣΑΚΚΑ ΑΤΤΙΚΗΣ, ΣΚΑΛΕΖΑ ΜΗΤΡΑΝΤΩΝΗ ΑΤΤΙΚΗΣ, ΣΠΗΛΙΑΖΕΖΑ ΑΤΤΙΚΗΣ, ΣΥΝΤΕΡΙΝΑ ΑΤΤΙΚΗΣ, ΣΥΡΙ ΑΤΤΙΚΗΣ, ΤΖΑΡΔΑΒΙΛΑ ΜΟΚΡΙΖΑΣ ΑΤΤΙΚΗΣ, ΤΖΟΝΙΜΑ ΑΤΤΙΚΗΣ, ΤΟΓΑΝΙ ΛΑΚΙΖΑΣ ΑΤΤΙΚΗΣ, ΤΡΕΧΑΝΤΙΕΡΑ ΑΤΤΙΚΗΣ, ΤΡΙΑΝΤΑΦΥΛΛΙΑ ΑΤΤΙΚΗΣ, ΦΑΝΩΣΙ ΑΤΤΙΚΗΣ, ΧΑΡΑΚΑΣ ΑΤΤΙΚΗΣ, ΧΑΡΒΑΛΟ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19002', Area: 'ΠΑΙΑΝΙΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19003', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΜΑΡΚΟΠΟΥΛΟΥ ΑΤΤΙΚΗΣ, ΑΥΛΑΚΙ (ΠΑΡΑΛΙΑ ΠΟΡΤΟ ΡΑΦΤΗ) ΑΤΤΙΚΗΣ, ΒΡΑΥΡΩΝΑ ΑΡΤΕΜΙΔΟΣ ΑΤΤΙΚΗΣ, ΚΟΥΒΑΡΑΣ ΑΤΤΙΚΗΣ, ΚΟΥΛΙΔΑΣ ΑΤΤΙΚΗΣ, ΜΑΡΚΟΠΟΥΛΟ ΜΕΣΟΓΕΙΩΝ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΜΕΤΑΜ.ΣΩΤΗΡΟΣ ΚΟΥΒΑΡΑ ΑΤΤΙΚΗΣ, ΝΕΟΣ ΚΟΥΒΑΡΑΣ ΑΤΤΙΚΗΣ, ΠΟΡΙΑ ΑΤΤΙΚΗΣ, ΠΟΡΤΟ ΡΑΦΤΗ (ΛΙΜΕΝΑΣ ΜΑΡΚΟΠΟΥΛ.) ΑΤΤΙΚΗΣ, ΧΑΜΟΛΙΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19004', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΣΠΑΤΩΝ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΜΠΟΥΡΑ ΑΤΤΙΚΗΣ, ΕΤΟΣ ΣΤΕΚΟ ΑΤΤΙΚΗΣ, ΗΜΕΡΟΣ ΠΕΥΚΟΣ ΑΤΤΙΚΗΣ, ΣΠΑΤΑ ΑΤΤΙΚΗΣ, ΦΟΙΝΙΚΑΣ ΑΤΤΙΚΗΣ, ΧΡΙΣΤΟΥΠΟΛΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19005', Area: 'ΝΕΑ ΜΑΚΡΗ ΑΤΤΙΚΗΣ, ΝΕΟΣ ΒΟΥΤΖΑΣ ΝΕΑΣ ΜΑΚΡΗΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19006', Area: 'ΚΟΥΜΙΝΤΡΙ ΑΤΤΙΚΗΣ, ΝΕΑ ΠΕΡΑΜΟΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19007', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΓΡΑΜΜΑΤΙΚΟΥ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΜΑΡΑΘΩΝΑ ΑΤΤΙΚΗΣ, ΑΝΩ ΣΟΥΛΙ ΑΤΤΙΚΗΣ, ΑΥΡΑ ΑΤΤΙΚΗΣ, ΒΛΗΤΙΚΟΣ ΣΤΑΘΜΟΣ ΑΤΤΙΚΗΣ, ΒΟΘΩΝΑΣ ΑΤΤΙΚΗΣ, ΒΡΑΝΑΣ ΑΤΤΙΚΗΣ, ΓΡΑΜΜΑΤΙΚΟ ΑΤΤΙΚΗΣ, ΚΑΤΩ ΣΟΥΛΙ ΑΤΤΙΚΗΣ, ΜΑΡΑΘΩΝΑΣ ΑΤΤΙΚΗΣ, ΣΕΣΙ ΑΤΤΙΚΗΣ, ΣΧΙΝΙΑΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19008', Area: 'ΕΡΥΘΡΕΣ ΒΟΙΩΤΙΑΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19009', Area: 'ΔΑΣΑΜΑΡΙ ΑΤΤΙΚΗΣ, ΔΙΩΝΗ ΑΤΤΙΚΗΣ, ΚΑΛΛΙΤΕΧΝΟΥΠΟΛΗ ΑΤΤΙΚΗΣ, ΝΕΟΣ ΒΟΥΤΖΑΣ ΡΑΦΗΝΑΣ ΑΤΤΙΚΗΣ, ΝΤΑΟΥ ΠΕΝΤΕΛΗ ΑΤΤΙΚΗΣ, ΝΤΡΑΦΙ ΑΤΤΙΚΗΣ, ΠΑΛΙΟΣ ΜΥΛΟΣ ΑΤΤΙΚΗΣ, ΠΙΚΕΡΜΙ ΑΤΤΙΚΗΣ, ΡΑΦΗΝΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19010', Area: 'ΚΑΛΥΒΙΑ ΘΟΡΙΚΟΥ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19011', Area: 'ΑΣΠΡΟΧΩΡΙ ΑΥΛΩΝΑΣ ΑΤΤΙΚΗΣ, ΑΥΛΩΝΑ ΑΤΤΙΚΗΣ, ΜΑΛΑΚΑΣΑ ΑΤΤΙΚΗΣ, ΜΙΛΕΣΙΟ ΑΤΤΙΚΗΣ, ΣΦΕΝΔΑΛΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19012', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΒΙΛΙΩΝ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΒΙΛΙΩΝ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΝΕΚΤΑΡΙΟΣ ΒΙΛΙΩΝ ΑΤΤΙΚΗΣ, ΑΙΓΟΣΘΕΝΑ ΑΤΤΙΚΗΣ, ΒΙΛΙΑ ΑΤΤΙΚΗΣ, ΚΡΥΟ ΠΗΓΑΔΙ ΑΤΤΙΚΗΣ, ΛΕΥΚΑ ΑΤΤΙΚΗΣ, ΛΟΥΜΠΑ ΑΤΤΙΚΗΣ, ΜΥΤΙΚΑΣ ΑΤΤΙΚΗΣ, ΟΙΝΟΗ ΑΤΤΙΚΗΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΒΙΛΙΩΝ ΑΤΤΙΚΗΣ, ΨΑΘΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19013', Area: 'ΑΝΑΒΥΣΣΟΣ ΑΤΤΙΚΗΣ, ΘΥΜΑΡΙ ΑΤΤΙΚΗΣ, ΠΑΛΑΙΑ ΦΩΚΑΙΑ ΑΤΤΙΚΗΣ, ΣΑΡΩΝΙΔΑ ΑΤΤΙΚΗΣ, ΦΕΡΙΖΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19014', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΒΑΡΝΑΒΑ ΑΤΤΙΚΗΣ, ΑΓΙΑ ΤΡΙΑΔΑ ΑΦΙΔΝΩΝ ΑΤΤΙΚΗΣ, ΑΓΙΟΙ ΑΝΑΡΓΥΡΟΙ (ΚΑΠΑΝΔΡΙΤΊΟΥ) ΑΤΤΙΚΗΣ, ΑΓΙΟΙ ΑΠΟΣΤΟΛΟΙ ΚΑΛΑΜΟΥ ΑΤΤΙΚΗΣ, ΑΓΙΟΙ ΔΗΜΗΤΡΙΟΣ ΚΑΙ ΠΑΝΤΕΛΕΗΜΩΝ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ (ΠΟΛΥΔΕΝΔΡ.) ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΒΑΡΝΑΒΑ ΑΤΤΙΚΗΣ, ΑΦΙΔΝΕΣ ΑΤΤΙΚΗΣ, ΒΑΡΝΑΒΑΣ ΑΤΤΙΚΗΣ, ΔΙΕΘΝΗΣ ΙΠΠΟΚΡΑΤΕΙΟΣ ΠΟΛΙΤΕΙΑ ΑΤΤΙΚΗΣ, ΔΡΟΣΟΠΗΓΗ ΑΤΤΙΚΗΣ, ΗΡΑΚΛΕΙΔΕΙΣ ΑΤΤΙΚΗΣ, ΚΑΛΑΜΟΣ ΑΤΤΙΚΗΣ, ΚΑΠΑΝΔΡΙΤΙ ΑΤΤΙΚΗΣ, ΚΟΚΚΙΝΟΒΡΑΧΟΣ ΑΤΤΙΚΗΣ, ΚΟΣΜΟΘΕΑ ΑΤΤΙΚΗΣ, ΛΙΜΝΗ ΜΑΡΑΘΩΝΑ ΑΤΤΙΚΗΣ, ΛΙΜΝΙΩΝΑΣ ΑΤΤΙΚΗΣ, ΜΙΚΡΟΧΩΡΙΟ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΜΕΤΑΜ.ΣΩΤΗΡΟΣ ΒΑΡΝΑΒΑ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΠΑΝΑΓΙΑΣ ΑΤΤΙΚΗΣ, ΠΟΛΥΔΕΝΔΡΙ ΑΤΤΙΚΗΣ, ΠΟΥΡΙΘΙ ΑΤΤΙΚΗΣ, ΣΤΑΘΜΟΣ ΑΦΙΔΝΩΝ ΑΤΤΙΚΗΣ, ΤΑΞΙΑΡΧΕΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19015', Area: 'ΑΓΙΑ ΑΙΚΑΤΕΡΙΝΗ ΝΕΩΝ ΠΑΛΑΤΙΩΝ ΑΤΤΙΚΗΣ, ΑΓΙΑ ΒΑΡΒΑΡΑ ΜΑΡΚΟΠΟΥΛΟΥ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ Ν.ΠΑΛΑΤΙΩΝ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ Ν.ΠΑΛΑΤΙΩΝ ΑΤΤΙΚΗΣ, ΒΑΡΥΤΙ ΑΤΤΙΚΗΣ, ΚΑΜΑΡΙ ΑΤΤΙΚΗΣ, ΚΑΜΠΟΣ ΩΡΩΠΟΥ ΑΤΤΙΚΗΣ, ΚΑΤΗΦΟΡΙ ΑΤΤΙΚΗΣ, ΜΑΡΚΟΠΟΥΛΟ ΩΡΩΠΟΥ ΑΤΤΙΚΗΣ, ΜΠΑΦΙ ΑΤΤΙΚΗΣ, ΝΕΑ ΠΑΛΑΤΙΑ ΑΤΤΙΚΗΣ, ΝΕΑ ΠΟΛΙΤΕΙΑ ΑΤΤΙΚΗΣ, ΝΕΟ ΣΥΚΑΜΙΝΟ ΑΤΤΙΚΗΣ, ΝΕΟΝ ΛΙΒΥΣΣΙΟ ΑΤΤΙΚΗΣ, ΠΑΡΑΛΙΑ ΑΤΤΙΚΗΣ, ΠΕΥΚΙΑΣ ΑΤΤΙΚΗΣ, ΠΛΑΤΑΝΙΑ ΩΡΩΠΟΥ ΑΤΤΙΚΗΣ, ΠΟΝΤΙΩΝ ΑΤΤΙΚΗΣ, ΣΚΑΛΑ ΩΡΩΠΟΥ ΑΤΤΙΚΗΣ, ΣΥΚΑΜΙΝΟ ΑΤΤΙΚΗΣ, ΧΑΛΚΟΥΤΣΙ ΑΤΤΙΚΗΣ, ΩΡΩΠΟΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19016', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΣΠΑΤΩΝ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΣΕΡΑΦΕΙΜ ΣΠΑΤΩΝ ΑΤΤΙΚΗΣ, ΑΡΤΕΜΗ ΑΤΤΙΚΗΣ, ΒΕΛΑΝΙΔΙΑ ΑΤΤΙΚΗΣ, ΛΟΥΤΣΑ ΑΤΤΙΚΗΣ, ΝΕΑΠΟΛΗ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19018', Area: 'ΜΑΓΟΥΛΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19100', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΜΕΓΑΡΩΝ ΑΤΤΙΚΗΣ, ΑΙΓΕΙΡΟΥΣΕΣ ΑΤΤΙΚΗΣ, ΑΛΕΠΟΧΩΡΙ ΑΝΩ ΑΤΤΙΚΗΣ, ΑΛΕΠΟΧΩΡΙ ΚΑΤΩ ΑΤΤΙΚΗΣ, ΒΕΝΙΖΑ ΑΤΤΙΚΗΣ, ΒΛΥΧΑΔΑ ΑΤΤΙΚΗΣ, ΚΙΝΕΤΑ ΑΤΤΙΚΗΣ, ΛΑΚΚΑ ΚΑΛΟΓΗΡΟΥ ΑΤΤΙΚΗΣ, ΜΕΓΑΡΑ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΑΓΙΟΥ ΙΕΡΟΘΕΟΥ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΑΓΙΟΥ ΙΩΑΝΝΗ ΠΡΟΔΡΟΜΟΥ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΠΑΝΑΧΡΑΝΤΟΥ ΑΤΤΙΚΗΣ, ΠΑΧΑΚΙΟ ΑΤΤΙΚΗΣ, ΠΑΧΗ ΑΤΤΙΚΗΣ, ΣΠΑΡΤΑ ΑΤΤΙΚΗΣ, ΣΤΙΚΑΣ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19200', Area: 'ΕΛΕΥΣΙΝΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19300', Area: 'ΑΣΠΡΟΠΥΡΓΟΣ ΑΤΤΙΚΗΣ, ΔΙΥΛΙΣΤΗΡΙΑ ΑΣΠΡΟΠΥΡΓΟΥ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19400', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΚΟΡΩΠΙΟΥ ΑΤΤΙΚΗΣ, ΚΑΡΕΛΛΑΣ ΑΤΤΙΚΗΣ, ΚΙΤΣΙ ΑΤΤΙΚΗΣ, ΚΟΡΩΠΙ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19500', Area: 'ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΑΤΤΙΚΗΣ, ΑΝΩ ΘΟΡΙΚΟ ΑΤΤΙΚΗΣ, ΕΣΠΕΡΙΔΕΣ ΑΤΤΙΚΗΣ, ΘΟΡΙΚΟ ΑΤΤΙΚΗΣ, ΚΑΤΩ ΠΟΣΕΙΔΩΝΙΑ ΑΤΤΙΚΗΣ, ΚΑΤΩ ΣΟΥΝΙΟ ΑΤΤΙΚΗΣ, ΛΑΥΡΙΟ ΑΤΤΙΚΗΣ, ΛΕΓΡΕΝΑ ΑΤΤΙΚΗΣ, ΠΑΛΙΟΚΑΜΑΡΙΖΑ ΑΤΤΙΚΗΣ, ΠΛΑΚΑ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '19600', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΜΑΝΔΡΑΣ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΣΩΤΗΡ ΜΑΝΔΡΑΣ ΑΤΤΙΚΗΣ, ΑΓΙΟΣ ΧΑΡΑΛΑΜΠΟΣ ΜΑΝΔΡΑΣ ΑΤΤΙΚΗΣ, ΔΙΟΔΙΑ ΑΤΤΙΚΗΣ, ΘΕΑ ΑΤΤΙΚΗΣ, ΛΟΥΤΣΑ ΜΑΝΔΡΑΣ ΑΤΤΙΚΗΣ, ΜΑΓΟΥΛΑ ΑΤΤΙΚΗΣ, ΜΑΝΔΡΑ ΑΤΤΙΚΗΣ, ΜΟΝΗ ΟΣΙΟΥ ΜΕΛΕΤΙΟΥ ΑΤΤΙΚΗΣ, ΝΕΑ ΖΩΗ ΑΤΤΙΚΗΣ, ΝΕΟΣ ΠΟΝΤΟΣ ΑΤΤΙΚΗΣ, ΠΑΛΑΙΟΧΩΡΙ ΜΑΝΔΡΑΣ ΑΤΤΙΚΗΣ, ΠΟΥΡΝΑΡΙ ΑΤΤΙΚΗΣ', Prefecture: 'Αττικής' },
    { PostalCode: '80100', Area: 'ΑΒΛΕΜΟΝΑΣ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΗΛΙΑΣ ΚΑΡΒΟΥΝΑΔΩΝ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΑΛΕΞΑΝΔΡΑΔΕΣ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΑΝΩ ΛΙΒΑΔΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΑΡΑΙΟΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΒΙΑΡΑΔΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΓΑΛΑΝΙΑΝΑ ΑΝΤΙΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΓΟΥΔΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΔΟΚΑΝΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΔΡΥΜΩΝΑΡΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΔΡΥΜΩΝΑΣ ΜΥΡΤΙΔΙΩΝ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΑΛΑΜΟΣ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΑΛΗΣΠΕΡΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΑΛΟΚΑΙΡΙΝΕΣ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΑΜΠΟΣ ΠΑΛΑΙΟΠΟΛΕΩΣ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΑΡΒΟΥΝΑΔΕΣ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΑΤΣΟΥΝΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΑΤΩ ΧΩΡΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΑΨΑΛΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΕΡΑΜΩΤΟ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΟΜΗΝΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΟΝΤΟΛΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΥΘΗΡΑ ΛΑΚΩΝΙΑΣ, ΛΙΒΑΔΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΛΟΥΡΑΝΤΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΜΑΝΙΤΟΧΩΡΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΜΟΝΗ ΜΥΡΤΙΔΙΩΝ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΜΥΛΟΠΟΤΑΜΟΣ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΠΑΛΑΙΟΠΟΛΗ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΠΙΣΩ ΠΗΓΑΔΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΠΙΤΣΙΝΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΠΟΤΑΜΟΣ ΑΝΤΙΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΠΟΥΡΚΟ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΣΤΑΘΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΣΤΡΑΠΟΔΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΤΡΑΒΑΣΑΡΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΤΣΙΚΑΛΑΡΙΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΦΑΤΣΑΔΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΦΡΑΤΣΙΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΧΑΡΧΑΛΙΑΝΑ ΑΝΤΙΚΗΘΥΡΩΝ ΛΑΚΩΝΙΑΣ', Prefecture: 'Αττικής' },
    { PostalCode: '80200', Area: 'ΑΓΙΑ ΑΝΑΣΤΑΣΙΑ ΠΟΤΑΜΟΥ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΑΓΙΑ ΜΟΝΗ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΑΓΙΑ ΠΕΛΑΓΙΑ ΠΟΤΑΜΟΥ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΑΛΟΪΖΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΑΡΩΝΙΑΔΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΒΟΥΝΟ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΓΕΡΑΚΑΡΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΔΙΑΚΟΦΤΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΑΜΠΟΣ ΠΟΤΑΜΟΥ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΑΡΑΒΑΣ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΑΣΤΡΙΣΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΟΥΣΟΥΝΑΡΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΚΡΥΟΝΕΡΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΛΙΑΝΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΛΟΓΟΘΕΤΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΜΗΤΑΤΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΠΕΡΛΕΓΚΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΠΕΤΡΟΥΝΙ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΠΙΤΣΙΝΑΔΕΣ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΠΛΑΤΕΙΑ ΑΜΜΟΣ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΠΟΤΑΜΟΣ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΠΡΟΓΚΙΟ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΤΡΙΦΥΛΛΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ, ΦΡΙΛΙΓΚΙΑΝΙΚΑ ΚΥΘΗΡΩΝ ΛΑΚΩΝΙΑΣ', Prefecture: 'Αττικής' },
    { PostalCode: '25001', Area: 'ΑΝΩ ΖΑΧΛΩΡΟΥ ΑΧΑΙΑΣ, ΑΝΩ ΛΟΥΣΟΙ ΑΧΑΙΑΣ, ΑΥΛΩΝΑΣ ΚΑΛΑΒΡΥΤΩΝ ΑΧΑΙΑΣ, ΒΑΛΤΑ ΑΧΑΙΑΣ, ΒΙΛΙΒΙΝΑ ΑΧΑΙΑΣ, ΒΡΑΧΝΙΟ ΑΧΑΙΑΣ, ΒΡΥΣΑΡΙ (ΓΟΥΜΕΝΙΣΣΑ) ΑΧΑΙΑΣ, ΓΟΥΜΕΝΙΣΣΑ ΑΧΑΙΑΣ, ΔΙΓΕΛΑ ΑΧΑΙΑΣ, ΔΟΥΜΕΝΑ ΑΧΑΙΑΣ, ΔΡΟΣΑΤΟ ΑΧΑΙΑΣ, ΚΑΛΑΒΡΥΤΑ ΑΧΑΙΑΣ, ΚΑΛΛΙΦΩΝΙΟ ΑΧΑΙΑΣ, ΚΑΤΩ ΖΑΧΛΩΡΟΥ ΑΧΑΙΑΣ, ΚΑΤΩ ΛΟΥΣΟΙ ΑΧΑΙΑΣ, ΚΟΡΦΕΣ ΑΧΑΙΑΣ, ΚΟΥΤΕΛΗ ΑΧΑΙΑΣ, ΚΡΑΣΤΙΚΟΙ ΑΧΑΙΑΣ, ΛΕΥΚΗ ΣΙΓΟΥΝΙΟΥ ΑΧΑΙΑΣ, ΛΟΥΣΙΚΟ ΑΧΑΙΑΣ, ΜΟΝΗ ΑΓΙΑΣ ΛΑΥΡΑΣ ΑΧΑΙΑΣ, ΜΟΝΗ ΜΕΓΑΛΟΥ ΣΠΗΛΑΙΟΥ ΑΧΑΙΑΣ, ΜΠΟΣΙ ΑΧΑΙΑΣ, ΠΕΤΣΑΚΟΙ ΑΧΑΙΑΣ, ΠΛΑΤΑΝΙΩΤΙΣΣΑ ΑΧΑΙΑΣ, ΠΡΙΟΛΙΘΟΣ ΑΧΑΙΑΣ, ΡΟΓΟΙ ΑΧΑΙΑΣ, ΣΙΓΟΥΝΙ ΑΧΑΙΑΣ, ΣΚΕΠΑΣΤΟ ΑΧΑΙΑΣ, ΣΟΥΒΑΡΔΟ ΑΧΑΙΑΣ, ΣΠΑΡΤΙΝΟΥ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '25002', Area: 'ΑΛΙΣΣΟΣ ΑΧΑΙΑΣ, ΑΝΕΜΟΜΥΛΟΣ ΑΧΑΙΑΣ, ΒΡΑΧΝΑΙΙΚΑ ΑΧΑΙΑΣ, ΓΙΑΛΟΣ ΑΧΑΙΑΣ, ΔΡΕΣΘΕΝΑ ΑΧΑΙΑΣ, ΘΕΡΙΑΝΟ ΑΧΑΙΑΣ, ΚΑΜΕΝΙΤΣΑ ΑΧΑΙΑΣ, ΚΑΜΙΝΙΑ ΑΧΑΙΑΣ, ΚΑΤΩ ΑΛΙΣΣΟΣ ΑΧΑΙΑΣ, ΜΟΙΡΑΙΙΚΑ ΑΧΑΙΑΣ, ΜΟΝΟΔΕΝΔΡΙ ΑΧΑΙΑΣ, ΠΑΡΑΛΙΑ ΑΛΙΣΣΟΥ ΑΧΑΙΑΣ, ΠΡΟΦΗΤΗΣ ΕΛΙΣΣΑΙΟΣ ΑΧΑΙΑΣ, ΡΟΓΙΤΙΚΑ ΑΧΑΙΑΣ, ΤΣΟΥΚΑΛΑΙΙΚΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '25003', Area: 'ΑΝΩ ΔΙΑΚΟΠΤΟ ΑΧΑΙΑΣ, ΔΙΑΚΟΠΤΟ ΑΧΑΙΑΣ, ΕΛΑΙΩΝΑΣ ΑΙΓΙΑΛΕΙΑΣ ΑΧΑΙΑΣ, ΖΑΧΛΩΡΙΤΙΚΑ ΑΧΑΙΑΣ, ΚΑΘΟΛΙΚΟ ΑΧΑΙΑΣ, ΚΑΛΥΒΙΤΗΣ ΑΧΑΙΑΣ, ΚΕΡΝΙΤΣΑ ΑΧΑΙΑΣ, ΛΟΦΟΣ ΑΧΑΙΑΣ, ΜΕΤΟΧΙ ΕΛΑΙΩΝΑ ΑΧΑΙΑΣ, ΠΑΡΑΛΙΑ ΤΡΑΠΕΖΑΣ ΑΧΑΙΑΣ, ΠΟΥΝΤΑ ΑΧΑΙΑΣ, ΤΕΡΨΙΘΕΑ ΑΧΑΙΑΣ, ΤΡΑΠΕΖΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '25004', Area: 'ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΣΕΙΡΩΝ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΣΕΙΡΩΝ ΑΧΑΙΑΣ, ΑΝΩ ΧΟΒΟΛΗ ΑΧΑΙΑΣ, ΒΕΣΙΝΙ ΑΧΑΙΑΣ, ΔΑΦΝΗ ΚΑΛΑΒΡΥΤΩΝ ΑΧΑΙΑΣ, ΔΕΧΟΥΝΑΙΙΚΑ ΑΧΑΙΑΣ, ΚΡΗΝΗ ΣΕΙΡΩΝ ΑΧΑΙΑΣ, ΜΟΥΡΙΑ ΑΡΚΑΔΙΑΣ, ΝΑΣΙΑ ΑΧΑΙΑΣ, ΝΕΟΣ ΠΑΟΣ ΑΧΑΙΑΣ, ΠΑΛΑΙΟΣ ΠΑΟΣ ΑΧΑΙΑΣ, ΠΑΟΣ ΑΧΑΙΑΣ, ΠΕΥΚΟ ΑΧΑΙΑΣ, ΠΟΤΑΜΙΑ ΑΧΑΙΑΣ, ΠΟΥΡΝΑΡΙΑ ΑΡΚΑΔΙΑΣ, ΣΕΙΡΕΣ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '25006', Area: 'ΑΓΙΑ ΒΑΡΒΑΡΑ ΚΑΛΑΒΡΥΤΩΝ ΑΧΑΙΑΣ, ΑΓΡΙΔΙ ΠΕΡΙΣΤΕΡΑΣ ΑΧΑΙΑΣ, ΑΚΡΑΤΑ ΑΧΑΙΑΣ, ΑΜΠΕΛΟΣ ΑΧΑΙΑΣ, ΑΝΩ ΜΕΣΟΡΡΟΥΓΙ ΑΧΑΙΑΣ, ΒΑΛΙΜΗ ΑΧΑΙΑΣ, ΒΟΥΝΑΚΙ ΑΧΑΙΑΣ, ΓΚΟΥΜΑΙΙΚΑ ΑΧΑΙΑΣ, ΖΑΡΟΥΧΛΑ ΑΧΑΙΑΣ, ΚΡΑΘΙΟ ΑΧΑΙΑΣ, ΜΕΣΟΡΡΟΥΓΙ ΑΧΑΙΑΣ, ΠΑΛΑΙΟΣΤΑΦΙΔΑ ΑΧΑΙΑΣ, ΠΑΡΑΛΙΑ ΠΟΡΟΒΙΤΣΑΣ ΑΧΑΙΑΣ, ΠΕΡΙΣΤΕΡΑ ΚΑΛΑΒΡΥΤΩΝ ΑΧΑΙΑΣ, ΠΟΡΟΒΙΤΣΑ ΑΧΑΙΑΣ, ΠΟΤΑΜΙΤΙΚΟΣ ΓΙΑΛΟΣ ΑΧΑΙΑΣ, ΠΥΡΓΟΣ ΑΧΑΙΑΣ, ΣΟΛΟΣ ΑΧΑΙΑΣ, ΣΥΛΙΒΑΙΝΙΩΤΙΚΑ ΑΧΑΙΑΣ, ΦΟΥΡΝΟΙ ΑΧΑΙΑΣ, ΧΑΛΚΙΑΝΙΚΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '25007', Area: 'ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΦΙΛΙΩΝ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΒΛΑΣΙΟΣ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΣΚΟΤΑΝΗΣ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΚΑΛΑΒΡΥΤΩΝ ΑΧΑΙΑΣ, ΑΜΥΓΔΑΛΙΑ ΑΧΑΙΑΣ, ΑΝΩ ΚΛΕΙΤΟΡΙΑ ΑΧΑΙΑΣ, ΑΡΜΠΟΥΝΑ ΑΧΑΙΑΣ, ΒΑΛΤΟΣ ΑΧΑΙΑΣ, ΓΛΑΣΤΡΑ ΑΧΑΙΑΣ, ΔΡΥΜΟΣ ΑΧΑΙΑΣ, ΕΛΑΤΟΦΥΤΟ ΑΧΑΙΑΣ, ΖΑΡΕΛΙΑ ΑΧΑΙΑΣ, ΖΕΥΓΟΛΑΤΕΙΟ ΑΧΑΙΑΣ, ΚΑΛΑΜΑΚΙ ΚΑΛΑΒΡΥΤΩΝ ΑΧΑΙΑΣ, ΚΑΛΛΙΘΕΑ ΚΛΕΙΤΟΡΙΑΣ ΑΧΑΙΑΣ, ΚΑΛΥΒΙΑ ΑΧΑΙΑΣ, ΚΑΣΤΕΛΛΙ ΑΧΑΙΑΣ, ΚΑΣΤΡΙΑ ΑΧΑΙΑΣ, ΚΑΤΩ ΔΡΥΜΟΣ ΑΧΑΙΑΣ, ΚΕΡΑΣΙΑ ΛΕΧΟΥΡΙΟΥ ΑΧΑΙΑΣ, ΚΕΡΑΣΙΑ ΛΥΚΟΥΡΙΑΣ ΑΧΑΙΑΣ, ΚΛΕΙΤΟΡΙΑ ΑΧΑΙΑΣ, ΚΛΕΙΤΩΡΑΣ ΑΧΑΙΑΣ, ΚΡΙΝΟΦΥΤΑ ΑΧΑΙΑΣ, ΛΕΥΚΑΣΙΟ ΑΧΑΙΑΣ, ΛΥΚΟΥΡΙΑ ΑΧΑΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΑΘΑΝΑΣΙΟΥ ΑΧΑΙΑΣ, ΠΑΓΚΡΑΤΑΙΙΚΑ ΚΑΛΥΒΙΑ ΑΧΑΙΑΣ, ΠΑΓΚΡΑΤΙ ΑΧΑΙΑΣ, ΠΑΛΑΙΟΚΑΤΟΥΝΑ ΚΑΛΑΒΡΥΤΩΝ ΑΧΑΙΑΣ, ΠΛΑΝΗΤΕΡΟ ΑΧΑΙΑΣ, ΣΕΛΛΑ ΑΧΑΙΑΣ, ΣΚΟΤΑΝΗ ΑΧΑΙΑΣ, ΣΠΗΛΙΑ ΑΧΑΙΑΣ, ΣΤΕΝΟ ΑΧΑΙΑΣ, ΤΟΥΡΛΑΔΑ ΑΧΑΙΑΣ, ΦΙΛΙΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '25008', Area: 'ΑΓΙΑ ΕΛΕΟΥΣΑ ΑΧΑΙΑΣ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΠΕΤΡΩΤΟΥ ΑΧΑΙΑΣ, ΑΓΡΙΛΙΑ ΑΧΑΙΑΣ, ΑΝΩ ΜΑΖΑΡΑΚΙ ΑΧΑΙΑΣ, ΑΝΩ ΣΤΑΡΟΧΩΡΙ ΑΧΑΙΑΣ, ΑΝΩ ΧΡΥΣΟΠΗΓΗ ΑΧΑΙΑΣ, ΒΑΣΙΛΙΚΟ ΠΑΤΡΩΝ ΑΧΑΙΑΣ, ΒΕΤΑΙΙΚΑ ΑΧΑΙΑΣ, ΓΑΛΑΝΑΙΙΚΑ ΑΧΑΙΑΣ ΑΧΑΙΑΣ, ΓΚΑΝΕΙΚΑ ΑΧΑΙΑΣ ΑΧΑΙΑΣ, ΓΟΛΕΜΙ ΛΕΟΝΤΙΟΥ ΑΧΑΙΑΣ, ΔΑΦΝΟΥΛΑ ΑΧΑΙΑΣ, ΔΕΜΕΣΤΙΧΑ ΑΧΑΙΑΣ, ΕΛΛΗΝΙΚΟ ΑΧΑΙΑΣ, ΖΩΓΑ ΑΧΑΙΑΣ, ΘΩΜΕΙΚΑ ΑΧΑΙΑΣ, ΙΣΩΜΑ ΑΧΑΙΑΣ, ΚΑΛΑΝΙΣΤΡΑ ΑΧΑΙΑΣ, ΚΑΛΑΝΟΣ ΑΧΑΙΑΣ, ΚΑΛΟΥΣΙ ΑΧΑΙΑΣ, ΚΑΤΑΡΡΑΚΤΗΣ ΑΧΑΙΑΣ, ΚΑΤΣΑΙΤΕΙΚΑ ΑΧΑΙΑΣ, ΚΑΤΩ ΜΑΖΑΡΑΚΙ ΑΧΑΙΑΣ, ΚΑΤΩ ΠΛΑΤΑΝΟΒΡΥΣΗ ΑΧΑΙΑΣ, ΚΑΤΩ ΣΤΑΡΟΧΩΡΙ ΑΧΑΙΑΣ, ΚΟΙΜΗΣΗ ΑΧΑΙΑΣ, ΚΟΥΜΑΡΗΣ ΕΛΛΗΝΙΚΟΥ ΑΧΑΙΑΣ, ΚΟΥΝΑΒΑΙΙΚΑ ΑΧΑΙΑΣ, ΚΥΔΩΝΙΕΣ ΒΑΣΙΛΙΚΟΥ ΑΧΑΙΑΣ, ΚΥΔΩΝΙΕΣ ΧΑΛΑΝΔΡΙΤΣΑΣ ΑΧΑΙΑΣ, ΚΩΜΗ ΑΧΑΙΑΣ, ΛΑΚΚΩΜΑΤΑ ΑΧΑΙΑΣ, ΛΕΟΝΤΙΟ ΑΧΑΙΑΣ, ΜΑΣΤΟΡΑΙΙΚΑ ΣΤΑΜΑΙΙΚΑ ΑΧΑΙΑΣ, ΜΙΡΑΛΙ ΑΧΑΙΑΣ, ΜΙΤΟΠΟΛΗ ΑΧΑΙΑΣ, ΜΙΧΑΛΕΙΚΑ ΑΧΑΙΑΣ, ΜΙΧΑΣ ΑΧΑΙΑΣ, ΝΕΟ ΚΟΜΠΗΓΑΔΙ ΑΧΑΙΑΣ, ΝΕΟΧΩΡΙΟ ΕΛΛΗΝΙΚΟΥ ΑΧΑΙΑΣ, ΟΒΡΥΟΚΑΜΠΟΣ ΑΧΑΙΑΣ, ΠΛΑΤΑΝΟΒΡΥΣΗ ΑΧΑΙΑΣ, ΠΛΑΤΑΝΟΣ ΠΑΤΡΩΝ ΑΧΑΙΑΣ, ΠΡΕΒΕΔΟΣ ΑΧΑΙΑΣ, ΡΟΔΙΑ ΠΑΤΡΩΝ ΑΧΑΙΑΣ, ΣΟΥΒΑΛΙΩΤΕΙΚΑ ΑΧΑΙΑΣ, ΣΤΑΡΟΧΩΡΙ ΑΧΑΙΑΣ, ΣΤΕΡΝΑ ΑΧΑΙΑΣ, ΣΤΕΦΑΝΗ ΑΧΑΙΑΣ, ΤΡΟΥΣΑ ΑΧΑΙΑΣ, ΤΣΑΠΟΥΡΝΙΑ ΑΧΑΙΑΣ, ΦΑΡΑΙ ΑΧΑΙΑΣ, ΧΑΛΑΝΔΡΙΤΣΑ ΑΧΑΙΑΣ, ΧΡΥΣΑΥΓΗ ΑΧΑΙΑΣ, ΧΡΥΣΟΠΗΓΗ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '25009', Area: 'ΖΗΡΙΑ ΑΧΑΙΑΣ, ΚΑΜΑΡΕΣ ΑΧΑΙΑΣ, ΛΑΜΠΙΡΙ ΑΧΑΙΑΣ, ΜΠΟΥΚΑ ΑΧΑΙΑΣ, ΝΕΟΣ ΕΡΙΝΕΟΣ ΑΧΑΙΑΣ, ΠΕΥΚΑ ΚΑΜΑΡΩΝ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '25010', Area: 'ΑΙΓΕΙΡΑ ΑΧΑΙΑΣ, ΑΙΓΕΣ ΑΧΑΙΑΣ, ΑΛΜΥΡΟΣ ΑΧΑΙΑΣ, ΑΜΠΕΛΟΚΗΠΟΙ ΑΧΑΙΑΣ, ΒΕΛΑ ΑΧΑΙΑΣ, ΕΞΟΧΗ ΑΧΑΙΑΣ, ΚΑΣΑΝΕΒΑ ΑΧΑΙΑΣ, ΛΑΜΠΙΝΟΣ ΑΧΑΙΑΣ, ΜΟΝΑΣΤΗΡΙ ΑΧΑΙΑΣ, ΟΑΣΗ ΑΧΑΙΑΣ, ΠΕΡΙΘΩΡΙΟ ΑΧΑΙΑΣ, ΠΙΜΠΑΙΙΚΑ ΑΧΑΙΑΣ, ΣΕΛΙΑΝΑ ΑΧΑΙΑΣ, ΣΙΝΕΒΡΟ ΑΧΑΙΑΣ, ΧΡΥΣΑΝΘΙΟ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '25014', Area: 'ΑΝΩ ΠΟΤΑΜΙΑ ΑΧΑΙΑΣ, ΒΟΥΤΣΙΜΟΣ ΑΧΑΙΑΣ, ΚΑΛΑΜΙΑ ΑΧΑΙΑΣ, ΚΑΤΩ ΠΟΤΑΜΙΑ ΑΧΑΙΑΣ, ΚΟΚΚΙΝΙΕΣ ΑΧΑΙΑΣ, ΚΟΡΙΝΘΙΑΚΟ ΜΠΑΛΚΟΝΙ ΑΧΑΙΑΣ, ΠΑΡΑΛΙΑ ΠΛΑΤΑΝΟΥ ΑΧΑΙΑΣ, ΠΛΑΤΑΝΟΣ ΑΙΓΙΟΥ ΑΧΑΙΑΣ, ΤΣΙΒΛΟΣ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '25015', Area: 'ΑΒΡΑΜΙ ΑΧΑΙΑΣ, ΑΓΙΑ ΒΑΡΒΑΡΑ ΠΑΤΡΩΝ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΚΑΛΕΝΤΖΙΟΥ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΑΛΕΠΟΧΩΡΙΟΥ ΑΧΑΙΑΣ, ΑΓΡΑΠΙΔΙΕΣ ΑΧΑΙΑΣ, ΑΛΕΠΟΧΩΡΙ ΑΧΑΙΑΣ, ΑΣΤΕΡΙ ΑΧΑΙΑΣ, ΒΕΛΙΜΑΧΙ ΑΧΑΙΑΣ, ΓΑΛΑΡΟ ΑΧΑΙΑΣ, ΓΟΛΕΜΙ ΑΧΑΙΑΣ, ΔΡΟΣΙΑ ΑΧΑΙΑΣ, ΕΡΥΜΑΝΘΕΙΑ ΑΧΑΙΑΣ, ΚΑΛΕΝΤΖΙ ΑΧΑΙΑΣ, ΚΑΛΦΑΣ ΠΑΤΡΩΝ ΑΧΑΙΑΣ, ΚΑΡΔΑΣΙ ΑΧΑΙΑΣ, ΚΑΡΠΕΤΑ ΑΧΑΙΑΣ, ΚΑΤΩ ΑΓΙΑ ΜΑΡΙΝΑ ΑΧΑΙΑΣ, ΚΑΤΩ ΔΡΟΣΙΑ ΑΧΑΙΑΣ, ΚΑΤΩ ΜΑΣΤΡΑΝΤΩΝΙΟ ΑΧΑΙΑΣ, ΚΟΥΜΠΕΡΙ ΑΧΑΙΑΣ, ΚΡΙΘΑΡΑΚΙΑ ΑΧΑΙΑΣ, ΚΥΠΑΡΙΣΣΙ ΑΧΑΙΑΣ, ΜΑΝΕΣΙ ΠΑΤΡΩΝ ΑΧΑΙΑΣ, ΜΑΣΟΥΡΑΙΙΚΑ ΑΧΑΙΑΣ, ΜΑΣΤΡΑΝΤΩΝΗΣ ΑΧΑΙΑΣ, ΜΟΝΗ ΑΓΙΩΝ ΠΑΝΤΩΝ ΑΧΑΙΑΣ, ΜΟΝΗ ΚΟΙΜΗΣΕΩΣ ΘΕΟΤΟΚΟΥ ΝΟΤΕΝΩΝ ΑΧΑΙΑΣ, ΜΠΑΝΤΣΑΙΙΚΑ ΑΧΑΙΑΣ, ΜΠΑΡΑΚΕΣ ΑΧΑΙΑΣ, ΞΗΡΟΧΩΡΙ ΑΧΑΙΑΣ, ΠΑΝΟΥΣΑΙΙΚΑ ΑΧΑΙΑΣ, ΠΗΓΑΔΙΑ ΣΚΙΑΔΑ ΑΧΑΙΑΣ, ΠΤΕΡΗ ΔΡΟΣΙΑΣ ΑΧΑΙΑΣ, ΡΑΧΗ ΣΤΑΥΡΟΔΡΟΜΙΟΥ ΑΧΑΙΑΣ, ΡΟΥΠΑΚΙΑ ΑΧΑΙΑΣ, ΣΚΙΑΔΑΣ ΑΧΑΙΑΣ, ΣΚΟΥΡΑ ΑΧΑΙΑΣ, ΣΠΑΡΤΙΑ ΑΧΑΙΑΣ, ΣΤΑΥΡΟΔΡΟΜΙ ΑΧΑΙΑΣ, ΤΟΣΚΕΣ ΑΧΑΙΑΣ, ΧΙΟΝΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '25100', Area: 'ΑΓΙΑ ΑΝΝΑ ΚΟΥΝΙΝΑΣ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΗΛΙΑΣ ΔΑΦΝΩΝ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΚΕΡΥΝΕΙΑΣ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΜΑΥΡΙΚΙΟΥ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΑΙΓΙΟΥ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΑΙΓΙΟΥ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΑΧΑΙΑΣ, ΑΙΓΙΟ ΑΧΑΙΑΣ, ΑΛΣΟΣ ΑΧΑΙΑΣ, ΑΝΩ ΔΟΥΚΑΝΑΙΙΚΑ ΑΧΑΙΑΣ, ΑΝΩ ΖΗΡΙΑ ΑΧΑΙΑΣ, ΑΝΩ ΜΑΥΡΙΚΙ ΑΧΑΙΑΣ, ΑΝΩ ΣΑΛΜΕΝΙΚΟ ΑΧΑΙΑΣ, ΑΡΡΑΒΩΝΙΤΣΑ ΑΧΑΙΑΣ, ΑΧΛΑΔΙΑ ΑΧΑΙΑΣ, ΒΑΛΙΜΙΤΙΚΑ ΑΧΑΙΑΣ, ΒΕΡΙΝΟ ΑΧΑΙΑΣ, ΒΟΤΕΝΗ ΑΧΑΙΑΣ, ΒΟΥΝΟΠΥΡΓΟΣ ΑΧΑΙΑΣ, ΓΚΡΑΙΚΑ ΑΧΑΙΑΣ, ΓΡΗΓΟΡΗ ΑΧΑΙΑΣ, ΔΑΜΑΚΙΝΙ ΑΧΑΙΑΣ, ΔΑΦΝΕΣ ΑΧΑΙΑΣ, ΔΕΡΒΕΝΙ ΑΧΑΙΑΣ, ΔΗΜΗΤΡΟΠΟΥΛΟ ΑΧΑΙΑΣ, ΔΙΓΕΛΙΩΤΙΚΑ ΑΧΑΙΑΣ, ΔΟΥΚΑΝΑΙΙΚΑ ΑΧΑΙΑΣ, ΕΛΙΚΗ ΑΧΑΙΑΣ, ΕΠΤΑΠΙΤΤΑ ΑΧΑΙΑΣ, ΚΑΛΑΝΤΕΡΙ ΑΧΑΙΑΣ, ΚΑΤΩ ΜΑΥΡΙΚΙ ΑΧΑΙΑΣ, ΚΑΤΩ ΠΤΕΡΗ ΑΧΑΙΑΣ, ΚΑΤΩ ΣΑΛΜΕΝΙΚΟ ΑΧΑΙΑΣ, ΚΕΡΥΝΕΙΑ ΑΧΑΙΑΣ, ΚΟΥΛΟΥΡΑ ΑΧΑΙΑΣ, ΚΟΥΜΑΡΗ ΑΧΑΙΑΣ, ΚΟΥΝΙΝΑ ΑΧΑΙΑΣ, ΚΡΗΝΗ ΑΙΓΙΟΥ ΑΧΑΙΑΣ, ΛΑΚΚΑ ΑΙΓΙΑΛΕΙΑΣ ΑΧΑΙΑΣ, ΛΑΚΚΑ ΠΑΤΡΩΝ ΑΧΑΙΑΣ, ΛΟΓΓΟΣ ΑΧΑΙΑΣ, ΜΑΓΕΙΡΑΣ ΑΧΑΙΑΣ, ΜΑΜΟΥΣΙΑ ΑΧΑΙΑΣ, ΜΕΛΙΣΣΙΑ ΑΧΑΙΑΣ, ΜΕΡΤΙΔΙ ΑΧΑΙΑΣ, ΜΙΚΡΟΝΙ ΑΧΑΙΑΣ, ΜΟΝΗ ΑΓΙΑΣ ΕΛΕΟΥΣΑΣ ΑΧΑΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΙΩΑΝΝΟΥ ΘΕΟΛΟΓΟΥ ΑΧΑΙΑΣ, ΜΟΝΗ ΠΑΜΜΕΓΙΣΤΩΝ ΤΑΞΙΑΡΧΩΝ ΑΧΑΙΑΣ, ΜΟΝΗ ΠΕΠΕΛΕΝΙΤΣΗΣ ΑΧΑΙΑΣ, ΜΠΟΥΦΟΥΣΚΙΑ ΑΧΑΙΑΣ, ΜΥΡΟΒΡΥΣΗ ΑΧΑΙΑΣ, ΝΕΑ ΚΕΡΥΝΕΙΑ ΑΧΑΙΑΣ, ΝΕΟ ΣΕΛΜΕΝΙΚΟ ΑΧΑΙΑΣ, ΝΕΡΑΤΖΙΕΣ ΑΧΑΙΑΣ, ΝΙΚΟΛΑΙΙΚΑ ΑΧΑΙΑΣ, ΠΑΡΑΣΚΕΥΗ ΑΧΑΙΑΣ, ΠΕΛΕΚΙΣΤΡΑ ΑΧΑΙΑΣ, ΠΕΤΡΟΒΟΥΝΙ ΑΧΑΙΑΣ, ΠΤΕΡΗ ΑΙΓΙΑΛΕΙΑΣ ΑΧΑΙΑΣ, ΠΥΡΓΑΚΙ ΑΧΑΙΑΣ, ΡΙΖΟΜΥΛΟΣ ΑΧΑΙΑΣ, ΡΟΔΙΑ ΑΙΓΙΑΛΕΙΑΣ ΑΧΑΙΑΣ, ΡΟΔΟΔΑΦΝΗ ΑΧΑΙΑΣ, ΣΕΛΙΑΝΙΤΙΚΑ ΑΧΑΙΑΣ, ΣΕΛΙΝΟΥΣ ΑΧΑΙΑΣ, ΣΕΛΛΙ ΑΧΑΙΑΣ, ΣΤΑΥΡΙΑ ΑΧΑΙΑΣ, ΣΥΝΑΝΙΑ ΑΧΑΙΑΣ, ΣΩΤΗΡΑΣ ΑΙΓΙΟΥ ΑΧΑΙΑΣ, ΤΕΜΕΝΗ ΑΧΑΙΑΣ, ΤΟΥΜΠΑ ΑΧΑΙΑΣ, ΦΤΕΡΗ (ΠΤΕΡΗ ΑΙΓΙΑΛΕΙΑΣ) ΑΧΑΙΑΣ, ΦΩΝΗΣΚΑΡΙΑ ΑΧΑΙΑΣ, ΧΑΝΤΖΗ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '25200', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΑΧΑΙΑΣ, ΑΓΙΟΒΛΑΣΙΤΙΚΑ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΣΑΝΤΟΜΕΡΙΟΥ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΣΠΑΤΩΝ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΠΑΤΡΩΝ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΣΠΑΤΩΝ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΑΧΑΙΑΣ ΑΧΑΙΑΣ, ΑΛΥΚΕΣ ΑΧΑΙΑΣ, ΑΜΠΕΛΑΚΙΑ ΑΧΑΙΑΣ, ΑΝΩ ΑΧΑΙΑ ΑΧΑΙΑΣ, ΑΝΩ ΣΟΥΔΕΝΑΙΙΚΑ ΑΧΑΙΑΣ, ΑΠΙΔΕΩΝΑ ΑΧΑΙΑΣ, ΑΡΑΞΟΣ ΑΧΑΙΑΣ, ΑΡΛΑ ΑΧΑΙΑΣ, ΑΥΓΕΡΑΙΙΚΑ ΑΧΑΙΑΣ, ΑΧΑΙΚΟ ΑΧΑΙΑΣ, ΒΕΣΚΟΥΚΑΙΙΚΑ ΑΧΑΙΑΣ, ΒΥΘΟΥΛΚΑ ΑΧΑΙΑΣ, ΓΙΟΥΛΑΙΙΚΑ ΑΧΑΙΑΣ, ΓΟΜΟΣΤΟ ΑΧΑΙΑΣ, ΕΛΑΙΟΧΩΡΙ ΑΧΑΙΑΣ, ΖΑΜΠΕΤΕΙΚΑ ΑΧΑΙΑΣ, ΖΗΣΙΜΑΙΙΚΑ ΑΧΑΙΑΣ, ΘΩΜΑΙΙΚΑ ΑΓ.ΝΙΚΟΛΑΟΥ ΚΡΑΛΗΣ ΑΧΑΙΑΣ, ΘΩΜΑΙΙΚΑ ΑΧΑΙΑΣ, ΙΟΝΙΚΗ ΑΚΤΗ ΑΧΑΙΑΣ, ΚΑΓΚΑΔΙ ΑΧΑΙΑΣ, ΚΑΛΑΜΑΚΙ ΑΓ.ΝΙΚΟΛΑΟΥ ΑΧΑΙΑΣ, ΚΑΛΑΜΑΚΙ ΛΙΜΝΟΧΩΡΙΟΥ ΑΧΑΙΑΣ, ΚΑΠΕΛΗ ΑΧΑΙΑΣ, ΚΑΡΑΙΙΚΑ ΑΧΑΙΑΣ, ΚΑΡΑΜΕΣΙΝΑΙΙΚΑ ΑΧΑΙΑΣ, ΚΑΡΝΑΡΙ ΑΧΑΙΑΣ, ΚΑΡΥΑ ΠΕΤΡΟΧΩΡΙΟΥ ΑΧΑΙΑΣ, ΚΑΤΣΑΙΤΑΙΙΚΑ ΑΧΑΙΑΣ, ΚΑΤΩ ΑΧΑΙΑ ΑΧΑΙΑΣ, ΚΑΤΩ ΛΙΜΝΟΧΩΡΙ ΑΧΑΙΑΣ, ΚΕΦΑΛΑΙΙΚΑ ΑΧΑΙΑΣ, ΚΟΥΝΕΛΑΙΙΚΑ ΑΧΑΙΑΣ, ΚΡΙΝΟΣ ΑΧΑΙΑΣ, ΛΑΚΚΟΠΕΤΡΑ ΑΧΑΙΑΣ, ΛΑΜΠΡΑΙΙΚΑ ΑΧΑΙΑΣ, ΛΕΥΚΟΣ ΑΧΑΙΑΣ, ΛΙΜΑΝΑΚΙ ΑΧΑΙΑΣ, ΛΙΜΝΟΧΩΡΙ ΑΧΑΙΑΣ, ΛΟΓΟΘΕΤΗΣ ΑΧΑΙΑΣ, ΛΟΥΣΙΚΑ ΑΧΑΙΑΣ, ΜΑΖΑΙΙΚΑ ΑΧΑΙΑΣ, ΜΑΝΕΤΑΙΙΚΑ ΑΧΑΙΑΣ, ΜΑΤΑΡΑΓΚΑ ΑΧΑΙΑΣ, ΜΑΥΡΟ ΟΡΟΣ ΑΧΑΙΑΣ, ΜΟΝΗ ΑΓΙΑΣ ΜΑΡΙΝΑΣ ΜΑΡΙΤΣΗΣ ΑΧΑΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΝΙΚΟΛΑΟΥ ΣΠΑΤΩΝ ΑΧΑΙΑΣ, ΜΥΡΤΟΣ ΑΧΑΙΑΣ, ΝΕΟΧΩΡΙ ΧΑΡΑΥΓΗΣ ΑΧΑΙΑΣ, ΝΙΦΟΡΑΙΙΚΑ ΑΧΑΙΑΣ, ΠΑΛΙΑ ΠΕΡΙΣΤΕΡΑ ΑΧΑΙΑΣ, ΠΑΡΑΛΙΑ ΚΑΛΑΜΑΚΙΟΥ ΑΧΑΙΑΣ, ΠΑΡΑΛΙΑ ΚΑΤΩ ΑΧΑΙΑΣ ΑΧΑΙΑΣ, ΠΑΡΑΛΙΑ ΝΙΦΟΡΑΙΙΚΩΝ ΑΧΑΙΑΣ, ΠΕΤΑ ΑΧΑΙΑΣ, ΠΕΤΡΟΧΩΡΙ ΑΧΑΙΑΣ, ΠΗΓΑΔΙΑ ΧΑΡΑΥΓΗΣ ΑΧΑΙΑΣ, ΠΙΣΩ ΣΥΚΕΑ ΑΧΑΙΑΣ, ΠΟΙΜΕΝΟΧΩΡΙ ΑΧΑΙΑΣ, ΠΟΛΥΛΟΦΟ ΑΧΑΙΑΣ, ΠΟΡΤΕΣ ΑΧΑΙΑΣ, ΠΟΥΡΝΑΡΙ ΑΧΑΙΑΣ, ΡΑΧΗ ΑΧΑΙΑΣ, ΡΙΟΛΟΣ ΑΧΑΙΑΣ, ΣΑΝΤΟΜΕΡΙ ΑΧΑΙΑΣ, ΣΠΑΛΙΑΡΑΙΙΚΑ ΑΧΑΙΑΣ, ΣΠΑΝΑΙΙΚΑ ΑΧΑΙΑΣ, ΣΤΕΝΑΙΙΤΙΚΑ ΑΧΑΙΑΣ, ΤΑΞΙΑΡΧΕΣ ΑΧΑΙΑΣ, ΤΣΑΚΩΝΙΚΑ ΑΧΑΙΑΣ, ΥΨΗΛΗ ΡΑΧΗ ΑΧΑΙΑΣ, ΦΛΟΚΑ ΑΧΑΙΑΣ, ΦΡΑΓΚΑ ΑΧΑΙΑΣ, ΦΩΣΤΑΙΝΑ ΑΧΑΙΑΣ, ΧΑΙΚΑΛΙ ΑΧΑΙΑΣ, ΧΑΡΑΥΓΗ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26221', Area: 'ΠΑΤΡΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26222', Area: 'ΜΠΑΛΑΣ ΑΧΑΙΑΣ, ΠΑΤΡΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26223', Area: 'ΠΑΤΡΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26224', Area: 'ΠΑΤΡΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26225', Area: 'ΠΑΤΡΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26226', Area: 'ΠΑΤΡΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26331', Area: 'ΠΑΤΡΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26332', Area: 'ΠΑΤΡΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26333', Area: 'ΠΑΤΡΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26334', Area: 'ΟΒΡΙΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26335', Area: 'ΠΑΤΡΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26336', Area: 'ΠΑΤΡΕΩΝ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26441', Area: 'ΑΓΥΙΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26442', Area: 'ΠΑΤΡΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26443', Area: 'ΜΠΟΖΑΙΙΤΙΚΑ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '26500', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΠΛΑΤΑΝΟΒΡΥΣΗΣ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΣΟΥΛΙΟΥ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΠΑΤΡΩΝ ΑΧΑΙΑΣ, ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΣΑΡΑΒΑΛΙΟΥ ΑΧΑΙΑΣ, ΑΝΩ ΚΑΛΛΙΘΕΑ ΑΧΑΙΑΣ, ΒΕΡΝΑΡΔΑΙΙΚΑ ΑΧΑΙΑΣ, ΓΚΟΤΣΑΙΙΚΑ ΑΧΑΙΑΣ, ΔΕΜΕΝΙΚΑ ΑΧΑΙΑΣ, ΕΛΙΚΙΣΤΡΑ ΑΧΑΙΑΣ, ΖΑΡΚΑΛΗ ΑΧΑΙΑΣ, ΘΕΑ ΑΧΑΙΑΣ, ΚΑΛΛΙΘΕΑ ΠΑΤΡΩΝ ΑΧΑΙΑΣ, ΚΑΡΥΑ ΕΛΙΚΙΣΤΡΑΣ ΑΧΑΙΑΣ, ΚΑΤΩ ΑΡΑΧΩΒΙΤΙΚΑ ΑΧΑΙΑΣ, ΚΑΤΩ ΡΟΔΙΝΗ ΑΧΑΙΑΣ, ΚΕΦΑΛΟΒΡΥΣΟ ΣΑΡΑΒΑΛΙΟΥ ΑΧΑΙΑΣ, ΚΕΦΑΛΟΒΡΥΣΟ ΣΟΥΛΙΟΥ ΑΧΑΙΑΣ, ΚΡΗΝΗ ΠΑΤΡΩΝ ΑΧΑΙΑΣ, ΚΡΥΣΤΑΛΛΟΒΡΥΣΗ ΑΧΑΙΑΣ, ΚΥΑΝΗ ΑΚΤΗ ΑΧΑΙΑΣ, ΛΥΓΙΕΣ ΑΧΑΙΑΣ, ΜΑΥΡΟΜΑΝΔΗΛΑ ΑΧΑΙΑΣ, ΜΙΝΤΖΑΙΙΚΑ ΑΧΑΙΑΣ, ΜΙΝΤΙΛΟΓΛΙ ΑΧΑΙΑΣ, ΜΟΙΡΑ ΑΧΑΙΑΣ, ΜΟΝΗ ΟΜΠΛΟΥ ΑΧΑΙΑΣ, ΜΟΝΟΔΕΝΔΡΙ ΚΡΗΝΗΣ ΑΧΑΙΑΣ, ΜΠΑΚΑΡΙ ΑΧΑΙΑΣ, ΝΕΟ ΣΟΥΛΙ ΑΧΑΙΑΣ, ΠΑΝΑΓΙΑ ΑΧΑΙΑΣ, ΠΑΡΑΛΙΑ ΑΧΑΙΑΣ, ΠΑΥΛΟΚΑΣΤΡΟ ΑΧΑΙΑΣ, ΠΕΤΡΩΤΟ ΑΧΑΙΑΣ, ΠΗΓΗ ΑΧΑΙΑΣ, ΠΟΥΡΝΑΡΟΚΑΣΤΡΟ ΑΧΑΙΑΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΣΟΥΛΙΟΥ ΑΧΑΙΑΣ, ΡΥΑΚΙ ΑΧΑΙΑΣ, ΡΩΜΑΝΟΣ ΑΧΑΙΑΣ, ΣΑΡΑΒΑΛΙ ΑΧΑΙΑΣ, ΣΑΡΚΟΥΝΑΣ ΑΧΑΙΑΣ, ΧΑΤΖΗΛΙΑΚΟ ΑΧΑΙΑΣ', Prefecture: 'Αχαΐας' },
    { PostalCode: '32001', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΚΟΡΩΝΕΙΑΣ ΒΟΙΩΤΙΑΣ, ΑΛΙΑΡΤΟΣ ΒΟΙΩΤΙΑΣ, ΕΥΑΓΓΕΛΙΣΤΡΙΑ ΒΟΙΩΤΙΑΣ, ΜΑΖΙ ΒΟΙΩΤΙΑΣ, ΜΟΝΗ ΕΥΑΓΓΕΛΙΣΤΡΙΑΣ ΒΟΙΩΤΙΑΣ, ΠΕΤΡΑ ΒΟΙΩΤΙΑΣ, ΣΩΛΗΝΑΡΙ ΒΟΙΩΤΙΑΣ, ΥΨΗΛΑΝΤΗΣ ΒΟΙΩΤΙΑΣ', Prefecture: 'Βοιωτίας' },
    { PostalCode: '32002', Area: 'ΑΣΚΡΑΙΑ ΒΟΙΩΤΙΑΣ, ΒΑΓΙΑ ΒΟΙΩΤΙΑΣ, ΘΕΣΠΙΕΣ ΒΟΙΩΤΙΑΣ, ΛΕΟΝΤΑΡΙ ΒΟΙΩΤΙΑΣ, ΜΑΥΡΟΜΜΑΤΙ ΒΟΙΩΤΙΑΣ, ΝΕΟΧΩΡΙ ΒΟΙΩΤΙΑΣ', Prefecture: 'Βοιωτίας' },
    { PostalCode: '32003', Area: 'ΑΣΠΡΑ ΣΠΙΤΙΑ ΒΟΙΩΤΙΑΣ, ΠΑΡΑΛΙΑ ΔΙΣΤΟΜΟΥ ΒΟΙΩΤΙΑΣ', Prefecture: 'Βοιωτίας' },
    { PostalCode: '32004', Area: 'ΑΡΑΧΩΒΑ ΒΟΙΩΤΙΑΣ, ΖΕΜΕΝΟ ΒΟΙΩΤΙΑΣ, ΚΑΛΥΒΙΑ ΛΙΒΑΔΙΟΥ ΒΟΙΩΤΙΑΣ', Prefecture: 'Βοιωτίας' },
    { PostalCode: '32005', Area: 'ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΔΙΣΤΟΜΟΥ ΒΟΙΩΤΙΑΣ, ΔΙΣΤΟΜΟ ΒΟΙΩΤΙΑΣ', Prefecture: 'Βοιωτίας' },
    { PostalCode: '32006', Area: 'ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΚΥΡΙΑΚΙΟΥ ΒΟΙΩΤΙΑΣ, ΚΑΡΥΩΤΙ ΒΟΙΩΤΙΑΣ, ΚΥΡΙΑΚΙ ΒΟΙΩΤΙΑΣ, ΠΑΝΑΓΙΑ ΚΑΛΑΜΙΩΤΙΣΣΑ ΒΟΙΩΤΙΑΣ, ΤΑΡΣΟΣ ΒΟΙΩΤΙΑΣ', Prefecture: 'Βοιωτίας' },
    { PostalCode: '32009', Area: 'ΑΓΙΟΣ ΘΩΜΑΣ ΕΥΒΟΙΑΣ, ΚΛΕΙΔΙ ΕΥΒΟΙΑΣ, ΟΙΝΟΗ ΕΥΒΟΙΑΣ, ΠΑΝΑΓΙΑ ΤΑΝΑΓΡΑΣ ΕΥΒΟΙΑΣ, ΣΧΗΜΑΤΑΡΙ ΕΥΒΟΙΑΣ, ΤΑΝΑΓΡΑ ΕΥΒΟΙΑΣ', Prefecture: 'Βοιωτίας' },
    { PostalCode: '32100', Area: 'ΑΓΙΑ ΑΝΝΑ ΒΟΙΩΤΙΑΣ, ΑΓΙΑ ΤΡΙΑΔΑ ΒΟΙΩΤΙΑΣ, ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΑΛΑΛΚΟΜΕΝΩΝ ΒΟΙΩΤΙΑΣ, ΑΓΙΟΣ ΒΛΑΣΙΟΣ ΒΟΙΩΤΙΑΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΒΟΙΩΤΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΛΙΒΑΔΕΙΑΣ ΒΟΙΩΤΙΑΣ, ΑΚΟΝΤΙΟ ΒΟΙΩΤΙΑΣ, ΑΛΑΛΚΟΜΕΝΕΣ ΒΟΙΩΤΙΑΣ, ΑΝΑΛΗΨΗ ΒΟΙΩΤΙΑΣ, ΕΛΙΚΩΝΑΣ ΒΟΙΩΤΙΑΣ, ΖΕΛΙΤΣΑ ΒΟΙΩΤΙΑΣ, ΘΟΥΡΙΟ ΒΟΙΩΤΙΑΣ, ΚΟΡΩΝΕΙΑ ΒΟΙΩΤΙΑΣ, ΛΑΦΥΣΤΙ ΒΟΙΩΤΙΑΣ, ΛΙΒΑΔΕΙΑ ΒΟΙΩΤΙΑΣ, ΜΑΥΡΟΓΕΙΑ ΒΟΙΩΤΙΑΣ, ΜΑΥΡΟΝΕΡΙ ΒΟΙΩΤΙΑΣ, ΜΟΝΗ ΟΣΙΟΥ ΛΟΥΚΑ ΒΟΙΩΤΙΑΣ, ΠΕΡΑΧΩΡΙ ΒΟΙΩΤΙΑΣ, ΠΡΟΣΗΛΙΟ ΒΟΙΩΤΙΑΣ, ΡΩΜΑΙΙΚΟ ΒΟΙΩΤΙΑΣ, ΣΤΑΘΜΟΣ ΔΑΥΛΕΙΑΣ ΒΟΙΩΤΙΑΣ, ΣΤΑΘΜΟΣ ΛΙΒΑΔΕΙΑΣ ΒΟΙΩΤΙΑΣ, ΣΤΕΙΡΙΟ ΒΟΙΩΤΙΑΣ, ΤΖΙΜΑΙΙΚΑ ΒΟΙΩΤΙΑΣ, ΤΣΟΥΚΑΛΑΔΕΣ ΒΟΙΩΤΙΑΣ, ΧΑΙΡΩΝΕΙΑ ΒΟΙΩΤΙΑΣ', Prefecture: 'Βοιωτίας' },
    { PostalCode: '32200', Area: 'ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΒΟΙΩΤΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΒΟΙΩΤΙΑΣ, ΑΓΙΟΣ ΝΕΚΤΑΡΙΟΣ ΘΗΒΩΝ ΒΟΙΩΤΙΑΣ, ΑΚΡΑΙΦΝΙΟ ΒΟΙΩΤΙΑΣ, ΑΜΠΕΛΟΧΩΡΙ ΒΟΙΩΤΙΑΣ, ΑΡΜΑ ΒΟΙΩΤΙΑΣ, ΑΣΩΠΙΑ ΒΟΙΩΤΙΑΣ, ΔΑΦΝΗ ΒΟΙΩΤΙΑΣ, ΔΑΦΝΟΥΛΑ ΒΟΙΩΤΙΑΣ, ΕΛΕΩΝΑΣ  (ΕΛΑΙΩΝΑΣ) ΒΟΙΩΤΙΑΣ, ΘΗΒΑ ΒΟΙΩΤΙΑΣ, ΚΑΛΑΜΑΚΙ ΒΟΙΩΤΙΑΣ, ΚΑΛΛΙΘΕΑ ΒΟΙΩΤΙΑΣ, ΚΑΠΑΡΕΛΛΙ ΒΟΙΩΤΙΑΣ, ΚΑΣΤΡΙ ΒΟΙΩΤΙΑΣ, ΚΑΣΤΡΟ ΒΟΙΩΤΙΑΣ, ΚΟΚΚΙΝΟ ΒΟΙΩΤΙΑΣ, ΛΕΥΚΤΡΑ ΒΟΙΩΤΙΑΣ, ΛΟΥΤΟΥΦΙ ΒΟΙΩΤΙΑΣ, ΜΕΛΙΣΣΟΧΩΡΙ ΒΟΙΩΤΙΑΣ, ΜΟΝΗ ΑΓΙΑΣ ΤΡΙΑΔΑΣ ΒΟΙΩΤΙΑΣ, ΜΟΝΗ ΜΕΤΑΜΟΡΦΩΣΗΣ ΣΩΤΗΡΟΣ ΒΟΙΩΤΙΑΣ, ΜΟΝΗ ΠΕΛΑΓΙΑΣ ΒΟΙΩΤΙΑΣ, ΜΟΥΡΙΚΙ ΒΟΙΩΤΙΑΣ, ΝΕΟΧΩΡΑΚΙ ΒΟΙΩΤΙΑΣ, ΠΑΝΑΚΤΟ ΒΟΙΩΤΙΑΣ, ΠΑΡΑΛΙΑ ΛΙΒΑΔΟΣΤΡΑΣ ΒΟΙΩΤΙΑΣ, ΠΛΑΤΑΙΕΣ ΒΟΙΩΤΙΑΣ, ΠΛΑΤΑΝΑΚΙΑ ΒΟΙΩΤΙΑΣ, ΠΡΑΣΙΝΟ ΒΟΙΩΤΙΑΣ, ΠΥΛΗ ΒΟΙΩΤΙΑΣ, ΣΚΟΥΡΤΑ ΒΟΙΩΤΙΑΣ, ΣΚΡΟΠΟΝΕΡΙΑ ΒΟΙΩΤΙΑΣ, ΣΤΕΦΑΝΗ ΒΟΙΩΤΙΑΣ, ΣΤΡΟΒΙΚΙ ΒΟΙΩΤΙΑΣ, ΥΠΑΤΟ ΒΟΙΩΤΙΑΣ', Prefecture: 'Βοιωτίας' },
    { PostalCode: '32300', Area: 'ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΒΟΙΩΤΙΑΣ, ΑΓΙΟΣ ΣΠΥΡΙΔΩΝΑΣ ΒΟΙΩΤΙΑΣ, ΔΙΟΝΥΣΟΣ ΒΟΙΩΤΙΑΣ, ΚΑΡΥΑ ΒΟΙΩΤΙΑΣ, ΛΟΥΤΣΙ ΒΟΙΩΤΙΑΣ, ΟΡΧΟΜΕΝΟΣ ΒΟΙΩΤΙΑΣ, ΠΑΥΛΟΣ ΒΟΙΩΤΙΑΣ, ΠΥΡΓΟΣ ΒΟΙΩΤΙΑΣ', Prefecture: 'Βοιωτίας' },
    { PostalCode: '51030', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΓΡΕΒΕΝΩΝ, ΚΙΒΩΤΟΣ ΓΡΕΒΕΝΩΝ, ΚΛΗΜΑΤΑΚΙ ΓΡΕΒΕΝΩΝ, ΚΟΚΚΙΝΙΑ ΓΡΕΒΕΝΩΝ, ΚΡΙΘΑΡΑΚΙΑ ΓΡΕΒΕΝΩΝ, ΜΗΛΕΑ ΓΡΕΒΕΝΩΝ, ΝΕΑ ΤΡΑΠΕΖΟΥΣΑ ΓΡΕΒΕΝΩΝ, ΠΟΛΥΔΕΝΔΡΙ ΓΡΕΒΕΝΩΝ, ΤΑΞΙΑΡΧΗΣ ΓΡΕΒΕΝΩΝ', Prefecture: 'Γρεβενών' },
    { PostalCode: '51100', Area: 'ΑΓΑΛΑΙΟΙ ΓΡΕΒΕΝΩΝ, ΑΓΑΠΗ ΓΡΕΒΕΝΩΝ, ΑΓΙΑ ΤΡΙΑΔΑ ΓΡΕΒΕΝΩΝ, ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΓΡΕΒΕΝΩΝ, ΑΓΙΟΣ ΚΟΣΜΑΣ ΓΡΕΒΕΝΩΝ, ΑΗΔΟΝΙΑ ΓΡΕΒΕΝΩΝ, ΑΙΜΙΛΙΑΝΟΣ ΓΡΕΒΕΝΩΝ, ΑΜΥΓΔΑΛΙΕΣ ΓΡΕΒΕΝΩΝ, ΑΝΑΒΡΥΤΑ ΓΡΕΒΕΝΩΝ, ΑΝΘΡΑΚΙΑ ΓΡΕΒΕΝΩΝ, ΑΝΟΙΞΗ ΓΡΕΒΕΝΩΝ, ΑΝΩ ΕΚΚΛΗΣΙΑ ΓΡΕΒΕΝΩΝ, ΑΣΠΡΟΚΑΜΠΟΣ ΓΡΕΒΕΝΩΝ, ΒΑΡΗΣ ΓΡΕΒΕΝΩΝ, ΒΑΤΟΛΑΚΚΟΣ ΓΡΕΒΕΝΩΝ, ΓΕΩΡΓΙΤΣΑ ΓΡΕΒΕΝΩΝ, ΓΡΕΒΕΝΑ ΓΡΕΒΕΝΩΝ, ΔΑΣΑΚΙ ΓΡΕΒΕΝΩΝ, ΔΕΣΠΟΤΗΣ ΓΡΕΒΕΝΩΝ, ΔΗΜΗΤΡΑ ΓΡΕΒΕΝΩΝ, ΔΙΠΟΡΟ ΓΡΕΒΕΝΩΝ, ΔΟΞΑΡΑΣ ΓΡΕΒΕΝΩΝ, ΕΚΚΛΗΣΙΑ ΓΡΕΒΕΝΩΝ, ΕΛΑΤΟΣ ΓΡΕΒΕΝΩΝ, ΕΛΕΥΘΕΡΟ ΓΡΕΒΕΝΩΝ, ΕΛΕΥΘΕΡΟΧΩΡΙ ΓΡΕΒΕΝΩΝ, ΕΛΕΥΘΕΡΩΝ ΠΡΟΣΦΥΓΩΝ ΓΡΕΒΕΝΩΝ, ΕΞΑΡΧΟΣ ΓΡΕΒΕΝΩΝ, ΖΑΚΑΣ ΓΡΕΒΕΝΩΝ, ΙΤΕΑ ΓΡΕΒΕΝΩΝ, ΚΑΛΑΜΙΤΣΙ ΓΡΕΒΕΝΩΝ, ΚΑΛΗΡΑΧΗ ΓΡΕΒΕΝΩΝ, ΚΑΛΛΟΝΗ ΓΡΕΒΕΝΩΝ, ΚΑΛΟΧΙ ΓΡΕΒΕΝΩΝ, ΚΑΡΠΕΡΟ ΓΡΕΒΕΝΩΝ, ΚΑΣΤΡΟ ΓΡΕΒΕΝΩΝ, ΚΑΤΑΚΑΛΗ ΓΡΕΒΕΝΩΝ, ΚΕΝΤΡΟ ΓΡΕΒΕΝΩΝ, ΚΝΙΔΗ ΓΡΕΒΕΝΩΝ, ΚΟΣΜΑΤΙ ΓΡΕΒΕΝΩΝ, ΚΡΥΑ ΒΡΥΣΗ ΓΡΕΒΕΝΩΝ, ΚΥΔΩΝΙΕΣ ΓΡΕΒΕΝΩΝ, ΚΥΠΑΡΙΣΣΙ ΓΡΕΒΕΝΩΝ, ΚΥΡΑΚΑΛΗ ΓΡΕΒΕΝΩΝ, ΛΕΙΨΙΟ ΓΡΕΒΕΝΩΝ, ΛΟΧΜΗ ΓΡΕΒΕΝΩΝ, ΜΑΥΡΑΝΑΙΟΙ ΓΡΕΒΕΝΩΝ, ΜΑΥΡΟΝΟΡΟΣ ΓΡΕΒΕΝΩΝ, ΜΕΓΑΛΟ ΣΕΙΡΗΝΙ ΓΡΕΒΕΝΩΝ, ΜΕΓΑΡΟ ΓΡΕΒΕΝΩΝ, ΜΕΛΙΣΣΙ ΓΡΕΒΕΝΩΝ, ΜΕΣΟΛΑΚΚΟΣ ΓΡΕΒΕΝΩΝ, ΜΙΚΡΟ ΣΕΙΡΗΝΙΟ ΓΡΕΒΕΝΩΝ, ΜΙΚΡΟΚΛΕΙΣΟΥΡΑ ΓΡΕΒΕΝΩΝ, ΜΟΝΑΧΙΤΙ ΓΡΕΒΕΝΩΝ, ΜΥΡΣΙΝΑ ΓΡΕΒΕΝΩΝ, ΝΕΟΧΩΡΙ ΓΡΕΒΕΝΩΝ, ΝΗΣΙ ΓΡΕΒΕΝΩΝ, ΟΡΟΠΕΔΙΟ ΓΡΕΒΕΝΩΝ, ΠΑΛΑΙΟΧΩΡΙ ΓΡΕΒΕΝΩΝ, ΠΑΡΟΡΕΙΟ ΓΡΕΒΕΝΩΝ, ΠΕΡΙΒΟΛΑΚΙ ΓΡΕΒΕΝΩΝ, ΠΙΣΤΙΚΟ ΓΡΕΒΕΝΩΝ, ΠΟΝΤΙΝΗ ΓΡΕΒΕΝΩΝ, ΠΟΡΟΣ ΓΡΕΒΕΝΩΝ, ΠΥΛΩΡΟΙ ΓΡΕΒΕΝΩΝ, ΡΟΔΙΑ ΓΡΕΒΕΝΩΝ, ΣΑΡΑΚΗΝΑ ΓΡΕΒΕΝΩΝ, ΣΠΗΛΑΙΟ ΓΡΕΒΕΝΩΝ, ΣΤΑΥΡΟΣ ΓΡΕΒΕΝΩΝ, ΣΥΔΕΝΔΡΟ ΓΡΕΒΕΝΩΝ, ΤΡΙΚΟΚΚΙΑ ΓΡΕΒΕΝΩΝ, ΤΡΙΚΟΡΦΟ ΓΡΕΒΕΝΩΝ, ΤΡΙΚΩΜΟ ΓΡΕΒΕΝΩΝ, ΤΡΙΦΥΛΛΙ ΓΡΕΒΕΝΩΝ, ΦΕΛΛΙΟ ΓΡΕΒΕΝΩΝ', Prefecture: 'Γρεβενών' },
    { PostalCode: '51200', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΔΕΣΚΑΤΗΣ ΓΡΕΒΕΝΩΝ, ΓΗΛΟΦΟΣ ΓΡΕΒΕΝΩΝ, ΔΑΣΟΧΩΡΙ ΓΡΕΒΕΝΩΝ, ΔΕΣΚΑΤΗ ΓΡΕΒΕΝΩΝ, ΔΙΑΣΕΛΛΑΚΙ ΓΡΕΒΕΝΩΝ, ΜΟΝΗ ΑΓIOY ΝΙΚΑΝΟΡΟΣ ΓΡΕΒΕΝΩΝ, ΠΑΛΙΟΥΡΙΑ ΓΡΕΒΕΝΩΝ, ΠΑΝΑΓΙΑ ΓΡΕΒΕΝΩΝ, ΠΑΡΑΣΚΕΥΗ ΓΡΕΒΕΝΩΝ, ΣΚΟΥΜΤΣΙΑ ΓΡΕΒΕΝΩΝ', Prefecture: 'Γρεβενών' },
    { PostalCode: '66031', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥH ΔΡΑΜΑΣ, ΚΑΛΑΜΠΑΚΙ ΔΡΑΜΑΣ, ΚΑΛΑΜΩΝ ΔΡΑΜΑΣ, ΝΕΡΟΦΡΑΚΤΗΣ ΔΡΑΜΑΣ, ΦΤΕΛΙΑ ΔΡΑΜΑΣ', Prefecture: 'Δράμας' },
    { PostalCode: '66032', Area: 'ΑΓΟΡA ΔΡΑΜΑΣ, ΑΙΓΕΙΡΟΣ ΔΡΑΜΑΣ, ΑΝΩ ΚΕΦΑΛΑΡΙ ΔΡΑΜΑΣ, ΒΑΘΥΣΠΗΛΟ ΔΡΑΜΑΣ, ΒΑΘΥΧΩΡΙ ΔΡΑΜΑΣ, ΕΥΡΥΠΕΔΟ ΔΡΑΜΑΣ, ΚΑΤΩ ΚΕΦΑΛΑΡΙ ΔΡΑΜΑΣ, ΚΥΡΙΑ ΔΡΑΜΑΣ, ΠΕΡΙΣΤΕΡΙΑ ΔΡΑΜΑΣ, ΠΗΓΑΔΙΑ ΔΡΑΜΑΣ, ΥΨΗΛΟ ΔΡΑΜΑΣ', Prefecture: 'Δράμας' },
    { PostalCode: '66033', Area: 'ΑΓΙΟΣ ΜΗΝΑΣ ΔΡΑΜΑΣ, ΑΧΛΑΔΙΑ ΔΡΑΜΑΣ, ΑΧΛΑΔΟΜΗΛΕΑ ΔΡΑΜΑΣ, ΒΑΘΥΤΟΠΟΣ ΔΡΑΜΑΣ, ΒΩΛΑΞ ΔΡΑΜΑΣ, ΓΡΑΝΙΤΗΣ ΔΡΑΜΑΣ, ΔΑΣΩΤΟ ΔΡΑΜΑΣ, ΔΕΛΤΑ ΔΡΑΜΑΣ, ΕΞΟΧΗ ΔΡΑΜΑΣ, ΚΑΤΑΣΚΗΝΩΣΕΙΣ ΔΡΑΜΑΣ, ΚΑΤΑΦΥΤΟ ΔΡΑΜΑΣ, ΚΑΤΩ ΒΡΟΝΤΟΥ ΔΡΑΜΑΣ, ΚΑΤΩ ΝΕΥΡΟΚΟΠΙ ΔΡΑΜΑΣ, ΛΕΥΚΟΓΕΙΑ ΔΡΑΜΑΣ, ΜΙΚΡΟΚΛΕΙΣΟΥΡΑ ΔΡΑΜΑΣ, ΜΙΚΡΟΜΗΛΕΑ ΔΡΑΜΑΣ, ΟΧΥΡΟ ΔΡΑΜΑΣ, ΠΑΓΟΝΕΡΙ ΔΡΑΜΑΣ, ΠΕΡΑΣΜΑ ΔΡΑΜΑΣ, ΠΕΡΙΘΩΡΙ ΔΡΑΜΑΣ, ΠΕΡΙΧΩΡΑ ΔΡΑΜΑΣ, ΠΟΤΑΜΟΙ ΔΡΑΜΑΣ, ΧΡΥΣΟΚΕΦΑΛΟΣ ΔΡΑΜΑΣ', Prefecture: 'Δράμας' },
    { PostalCode: '66035', Area: 'ΑΗΔΟΝΟΚΑΣΤΡΟ ΔΡΑΜΑΣ, ΔΙΠΟΤΑΜΑ ΔΡΑΜΑΣ, ΔΡΥΜΙΑ ΞΑΝΘΗΣ, ΘΟΛΟΣ ΔΡΑΜΑΣ, ΚΑΠΝΟΦΥΤΟ ΔΡΑΜΑΣ, ΚΑΡΠΟΦΟΡΟ ΔΡΑΜΑΣ, ΚΑΤΩ ΘΟΛΟΣ ΔΡΑΜΑΣ, ΚΡΗΝΗ ΔΡΑΜΑΣ, ΜΕΣΟΧΩΡΙ ΔΡΑΜΑΣ, ΜΥΡΤΟΥΣΑ ΞΑΝΘΗΣ, ΞΑΓΝΑΝΤΟ ΔΡΑΜΑΣ, ΠΑΡΑΝΕΣΤΙ ΔΡΑΜΑΣ, ΠΑΣΧΑΛΙΑ ΞΑΝΘΗΣ, ΠΕΡΙΒΛΕΠΤΟ ΔΡΑΜΑΣ, ΠΟΛΥΝΕΡΙΟ ΔΡΑΜΑΣ, ΠΟΛΥΣΥΚΟ ΔΡΑΜΑΣ, ΠΡΑΣΙΝΑΔΑ ΔΡΑΜΑΣ, ΣΙΛΛΗ ΔΡΑΜΑΣ, ΣΤΕΡΝΑ ΔΡΑΜΑΣ, ΤΕΜΕΝΟΣ ΔΡΑΜΑΣ, ΧΑΛΕΠΙ ΞΑΝΘΗΣ', Prefecture: 'Δράμας' },
    { PostalCode: '66100', Area: 'ΑΔΡΙΑΝΗ ΔΡΑΜΑΣ, ΑΜΠΕΛΑΚΙΑ ΔΡΑΜΑΣ, ΑΡΓΥΡΟΥΠΟΛH ΔΡΑΜΑΣ, ΒΑΘΥΛΑΚΚΟΣ ΔΡΑΜΑΣ, ΔΡΑΜΑ ΔΡΑΜΑΣ, ΚΑΛΛΙΦΥΤΟΣ ΔΡΑΜΑΣ, ΚΑΛΟΣ ΑΓΡΟΣ ΔΡΑΜΑΣ, ΚΟΥΔΟΥΝΙΑ ΔΡΑΜΑΣ, ΜΑΚΡΥΠΛΑΓΙΟ ΔΡΑΜΑΣ, ΜΑΥΡΟΒΑΤΟΣ ΔΡΑΜΑΣ, ΜΕΓΑΛΟΚΑΜΠΟΣ ΔΡΑΜΑΣ, ΜΕΤΑΜΟΡΦΩΣΗ ΣΩΤΗΡΟΣ ΔΡΑΜΑΣ, ΜΙΚΡΟΚΑΜΠΟΣ ΔΡΑΜΑΣ, ΜΙΚΡΟΧΩΡΙ ΔΡΑΜΑΣ, ΜΟΝΑΣΤΗΡΑΚΙ ΔΡΑΜΑΣ, ΜΥΛΟΠΟΤΑΜΟΣ ΔΡΑΜΑΣ, ΝEΑ ΣΕΒΑΣΤΕΙΑ ΔΡΑΜΑΣ, ΝΙΚΟΤΣΑΡΑ ΔΡΑΜΑΣ, ΞΗΡΟΠΟΤΑΜΟΣ ΔΡΑΜΑΣ, ΠΑΝΟΡΑΜΑ ΚΑΛΛΙΦΥΤΟΥ ΔΡΑΜΑΣ, ΠΕΤΡΟΥΣΑ ΔΡΑΜΑΣ, ΠΟΛΥΚΑΡΠΟΣ ΔΡΑΜΑΣ, ΠΥΡΓΟΙ ΔΡΑΜΑΣ, ΣΙΤΑΓΡΟΙ ΔΡΑΜΑΣ, ΣΤΑΥΡΟΣ ΔΡΑΜΑΣ, ΤΑΞΙΑΡΧΕΣ ΔΡΑΜΑΣ, ΧΩΡΙΣΤΗ ΔΡΑΜΑΣ', Prefecture: 'Δράμας' },
    { PostalCode: '66200', Area: 'ΑΓΓΙΤΗΣ ΔΡΑΜΑΣ, ΑΝΘΟΧΩΡΙ ΔΡΑΜΑΣ, ΓΡΑΜΜΕΝΗ ΔΡΑΜΑΣ, ΚΑΛΗ ΒΡΥΣΗ ΔΡΑΜΑΣ, ΚΑΛΛΙΘΕΑ ΔΡΑΜΑΣ, ΚΟΚΚΙΝΟΓΕΙΑ ΔΡΑΜΑΣ, ΠΗΓΕΣ ΔΡΑΜΑΣ, ΠΡΟΣΟΤΣΑΝΗ ΔΡΑΜΑΣ, ΧΑΡΙΤΩΜΕΝΗ ΔΡΑΜΑΣ', Prefecture: 'Δράμας' },
    { PostalCode: '66300', Area: 'ΑΓΙΟΣ ΑΘAΝΑΣΙΟΣ ΔΡΑΜΑΣ, ΔΟΞΑΤΟ ΔΡΑΜΑΣ', Prefecture: 'Δράμας' },
    { PostalCode: '85001', Area: 'ΓΛΑΡΟΣ ΑΓΑΘΟΝΗΣΙΟΥ ΣΑΜΟΥ, ΚΟΥΝΕΛΙ ΝΗΣΟΣ ΣΑΜΟΥ, ΛΕΙΨΟΙ ΔΩΔ/ΝΗΣΟΥ, ΜΕΓΑΛΟ ΧΩΡΙΟ ΑΓΑΘΟΝΗΣΙΟΥ ΣΑΜΟΥ, ΜΙΚΡΟ ΧΩΡΙΟ ΑΓΑΘΟΝΗΣΙΟΥ ΣΑΜΟΥ, ΝΕΡΑ ΑΓΑΘΟΝΗΣΙΟΥ ΣΑΜΟΥ, ΦΡΑΓΚΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΨΑΘΟΝΗΣΙ ΣΑΜΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85002', Area: 'ΑΓΙΟΣ ΑΝΤΩΝΙΟΣ ΤΗΛΟΥ ΔΩΔ/ΝΗΣΟΥ, ΑΝΤΙΤΗΛΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΓΑΙΔΑΡΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΛΙΒΑΔΙΑ ΤΗΛΟΥ ΔΩΔ/ΝΗΣΟΥ, ΜΕΓΑΛΟ ΧΩΡΙΟ ΤΗΛΟΥ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85003', Area: 'ΑΓΑΘΟΝΗΣΙΟΥ ΔΩΔΕΚΑΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85100', Area: 'ΑΜΜΟΥΔΕΣ ΔΩΔ/ΝΗΣΟΥ, ΒΡΥΣΙΑ ΔΩΔ/ΝΗΣΟΥ, ΚΟΣΚΙΝΟΥ ΔΩΔ/ΝΗΣΟΥ, ΚΡΗΤΙΚΑ ΔΩΔ/ΝΗΣΟΥ, ΜΑΚΡΥ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΡΟΔΟΣ ΔΩΔ/ΝΗΣΟΥ, ΣΓΟΥΡΟΥ ΔΩΔ/ΝΗΣΟΥ, ΤΣΑΙΡΙ ΔΩΔ/ΝΗΣΟΥ, ΦΑΛΗΡΑΚΙ ΔΩΔ/ΝΗΣΟΥ, ΧΗΝΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΨΙΝΘΟΣ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85101', Area: 'ΙΑΛΥΣΟΣ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85102', Area: 'ΑΡΧΑΓΓΕΛΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΑΛΑΘΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΟΛΥΜΠΙΑ ΔΩΔ/ΝΗΣΟΥ, ΜΑΛΩΝ ΔΩΔ/ΝΗΣΟΥ, ΜΑΣΑΡΗ ΔΩΔ/ΝΗΣΟΥ, ΜΟΝΑΣΤΗΡΙ Η ΤΣΑΜΠΙΚΑ ΔΩΔ/ΝΗΣΟΥ, ΣΤΕΓΝΑ ΔΩΔ/ΝΗΣΟΥ, ΧΑΡΑΚΙ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85103', Area: 'ΑΦΑΝΤΟΥ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85104', Area: 'ΚΡΕΜΑΣΤΗ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85105', Area: 'ΚΑΛΥΘΙΕΣ ΔΩΔ/ΝΗΣΟΥ, ΛΑΔΙΚΟ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85106', Area: 'ΑΓΙΑ ΕΛΕΟΥΣΑ ΔΩΔ/ΝΗΣΟΥ, ΑΕΡΟΛΙΜΕΝΑΣ ΔΩΔ/ΝΗΣΟΥ, ΑΠΟΛΛΩΝΑ ΔΩΔ/ΝΗΣΟΥ, ΑΡΧΙΠΟΛΗ ΔΩΔ/ΝΗΣΟΥ, ΒΑΓΙΕΣ ΔΩΔ/ΝΗΣΟΥ, ΔΑΜΑΤΡΙΑ ΔΩΔ/ΝΗΣΟΥ, ΔΙΜΥΛΙΑ ΔΩΔ/ΝΗΣΟΥ, ΕΛΕΟΥΣΑ ΔΩΔ/ΝΗΣΟΥ, ΕΠΑΝΩ ΚΑΛΑΜΩΝΑΣ ΔΩΔ/ΝΗΣΟΥ, ΘΕΟΛΟΓΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΑΛΑΒΑΡΔΑ ΔΩΔ/ΝΗΣΟΥ, ΚΑΠΙΟ ΔΩΔ/ΝΗΣΟΥ, ΚΑΤΩ ΚΑΛΑΜΩΝ ΔΩΔ/ΝΗΣΟΥ, ΜΑΡΙΤΣΑ ΔΩΔ/ΝΗΣΟΥ, ΠΑΡΑΔΕΙΣΙ ΔΩΔ/ΝΗΣΟΥ, ΠΑΣΤΙΔΑ ΔΩΔ/ΝΗΣΟΥ, ΠΛΑΤΑΝΙΑ  ΔΩΔ/ΝΗΣΟΥ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΔΩΔ/ΝΗΣΟΥ, ΣΑΛΑΚΟΣ ΔΩΔ/ΝΗΣΟΥ, ΣΟΡΩΝΗ ΔΩΔ/ΝΗΣΟΥ, ΦΑΝΕΣ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85107', Area: 'ΒΛΙΧΑ ΔΩΔ/ΝΗΣΟΥ, ΛΙΝΔΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΕΥΚΟΙ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85108', Area: 'ΑΓΙΟΣ ΙΣΙΔΩΡΟΣ ΔΩΔ/ΝΗΣΟΥ, ΕΜΠΩΝΑΣ ΔΩΔ/ΝΗΣΟΥ, ΚΑΜΕΙΡΟΣ ΣΚΑΛΑ ΔΩΔ/ΝΗΣΟΥ, ΚΡΗΤΗΝΙΑ ΔΩΔ/ΝΗΣΟΥ, ΛΑΚΚΙ ΡΟΔΟΥ ΔΩΔ/ΝΗΣΟΥ, ΜΑΝΔΡΙΚΟ ΔΩΔ/ΝΗΣΟΥ, ΜΟΝΟΛΙΘΟΣ  ΔΩΔ/ΝΗΣΟΥ, ΣΙΑΝΑ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85109', Area: 'ΑΓΙΟΣ ΠΑΥΛΟΣ ΚΑΤΤΑΒΙΑΣ ΔΩΔ/ΝΗΣΟΥ, ΑΠΟΛΑΚΚΙΑ ΔΩΔ/ΝΗΣΟΥ, ΑΡΝΙΘΑ ΔΩΔ/ΝΗΣΟΥ, ΑΣΚΛΗΠΙΕΙΟ ΔΩΔ/ΝΗΣΟΥ, ΒΑΤΙ ΔΩΔ/ΝΗΣΟΥ, ΓΕΝΝΑΔΙΟ ΔΩΔ/ΝΗΣΟΥ, ΙΣΤΡΙΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΑΤΤΑΒΙΑ ΔΩΔ/ΝΗΣΟΥ, ΚΙΟΤΑΡΙ ΔΩΔ/ΝΗΣΟΥ, ΛΑΕΡΜΑ ΔΩΔ/ΝΗΣΟΥ, ΛΑΡΔΟΣ ΔΩΔ/ΝΗΣΟΥ, ΛΑΧΑΝΙΑ ΔΩΔ/ΝΗΣΟΥ, ΜΑΧΑΙΡΙΑ ΔΩΔ/ΝΗΣΟΥ, ΜΕΣΑΝΑΓΡΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΛΗΜΜΥΡΙ ΔΩΔ/ΝΗΣΟΥ, ΠΡΑΣΟΝΗΣΙ ΔΩΔ/ΝΗΣΟΥ, ΠΡΟΦΙΛΙΑ ΔΩΔ/ΝΗΣΟΥ, ΠΥΛΩΝΑΣ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85110', Area: 'ΑΓΙΟΣ ΘΕΟΔΩΡΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΑΛΙΜΙΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΡΕΒΑΤΙΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΜΑΕΛΟΝΗΣΙ ΧΑΛΚΗΣ ΔΩΔ/ΝΗΣΟΥ, ΤΡΑΓΟΥΣΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΧΑΛΚΗ ΔΩΔ/ΝΗΣΟΥ, ΧΩΡΙΟ ΧΑΛΚΗΣ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85111', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΑΓΡΙΕΛΑΙΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΑΣΤΕΛΟΡΙΖΟ (ΜΕΓΙΣΤΗ) ΔΩΔ/ΝΗΣΟΥ, ΜΑΥΡΟ ΠΟΙΝΙ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΟΛΥΦΑΔΟΣ ΔΥΟ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΟΛΥΦΑΔΟΣ ΕΝΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΡΩ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΣΤΡΟΓΓΥΛΗ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΨΩΜΙ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85200', Area: 'ΑΡΓΙΝΩΝΤΑ ΔΩΔ/ΝΗΣΟΥ, ΑΡΓΟΣ ΔΩΔ/ΝΗΣΟΥ, ΑΡΜΕΟΣ ΔΩΔ/ΝΗΣΟΥ, ΒΑΘΥ ΚΑΛΥΜΝΟΥ ΔΩΔ/ΝΗΣΟΥ, ΒΛΥΧΑΔΙΑ ΔΩΔ/ΝΗΣΟΥ, ΒΟΘΥΝΟΙ ΔΩΔ/ΝΗΣΟΥ, ΕΜΠΟΡΕΙΟΣ ΔΩΔ/ΝΗΣΟΥ, ΙΜΙΑ - ΛΙΜΝΙΑ ΔΥΟ (ΝΗΣΟΣ) ΔΩΔ/ΝΗΣΟΥ, ΙΜΙΑ - ΛΙΜΝΙΑ ΕΝΑ (ΝΗΣΟΣ) ΔΩΔ/ΝΗΣΟΥ, ΚΑΛΟΛΙΜΝΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΑΛΥΜΝΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΑΜΑΡΙ ΔΩΔ/ΝΗΣΟΥ, ΚΑΣΤΕΛΙ ΔΩΔ/ΝΗΣΟΥ, ΜΑΣΟΥΡΙ ΔΩΔ/ΝΗΣΟΥ, ΜΑΥΡΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΜΑΥΡΟΠΙΝΑΚΙ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΜΥΡΤΙΕΣ ΔΩΔ/ΝΗΣΟΥ, ΝΕΡΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΑΝΟΡΜΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΛΑΤΑΝΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΛΑΤΗ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΣΑΦΟΝΗΔΙ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΣΚΑΛΙΑ ΔΩΔ/ΝΗΣΟΥ, ΤΕΛΕΝΔΟΣ  ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΧΤΕΝΙ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΧΩΡΙΟ ΔΩΔ/ΝΗΣΟΥ, ΨΕΡΙΜΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85300', Area: 'ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΔΩΔ/ΝΗΣΟΥ, ΑΓΙΟΣ ΦΩΚΑΣ ΚΩ ΔΩΔ/ΝΗΣΟΥ, ΑΣΦΕΝΔΙΟΥ ΔΩΔ/ΝΗΣΟΥ, ΖΗΠΑΡΙ ΔΩΔ/ΝΗΣΟΥ, ΚΩΣ ΔΩΔ/ΝΗΣΟΥ, ΛΑΓΟΥΔΙ-ΖΙΑ ΔΩΔ/ΝΗΣΟΥ, ΛΙΝΟΠΟΤΗΣ ΔΩΔ/ΝΗΣΟΥ, ΜΑΡΜΑΡΙ ΔΩΔ/ΝΗΣΟΥ, ΠΥΛΙΟ ΔΩΔ/ΝΗΣΟΥ, ΣΥΜΠΕΝΤΡΟ-ΡΑΝΤΑΡ ΔΩΔ/ΝΗΣΟΥ, ΤΙΓΚΑΚΙ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85301', Area: 'ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΑΜΑΡΙ ΔΩΔ/ΝΗΣΟΥ, ΚΕΦΑΛΟΣ ΔΩΔ/ΝΗΣΟΥ, ΛΙΜΝΙΩΝΑ ΔΩΔ/ΝΗΣΟΥ, ΟΝΙΑ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85302', Area: 'ΑΝΤΙΜΑΧΕΙΑ ΔΩΔ/ΝΗΣΟΥ, ΑΤΜΑΝΙΟΥ ΔΩΔ/ΝΗΣΟΥ, ΚΑΜΠΟΣ ΚΩ ΔΩΔ/ΝΗΣΟΥ, ΚΑΡΔΑΜΑΙΝΑ ΔΩΔ/ΝΗΣΟΥ, ΜΑΣΤΙΧΑΡΙ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85303', Area: 'ΑΥΛΑΚΙ ΝΙΣΥΡΟΥ ΔΩΔ/ΝΗΣΟΥ, ΓΥΑΛΙ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΕΜΠΟΡΕΙΟΣ ΝΙΣΥΡΟΥ ΔΩΔ/ΝΗΣΟΥ, ΚΑΝΔΕΛΙΟΥΣΣΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΛΟΥΤΡΑ ΝΙΣΥΡΟΥ ΔΩΔ/ΝΗΣΟΥ, ΜΑΝΔΡΑΚΙ ΝΙΣΥΡΟΥ ΔΩΔ/ΝΗΣΟΥ, ΝΙΚΙΑ ΝΙΣΥΡΟΥ ΔΩΔ/ΝΗΣΟΥ, ΠΑΛΟΙ ΝΙΣΥΡΟΥ ΔΩΔ/ΝΗΣΟΥ, ΠΑΧΕΙΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΕΡΓΟΥΣΣΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΣΤΡΟΓΓΥΛΗ ΝΙΣΥΡΟΥ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85400', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΛΕΡΟΥ ΔΩΔ/ΝΗΣΟΥ, ΑΛΙΝΔΑ ΔΩΔ/ΝΗΣΟΥ, ΑΡΧΑΓΓΕΛΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΓΛΑΡΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΓΟΥΡΝΑ ΔΩΔ/ΝΗΣΟΥ, ΔΡΥΜΩΝΑΣ ΛΕΡΟΥ ΔΩΔ/ΝΗΣΟΥ, ΚΑΜΑΡΑ ΔΩΔ/ΝΗΣΟΥ, ΚΙΝΑΡΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΟΚΚΑΛΗ ΔΩΔ/ΝΗΣΟΥ, ΛΕΒΙΘΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΑΡΘΕΝΙ ΔΩΔ/ΝΗΣΟΥ, ΠΗΓΑΝΟΥΣΣΑ ΔΩΔ/ΝΗΣΟΥ, ΠΛΑΚΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΛΑΚΕΣ ΔΩΔ/ΝΗΣΟΥ, ΣΤΡΟΓΓΥΛΗ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΤΕΜΕΝΙΑ ΔΩΔ/ΝΗΣΟΥ, ΤΡΥΠΗΤΗ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΦΑΡΜΑΚΟΝΗΣΙ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85500', Area: 'ΑΓΚΑΘΟΝΗΣΙ ΔΩΔ/ΝΗΣΟΥ, ΑΓΡΕΛΟΥΣΣΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΑΝΥΔΡΟ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΑΡΚΟΙ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΑΛΟΒΟΛΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΟΜΑΡΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΜΑΚΡΟΝΗΣΙ ΠΑΤΜΟΥ ΔΩΔ/ΝΗΣΟΥ, ΝΕΡΑ ΠΑΤΜΟΥ ΔΩΔ/ΝΗΣΟΥ, ΠΑΤΜΟΣ ΔΩΔ/ΝΗΣΟΥ, ΣΚΑΛΑ ΠΑΤΜΟΥ ΔΩΔ/ΝΗΣΟΥ, ΣΤΡΟΓΓΥΛΟ ΠΑΤΜΟΥ ΔΩΔ/ΝΗΣΟΥ, ΤΡΑΓΟΝΗΣΙ ΔΩΔ/ΝΗΣΟΥ, ΧΙΛΙΟΜΟΔΙ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85600', Area: 'ΓΙΑΛΕΣΙΝΟ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΔΙΑΒΑΤΕΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΕΜΠΟΡΕΙΟΣ ΣΥΜΗΣ  (ΝΗΜΠΟΡΙΟΣ) ΔΩΔ/ΝΗΣΟΥ, ΚΟΥΛΟΥΝΔΡΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΜΑΡΑΘΟΥΝΤΑ ΣΥΜΗΣ ΔΩΔ/ΝΗΣΟΥ, ΜΑΡΜΑΡΑΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΝΙΜΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΞΙΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΑΝΟΡΜΙΤΗΣ ΣΥΜΗΣ ΔΩΔ/ΝΗΣΟΥ, ΠΕΔΙΟ ΣΥΜΗΣ ΔΩΔ/ΝΗΣΟΥ, ΣΕΣΚΛΙΟ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΣΥΜΗ ΔΩΔ/ΝΗΣΟΥ, ΧΟΝΔΡΟΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85700', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΑΦΙΑΡΤΗΣ ΔΩΔ/ΝΗΣΟΥ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΣΠΟΩΝ ΔΩΔ/ΝΗΣΟΥ, ΑΠΕΡΙΟ ΔΩΔ/ΝΗΣΟΥ, ΑΡΚΑΣΑ ΔΩΔ/ΝΗΣΟΥ, ΑΣΤΑΚΙΔΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΑΤΣΑΚΙΔΟΠΟΥΛΟ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΑΥΛΩΝΑ ΔΩΔ/ΝΗΣΟΥ, ΒΩΛΑΔΑ ΔΩΔ/ΝΗΣΟΥ, ΔΙΑΦΑΝΙΟ ΔΩΔ/ΝΗΣΟΥ, ΚΑΡΠΑΘΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΑΤΩ ΛΕΥΚΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΑΤΩΔΙΟ ΔΩΔ/ΝΗΣΟΥ, ΚΗΠΟΣ ΑΦΙΑΡΤΗ ΔΩΔ/ΝΗΣΟΥ, ΚΥΡΑ ΠΑΝΑΓΙΑ ΔΩΔ/ΝΗΣΟΥ, ΛΑΚΚΙ ΚΑΡΠΑΘΟΥ ΔΩΔ/ΝΗΣΟΥ, ΛΑΣΤΟΣ ΔΩΔ/ΝΗΣΟΥ, ΛΕΥΚΟΣ ΔΩΔ/ΝΗΣΟΥ, ΜΕΝΕΤΕΣ ΔΩΔ/ΝΗΣΟΥ, ΜΕΣΟΧΩΡΙ ΔΩΔ/ΝΗΣΟΥ, ΜΥΡΤΩΝΑΣ ΔΩΔ/ΝΗΣΟΥ, ΟΘΟΣ ΔΩΔ/ΝΗΣΟΥ, ΟΛΥΜΠΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΗΓΑΔΙΑ ΔΩΔ/ΝΗΣΟΥ, ΠΥΛΕΣ ΔΩΔ/ΝΗΣΟΥ, ΣΑΡΙΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΣΠΟΑ ΔΩΔ/ΝΗΣΟΥ, ΣΤΕΣ ΔΩΔ/ΝΗΣΟΥ, ΤΡΙΣΤΟΜΟ ΔΩΔ/ΝΗΣΟΥ, ΦΟΙΝΙΚΙΟ ΔΩΔ/ΝΗΣΟΥ, ΧΑΜΗΛΗ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85800', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΚΑΣΟΥ ΔΩΔ/ΝΗΣΟΥ, ΑΡΒΑΝΙΤΟΧΩΡΙ ΚΑΣΟΥ ΔΩΔ/ΝΗΣΟΥ, ΑΡΜΑΘΙΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΑΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΜΑΚΡΟΝΗΣΙ ΚΑΣΟΥ ΔΩΔ/ΝΗΣΟΥ, ΠΑΝΑΓΙΑ ΚΑΣΟΥ ΔΩΔ/ΝΗΣΟΥ, ΠΟΛΙΟ ΚΑΣΟΥ ΔΩΔ/ΝΗΣΟΥ, ΦΡΥ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '85900', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΑΝΑΛΗΨΗ ΔΩΔ/ΝΗΣΟΥ, ΑΣΤΥΠΑΛΑΙΑ ΔΩΔ/ΝΗΣΟΥ, ΑΥΓΟ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΒΑΘΥ ΑΣΤΥΠΑΛΑΙΑΣ ΔΩΔ/ΝΗΣΟΥ, ΓΛΥΝΟ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΖΑΦΟΡΑΣ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΟΥΝΟΥΠΟΙ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΚΟΥΤΣΟΜΥΤΙ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΛΙΒΑΔΙΑ ΑΣΤΥΠΑΛΑΙΑΣ ΔΩΔ/ΝΗΣΟΥ, ΜΕΣΟΝΗΣΙ ΔΩΔ/ΝΗΣΟΥ, ΟΦΙΔΟΥΣΣΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΛΑΚΙΔΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΠΟΝΤΙΚΟΥΣΑ ΔΩΔ/ΝΗΣΟΥ, ΣΤΕΦΑΝΙΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΣΥΡΝΑ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΦΩΚΙΟΝΗΣΙΑ ΔΩΔ/ΝΗΣΟΥ, ΧΟΝΔΡΟ ΝΗΣΟΣ ΔΩΔ/ΝΗΣΟΥ, ΧΟΝΔΡΟΝΗΣΙ ΔΩΔ/ΝΗΣΟΥ', Prefecture: 'Δωδεκανήσου' },
    { PostalCode: '68001', Area: 'ΝEΑ ΒΥΣΣΑ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '68002', Area: 'ΑΛΩΝΙΑ ΕΒΡΟΥ, ΑΝΩ ΚΑΡΥΩΤΕΣ ΕΒΡΟΥ, ΑΝΩ ΜΕΡΙΑ ΕΒΡΟΥ, ΔΑΦΝΕΣ ΕΒΡΟΥ, ΘΕΡΜΑ ΕΒΡΟΥ, ΚΑΜΑΡΙΩΤΙΣΣΑ ΕΒΡΟΥ, ΚΑΣΤΕΛΙ ΕΒΡΟΥ, ΚΑΤΣΑΜΠΑΣ ΕΒΡΟΥ, ΚΑΤΩ ΚΑΡΥΩΤΕΣ ΕΒΡΟΥ, ΛΑΚΚΩΜΑ ΕΒΡΟΥ, ΜΑΚΡΥΛΙΕΣ ΕΒΡΟΥ, ΜΝΗΜΟΡΙΑ ΕΒΡΟΥ, ΜΠΑΞΕΔΕΣ ΕΒΡΟΥ, ΞΗΡΟΠΟΤΑΜΟΣ ΕΒΡΟΥ, ΠΑΛΑΙΟΠΟΛΗ ΕΒΡΟΥ, ΠΟΤΑΜΙΑ ΕΒΡΟΥ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΕΒΡΟΥ, ΡΕΜΠΟΥΤΣΑΔΙΚΑ ΕΒΡΟΥ, ΣΑΜΟΘΡΑΚΗ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '68003', Area: 'ΛΑΓΥΝΑ ΕΒΡΟΥ, ΛΕΥΚΙΜΗ ΕΒΡΟΥ, ΛΥΡΑ ΕΒΡΟΥ, ΠΡΟΒΑΤΩΝΑΣ ΕΒΡΟΥ, ΤΥΧΕΡΟ ΕΒΡΟΥ, ΦΥΛΑΚΤΟ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '68004', Area: 'ΑΜΟΡΙΟ ΕΒΡΟΥ, ΛΑΒΑΡΑ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '68006', Area: 'ΑΜΜΟΒΟΥΝΟ ΕΒΡΟΥ, ΒΑΛΤΟΣ ΕΒΡΟΥ, ΓΑΛΗΝΗ ΕΒΡΟΥ, ΖΩΝΗ ΕΒΡΟΥ, ΘΕΡΑΠΕΙΟ ΕΒΡΟΥ, ΚΕΡΑΜΟΣ ΕΒΡΟΥ, ΚΟΜΑΡΑ ΕΒΡΟΥ, ΚΥΠΡΙΝΟΣ ΕΒΡΟΥ, ΜΕΓΑΛΗ ΔΟΞΙΠΑΡΑ ΕΒΡΟΥ, ΜΗΛΕΑ ΕΒΡΟΥ, ΜΙΚΡΑ ΔΟΞΙΠΑΡΑ ΕΒΡΟΥ, ΦΥΛΑΚΙΟ ΕΒΡΟΥ, ΧΑΝΔΡΑΣ ΕΒΡΟΥ, ΧΕΛΙΔΩΝΑΣ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '68007', Area: 'ΑΡΖΟΣ ΕΒΡΟΥ, ΔΙΚΑΙΑ ΕΒΡΟΥ, ΔΙΛΟΦΟΣ ΕΒΡΟΥ, ΕΛΑΙΑ ΕΒΡΟΥ, ΚΑΝΑΔΑΣ ΕΒΡΟΥ, ΚΡΙΟΣ ΕΒΡΟΥ, ΜΑΡΑΣΙΑ ΕΒΡΟΥ, ΟΡΜΕΝΙΟ ΕΒΡΟΥ, ΠΑΛΛΗ ΕΒΡΟΥ, ΠΕΝΤΑΛΟΦΟΣ ΕΒΡΟΥ, ΠΕΤΡΩΤΑ ΕΒΡΟΥ, ΠΛΑΤΗ ΕΒΡΟΥ, ΠΤΕΛΕΑ ΕΒΡΟΥ, ΣΠΗΛΑΙΟ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '68008', Area: 'ΚΑΣΤΑΝΙΕΣ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '68010', Area: 'ΑΒΔΕΛΑ ΕΒΡΟΥ, ΑΛΕΠΟΧΩΡΙ ΕΒΡΟΥ, ΑΣΠΡΟΝΕΡΙ ΕΒΡΟΥ, ΒΡΥΣΗ ΕΒΡΟΥ, ΓΙΑΤΡΑΔΕΣ ΕΒΡΟΥ, ΔΟΞΑ ΕΒΡΟΥ, ΕΛΑΦΟΧΩΡΙ ΕΒΡΟΥ, ΛΑΔΗ ΕΒΡΟΥ, ΜΕΤΑΞΑΔΕΣ ΕΒΡΟΥ, ΠΑΛΙΟΥΡΙΟ ΕΒΡΟΥ, ΠΟΛΙΑ ΕΒΡΟΥ, ΣΑΥΡΑ ΕΒΡΟΥ, ΧΙΟΝΑΔΕΣ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '68014', Area: 'ΡΙΖΙΑ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '68100', Area: 'ΑΒΑΣ ΕΒΡΟΥ, ΑΓΝΑΝΤΙΑ ΕΒΡΟΥ, ΑΕΤΟΧΩΡΙ ΕΒΡΟΥ, ΑΛΕΞΑΝΔΡΟΥΠΟΛΗ ΕΒΡΟΥ, ΑΜΦΙΤΡΙΤΗ ΕΒΡΟΥ, ΑΝΘΕΙΑ ΕΒΡΟΥ, ΑΠΑΛΟΣ ΕΒΡΟΥ, ΑΡΙΣΤΗΝΟ ΕΒΡΟΥ, ΔΙΚΕΛΛΑ ΕΒΡΟΥ, ΔΩΡΙΚΟ ΕΒΡΟΥ, ΕΝΝΑΤΟ ΕΒΡΟΥ, ΚΟΙΜΗΣΗ ΘΕΟΤΟΚΟΥ ΕΒΡΟΥ, ΛΟΥΤΡΑ ΤΡΑΙΑΝΟΥΠΟΛΗΣ ΕΒΡΟΥ, ΛΟΥΤΡΟΣ ΕΒΡΟΥ, ΜΑΚΡΗ ΕΒΡΟΥ, ΜΕΣΗΜΒΡΙΑ ΕΒΡΟΥ, ΝΙΨΑ ΕΒΡΟΥ, ΠΑΛΑΓΙΑ ΕΒΡΟΥ, ΠΑΝΟΡΑΜΑ ΕΒΡΟΥ, ΠΑΡΑΛΙΑ ΔΙΚΕΛΛΩΝ ΕΒΡΟΥ, ΠΕΥΚΑ ΕΒΡΟΥ, ΠΛΑΚΑ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '68200', Area: 'ΑΜΠΕΛΑΚΙΑ ΕΒΡΟΥ, ΚΑΒΥΛΗ ΕΒΡΟΥ, ΛΕΠΤΗ ΕΒΡΟΥ, ΝEΟ ΧΕΙΜΩΝΙΟ ΕΒΡΟΥ, ΝΕΟΣ ΠΥΡΓΟΣ ΕΒΡΟΥ, ΝΕΟΧΩΡΙ ΕΒΡΟΥ, ΟΡΕΣΤΙΑΔΑ ΕΒΡΟΥ, ΠΑΛΑΙΑ ΣΑΓΗΝΗ ΕΒΡΟΥ, ΠΑΤΑΓΗ ΕΒΡΟΥ, ΣΑΚΚΟΣ ΕΒΡΟΥ, ΣΤΕΡΝΑ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '68300', Area: 'ΑΣΒΕΣΤΑΔΕΣ ΕΒΡΟΥ, ΑΣΗΜΕΝΙΟ ΕΒΡΟΥ, ΒΡΥΣΙΚΑ ΕΒΡΟΥ, ΔΙΔΥΜΟΤΕΙΧO ΕΒΡΟΥ, ΕΛΛΗΝΟΧΩΡΙ ΕΒΡΟΥ, ΕΥΓΕΝΙΚΟ ΕΒΡΟΥ, ΖΩΟΔΟΧΟΣ ΠΗΓΗ ΕΒΡΟΥ, ΘΟΥΡΙΟ ΕΒΡΟΥ, ΘΥΡΕΑ ΕΒΡΟΥ, ΙΣΑΑΚΙΟ ΕΒΡΟΥ, ΚΑΡΩΤΗ ΕΒΡΟΥ, ΚΟΥΦΟΒΟΥΝΟ ΕΒΡΟΥ, ΚΥΑΝΗ ΕΒΡΟΥ, ΛΑΓΟΣ ΕΒΡΟΥ, ΜΑΝΗ ΕΒΡΟΥ, ΝΕΟΙ ΨΑΘΑΔΕΣ ΕΒΡΟΥ, ΠΟΙΜΕΝΙΚΟ ΕΒΡΟΥ, ΣΙΤΑΡΙΑ ΕΒΡΟΥ, ΣΙΤΟΧΩΡΙΟ ΕΒΡΟΥ, ΣΟΦΙΚΟ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '68400', Area: 'ΑΓΡΙΑΝΗ ΕΒΡΟΥ, ΓΙΑΝΝΟΥΛΗ ΕΒΡΟΥ, ΔΑΔΙΑ ΕΒΡΟΥ, ΔΡΟΣΙΑ ΕΒΡΟΥ, ΚΟΡΝΟΦΩΛΙΑ ΕΒΡΟΥ, ΚΟΡΥΜΒΟΣ ΕΒΡΟΥ, ΚΟΤΡΩΝΙΑ ΕΒΡΟΥ, ΚΥΡΙΑΚΗ ΕΒΡΟΥ, ΛΥΚΩΦΟΣ ΕΒΡΟΥ, ΜΑΝΔΡΑ ΕΒΡΟΥ, ΜΑΥΡΟΚΛΗΣΙ ΕΒΡΟΥ, ΜΟΝΗ ΔΑΔΙΑΣ ΕΒΡΟΥ, ΜΟΝΗ ΚΟΡΝΟΦΩΛΙΑΣ ΕΒΡΟΥ, ΠΡΩΤΟΚΛΗΣΙ ΕΒΡΟΥ, ΣΙΔΗΡΩ ΕΒΡΟΥ, ΣΟΥΦΛΙ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '68500', Area: 'ΑΡΔΑΝΙΟ ΦΕΡΩΝ ΕΒΡΟΥ, ΔΟΡΙΣΚΟΣ ΦΕΡΩΝ ΕΒΡΟΥ, ΚΑΒΗΣΟΣ ΦΕΡΩΝ ΕΒΡΟΥ, ΚΟΙΛΑ ΕΒΡΟΥ, ΜΕΛΙΑ ΕΒΡΟΥ, ΜΟΝΑΣΤΗΡΑΚΙ ΦΕΡΩΝ ΕΒΡΟΥ, ΠΟΡΟΣ ΦΕΡΩΝ ΕΒΡΟΥ, ΠΥΛΑΙΑ ΕΒΡΟΥ, ΦΕΡΕΣ ΕΒΡΟΥ', Prefecture: 'Έβρου' },
    { PostalCode: '34001', Area: 'ΑΓΑΘΟ ΕΥΒΟΙΑΣ, ΑΓΙΟΙ ΕΥΒΟΙΑΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΚΑΡΥΣΤΟΥ ΕΥΒΟΙΑΣ, ΑΕΤΟΣ ΕΥΒΟΙΑΣ, ΑΚΡΩΤΗΡΙ ΕΥΒΟΙΑΣ, ΑΜΥΓΔΑΛΙΑ ΕΥΒΟΙΑΣ, ΑΝΤΙΑΣ ΕΥΒΟΙΑΣ, ΒΡΑΧΟΣ ΕΥΒΟΙΑΣ, ΓΡΑΜΠΙΑ ΕΥΒΟΙΑΣ, ΔΡΥΜΟΝΑΡΙ ΕΥΒΟΙΑΣ, ΕΛΑΙΩΝ ΕΥΒΟΙΑΣ, ΕΠΑΝΩΧΩΡΙ ΕΥΒΟΙΑΣ, ΕΥΑΓΓΕΛΙΣΜΟΣ ΕΥΒΟΙΑΣ, ΖΑΡΜΠΟΥΤΑΙΪΚΑ ΕΥΒΟΙΑΣ, ΖΑΧΑΡΙΑ ΕΥΒΟΙΑΣ, ΘΥΜΙΟ ΕΥΒΟΙΑΣ, ΚΑΛΕΡΓΟ ΕΥΒΟΙΑΣ, ΚΑΛΛΙΑΝΟΣ ΕΥΒΟΙΑΣ, ΚΑΛΥΒΙΑ ΚΑΡΥΣΤΙΑΣ ΕΥΒΟΙΑΣ, ΚΑΡΥΣΤΟΣ ΕΥΒΟΙΑΣ, ΚΑΣΤΡΙ ΚΑΡΥΣΤΙΑΣ ΕΥΒΟΙΑΣ, ΚΑΨΟΥΡΙ ΕΥΒΟΙΑΣ, ΚΟΜΙΤΟ ΕΥΒΟΙΑΣ, ΛΕΝΟΣΑΙΟΙ ΕΥΒΟΙΑΣ, ΜΑΝΔΗΛΟΥ ΕΥΒΟΙΑΣ, ΜΕΚΟΥΝΙΔΑ ΕΥΒΟΙΑΣ, ΜΕΤΟΧΙ ΚΑΡΥΣΤΙΑΣ ΕΥΒΟΙΑΣ, ΜΠΟΥΡΟΣ ΕΥΒΟΙΑΣ, ΜΥΛΟΙ ΚΑΡΥΣΤΙΑΣ ΕΥΒΟΙΑΣ, ΠΗΔΟΥΛΑΙΚΑ ΕΥΒΟΙΑΣ, ΠΛΑΤΑΝΙΣΤΟΣ ΕΥΒΟΙΑΣ, ΠΟΤΑΜΙΟ ΕΥΒΟΙΑΣ, ΠΡΙΝΙΑ ΕΥΒΟΙΑΣ, ΡΟΥΚΛΙΑ ΕΥΒΟΙΑΣ, ΣΦΥΡΙΔΟΥΠΟΛΗ ΕΥΒΟΙΑΣ, ΣΧΙΖΑΛΗ ΕΥΒΟΙΑΣ, ΣΩΤΗΡΑ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34003', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΚΥΜΗΣ ΕΥΒΟΙΑΣ, ΑΝΩ ΠΟΤΑΜΙΑ ΕΥΒΟΙΑΣ, ΕΝΟΡΙΑ ΕΥΒΟΙΑΣ, ΚΑΖΑΡΜΑ ΕΥΒΟΙΑΣ, ΚΑΜΠΟΣ ΒΙΤΑΛΟΥ ΕΥΒΟΙΑΣ, ΚΑΜΠΟΣ ΟΞΥΛΙΘΟΥ ΕΥΒΟΙΑΣ, ΚΛΗΜΑΤΑΡΙ ΕΥΒΟΙΑΣ, ΚΥΜΗ ΕΥΒΟΙΑΣ, ΜΕΣΟΝΗΣΙ ΕΥΒΟΙΑΣ, ΜΙΣΟΚΑΜΠΟΣ ΕΥΒΟΙΑΣ, ΜΟΝΗ ΜΑΝΤΖΑΡΗ ΕΥΒΟΙΑΣ, ΜΟΝΗ ΣΩΤΗΡΟΣ ΕΥΒΟΙΑΣ, ΠΑΡΑΛΙΑ ΚΥΜΗΣ ΕΥΒΟΙΑΣ, ΠΑΡΑΛΙΑ ΜΕΤΟΧΙΟΥ ΕΥΒΟΙΑΣ, ΠΑΡΑΛΙΑ ΟΞΥΛΙΘΟΥ ΕΥΒΟΙΑΣ, ΠΕΤΙΣΟΥΝΑΣ ΕΥΒΟΙΑΣ, ΠΛΑΤΑΝΑ ΕΥΒΟΙΑΣ, ΠΡΑΣΟΥΔΑ ΝΗΣΟΣ ΕΥΒΟΙΑΣ, ΣΧΟΛΗ ΕΜΠΟΡΟΠΛΟΙΑΡΧΩΝ ΕΥΒΟΙΑΣ, ΧΗΛΗ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34004', Area: 'ΒΛΑΧΙΑ ΕΥΒΟΙΑΣ, ΔΑΦΝΟΥΣΣΑ ΕΥΒΟΙΑΣ, ΖΩΟΔΟΧΟΣ ΠΗΓΗ ΕΥΒΟΙΑΣ, ΚΑΛΥΒΙΑ ΕΥΒΟΙΑΣ, ΚΗΡΙΝΘΟΣ ΕΥΒΟΙΑΣ, ΚΡΥΑ ΒΡΥΣΗ ΕΥΒΟΙΑΣ, ΜΑΝΤΟΥΔΙ ΕΥΒΟΙΑΣ, ΜΑΡΚΑΤΕΣ ΕΥΒΟΙΑΣ, ΜΕΤΟΧΙ ΚΗΡΕΟΣ ΕΥΒΟΙΑΣ, ΝΕΟΣ ΠΑΓΩΝΤΑΣ ΕΥΒΟΙΑΣ, ΠΑΓΩΝΤΑΣ ΕΥΒΟΙΑΣ, ΠΗΛΙ ΕΥΒΟΙΑΣ, ΠΡΟΚΟΠΙ ΕΥΒΟΙΑΣ, ΣΑΡΑΚΗΝΙΚΟ ΕΥΒΟΙΑΣ, ΣΠΑΘΑΡΙ ΕΥΒΟΙΑΣ, ΤΡΟΥΠΙΟ ΕΥΒΟΙΑΣ, ΦΑΡΑΚΛΑ ΕΥΒΟΙΑΣ, ΦΟΥΡΝΟΙ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34005', Area: 'ΔΑΜΙΑ ΕΥΒΟΙΑΣ, ΔΑΦΝΗ ΚΕΧΡΙΩΝ ΕΥΒΟΙΑΣ, ΔΡΥΜΩΝΑ ΕΥΒΟΙΑΣ, ΚΑΛΑΜΟΥΔΙ ΕΥΒΟΙΑΣ, ΚΑΤΟΥΝΙΑ ΕΥΒΟΙΑΣ, ΚΕΧΡΙΕΣ ΕΥΒΟΙΑΣ, ΚΟΥΛΟΥΡΟΣ ΕΥΒΟΙΑΣ, ΚΟΥΡΚΟΥΛΟΙ ΕΥΒΟΙΑΣ, ΛΙΜΝΗ ΕΥΒΟΙΑΣ, ΜΑΡΟΥΛΙ ΕΥΒΟΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΝΙΚΟΛΑΟΥ ΓΑΛΑΤΑΚΗ ΕΥΒΟΙΑΣ, ΜΟΝΗ ΟΣΙΟΥ ΔΑΥΙΔ ΓΕΡΟΝΤΟΣ ΕΥΒΟΙΑΣ, ΜΥΡΤΙΑΣ ΕΥΒΟΙΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΕΥΒΟΙΑΣ, ΡΕΤΣΙΝΟΛΑΚΟΣ ΕΥΒΟΙΑΣ, ΡΟΒΙΕΣ ΕΥΒΟΙΑΣ, ΣΗΠΙΑΣ ΕΥΒΟΙΑΣ, ΣΚΕΠΑΣΤΗ ΕΥΒΟΙΑΣ, ΧΡΟΝΙΑ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34006', Area: 'ΑΜΑΡΥΝΘΟΣ ΕΥΒΟΙΑΣ, ΑΝΩ ΒΑΘΕΙΑ ΕΥΒΟΙΑΣ, ΓΑΛΑΖΙΑ ΝΕΡΑ ΕΥΒΟΙΑΣ, ΓΥΜΝΟ ΕΥΒΟΙΑΣ, ΚΑΛΛΙΘΕΑ ΕΥΒΟΙΑΣ, ΚΑΤΩ ΣΕΤΑ ΕΥΒΟΙΑΣ, ΜΕΤΑΜΟΡΦΩΣΗ ΕΥΒΟΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΝΙΚΟΛΑΟΥ ΑΝΩ ΒΑΘΕΙΑΣ ΕΥΒΟΙΑΣ, ΣΕΤΑ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34007', Area: 'ΑΣΠΟΥΣ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ, ΑΤΣΙΤΣΑ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ, ΑΧΕΡΟΥΝΕΣ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ, ΑΧΙΛΛΙ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ, ΕΞΩ ΠΟΔΙΕΣ ΕΥΒΟΙΑΣ, ΚΑΛΑΜΙΤΣΑ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ, ΚΑΛΙΚΡΙ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ, ΚΥΡΑ ΠΑΝΑΓΙΑ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ, ΛΙΝΑΡΙΑ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ, ΛΟΥΤΡΟ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ, ΜΕΛΑ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ, ΜΕΣΑ ΠΟΔΙΑ ΕΥΒΟΙΑΣ, ΜΩΛΟΣ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ, ΝΥΦΙ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ, ΠΕΥΚΟΣ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ, ΣΑΡΑΚΗΝΟ ΝΗΣΟΣ ΕΥΒΟΙΑΣ, ΣΚΥΡΟΠΟΥΛΑ  ΝΗΣΟΣ ΕΥΒΟΙΑΣ, ΣΚΥΡΟΣ ΕΥΒΟΙΑΣ, ΤΡΑΧΥ  ΣΚΥΡΟΥ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34008', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΝΗΣΟΣ ΕΥΒΟΙΑΣ, ΓΕΡΟΝΤΑΣ ΕΥΒΟΙΑΣ, ΕΡΕΤΡΙΑ ΕΥΒΟΙΑΣ, ΜΑΓΟΥΛΑ ΕΥΒΟΙΑΣ, ΜΑΛΑΚΩΝΤΑΣ ΕΥΒΟΙΑΣ, ΠΑΝΟΡΑΜΑ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34009', Area: 'ΑΓΙΑ ΘΕΚΛΑ ΕΥΒΟΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΚΑΡΥΣΤΟΥ ΕΥΒΟΙΑΣ, ΑΓΙΟΣ ΜΕΡΚΟΥΡΙΟΣ ΕΥΒΟΙΑΣ, ΑΥΛΩΝΑΡΙ ΕΥΒΟΙΑΣ, ΑΧΛΑΔΕΡΗ ΕΥΒΟΙΑΣ, ΔΑΦΝΗ ΚΑΡΥΣΤΙΑΣ ΕΥΒΟΙΑΣ, ΕΛΑΙΑ ΕΥΒΟΙΑΣ, ΚΑΛΑΜΟΣ ΕΥΒΟΙΑΣ, ΚΟΙΛΙΟ ΕΥΒΟΙΑΣ, ΚΟΡΑΣΙΔΑ ΕΥΒΟΙΑΣ, ΛΟΦΙΣΚΟΣ ΕΥΒΟΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΧΑΡΑΛΑΜΠΟΥΣ ΛΕΥΚΩΝ ΕΥΒΟΙΑΣ, ΜΟΝΟΝΔΡΥΟ ΕΥΒΟΙΑΣ, ΜΟΥΡΤΕΡΗ ΕΥΒΟΙΑΣ, ΜΥΡΤΙΑ ΕΥΒΟΙΑΣ, ΝΕΟΧΩΡΙ ΑΥΛΩΝΑΡΙΟΥ ΕΥΒΟΙΑΣ, ΟΚΤΩΝΙΑ ΕΥΒΟΙΑΣ, ΟΡΙΟ ΕΥΒΟΙΑΣ, ΠΕΡΙΒΟΛΙΑ ΕΥΒΟΙΑΣ, ΠΡΙΝΑΚΙ ΕΥΒΟΙΑΣ, ΠΥΡΓΙ ΕΥΒΟΙΑΣ, ΣΥΚΙΕΣ ΕΥΒΟΙΑΣ, ΧΑΝΙΑ ΑΥΛΩΝΑΡΙΟΥ ΕΥΒΟΙΑΣ, ΩΡΟΛΟΓΙΟ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34013', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΜΑΡΜΑΡΙΟΥ ΕΥΒΟΙΑΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΕΥΒΟΙΑΣ, ΑΚΤΑΙΟ ΕΥΒΟΙΑΣ, ΑΛΕΞΗΣ ΕΥΒΟΙΑΣ, ΒΑΡΕΛΛΑΙΟΙ ΕΥΒΟΙΑΣ, ΒΑΤΗΣΙ ΕΥΒΟΙΑΣ, ΓΙΑΝΝΙΤΣΙ ΕΥΒΟΙΑΣ, ΔΙΑΣΤΑΥΡΩΣΗ ΕΥΒΟΙΑΣ, ΕΚΑΛΗ ΕΥΒΟΙΑΣ, ΚΑΛΟΓΕΡΙ ΕΥΒΟΙΑΣ, ΚΑΤΣΑΡΩΝΙΟ ΕΥΒΟΙΑΣ, ΚΑΤΩ ΓΙΑΝΝΙΤΣΙ ΕΥΒΟΙΑΣ, ΚΟΚΚΙΝΗΣ ΕΥΒΟΙΑΣ, ΚΡΥΑ ΒΡΥΣΗ ΜΑΡΜΑΡΙΟΥ ΕΥΒΟΙΑΣ, ΛΥΚΟΡΕΜΑ ΕΥΒΟΙΑΣ, ΜΑΡΜΑΡΙ ΕΥΒΟΙΑΣ, ΜΕΓΑΛΟΝΗΣΟΣ ΠΕΤΑΛΙΩΝ ΝΗΣΟΣ ΕΥΒΟΙΑΣ, ΜΕΛΙΣΣΩΝΑΣ ΕΥΒΟΙΑΣ, ΠΑΝΑΓΙΑ ΜΑΡΜΑΡΙΟΥ ΕΥΒΟΙΑΣ, ΠΑΡΑΔΕΙΣΙ ΕΥΒΟΙΑΣ, ΠΑΡΑΛΙΑ ΦΗΓΙΑ ΕΥΒΟΙΑΣ, ΠΟΘΙΟ ΕΥΒΟΙΑΣ, ΡΙΖΟΒΟΥΝΙ ΕΥΒΟΙΑΣ, ΣΤΟΥΠΠΑΙΟΙ ΕΥΒΟΙΑΣ, ΤΡΑΓΟΝΗΣΙ ΕΥΒΟΙΑΣ, ΦΗΓΙΑ ΕΥΒΟΙΑΣ, ΧΑΝΙΑ ΠΑΡΑΔΕΙΣΙΟΥ ΕΥΒΟΙΑΣ, ΧΕΡΣΟΝΗΣΙ ΕΥΒΟΙΑΣ, ΧΩΝΙ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34015', Area: 'ΑΛΜΥΡΟΠΟΤΑΜΟΣ ΕΥΒΟΙΑΣ, ΒΑΘΥΡΕΜΑ ΕΥΒΟΙΑΣ, ΔΗΛΗΣΟ ΕΥΒΟΙΑΣ, ΕΛΑΙΟΧΩΡΙ ΕΥΒΟΙΑΣ, ΕΛΑΦΟΛΙΜΑΝΟ ΕΥΒΟΙΑΣ, ΖΩΟΔΟΧΟΣ ΠΗΓΗ ΚΑΡΥΣΤΙΑΣ ΕΥΒΟΙΑΣ, ΚΑΒΑΛΛΙΑΝΗ ΕΥΒΟΙΑΣ, ΚΑΓΚΑΔΑΙΟΙ ΕΥΒΟΙΑΣ, ΚΑΨΑΛΑ ΕΥΒΟΙΑΣ, ΚΕΛΛΙΑ ΕΥΒΟΙΑΣ, ΚΟΥΒΕΛΛΕΣ ΕΥΒΟΙΑΣ, ΛΕΥΚΑ ΕΥΒΟΙΑΣ, ΜΕΣΟΧΩΡΙΑ ΕΥΒΟΙΑΣ, ΝΕΑ ΣΤΥΡΑ ΕΥΒΟΙΑΣ, ΝΙΜΠΟΡΕΙΟ ΕΥΒΟΙΑΣ, ΠΑΝΑΓΙΑ ΑΛΜΥΡΟΠΟΤΑΜΟΥ ΕΥΒΟΙΑΣ, ΠΟΛΥΠΟΤΑΜΟΣ ΕΥΒΟΙΑΣ, ΡΑΠΤΑΙΟΙ ΕΥΒΟΙΑΣ, ΣΤΥΡΑ ΕΥΒΟΙΑΣ, ΤΣΑΚΑΙΟΙ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34100', Area: 'ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΧΑΛΚΙΔΟΣ (ΜΠΟΥΡΤΖΙ) ΕΥΒΟΙΑΣ, ΑΝΘΗΔΩΝΑ ΕΥΒΟΙΑΣ, ΑΦΡΑΤΙ ΕΥΒΟΙΑΣ, ΒΑΘΥ ΕΥΒΟΙΑΣ, ΔΡΟΣΙΑ ΧΑΛΚΙΔΟΣ ΕΥΒΟΙΑΣ, ΚΑΛΟΧΩΡΙ ΠΑΝΤΕΙΧΙ ΕΥΒΟΙΑΣ, ΚΑΜΑΡΙ ΕΥΒΟΙΑΣ, ΚΟΥΚΑΚΙ ΕΥΒΟΙΑΣ, ΚΡΟΝΙΑ ΕΥΒΟΙΑΣ, ΚΤΥΠΟΝΗΣΙ ΕΥΒΟΙΑΣ, ΛΟΥΚΙΣΙΑ ΕΥΒΟΙΑΣ, ΜΙΚΡΟ ΒΑΘΥ ΕΥΒΟΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΓΕΩΡΓΙΟΥ ΑΡΜΑ ΕΥΒΟΙΑΣ, ΜΥΤΙΚΑΣ ΕΥΒΟΙΑΣ, ΝΕΑ ΛΑΜΨΑΚΟΣ ΕΥΒΟΙΑΣ, ΞΗΡΟΒΡΥΣΗ ΕΥΒΟΙΑΣ, ΠΑΡΑΛΙΑ ΑΥΛΙΔΟΣ ΕΥΒΟΙΑΣ, ΠΑΡΑΛΙΑ ΒΑΘΕΟΣ ΕΥΒΟΙΑΣ, ΠΑΣΑΣ ΝΗΣΟΣ ΕΥΒΟΙΑΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΕΥΒΟΙΑΣ, ΡΙΤΣΩΝΑ ΕΥΒΟΙΑΣ, ΣΚΡΟΠΟΝΕΡΙΑ ΕΥΒΟΙΑΣ, ΥΛΙΚΗ ΕΥΒΟΙΑΣ, ΦΑΡΟΣ ΕΥΒΟΙΑΣ, ΦΥΛΛΑ ΕΥΒΟΙΑΣ, ΧΑΛΚΙΔΑ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34200', Area: 'ΑΒΓΑΡΙΑ ΕΥΒΟΙΑΣ, ΑΓΔΙΝΕΣ ΕΥΒΟΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΙΣΤΙΑΙΑΣ ΕΥΒΟΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΕΛΛΗΝΙΚΩΝ ΕΥΒΟΙΑΣ, ΑΓΡΙΟΒΟΤΑΝΟ ΕΥΒΟΙΑΣ, ΑΡΤΕΜΙΣΙΟ ΕΥΒΟΙΑΣ, ΑΣΜΗΝΙΟ ΕΥΒΟΙΑΣ, ΒΑΣΙΛΙΚΑ ΕΥΒΟΙΑΣ, ΒΟΥΤΑΣ ΕΥΒΟΙΑΣ, ΓΑΛΑΤΣΑΔΕΣ ΕΥΒΟΙΑΣ, ΓΑΛΑΤΣΩΝΑ ΕΥΒΟΙΑΣ, ΓΕΡΑΚΙΟΥ ΕΥΒΟΙΑΣ, ΓΟΥΒΕΣ ΕΥΒΟΙΑΣ, ΕΛΛΗΝΙΚΑ ΕΥΒΟΙΑΣ, ΙΣΤΙΑΙΑ ΕΥΒΟΙΑΣ, ΚΑΜΑΡΙΑ ΕΥΒΟΙΑΣ, ΚΑΜΑΤΡΙΑΔΕΣ ΕΥΒΟΙΑΣ, ΚΑΝΑΤΑΔΙΚΑ ΕΥΒΟΙΑΣ, ΚΑΣΤΑΝΙΩΤΙΣΣΑ ΕΥΒΟΙΑΣ, ΚΑΣΤΡΙ ΙΣΤΙΑΙΑΣ ΕΥΒΟΙΑΣ, ΚΑΤΩ ΜΟΝΟΚΑΡΥΑ ΕΥΒΟΙΑΣ, ΚΕΦΑΛΕΣ ΕΥΒΟΙΑΣ, ΚΟΚΚΙΝΟΜΗΛΕΑ ΕΥΒΟΙΑΣ, ΚΡΥΟΝΕΡΙΤΗΣ ΕΥΒΟΙΑΣ, ΚΥΠΑΡΙΣΣΙ ΕΥΒΟΙΑΣ, ΜΗΛΙΕΣ ΕΥΒΟΙΑΣ, ΜΟΝΟΚΑΡΥΑ ΕΥΒΟΙΑΣ, ΝΕΑ ΣΙΝΑΣΟΣ ΕΥΒΟΙΑΣ, ΝΕΟΧΩΡΙ ΙΣΤΙΑΙΑΣ ΕΥΒΟΙΑΣ, ΠΕΥΚΙ ΕΥΒΟΙΑΣ, ΠΟΝΤΙΚΟΝΗΣΙ ΕΥΒΟΙΑΣ, ΣΗΜΙΑ ΕΥΒΟΙΑΣ, ΤΣΑΠΟΥΡΝΙΑ ΕΥΒΟΙΑΣ, ΨΑΡΟΠΟΥΛΙ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34300', Area: 'ΑΓΙΟΚΑΜΠΟΣ ΕΥΒΟΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΓΙΑΛΤΡΩΝ ΕΥΒΟΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΛΙΧΑΔΟΣ ΕΥΒΟΙΑΣ, ΑΓΙΟΣ ΕΥΒΟΙΑΣ, ΑΙΔΗΨΟΣ ΕΥΒΟΙΑΣ, ΒΑΡΒΑΡΑ ΕΥΒΟΙΑΣ, ΒΑΣΙΛΙΝΑ ΕΥΒΟΙΑΣ, ΒΙΓΛΑ ΕΥΒΟΙΑΣ, ΓΙΑΛΤΡΑ ΕΥΒΟΙΑΣ, ΓΡΕΓΟΛΙΜΑΝΟ ΕΥΒΟΙΑΣ, ΗΛΙΑ ΕΥΒΟΙΑΣ, ΚΑΒΟΣ ΕΥΒΟΙΑΣ, ΚΟΚΚΙΝΙΑΣ ΕΥΒΟΙΑΣ, ΛΙΧΑΣ ΕΥΒΟΙΑΣ, ΛΟΥΤΡΑ ΑΙΔΗΨΟΥ ΕΥΒΟΙΑΣ, ΛΟΥΤΡΑ ΓΙΑΛΤΡΩΝ ΕΥΒΟΙΑΣ, ΜΑΟΥΝΗΣ  ΕΥΒΟΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΓΕΩΡΓΙΟΥ ΑΙΔΗΨΟΥ ΕΥΒΟΙΑΣ, ΜΟΝΟΛΙΑ ΝΗΣΟΣ ΕΥΒΟΙΑΣ, ΠΑΙΔΟΥΠΟΛΗ ΕΥΒΟΙΑΣ, ΠΑΡΑΛΙΑ ΑΓΙΟΥ ΝΙΚΟΛΑΟΥ ΑΙΔΗΨΟΥ ΕΥΒΟΙΑΣ, ΠΛΑΤΑΝΙΑΣ ΕΥΒΟΙΑΣ, ΠΟΛΥΛΟΦΟΣ ΕΥΒΟΙΑΣ, ΡΟΔΟΔΑΦΝΗ ΕΥΒΟΙΑΣ, ΣΚΕΠΑΣΤΗ ΑΙΔΗΨΟΥ ΕΥΒΟΙΑΣ, ΣΤΡΟΓΓΥΛΗ ΝΗΣΟΣ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34400', Area: 'ΑΓΙΑ ΣΟΦΙΑ ΕΥΒΟΙΑΣ, ΑΓΙΟΣ ΚΑΜΑΡΙΤΣΑΣ ΕΥΒΟΙΑΣ, ΑΓΙΟΣ ΜΕΣΣΑΠΩΝ ΕΥΒΟΙΑΣ, ΑΚΡΕΣ ΕΥΒΟΙΑΣ, ΑΤΤΑΛΗ ΕΥΒΟΙΑΣ, ΔΑΦΝΗ ΝΕΡΟΤΡΙΒΙΑΣ ΕΥΒΟΙΑΣ, ΔΡΟΣΙΑ ΚΥΠΑΡΙΣΣΙΟΥ ΕΥΒΟΙΑΣ, ΘΕΟΤΟΚΟΣ ΕΥΒΟΙΑΣ, ΚΑΜΑΡΙΤΣΑ ΕΥΒΟΙΑΣ, ΚΑΣΤΕΛΛΑ ΕΥΒΟΙΑΣ, ΚΟΝΤΟΔΕΣΠΟΤΙ ΕΥΒΟΙΑΣ, ΚΥΠΠΑΡΙΣΣΙ ΧΑΛΚΙΔΑΣ ΕΥΒΟΙΑΣ, ΛΙΜΝΙΩΝΑΣ ΕΥΒΟΙΑΣ, ΜΑΚΡΥΚΑΠΑ ΕΥΒΟΙΑΣ, ΜΑΚΡΥΜΑΛΛΗ ΕΥΒΟΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ  ΙΩΑΝΝΗ ΚΑΛΥΒΙΤΗ ΕΥΒΟΙΑΣ, ΜΟΝΗ ΜΑΚΡΥΜΑΛΛΗΣ ΕΥΒΟΙΑΣ, ΜΟΝΗ ΠΑΝΑΓΙΑΣ ΓΟΡΓΟΕΠΗΚΟΟΥ ΕΥΒΟΙΑΣ, ΜΥΛΟΙ ΕΥΒΟΙΑΣ, ΝΕΡΟΤΡΙΒΙΑ ΕΥΒΟΙΑΣ, ΠΑΡΑΛΙΑ ΠΟΛΙΤΙΚΩΝ ΕΥΒΟΙΑΣ, ΠΗΓΑΔΙΑ ΕΥΒΟΙΑΣ, ΠΛΑΤΑΝΙΑ ΕΥΒΟΙΑΣ, ΠΟΛΙΤΙΚΑ ΕΥΒΟΙΑΣ, ΣΤΑΥΡΟΣ ΕΥΒΟΙΑΣ, ΤΡΙΑΔΑ ΕΥΒΟΙΑΣ, ΨΑΧΝΑ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34500', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΕΥΒΟΙΑΣ, ΑΓΙΟΣ ΛΟΥΚΑΣ ΕΥΒΟΙΑΣ, ΑΚΤΗ ΝΗΡΕΩΣ ΕΥΒΟΙΑΣ, ΑΛΙΒΕΡΙ ΕΥΒΟΙΑΣ, ΑΝΘΟΥΠΟΛΗ ΕΥΒΟΙΑΣ, ΒΕΛΟΣ ΕΥΒΟΙΑΣ, ΓΑΒΑΛΑΣ ΕΥΒΟΙΑΣ, ΔΥΣΤΟΣ ΕΥΒΟΙΑΣ, ΘΑΡΟΥΝΙΑ ΕΥΒΟΙΑΣ, ΚΑΤΑΚΑΛΟΣ ΕΥΒΟΙΑΣ, ΚΟΥΤΟΥΜΟΥΛΑΣ ΕΥΒΟΙΑΣ, ΛΑΤΑΣ ΕΥΒΟΙΑΣ, ΛΕΠΟΥΡΑ ΕΥΒΟΙΑΣ, ΜΗΛΑΚΙ ΕΥΒΟΙΑΣ, ΠΑΝΑΓΙΑ ΠΑΡΘΕΝΙΟΥ ΕΥΒΟΙΑΣ, ΠΑΝΑΓΙΤΣΑ ΠΟΥΝΤΑ ΕΥΒΟΙΑΣ, ΠΑΡΑΜΕΡΙΤΕΣ ΕΥΒΟΙΑΣ, ΠΑΡΘΕΝΙ ΕΥΒΟΙΑΣ, ΠΡΑΣΙΝΟ ΕΥΒΟΙΑΣ, ΠΡΙΝΙΑΣ ΕΥΒΟΙΑΣ, ΤΡΑΧΗΛΙΟ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '34600', Area: 'ΝΕΑ ΑΡΤΑΚΗ ΕΥΒΟΙΑΣ', Prefecture: 'Εύβοια' },
    { PostalCode: '36071', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΚΕΡΑΣΟΧΩΡΙΟΥ ΕΥΡΥΤΑΝΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΠΑΛΑΙΟΧΩΡΙΟΥ ΕΥΡΥΤΑΝΙΑΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΕΥΡΥΤΑΝΙΑΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΕΥΡΥΤΑΝΙΑΣ, ΑΜΙΡΙΑΝΗ ΕΥΡΥΤΑΝΙΑΣ, ΑΝΑΤΟΛΙΚΗ ΦΡΑΓΚΙΣΤΑ ΕΥΡΥΤΑΝΙΑΣ, ΒΙΝΙΑΝΗ ΕΥΡΥΤΑΝΙΑΣ, ΒΡΕΚΑΙΙΚΑ ΕΥΡΥΤΑΝΙΑΣ, ΓΑΒΡΙΝΑ ΕΥΡΥΤΑΝΙΑΣ, ΓΟΥΛΑΙΙΚΑ ΕΥΡΥΤΑΝΙΑΣ, ΔΑΦΝΗ ΕΥΡΥΤΑΝΙΑΣ, ΔΥΤΙΚΗ ΦΡΑΓΚΙΣΤΑ ΕΥΡΥΤΑΝΙΑΣ, ΕΠΙΣΚΟΠΗ ΕΥΡΥΤΑΝΙΑΣ, ΚΑΡΑΚΑΣΙΟΝ ΕΥΡΥΤΑΝΙΑΣ, ΚΕΡΑΣΟΧΩΡΙ ΕΥΡΥΤΑΝΙΑΣ, ΚΕΦΑΛΟΒΡΥΣΟ ΕΥΡΥΤΑΝΙΑΣ, ΚΡΕΝΤΗΣ ΕΥΡΥΤΑΝΙΑΣ, ΛΟΓΓΙΕΣ ΕΥΡΥΤΑΝΙΑΣ, ΜΑΡΑΘΙΑ ΕΥΡΥΤΑΝΙΑΣ, ΜΑΡΑΘΟΣ ΕΥΡΥΤΑΝΙΑΣ, ΜΑΥΡΟΜΜΑΤΑ ΕΥΡΥΤΑΝΙΑΣ, ΜΟΝΑΣΤΗΡΑΚΙ ΕΥΡΥΤΑΝΙΑΣ ΕΥΡΥΤΑΝΙΑΣ, ΝΕΑ ΒΙΝΙΑΝΗ ΕΥΡΥΤΑΝΙΑΣ, ΝΕΟΧΩΡΙ ΕΥΡΥΤΑΝΙΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΦΡΑΣΓΚΙΣΤΑΣ ΕΥΡΥΤΑΝΙΑΣ, ΠΕΡΟΥΛΑΙΙΚΑ ΕΥΡΥΤΑΝΙΑΣ, ΣΕΛΟ ΕΥΡΥΤΑΝΙΑΣ, ΣΚΑΜΝΙΑ ΕΥΡΥΤΑΝΙΑΣ, ΧΡΥΣΩ ΕΥΡΥΤΑΝΙΑΣ', Prefecture: 'Ευρυτανίας' },
    { PostalCode: '36072', Area: 'ΑΓΙΟΣ ΠΡΟΚΟΠΙΟΣ ΕΥΡΥΤΑΝΙΑΣ, ΑΜΠΑΡΕΣ ΕΥΡΥΤΑΝΙΑΣ, ΑΝΩ ΠΟΤΑΜΙΑ ΕΥΡΥΤΑΝΙΑΣ, ΑΡΜΑΜΠΕΛΑ ΕΥΡΥΤΑΝΙΑΣ, ΒΑΛΑΩΡΑ ΕΥΡΥΤΑΝΙΑΣ, ΒΕΡΝΙΚΟ ΕΥΡΥΤΑΝΙΑΣ, ΒΟΥΛΠΗ ΕΥΡΥΤΑΝΙΑΣ, ΓΡΑΝΙΤΣΑ ΕΥΡΥΤΑΝΙΑΣ, ΚΑΙΠΑΝΑΚΙ ΕΥΡΥΤΑΝΙΑΣ, ΚΑΣΤΡΑΚΙ ΒΑΛΑΩΡΑΣ ΕΥΡΥΤΑΝΙΑΣ, ΚΑΣΤΡΑΚΙ ΤΟΠΟΛΙΑΝΩΝ ΕΥΡΥΤΑΝΙΑΣ, ΚΑΤΩ ΠΟΤΑΜΙΑ ΕΥΡΥΤΑΝΙΑΣ, ΚΟΝΔΥΛΑΙΙΚΑ ΕΥΡΥΤΑΝΙΑΣ, ΚΟΨΑΙΙΚΑ ΕΥΡΥΤΑΝΙΑΣ, ΛΗΜΕΡΙ ΕΥΡΥΤΑΝΙΑΣ, ΛΙΘΟΧΩΡΙ ΕΥΡΥΤΑΝΙΑΣ, ΛΟΓΓΙΤΣΙ ΕΥΡΥΤΑΝΙΑΣ, ΜΟΝΗ ΤΑΤΑΡΝΗΣ ΕΥΡΥΤΑΝΙΑΣ, ΠΡΑΤΟΒΟΥΝΙ ΕΥΡΥΤΑΝΙΑΣ, ΤΟΠΟΛΙΑΝΑ ΕΥΡΥΤΑΝΙΑΣ, ΤΡΙΠΟΤΑΜΟ ΕΥΡΥΤΑΝΙΑΣ, ΤΣΟΥΚΚΑ ΕΥΡΥΤΑΝΙΑΣ, ΧΡΙΣΟΒΑ ΕΥΡΥΤΑΝΙΑΣ', Prefecture: 'Ευρυτανίας' },
    { PostalCode: '36073', Area: 'ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΕΥΡΥΤΑΝΙΑΣ, ΑΓΡΑΦΑ ΕΥΡΥΤΑΝΙΑΣ, ΑΝΗΦΟΡΑ ΕΥΡΥΤΑΝΙΑΣ, ΑΣΠΡΟΡΡΕΥΜΑ ΕΥΡΥΤΑΝΙΑΣ, ΒΑΛΑΡΙ ΕΥΡΥΤΑΝΙΑΣ, ΒΡΑΓΓΙΑΝΑ ΕΥΡΥΤΑΝΙΑΣ, ΓΑΒΡΟΛΙΣΙΑΔΑ ΕΥΡΥΤΑΝΙΑΣ, ΔΕΝΔΡΟΣ ΕΥΡΥΤΑΝΙΑΣ, ΕΛΑΤΟΣ ΕΥΡΥΤΑΝΙΑΣ, ΕΠΙΝΙΑΝΑ ΕΥΡΥΤΑΝΙΑΣ, ΚΑΒΑΚΙΑ ΕΥΡΥΤΑΝΙΑΣ, ΚΑΜΑΡΙΑ ΕΥΡΥΤΑΝΙΑΣ, ΚΑΡΥΑ ΕΥΡΥΤΑΝΙΑΣ, ΚΑΤΣΑΝΤΩΝΗΣ ΕΥΡΥΤΑΝΙΑΣ, ΚΟΥΣΤΕΣΑ ΕΥΡΥΤΑΝΙΑΣ, ΝΕΡΑΙΔΑ ΕΥΡΥΤΑΝΙΑΣ, ΠΑΛΑΙΟΛΑΚΚΑ ΕΥΡΥΤΑΝΙΑΣ, ΠΑΡΑΜΕΡΙΤΑ ΕΥΡΥΤΑΝΙΑΣ, ΠΤΕΡΗ ΕΥΡΥΤΑΝΙΑΣ, ΤΡΙΔΕΝΔΡΟ ΕΥΡΥΤΑΝΙΑΣ, ΤΡΟΒΑΤΟ ΕΥΡΥΤΑΝΙΑΣ', Prefecture: 'Ευρυτανίας' },
    { PostalCode: '36080', Area: 'ΒΡΑΧΑ ΕΥΡΥΤΑΝΙΑΣ, ΚΛΕΙΣΤΟ ΕΥΡΥΤΑΝΙΑΣ, ΜΑΥΡΟΛΟΓΓΟΣ ΕΥΡΥΤΑΝΙΑΣ, ΜΕΣΟΧΩΡΙ ΕΥΡΥΤΑΝΙΑΣ, ΠΛΑΤΑΝΟΣ ΕΥΡΥΤΑΝΙΑΣ, ΦΟΥΡΝΑ ΕΥΡΥΤΑΝΙΑΣ', Prefecture: 'Ευρυτανίας' },
    { PostalCode: '36100', Area: 'ΑΓΙΑ ΒΛΑΧΕΡΝΑ ΕΥΡΥΤΑΝΙΑΣ, ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΕΥΡΥΤΑΝΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΕΥΡΥΤΑΝΙΑΣ, ΑΜΠΕΛΙΑ ΕΥΡΥΤΑΝΙΑΣ, ΑΝΙΑΔΑ ΕΥΡΥΤΑΝΙΑΣ, ΑΝΩ ΚΑΛΕΣΜΕΝΟ ΕΥΡΥΤΑΝΙΑΣ, ΑΡΩΝΙΑΔΑ ΕΥΡΥΤΑΝΙΑΣ, ΒΑΜΒΑΚΙΕΣ ΕΥΡΥΤΑΝΙΑΣ, ΒΕΛΟΥΧΙ ΕΥΡΥΤΑΝΙΑΣ, ΒΟΥΤΥΡΟ ΕΥΡΥΤΑΝΙΑΣ, ΓΟΡΙΑΝΑΔΕΣ ΕΥΡΥΤΑΝΙΑΣ, ΔΥΤΙΚΟ ΠΑΠΠΑΡΟΥΣΙ ΕΥΡΥΤΑΝΙΑΣ, ΙΤΙΑ ΕΥΡΥΤΑΝΙΑΣ, ΚΑΛΕΣΜΕΝΟ ΕΥΡΥΤΑΝΙΑΣ, ΚΑΛΛΙΘΕΑ ΕΥΡΥΤΑΝΙΑΣ, ΚΑΡΠΕΝΗΣΙ ΕΥΡΥΤΑΝΙΑΣ, ΚΑΤΩ ΜΑΡΑΘΕΑ ΕΥΡΥΤΑΝΙΑΣ, ΚΛΑΥΣΙΟ ΕΥΡΥΤΑΝΙΑΣ, ΚΟΡΥΣΧΑΔΕΣ ΕΥΡΥΤΑΝΙΑΣ, ΜΕΣΑΜΠΕΛΙΑ ΕΥΡΥΤΑΝΙΑΣ, ΜΗΛΙΑΣ ΕΥΡΥΤΑΝΙΑΣ, ΜΟΝΑΣΤΗΡΑΚΙ ΚΑΛΕΣΜΕΝΟΥ ΕΥΡΥΤΑΝΙΑΣ, ΜΟΥΖΙΛΟ ΕΥΡΥΤΑΝΙΑΣ, ΜΥΡΙΚΗ ΕΥΡΥΤΑΝΙΑΣ, ΝΟΣΤΙΜΟ ΕΥΡΥΤΑΝΙΑΣ, ΠΑΠΠΑΔΙΑ ΕΥΡΥΤΑΝΙΑΣ, ΠΑΠΠΑΡΟΥΣΙ ΕΥΡΥΤΑΝΙΑΣ, ΠΑΡΚΙΟ ΕΥΡΥΤΑΝΙΑΣ, ΠΑΥΛΟΠΟΥΛΟ ΕΥΡΥΤΑΝΙΑΣ, ΣΕΛΛΑ ΕΥΡΥΤΑΝΙΑΣ, ΣΤΕΝΩΜΑ ΕΥΡΥΤΑΝΙΑΣ, ΣΤΕΦΑΝΙ ΕΥΡΥΤΑΝΙΑΣ, ΣΥΓΚΡΕΛΛΟΣ ΕΥΡΥΤΑΝΙΑΣ, ΦΙΔΑΚΙΑ ΕΥΡΥΤΑΝΙΑΣ', Prefecture: 'Ευρυτανίας' },
    { PostalCode: '29090', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΖΑΚΥΝΘΟΥ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΖΑΚΥΝΘΟΥ, ΑΛΙΚΑΝΑΣ ΖΑΚΥΝΘΟΥ, ΑΛΩΝΙΑ ΖΑΚΥΝΘΟΥ, ΑΝΩ ΓΕΡΑΚΑΡΙ ΖΑΚΥΝΘΟΥ, ΔΡΑΚΑΣ ΖΑΚΥΝΘΟΥ, ΚΑΛΛΙΘΕΑ ΖΑΚΥΝΘΟΥ, ΚΑΣΤΕΛΙΑ ΖΑΚΥΝΘΟΥ, ΚΑΤΑΣΤΑΡΙ ΖΑΚΥΝΘΟΥ, ΚΑΤΩ ΓΕΡΑΚΑΡΙ ΖΑΚΥΝΘΟΥ, ΠΗΓΑΔΑΚΙΑ ΖΑΚΥΝΘΟΥ, ΣΚΟΥΛΗΚΑΔΟ ΖΑΚΥΝΘΟΥ', Prefecture: 'Ζακύνθου' },
    { PostalCode: '29091', Area: 'ΑΓΙΑ ΘΕΚΛΑ ΖΑΚΥΝΘΟΥ, ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΖΑΚΥΝΘΟΥ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΝΗΣΟΣ ΖΑΚΥΝΘΟΥ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΒΟΛΙΜΩΝ ΖΑΚΥΝΘΟΥ, ΑΝΑΦΩΝΗΤΡΙΑ ΖΑΚΥΝΘΟΥ, ΑΝΩ ΒΟΛΙΜΕΣ ΖΑΚΥΝΘΟΥ, ΑΣΚΟΣ ΖΑΚΥΝΘΟΥ, ΒΑΡΒΑΡΑ ΖΑΚΥΝΘΟΥ, ΒΟΛΙΜΕΣ ΖΑΚΥΝΘΟΥ, ΕΛΙΕΣ ΖΑΚΥΝΘΟΥ, ΕΞΩ ΧΩΡΑ ΖΑΚΥΝΘΟΥ, ΚΑΜΠΙΟ ΖΑΚΥΝΘΟΥ, ΚΟΡΙΘΙ ΖΑΚΥΝΘΟΥ, ΚΟΡΩΝΗ ΖΑΚΥΝΘΟΥ, ΜΑΡΙΕΣ ΖΑΚΥΝΘΟΥ, ΜΙΚΡΟ ΝΗΣΙ ΖΑΚΥΝΘΟΥ, ΟΡΘΟΝΙΕΣ ΖΑΚΥΝΘΟΥ, ΣΚΙΝΑΡΙΑ ΖΑΚΥΝΘΟΥ', Prefecture: 'Ζακύνθου' },
    { PostalCode: '29092', Area: 'ΑΓΑΛΑΣ ΖΑΚΥΝΘΟΥ, ΑΓΙΟΙ ΠΑΝΤΕΣ ΖΑΚΥΝΘΟΥ, ΑΓΙΟΣ ΛΕΩΝ ΖΑΚΥΝΘΟΥ, ΑΓΙΟΣ ΣΩΣΤΗΣ ΖΑΚΥΝΘΟΥ, ΑΗ ΓΙΑΝΝΗΣ ΑΓΑΛΑ ΖΑΚΥΝΘΟΥ, ΑΜΠΕΛΟΣ ΖΑΚΥΝΘΟΥ, ΑΠΕΛΑΤΙ ΖΑΚΥΝΘΟΥ, ΒΟΥΓΙΑΤΟ ΖΑΚΥΝΘΟΥ, ΓΑΛΑΡΟ ΖΑΚΥΝΘΟΥ, ΓΥΡΙΟ ΖΑΚΥΝΘΟΥ, ΚΑΛΠΑΚΙ ΖΑΚΥΝΘΟΥ, ΚΕΡΙ ΖΑΚΥΝΘΟΥ, ΚΟΙΛΙΩΜΕΝΟΣ ΖΑΚΥΝΘΟΥ, ΛΑΓΑΝΑΣ ΖΑΚΥΝΘΟΥ, ΛΑΓΚΑΔΑΚΙΑ ΖΑΚΥΝΘΟΥ, ΛΑΓΩΠΟΔΟ ΖΑΚΥΝΘΟΥ, ΛΙΘΑΚΙΑ ΖΑΚΥΝΘΟΥ, ΛΙΜΝΗ ΚΕΡΙΟΥ ΖΑΚΥΝΘΟΥ, ΛΟΥΧΑ ΖΑΚΥΝΘΟΥ, ΜΑΡΑΘΙΑΣ ΖΑΚΥΝΘΟΥ, ΜΑΧΑΙΡΑΔΟ ΖΑΚΥΝΘΟΥ, ΜΕΛΙΝΑΔΟ ΖΑΚΥΝΘΟΥ, ΜΟΥΖΑΚΙ ΖΑΚΥΝΘΟΥ, ΠΑΝΤΟΚΡΑΤΩΡΑΣ ΖΑΚΥΝΘΟΥ, ΡΟΜΙΡΙ ΖΑΚΥΝΘΟΥ, ΣΤΗΜΙΕΣ ΖΑΚΥΝΘΟΥ, ΦΙΟΛΙΤΗΣ ΖΑΚΥΝΘΟΥ, ΦΤΕΡΙΝΙ ΖΑΚΥΝΘΟΥ', Prefecture: 'Ζακύνθου' },
    { PostalCode: '29100', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΒΑΣΙΛΙΚΟΥ ΖΑΚΥΝΘΟΥ, ΑΓΙΟΣ ΚΗΡΥΚΟΣ ΖΑΚΥΝΘΟΥ, ΑΚΡΩΤΗΡΙ ΖΑΚΥΝΘΟΥ, ΑΜΠΕΛΟΚΗΠΟΙ ΖΑΚΥΝΘΟΥ, ΑΝΩ ΒΑΣΙΛΙΚΟΣ ΖΑΚΥΝΘΟΥ, ΑΡΓΑΣΙ ΖΑΚΥΝΘΟΥ, ΒΑΝΑΤΟ ΖΑΚΥΝΘΟΥ, ΒΑΣΙΛΙΚΟΣ ΖΑΚΥΝΘΟΥ, ΓΑΙΤΑΝΙ ΖΑΚΥΝΘΟΥ, ΔΡΟΣΙΑ ΖΑΚΥΝΘΟΥ, ΖΑΚΥΝΘΟΣ ΖΑΚΥΝΘΟΥ, ΚΑΛΑΜΑΚΙ ΖΑΚΥΝΘΟΥ, ΚΑΛΙΠΑΔΟ ΖΑΚΥΝΘΟΥ, ΚΑΛΛΙΤΕΡΟΣ ΖΑΚΥΝΘΟΥ, ΚΑΛΟΝΗΣΙ ΖΑΚΥΝΘΟΥ, ΚΥΔΩΝΙ ΖΑΚΥΝΘΟΥ, ΚΥΨΕΛΗ ΖΑΚΥΝΘΟΥ, ΛΙΜΟΝΤΑΙΙΚΑ ΖΑΚΥΝΘΟΥ, ΜΑΡΓΑΡΑΙΙΚΑ ΖΑΚΥΝΘΟΥ, ΜΕΣΟ ΓΕΡΑΚΑΡΙ ΖΑΚΥΝΘΟΥ, ΜΟΝΗ ΣΤΡΟΦΑΔΩΝ ΖΑΚΥΝΘΟΥ, ΜΠΟΧΑΛΗ ΖΑΚΥΝΘΟΥ, ΝΕΡΟΜΥΛΟΣ ΖΑΚΥΝΘΟΥ, ΞΗΡΟΚΑΣΤΕΛΛΟ ΖΑΚΥΝΘΟΥ, ΠΕΥΚΑΚΙΑ ΖΑΚΥΝΘΟΥ, ΠΛΑΝΟΣ ΖΑΚΥΝΘΟΥ, ΣΑΡΑΚΗΝΑΔΟ ΖΑΚΥΝΘΟΥ, ΤΡΑΓΑΚΙ ΖΑΚΥΝΘΟΥ, ΧΑΜΟΥΖΑΣ ΖΑΚΥΝΘΟΥ, ΨΑΡΑΙΙΚΑ ΖΑΚΥΝΘΟΥ, ΨΑΡΟΥ ΖΑΚΥΝΘΟΥ', Prefecture: 'Ζακύνθου' },
    { PostalCode: '27050', Area: 'ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΒΑΡΘΟΛΟΜΙΟΥ ΗΛΕΙΑΣ, ΑΡΚΟΥΔΙ ΗΛΕΙΑΣ, ΒΑΡΘΟΛΟΜΙΟ ΗΛΕΙΑΣ, ΒΑΤΙΩΝΑΣ ΗΛΕΙΑΣ, ΒΡΑΝΑΣ ΗΛΕΙΑΣ, ΓΛΥΦΑ ΗΛΕΙΑΣ, ΔΗΜΗΤΡΑ ΗΛΕΙΑΣ, ΘΙΝΕΣ ΗΛΕΙΑΣ, ΙΟΝΙΚΟ ΗΛΕΙΑΣ, ΚΑΛΑΜΙΑ ΗΛΕΙΑΣ, ΚΑΛΥΒΙΑ ΜΥΡΤΟΥΝΤΙΩΝ ΗΛΕΙΑΣ, ΚΑΡΑΒΑΚΙ ΗΛΕΙΑΣ, ΚΑΡΔΙΑΚΑΥΤΗ ΗΛΕΙΑΣ, ΚΑΣΤΡΟ ΗΛΕΙΑΣ, ΚΟΚΚΑΛΑ ΗΛΕΙΑΣ, ΛΟΥΤΡΑ ΚΥΛΛΗΝΗΣ ΗΛΕΙΑΣ, ΛΥΓΙΑ ΗΛΕΙΑΣ, ΜΑΧΟΣ ΗΛΕΙΑΣ, ΠΑΡΑΛΙΑ ΘΙΝΩΝ ΗΛΕΙΑΣ, ΠΑΡΑΛΙΑ ΛΥΓΙΑΣ ΗΛΕΙΑΣ, ΡΕΓΚΛΑΙΙΚΑ ΗΛΕΙΑΣ, ΡΩΜΕΙΚΑ ΑΜΑΛΙΑΔΟΣ ΗΛΕΙΑΣ, ΣΤΡΟΥΜΠΟΥΛΗ ΗΛΕΙΑΣ, ΨΗΛΗ ΡΑΧΗ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27051', Area: 'ΑΝΔΡΑΒΙΔΑ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27052', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΝΗΣΙΟΥ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΧΑΡΑΛΑΜΠΟΣ ΗΛΕΙΑΣ, ΑΕΤΟΡΡΑΧΗ ΗΛΕΙΑΣ, ΑΝΩ ΒΕΛΙΤΣΕΣ ΑΧΑΙΑΣ, ΑΝΩ ΚΟΥΡΤΕΣΙ ΗΛΕΙΑΣ, ΒΑΡΔΑ ΗΛΕΙΑΣ, ΒΟΥΠΡΑΣΙ ΑΧΑΙΑΣ, ΔΑΦΝΗ ΑΕΤΟΡΡΑΧΗΣ ΗΛΕΙΑΣ, ΘΑΝΑΣΟΥΛΑΙΙΚΑ ΗΛΕΙΑΣ, ΚΑΛΟΓΡΙΑ ΑΧΑΙΑΣ, ΚΑΛΥΒΑΚΙΑ ΞΕΝΙΩΝ ΗΛΕΙΑΣ, ΚΑΝΔΑΛΟΣ ΠΑΤΡΩΝ ΑΧΑΙΑΣ, ΚΑΠΕΛΕΤΟ ΗΛΕΙΑΣ, ΚΑΡΑΒΟΥΛΑΙΙΚΑ ΗΛΕΙΑΣ, ΚΑΡΒΟΥΝΑΙΙΚΑ ΗΛΕΙΑΣ, ΚΑΤΩ ΒΕΛΙΤΣΕΣ ΑΧΑΙΑΣ, ΚΟΤΤΕΙΚΑ ΗΛΕΙΑΣ, ΚΟΥΓΑΙΙΚΑ ΗΛΕΙΑΣ, ΚΟΥΡΤΕΣΗ ΗΛΕΙΑΣ, ΚΡΕΜΜΥΔΙ ΗΛΕΙΑΣ, ΚΩΜΗ ΗΛΕΙΑΣ, ΛΑΠΑΣ ΑΧΑΙΑΣ, ΛΟΥΤΡΑ ΥΡΜΙΝΗΣ ΗΛΕΙΑΣ, ΜΑΝΩΛΑΔΑ ΗΛΕΙΑΣ, ΜΕΓΑΛΟ ΠΕΥΚΟ ΗΛΕΙΑΣ, ΜΕΛΙΣΣΑ ΗΛΕΙΑΣ, ΜΕΤΟΧΙ ΠΑΤΡΩΝ ΑΧΑΙΑΣ, ΜΙΧΟΙΟ ΑΧΑΙΑΣ, ΜΠΟΡΣΙ ΗΛΕΙΑΣ, ΜΠΡΙΝΙΑ ΗΛΕΙΑΣ, ΝΕΑ ΜΑΝΩΛΑΔΑ ΗΛΕΙΑΣ, ΝΕΑΠΟΛΗ ΗΛΕΙΑΣ, ΝΕΟ ΒΟΥΠΡΑΣΙΟ ΑΧΑΙΑΣ, ΝΗΣΙ ΗΛΕΙΑΣ, ΞΕΝΙΕΣ ΗΛΕΙΑΣ, ΠΑΛΑΙΟΧΩΡΑ ΗΛΕΙΑΣ, ΠΑΡΑΛΙΜΝΗ ΑΧΑΙΑΣ, ΣΑΜΑΡΑΙΙΚΑ ΗΛΕΙΑΣ, ΣΥΜΠΑΝΙ ΗΛΕΙΑΣ, ΤΣΑΜΑΙΙΚΑ ΑΧΑΙΑΣ, ΨΑΡΙ ΗΛΕΙΑΣ, ΨΕΥΤΕΙΚΑ ΑΧΑΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27053', Area: 'ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΛΕΧΑΙΝΩΝ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΛΕΧΑΙΝΩΝ ΗΛΕΙΑΣ, ΑΡΕΤΗ ΗΛΕΙΑΣ, ΒΡΑΧΝΑΙΙΚΑ ΗΛΕΙΑΣ, ΒΥΤΙΝΑΙΙΚΑ ΗΛΕΙΑΣ, ΚΑΤΑΡΡΑΧΙ ΗΛΕΙΑΣ, ΛΕΧΑΙΝΑ ΗΛΕΙΑΣ, ΜΑΡΚΟΠΟΥΛΟ ΗΛΕΙΑΣ, ΜΥΡΣΙΝΗ ΗΛΕΙΑΣ, ΝΕΟΧΩΡΙ ΖΑΧΑΡΩΣ ΗΛΕΙΑΣ, ΝΕΟΧΩΡΙ ΜΥΡΤΟΥΝΤΙΩΝ ΗΛΕΙΑΣ, ΟΛΓΑ ΗΛΕΙΑΣ, ΠΗΓΑΔΙ ΗΛΕΙΑΣ, ΣΙΜΙΖΑ ΗΛΕΙΑΣ, ΣΤΑΦΙΔΟΚΑΜΠΟΣ ΗΛΕΙΑΣ, ΣΤΡΟΥΣΙ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27054', Area: 'ΑΓΙΟΣ ΗΛΙΑΣ ΟΛΥΜΠΙΑΣ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΖΑΧΑΡΩΣ ΗΛΕΙΑΣ, ΑΓΡΑΠΙΔΙΑ ΗΛΕΙΑΣ, ΑΝΗΛΙΟ ΗΛΕΙΑΣ, ΑΡΗΝΗ ΗΛΕΙΑΣ, ΑΡΤΕΜΙΔΑ ΗΛΕΙΑΣ, ΓΙΑΝΝΙΤΣΟΧΩΡΙ ΗΛΕΙΑΣ, ΖΑΧΑΡΩ ΗΛΕΙΑΣ, ΘΟΛΟ ΗΛΕΙΑΣ, ΚΑΙΑΦΑΣ ΗΛΕΙΑΣ, ΚΑΚΟΒΑΤΟΣ ΗΛΕΙΑΣ, ΚΑΛΙΔΟΝΑ ΗΛΕΙΑΣ, ΚΑΜΠΟΣ ΚΑΛΙΔΟΝΑΣ ΗΛΕΙΑΣ, ΚΑΤΩ ΑΡΗΝΗ ΗΛΕΙΑΣ, ΚΑΤΩ ΞΗΡΟΧΩΡΙ ΗΛΕΙΑΣ, ΚΑΤΩ ΤΑΞΙΑΡΧΕΣ ΗΛΕΙΑΣ, ΚΟΣΤΟΜΕΡΑ ΗΛΕΙΑΣ, ΚΟΤΡΩΝΑΚΙ ΗΛΕΙΑΣ, ΚΟΤΡΩΝΙ ΜΙΝΘΗ ΗΛΕΙΑΣ, ΚΟΤΡΩΝΙ ΞΗΡΟΧΩΡΙΟΥ ΗΛΕΙΑΣ, ΚΟΥΜΟΥΘΕΚΡΑ ΗΛΕΙΑΣ, ΛΟΓΓΑΚΙ ΗΛΕΙΑΣ, ΜΑΚΙΣΤΟΣ ΗΛΕΙΑΣ, ΜΑΡΑΘΟΣ ΗΛΕΙΑΣ, ΜΗΛΕΑ ΗΛΕΙΑΣ, ΜΙΝΘΗ ΗΛΕΙΑΣ, ΜΠΟΥΡΜΠΟΥΛΑΣ ΗΛΕΙΑΣ, ΝΕΟΧΩΡΙ ΞΗΡΟΧΩΡΙΟΥ ΗΛΕΙΑΣ, ΞΗΡΟΧΩΡΙ ΗΛΕΙΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΤΡΥΠΩΝ ΗΛΕΙΑΣ, ΠΑΛΙΟ ΠΡΑΣΙΔΑΚΙ ΗΛΕΙΑΣ, ΠΑΝΑΓΙΑ ΞΗΡΟΧΩΡΙΟΥ ΗΛΕΙΑΣ, ΠΑΝΑΓΙΑ ΣΜΕΡΝΑΣ ΗΛΕΙΑΣ, ΠΑΝΑΓΙΕΣ ΗΛΕΙΑΣ, ΠΑΝΟΡΑΜΑ ΗΛΕΙΑΣ, ΠΡΑΣΙΔΑΚΙ ΗΛΕΙΑΣ, ΡΕΒΕΛΑΙΙΚΑ ΗΛΕΙΑΣ, ΡΟΔΙΝΑ ΗΛΕΙΑΣ, ΣΜΕΡΝΑ ΗΛΕΙΑΣ, ΣΧΙΝΟΙ ΗΛΕΙΑΣ, ΤΡΑΝΗ ΛΑΚΑ ΗΛΕΙΑΣ, ΧΡΥΣΟΧΩΡΙ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27055', Area: 'ΑΝΕΜΟΧΩΡΑΚΙ ΗΛΕΙΑΣ, ΒΡΙΝΑ ΗΛΕΙΑΣ, ΓΡΑΙΚΑΣ ΗΛΕΙΑΣ, ΓΡΥΛΛΟΣ ΗΛΕΙΑΣ, ΚΑΛΥΒΑΚΙΑ ΟΛΥΜΠΙΑΣ ΗΛΕΙΑΣ, ΚΑΤΩ ΣΑΜΙΚΟ ΗΛΕΙΑΣ, ΚΛΕΙΔΙ ΗΛΕΙΑΣ, ΚΡΕΣΤΕΝΑ ΗΛΕΙΑΣ, ΚΡΟΥΝΟΙ ΗΛΕΙΑΣ, ΜΑΚΡΙΣΙΑ ΗΛΕΙΑΣ, ΜΟΣΧΟΥΛΑ ΗΛΕΙΑΣ, ΝΕΑ ΚΑΛΥΒΑΚΙΑ ΗΛΕΙΑΣ, ΝΕΑ ΣΚΙΛΛΟΥΝΤΙΑ ΗΛΕΙΑΣ, ΝΕΟ ΧΩΡΙΟ ΗΛΕΙΑΣ, ΠΛΟΥΤΟΧΩΡΙ ΗΛΕΙΑΣ, ΠΟΡΟΣ ΗΛΕΙΑΣ, ΡΑΧΕΣ ΗΛΕΙΑΣ, ΣΑΜΙΚΟ ΗΛΕΙΑΣ, ΣΚΙΛΛΟΥΝΤΙΑ ΗΛΕΙΑΣ, ΦΡΑΓΚΟΚΚΛΗΣΙΑ ΗΛΕΙΑΣ, ΦΡΙΞΑ ΗΛΕΙΑΣ, ΧΑΝΙ ΓΡΥΛΛΟΥ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27056', Area: 'ΚΡΥΟΝΕΡΙ ΗΛΕΙΑΣ ΗΛΕΙΑΣ, ΚΡΥΟΝΕΡΙ ΟΛΥΜΠΙΑΣ ΗΛΕΙΑΣ, ΛΕΠΡΕΟ ΗΛΕΙΑΣ, ΝΕΑ ΦΙΓΑΛΕΙΑ ΗΛΕΙΑΣ, ΣΚΟΥΠΑΣ ΗΛΕΙΑΣ, ΤΑΞΙΑΡΧΕΣ ΗΛΕΙΑΣ, ΤΡΙΑΝΤΑ ΗΛΕΙΑΣ, ΦΑΣΚΟΜΗΛΙΑ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27058', Area: 'ΑΓΡΙΔΙ ΗΛΕΙΑΣ, ΑΛΦΕΙΟΥΣΑ ΗΛΕΙΑΣ, ΑΝΕΜΟΧΩΡΙ ΗΛΕΙΑΣ, ΕΠΙΤΑΛΙΟ ΗΛΕΙΑΣ, ΚΑΛΛΙΚΩΜΟ ΗΛΕΙΑΣ, ΛΑΔΙΚΟ ΗΛΕΙΑΣ, ΠΑΡΑΛΙΑ ΕΠΙΤΑΛΙΟΥ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27061', Area: 'ΑΓΙΟΣ ΒΛΑΣΗΣ ΜΥΡΩΝΙΩΝ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΣΩΣΤΗΣ ΜΕΣΣΗΝΙΑΣ, ΑΜΠΕΛΙΩΝΑ ΜΕΣΣΗΝΙΑΣ, ΑΜΥΓΔΑΛΙΕΣ ΗΛΕΙΑΣ, ΑΝΔΡΙΤΣΑΙΝΑ ΗΛΕΙΑΣ, ΒΡΕΣΤΟ ΗΛΕΙΑΣ, ΔΡΑΓΩΓΙ ΗΛΕΙΑΣ, ΘΕΙΣΟΑ ΗΛΕΙΑΣ, ΚΑΚΑΛΕΤΡΙ ΜΕΣΣΗΝΙΑΣ, ΚΑΡΜΙ ΗΛΕΙΑΣ, ΚΑΣΤΡΟΥΓΚΑΙΝΑ ΗΛΕΙΑΣ, ΚΑΤΩ ΑΜΥΓΔΑΛΙΕΣ ΗΛΕΙΑΣ, ΚΛΗΜΑ ΗΛΕΙΑΣ, ΚΟΥΦΟΠΟΥΛΟ ΗΛΕΙΑΣ, ΚΡΑΝΑ ΗΛΕΙΑΣ, ΚΩΤΙΛΙ ΑΡΚΑΔΙΑΣ, ΛΙΝΙΣΤΑΙΝΑ ΗΛΕΙΑΣ, ΛΟΓΓΟ ΗΛΕΙΑΣ, ΜΑΡΙΝΑ ΜΕΣΣΗΝΙΑΣ, ΜΑΤΕΣΙ ΗΛΕΙΑΣ, ΜΠΑΛΑΙΙΚΑ ΗΛΕΙΑΣ, ΜΥΛΟΙ ΗΛΕΙΑΣ, ΜΥΡΩΝΙΑ ΗΛΕΙΑΣ, ΝΕΔΑ ΜΕΣΣΗΝΙΑΣ, ΠΑΛΑΤΟΣ ΑΡΚΑΔΙΑΣ, ΠΕΡΙΒΟΛΙΑ ΗΛΕΙΑΣ, ΠΕΤΡΑ ΜΕΣΣΗΝΙΑΣ, ΠΕΤΡΑΛΩΝΑ ΗΛΕΙΑΣ, ΠΛΑΤΕΙΑ ΗΛΕΙΑΣ, ΡΑΜΑ ΜΥΡΩΝΙΩΝ ΗΛΕΙΑΣ, ΡΟΒΙΑ ΗΛΕΙΑΣ, ΣΚΛΗΡΟΣ ΜΕΣΣΗΝΙΑΣ, ΣΤΟΜΙΟ ΗΛΕΙΑΣ, ΣΤΡΟΓΓΥΛΟ ΑΡΚΑΔΙΑΣ, ΣΥΚΕΕΣ ΗΛΕΙΑΣ, ΦΑΝΑΡΙ ΟΛΥΜΠΙΑΣ ΗΛΕΙΑΣ, ΦΙΓΑΛΕΙΑ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27063', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΤΣΙΠΙΑΝΩΝ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΑΝΤΡΩΝΙΟΥ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΠΥΡΓΟΥ ΗΛΕΙΑΣ, ΑΜΥΓΔΑΛΗ ΗΛΕΙΑΣ, ΑΝΤΡΩΝΙ ΗΛΕΙΑΣ, ΑΣΤΡΑΣ ΗΛΕΙΑΣ, ΚΑΚΟΤΑΡΙ ΗΛΕΙΑΣ, ΚΑΛΥΒΙΑ ΑΣΤΡΑ ΗΛΕΙΑΣ, ΚΑΛΥΒΙΑ ΚΡΥΟΒΡΥΣΗΣ ΗΛΕΙΑΣ, ΚΕΡΕΣΟΒΑ ΗΛΕΙΑΣ, ΚΡΥΟΒΡΥΣΗ ΗΛΕΙΑΣ, ΛΑΜΠΕΙΑ ΗΛΕΙΑΣ, ΟΡΕΙΝΗ ΗΛΕΙΑΣ, ΠΑΛΑΙΟΦΥΤΙΑ ΗΛΕΙΑΣ, ΠΑΝΟΠΟΥΛΟΣ ΗΛΕΙΑΣ, ΤΣΙΠΙΑΝΑ ΗΛΕΙΑΣ, ΧΑΝΙΑ ΣΠΑΡΤΟΥΛΙΑ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27064', Area: 'ΑΓΙΑ ΑΝΝΑ ΗΛΕΙΑΣ, ΑΡΒΑΝΙΤΗΣ ΗΛΕΙΑΣ, ΒΑΡΒΑΡΙΝΑ ΗΛΕΙΑΣ, ΓΟΥΜΕΡΟ ΗΛΕΙΑΣ, ΚΑΡΑΤΟΥΛΑ ΗΛΕΙΑΣ, ΚΑΡΥΑ ΗΛΕΙΑΣ, ΚΑΤΣΟΜΑΛΙΑΡΑΙΙΚΑ ΗΛΕΙΑΣ, ΚΛΕΙΔΕΡΕΙΚΑ ΗΛΕΙΑΣ, ΚΛΙΝΔΙΑ ΗΛΕΙΑΣ, ΚΟΥΤΣΟΧΕΡΑ ΗΛΕΙΑΣ, ΛΑΝΘΙ ΗΛΕΙΑΣ, ΜΑΓΟΥΛΑ ΗΛΕΙΑΣ, ΜΑΡΜΑΡΑ ΗΛΕΙΑΣ, ΜΟΝΗ ΚΡΕΜΑΣΤΗΣ ΗΛΕΙΑΣ, ΜΟΥΖΑΚΙ ΗΛΕΙΑΣ, ΠΕΥΚΗ ΗΛΕΙΑΣ, ΣΙΤΟΧΩΡΙ ΗΛΕΙΑΣ, ΣΟΠΙΟ ΗΛΕΙΑΣ, ΧΑΡΙΑ ΗΛΕΙΑΣ, ΧΕΙΜΑΔΙΟ ΗΛΕΙΑΣ, ΩΛΕΝΗ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27065', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΠΛΑΤΑΝΟΥ ΗΛΕΙΑΣ, ΑΜΠΑΡΙ ΗΛΕΙΑΣ, ΑΡΧΑΙΑ ΟΛΥΜΠΙΑ ΗΛΕΙΑΣ, ΑΡΧΑΙΑ ΠΙΣΑ ΗΛΕΙΑΣ, ΑΣΠΡΑ ΣΠΙΤΙΑ ΗΛΕΙΑΣ, ΒΑΣΙΛΑΚΙ ΗΛΕΙΑΣ, ΓΥΡΟΣ ΛΟΥΒΡΟΥ ΗΛΕΙΑΣ, ΔΙΕΘΝΗΣ ΟΛΥΜΠΙΑΚΗ ΑΚΑΔΗΜΙΑ ΗΛΕΙΑΣ, ΔΡΟΥΒΑ ΗΛΕΙΑΣ, ΚΑΜΕΝΑ ΗΛΕΙΑΣ, ΚΑΡΟΥΤΕΣ ΗΛΕΙΑΣ, ΚΑΤΩ ΣΤΡΕΦΙ ΗΛΕΙΑΣ, ΚΛΑΔΕΟΣ ΗΛΕΙΑΣ, ΚΟΣΚΙΝΑ ΗΛΕΙΑΣ, ΛΙΝΑΡΙΑ ΗΛΕΙΑΣ, ΛΟΥΒΡΟ ΗΛΕΙΑΣ, ΜΑΓΕΙΡΑΣ ΗΛΕΙΑΣ, ΜΙΡΑΚΑ ΗΛΕΙΑΣ, ΜΟΥΡΙΑ ΗΛΕΙΑΣ, ΝΕΑ ΚΑΜΕΝΑ ΗΛΕΙΑΣ, ΞΗΡΟΚΑΜΠΟΣ ΗΛΕΙΑΣ, ΟΛΥΜΠΙΑΣ ΗΛΕΙΑΣ, ΠΕΥΚΕΣ ΗΛΕΙΑΣ, ΠΛΑΤΑΝΟΣ ΗΛΕΙΑΣ, ΥΨΗΛΟ ΗΛΕΙΑΣ, ΦΑΝΑΡΑΣ ΑΡΧΑΙΑΣ ΟΛΥΜΠΙΑΣ ΗΛΕΙΑΣ, ΦΛΟΚΑΣ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27066', Area: 'ΑΙ ΓΙΑΝΝΑΚΗΣ ΗΛΕΙΑΣ, ΑΧΛΑΔΙΝΗ ΗΛΕΙΑΣ, ΒΙΛΛΙΑ ΗΛΕΙΑΣ, ΔΟΥΚΑ ΗΛΕΙΑΣ, ΚΑΜΠΟΣ ΝΕΜΟΥΤΑ ΗΛΕΙΑΣ, ΚΑΜΠΟΣ ΝΕΡΑΙΔΑΣ ΗΛΕΙΑΣ, ΚΑΣΤΑΝΙΑ ΗΛΕΙΑΣ, ΚΟΥΜΑΝΗ ΗΛΕΙΑΣ, ΚΟΥΤΣΟΥΡΟΥΜΠΑΣ ΗΛΕΙΑΣ, ΛΑΛΑ ΗΛΕΙΑΣ, ΛΑΣΔΙΚΑ ΗΛΕΙΑΣ, ΜΗΛΙΕΣ ΗΛΕΙΑΣ, ΝΕΑ ΠΕΡΣΑΙΝΑ ΗΛΕΙΑΣ, ΝΕΜΟΥΤΑ ΗΛΕΙΑΣ, ΝΕΡΑΙΔΑ ΗΛΕΙΑΣ, ΠΕΡΣΑΙΝΑ ΗΛΕΙΑΣ, ΠΟΘΟΣ ΗΛΕΙΑΣ, ΤΣΑΠΑΡΑΙΙΚΑ ΗΛΕΙΑΣ, ΦΟΛΟΗ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27067', Area: 'ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΚΑΤΑΚΟΛΟΥ ΗΛΕΙΑΣ, ΚΑΒΟΥΡΙ ΗΛΕΙΑΣ, ΚΑΤΑΚΟΛΟ ΗΛΕΙΑΣ, ΚΑΤΩ ΚΑΒΟΥΡΙ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27069', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΗΛΙΑΣ ΠΗΝΕΙΑΣ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΣΙΜΟΠΟΥΛΟΥ ΗΛΕΙΑΣ, ΑΓΝΑΝΤΑ ΗΛΕΙΑΣ, ΑΓΡΑΠΙΔΟΧΩΡΙ ΗΛΕΙΑΣ, ΑΚΡΟΠΟΤΑΜΙΑ ΗΛΕΙΑΣ, ΑΜΠΕΛΑΚΙΑ ΗΛΕΙΑΣ, ΑΝΘΩΝΑΣ ΗΛΕΙΑΣ, ΑΠΙΔΟΥΛΑ ΗΛΕΙΑΣ, ΑΥΓΗ ΗΛΕΙΑΣ, ΒΑΛΜΗ ΗΛΕΙΑΣ, ΒΕΛΑΝΙΔΙ ΗΛΕΙΑΣ, ΒΟΥΛΙΑΓΜΕΝΗ ΗΛΕΙΑΣ, ΓΑΒΡΑΚΙΑ ΗΛΕΙΑΣ, ΔΑΦΝΗ ΠΗΝΕΙΑΣ ΗΛΕΙΑΣ, ΔΑΦΝΙΩΤΙΣΣΑ ΗΛΕΙΑΣ, ΕΦΥΡΑ ΗΛΕΙΑΣ, ΚΑΛΑΘΑΣ ΗΛΕΙΑΣ, ΚΑΛΟ ΠΑΙΔΙ ΗΛΕΙΑΣ, ΚΑΜΠΟΣ ΗΛΕΙΑΣ ΗΛΕΙΑΣ, ΚΑΜΠΟΣ ΠΑΛΑΙΟΒΑΡΒΑΣΑΙΝΑΣ ΗΛΕΙΑΣ, ΚΕΝΤΡΟ ΗΛΕΙΑΣ, ΚΕΡΑΜΙΔΙΑ ΗΛΕΙΑΣ ΗΛΕΙΑΣ, ΚΕΡΑΜΙΔΙΑ ΠΡΑΣΙΝΟΥ ΗΛΕΙΑΣ, ΚΟΛΟΚΥΘΑΣ ΗΛΕΙΑΣ, ΚΟΤΡΩΝΑ ΗΛΕΙΑΣ, ΚΡΥΟΝΕΡΙ ΠΗΝΕΙΑΣ ΗΛΕΙΑΣ, ΛΑΓΑΝΑΣ ΗΛΕΙΑΣ, ΛΑΤΑΣ ΗΛΕΙΑΣ, ΛΟΥΚΑΣ ΗΛΕΙΑΣ, ΜΑΖΑΡΑΚΙ ΗΛΕΙΑΣ, ΟΙΝΟΗ ΗΛΕΙΑΣ, ΠΙΡΙ ΗΛΕΙΑΣ, ΠΡΙΝΑΡΙ ΗΛΕΙΑΣ, ΠΡΟΔΡΟΜΟΣ ΗΛΕΙΑΣ, ΡΟΔΙΑ ΗΛΕΙΑΣ, ΡΟΥΠΑΚΙΑ ΒΕΛΑΝΙΔΙΟΥ ΗΛΕΙΑΣ, ΣΙΜΟΠΟΥΛΟ ΗΛΕΙΑΣ, ΣΚΛΙΒΑ ΗΛΕΙΑΣ, ΣΟΥΛΙ ΗΛΕΙΑΣ, ΩΡΑΙΑ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27100', Area: 'ΑΓΙΟΙ ΑΠΟΣΤΟΛΟΙ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΚΟΡΑΚΟΧΩΡΙΟΥ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΑΝΔΡΑΒΙΔΑΣ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΠΑΛΑΙΟΒΑΡΒΑΣΑΙΝΑΣ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΗΛΙΑΣ ΛΕΤΡΙΝΩΝ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΛΕΤΡΙΝΩΝ ΗΛΕΙΑΣ, ΑΛΠΟΧΩΡΙ ΗΛΕΙΑΣ, ΑΛΦΕΙΟΣ ΗΛΕΙΑΣ, ΑΜΠΕΛΩΝΑΣ ΗΛΕΙΑΣ, ΑΝΘΟΠΥΡΓΟΣ ΗΛΕΙΑΣ, ΒΑΡΒΑΣΑΙΝΑ ΗΛΕΙΑΣ, ΒΟΥΝΑΡΓΟ ΗΛΕΙΑΣ, ΒΡΟΧΙΤΣΑ ΗΛΕΙΑΣ, ΒΥΤΙΝΑΙΙΚΑ ΕΛΑΙΩΝΑ ΗΛΕΙΑΣ, ΒΥΤΙΝΑΙΙΚΑ ΝΕΟΧΩΡΙΟΥ ΜΥΡΤΟΥΝΤΙΩΝ ΗΛΕΙΑΣ, ΓΛΥΚΟΡΙΖΟ ΠΡΑΣΙΝΟΥ ΗΛΕΙΑΣ, ΓΡΑΝΙΤΣΑΙΙΚΑ ΗΛΕΙΑΣ, ΕΛΑΙΩΝΑΣ ΗΛΕΙΑΣ, ΙΤΙΑ ΗΛΕΙΑΣ, ΚΑΒΑΣΙΛΑΚΙΑ ΗΛΕΙΑΣ, ΚΑΛΑΚΑΙΪΚΑ ΗΛΕΙΑΣ, ΚΑΛΛΙΘΕΑ ΚΟΡΑΚΟΧΩΡΙΟΥ ΗΛΕΙΑΣ, ΚΑΠΑΝΔΡΙΤΙ ΗΛΕΙΑΣ, ΚΑΤΣΑΡΟΣ ΗΛΕΙΑΣ, ΚΑΤΩ ΒΑΡΒΑΣΑΙΝΑ ΗΛΕΙΑΣ, ΚΟΛΙΡΕΙΚΕΣ ΠΑΡΑΓΚΕΣ ΗΛΕΙΑΣ, ΚΟΛΙΡΙΟ ΗΛΕΙΑΣ, ΚΟΡΑΚΟΧΩΡΙ ΗΛΕΙΑΣ, ΚΟΡΥΦΗ ΗΛΕΙΑΣ, ΚΟΥΖΟΥΛΙΟ ΗΛΕΙΑΣ, ΚΥΑΝΗ ΑΚΤΗ ΗΛΕΙΑΣ, ΛΑΣΤΑΙΙΚΑ ΗΛΕΙΑΣ, ΛΕΒΕΝΤΟΧΩΡΙ ΗΛΕΙΑΣ, ΜΟΝΗ ΣΚΑΦΙΔΙΑΣ ΗΛΕΙΑΣ, ΜΟΝΗ ΦΡΑΓΚΟΠΗΔΗΜΑΤΟΣ ΗΛΕΙΑΣ, ΜΠΟΥΚΑ ΗΛΕΙΑΣ, ΜΥΡΤΙΑ ΗΛΕΙΑΣ, ΞΥΛΟΚΕΡΑ ΗΛΕΙΑΣ, ΠΑΛΑΙΟΒΑΡΒΑΣΑΙΝΑ ΗΛΕΙΑΣ, ΠΑΛΑΤΑΣ ΗΛΕΙΑΣ, ΠΑΤΡΟΝΙΚΟΛΑΙΪΚΑ ΗΛΕΙΑΣ, ΠΡΑΣΙΝΟ ΗΛΕΙΑΣ, ΠΥΡΓΙ ΗΛΕΙΑΣ, ΠΥΡΓΟΣ ΗΛΕΙΑΣ, ΡΟΖΕΙΚΑ ΗΛΕΙΑΣ, ΣΑΛΜΩΝΗ ΗΛΕΙΑΣ, ΣΚΑΦΙΔΙΑ ΗΛΕΙΑΣ, ΣΚΟΥΡΟΧΩΡΙ ΗΛΕΙΑΣ, ΣΤΑΜΑΤΕΛΑΙΙΚΑ ΗΛΕΙΑΣ, ΣΥΝΤΡΙΑΔΑ ΗΛΕΙΑΣ, ΦΟΝΑΙΤΙΚΑ ΗΛΕΙΑΣ, ΧΑΝΑΚΙΑ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27131', Area: 'ΠΥΡΓΟΥ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27200', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΔΟΥΝΑΙΙΚΩΝ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΑΜΑΛΙΑΔΑΣ ΗΛΕΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΑΜΑΛΙΑΔΑΣ ΗΛΕΙΑΣ, ΑΜΑΛΙΑΔΑ ΗΛΕΙΑΣ, ΑΜΠΕΛΟΚΑΜΠΟΣ ΗΛΕΙΑΣ, ΑΝΑΛΗΨΗ ΓΕΡΑΚΙΟΥ ΗΛΕΙΑΣ, ΑΝΑΛΗΨΗ ΚΑΣΤΡΟΥ ΗΛΕΙΑΣ, ΑΡΧΑΙΑ ΗΛΙΔΑ ΗΛΕΙΑΣ, ΑΣΤΕΡΑΙΙΚΑ ΗΛΕΙΑΣ, ΓΕΡΑΚΙ ΗΛΕΙΑΣ, ΔΑΝΙΚΑ ΗΛΕΙΑΣ, ΔΟΥΝΑΙΙΚΑ ΗΛΕΙΑΣ, ΚΑΡΔΑΜΑΣ ΗΛΕΙΑΣ, ΚΑΣΙΔΙΑΡΗΣ ΗΛΕΙΑΣ, ΚΑΤΩ ΚΕΡΤΕΖΑΙΙΚΑ ΗΛΕΙΑΣ, ΚΟΥΡΟΥΤΑ ΗΛΕΙΑΣ, ΚΡΥΟΝΕΡΟ ΗΛΕΙΑΣ, ΜΑΡΑΘΕΑ ΗΛΕΙΑΣ, ΠΑΛΑΙΟΛΑΝΘΗ ΗΛΕΙΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΗΛΕΙΑΣ ΗΛΕΙΑΣ, ΠΑΛΟΥΚΙ ΗΛΕΙΑΣ, ΠΑΝΑΓΙΑ ΑΜΑΛΙΑΔΑΣ ΗΛΕΙΑΣ, ΠΑΡΑΛΙΑ ΡΟΒΙΑΤΑΣ ΗΛΕΙΑΣ, ΠΕΡΙΣΤΕΡΙ ΗΛΕΙΑΣ, ΠΕΤΡΟΥΛΕΣ ΗΛΕΙΑΣ, ΡΟΒΙΑΤΑ ΗΛΕΙΑΣ, ΡΩΜΕΙΚΑ ΒΑΡΘΟΛΟΜΙΟΥ ΗΛΕΙΑΣ, ΣΑΒΑΛΙΑ ΗΛΕΙΑΣ, ΤΣΑΦΛΕΙΚΑ ΗΛΕΙΑΣ, ΤΣΙΧΛΕΙΚΑ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '27300', Area: 'ΑΓΙΑ ΜΑΥΡΑ ΗΛΕΙΑΣ, ΑΥΓΕΙΟ ΗΛΕΙΑΣ, ΓΑΣΤΟΥΝΗ ΗΛΕΙΑΣ, ΗΛΙΔΑ ΗΛΕΙΑΣ, ΚΑΒΑΣΙΛΑΣ ΗΛΕΙΑΣ, ΚΑΛΥΒΙΑ ΗΛΙΔΟΣ ΗΛΕΙΑΣ, ΚΟΡΟΙΒΟΣ ΗΛΕΙΑΣ, ΛΕΥΚΟΧΩΡΙ ΗΛΕΙΑΣ, ΡΟΥΠΑΚΙ ΗΛΕΙΑΣ, ΣΩΣΤΙ ΗΛΕΙΑΣ', Prefecture: 'Ηλείας' },
    { PostalCode: '59031', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΗΜΑΘΙΑΣ, ΑΓΚΑΘΙΑ ΗΜΑΘΙΑΣ, ΒΕΡΓΙΝΑ ΗΜΑΘΙΑΣ, ΚΥΨΕΛΗ ΗΜΑΘΙΑΣ, ΜΕΛΙΚΗ ΗΜΑΘΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΑΘΑΝΑΣΙΟΥ ΣΦΗΝΙΣΣΗΣ ΗΜΑΘΙΑΣ, ΝΕΟΚΑΣΤΡΟ ΗΜΑΘΙΑΣ, ΝΕΟΣ ΠΡΟΔΡΟΜΟΣ ΗΜΑΘΙΑΣ, ΠΑΛΑΤΙΤΣΙΑ ΗΜΑΘΙΑΣ, ΠΡΟΔΡΟΜΟΣ ΗΜΑΘΙΑΣ, ΣΥΚΕΑ ΗΜΑΘΙΑΣ, ΤΡΙΛΟΦΙΑ ΗΜΑΘΙΑΣ', Prefecture: 'Ημαθίας' },
    { PostalCode: '59033', Area: 'ΜΑΚΡΟΧΩΡΙ ΗΜΑΘΙΑΣ', Prefecture: 'Ημαθίας' },
    { PostalCode: '59035', Area: 'ΚΟΠΑΝΟΣ ΗΜΑΘΙΑΣ, ΛΕΥΚΑΔΙΑ ΗΜΑΘΙΑΣ, ΜΟΝΟΣΠΙΤΑ ΗΜΑΘΙΑΣ, ΣΤΕΝΗΜΑΧΟΣ ΗΜΑΘΙΑΣ, ΧΑΡΙΕΣΣΑ ΗΜΑΘΙΑΣ', Prefecture: 'Ημαθίας' },
    { PostalCode: '59100', Area: 'ΑΓΙΑ ΒΑΡΒΑΡΑ ΗΜΑΘΙΑΣ, ΑΓΙΑ ΜΑΡΙΝΑ ΗΜΑΘΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΗΜΑΘΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΦΥΤΕΙΑΣ ΗΜΑΘΙΑΣ, ΑΜΜΟΣ ΗΜΑΘΙΑΣ, ΑΣΩΜΑΤΑ ΗΜΑΘΙΑΣ, ΒΕΡΟΙΑ ΗΜΑΘΙΑΣ, ΓΕΩΡΓΙΑΝΟΙ ΗΜΑΘΙΑΣ, ΔΑΣΚΙΟ ΗΜΑΘΙΑΣ, ΔΙΑΒΑΤΟΣ ΗΜΑΘΙΑΣ, ΕΛΑΦΙΝΑ ΗΜΑΘΙΑΣ, ΕΞΩΚΚΛΗΣΙ ΗΜΑΘΙΑΣ, ΚΑΒΑΣΙΛΑ ΗΜΑΘΙΑΣ, ΚΑΛΗ ΠΑΝΑΓΙΑ ΗΜΑΘΙΑΣ, ΚΑΣΤΑΝΕΑ ΗΜΑΘΙΑΣ, ΚΑΤΩ ΒΕΡΜΙΟ ΗΜΑΘΙΑΣ, ΚΑΤΩ ΚΟΜΝΗΝΕΙΟ ΗΜΑΘΙΑΣ, ΚΟΜΝΗΝΕΙΟ ΗΜΑΘΙΑΣ, ΚΟΥΛΟΥΡΑ ΗΜΑΘΙΑΣ, ΚΟΥΜΑΡΙΑ ΗΜΑΘΙΑΣ, ΚΟΥΤΣΟΧΩΡΙ ΗΜΑΘΙΑΣ, ΚΥΔΩΝΟΧΩΡΙ ΗΜΑΘΙΑΣ, ΛΑΖΟΧΩΡΙ ΗΜΑΘΙΑΣ, ΛΑΖΟΧΩΡΙΟΝ ΗΜΑΘΙΑΣ, ΛΕΥΚΟΠΕΤΡΑ ΗΜΑΘΙΑΣ, ΛΙΑΝΟΒΡΟΧΙ ΗΜΑΘΙΑΣ, ΜΕΣΗ ΗΜΑΘΙΑΣ, ΜΕΤΟΧΙ ΠΡΟΔΡΟΜΟΥ ΗΜΑΘΙΑΣ, ΜΙΚΡΗ ΣΑΝΤΑ ΗΜΑΘΙΑΣ, ΜΟΝΗ ΤΙΜΙΟΥ ΠΡΟΔΡΟΜΟΥ ΗΜΑΘΙΑΣ, ΝΕΑ ΛΥΚΟΓΙΑΝΝΗ ΗΜΑΘΙΑΣ, ΝΕΑ ΝΙΚΟΜΗΔΕΙΑ ΗΜΑΘΙΑΣ, ΞΕΧΑΣΜΕΝΗ ΗΜΑΘΙΑΣ, ΞΗΡΟΛΙΒΑΔΟ ΗΜΑΘΙΑΣ, ΠΑΛΑΙΑ ΛΥΚΟΓΙΑΝΝΗ ΗΜΑΘΙΑΣ, ΠΑΤΡΙΔΑ ΗΜΑΘΙΑΣ, ΠΟΛΥΔΕΝΔΡΟ ΗΜΑΘΙΑΣ, ΠΟΡΟΣ ΗΜΑΘΙΑΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΗΜΑΘΙΑΣ, ΡΑΧΗ ΗΜΑΘΙΑΣ, ΡΑΨΟΜΑΝΙΚΙ ΗΜΑΘΙΑΣ, ΡΙΖΩΜΑΤΑ ΗΜΑΘΙΑΣ, ΣΑΝΤΑ ΗΜΑΘΙΑΣ, ΣΤΑΥΡΟΣ ΗΜΑΘΙΑΣ, ΣΦΗΚΙΑ ΗΜΑΘΙΑΣ, ΤΑΓΑΡΟΧΩΡΙ ΗΜΑΘΙΑΣ, ΤΡΙΛΟΦΟΣ ΗΜΑΘΙΑΣ, ΤΡΙΠΟΤΑΜΟΣ ΗΜΑΘΙΑΣ, ΦΥΤΕΙΑ ΗΜΑΘΙΑΣ, ΧΑΡΑΔΡΑ ΗΜΑΘΙΑΣ', Prefecture: 'Ημαθίας' },
    { PostalCode: '59131', Area: 'ΒΕΡΟΙΑΣ ΗΜΑΘΙΑΣ', Prefecture: 'Ημαθίας' },
    { PostalCode: '59132', Area: 'ΒΕΡΟΙΑΣ ΗΜΑΘΙΑΣ', Prefecture: 'Ημαθίας' },
    { PostalCode: '59200', Area: 'ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΝΑΟΥΣΑΣ ΗΜΑΘΙΑΣ, ΑΓΙΟΣ ΠΑΥΛΟΣ ΗΜΑΘΙΑΣ, ΑΝΩ ΣΕΛΙ ΗΜΑΘΙΑΣ, ΑΡΚΟΧΩΡΙ ΗΜΑΘΙΑΣ, ΓΙΑΝΝΑΚΟΧΩΡΙ ΗΜΑΘΙΑΣ, ΕΠΙΣΚΟΠΗ ΗΜΑΘΙΑΣ, ΜΑΡΙΝΑ ΗΜΑΘΙΑΣ, ΜΕΤΑΜΟΡΦΩΣΗ ΗΜΑΘΙΑΣ, ΝΑΟΥΣΑ ΗΜΑΘΙΑΣ, ΠΗΓΑΔΙΑ ΗΜΑΘΙΑΣ, ΠΟΛΛΑ ΝΕΡΑ ΗΜΑΘΙΑΣ, ΡΟΔΑΚΙΝΕΑ ΗΜΑΘΙΑΣ, ΡΟΔΟΧΩΡΙ ΗΜΑΘΙΑΣ, ΣΤΑΘΜΟΣ ΗΜΑΘΙΑΣ', Prefecture: 'Ημαθίας' },
    { PostalCode: '59300', Area: 'ΑΛΕΞΑΝΔΡΕΙΑ ΗΜΑΘΙΑΣ, ΒΡΥΣΑΚΙ ΗΜΑΘΙΑΣ, ΕΠΙΣΚΟΠΗ ΗΜΑΘΙΑΣ ΗΜΑΘΙΑΣ, ΚΑΛΟΧΩΡΙ ΗΜΑΘΙΑΣ, ΚΑΜΠΟΧΩΡΙ ΗΜΑΘΙΑΣ, ΚΕΦΑΛΟΧΩΡΙ ΗΜΑΘΙΑΣ, ΚΟΡΥΦΗ ΗΜΑΘΙΑΣ, ΛΟΥΤΡΟΣ ΗΜΑΘΙΑΣ, ΝΕΟΧΩΡΙ ΗΜΑΘΙΑΣ, ΝΗΣΕΛΙ ΗΜΑΘΙΑΣ, ΝΗΣΕΛΛΟΥΔΙ ΗΜΑΘΙΑΣ, ΝΗΣΙ ΗΜΑΘΙΑΣ, ΠΑΛΑΙΟ ΣΚΥΛΙΤΣΙ ΗΜΑΘΙΑΣ, ΠΑΛΑΙΟΧΩΡΑ ΗΜΑΘΙΑΣ, ΣΧΟΙΝΑΣ ΗΜΑΘΙΑΣ', Prefecture: 'Ημαθίας' },
    { PostalCode: '70002', Area: 'ΒΟΡΙΖΙΑ ΗΡΑΚΛΕΙΟΥ, ΖΑΡΟΣ ΗΡΑΚΛΕΙΟΥ, ΚΑΜΑΡΕΣ ΗΡΑΚΛΕΙΟΥ, ΚΟΥΡΤΕΣ ΗΡΑΚΛΕΙΟΥ, ΛΑΛΟΥΜΑΣ ΗΡΑΚΛΕΙΟΥ, ΜΑΚΡΕΣ ΗΡΑΚΛΕΙΟΥ, ΜΕΣΗΣΚΛΙ ΗΡΑΚΛΕΙΟΥ, ΜΟΝΗ ΑΓΙΟΥ ΑΝΤΩΝΙΟΥ ΒΡΟΝΤΗΣΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΜΟΡΟΝΙΟ ΗΡΑΚΛΕΙΟΥ, ΝΥΒΡΙΤΟΣ ΗΡΑΚΛΕΙΟΥ, ΠΑΝΑΓΙΑ ΖΑΡΟΥ ΗΡΑΚΛΕΙΟΥ, ΦΑΡΙ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70003', Area: 'ΑΓΙΑ ΒΑΡΒΑΡΑ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΘΩΜΑΣ ΗΡΑΚΛΕΙΟΥ, ΑΝΩ ΜΟΥΛΙΑ ΗΡΑΚΛΕΙΟΥ, ΑΠΟΜΑΡΜΑ ΗΡΑΚΛΕΙΟΥ, ΑΡΚΑΔΙ ΗΡΑΚΛΕΙΟΥ, ΒΟΡΡΟΣ ΗΡΑΚΛΕΙΟΥ, ΓΕΝΝΑ ΗΡΑΚΛΕΙΟΥ, ΔΟΥΛΙΟ ΗΡΑΚΛΕΙΟΥ, ΔΡΟΣΟΙ ΗΡΑΚΛΕΙΟΥ, ΚΑΡΔΑΜΙΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΜΟΥΛΙΑ ΗΡΑΚΛΕΙΟΥ, ΚΕΡΑΤΟΚΕΦΑΛΙΟ ΗΡΑΚΛΕΙΟΥ, ΚΟΛΕΝΑ ΗΡΑΚΛΕΙΟΥ, ΛΑΡΑΝΙ ΗΡΑΚΛΕΙΟΥ, ΜΑΣΤΡΑΧΙΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΜΕΓΑΛΗ ΒΡΥΣΗ ΗΡΑΚΛΕΙΟΥ, ΠΑΝΑΣΟΣ ΗΡΑΚΛΕΙΟΥ, ΠΕΙΡΟΥΝΙΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΠΡΕΒΕΛΙΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΠΡΙΝΙΑΣ ΜΑΛΕΒΙΖΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΡΑΠΤΗΣ ΗΡΑΚΛΕΙΟΥ, ΤΖΑΝΙΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΨΑΛΙΔΑ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70004', Area: 'ΑΓΙΑ ΜΟΝΗ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΒΙΑΝΝΟΥ ΛΑΣΙΘΙΟΥ, ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΒΙΑΝΝΟΥ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΒΙΑΝΝΟΥ ΛΑΣΙΘΙΟΥ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΒΙΑΝΝΟΥ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΓΟΥΒΩΝ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΒΙΑΝΝΟΥ ΗΡΑΚΛΕΙΟΥ, ΑΜΙΡΑΣ ΗΡΑΚΛΕΙΟΥ, ΑΝΩ ΒΙΑΝΝΟΣ ΗΡΑΚΛΕΙΟΥ, ΑΝΩ ΒΙΓΛΑ ΛΑΣΙΘΙΟΥ, ΑΝΩ ΚΟΡΝΙΑΣ ΗΡΑΚΛΕΙΟΥ, ΑΡΒΗ ΛΑΣΙΘΙΟΥ, ΑΡΒΗ ΝΕΑ ΛΑΣΙΘΙΟΥ, ΒΑΧΟΣ ΛΑΣΙΘΙΟΥ, ΔΕΡΜΑΤΟΣ ΗΡΑΚΛΕΙΟΥ, ΚΑΛΑΜΙ ΛΑΣΙΘΙΟΥ, ΚΑΛΑΜΙΟ ΗΡΑΚΛΕΙΟΥ, ΚΑΣΤΡΙ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΒΙΑΝΝΟΣ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΒΙΓΛΕΣ ΛΑΣΙΘΙΟΥ, ΚΑΤΩ ΣΥΜΗ ΗΡΑΚΛΕΙΟΥ, ΚΑΨΑΛΗ ΗΡΑΚΛΕΙΟΥ, ΚΕΡΑΤΟΚΑΜΠΟΣ ΗΡΑΚΛΕΙΟΥ, ΚΕΦΑΛΟΒΡΥΣΟ ΗΡΑΚΛΕΙΟΥ, ΚΟΚΚΑΛΑΡΑ ΗΡΑΚΛΕΙΟΥ, ΚΡΕΒΒΑΤΑΣ ΗΡΑΚΛΕΙΟΥ, ΛΑΤΟΜΙΑ ΑΓΙΟΥ ΒΑΣΙΛΕΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΛΑΤΟΜΙΑ ΠΕΥΚΟΥ ΗΡΑΚΛΕΙΟΥ, ΛΟΥΤΡΑΚΙ ΑΝΩ ΒΙΑΝΝΟΥ ΗΡΑΚΛΕΙΟΥ, ΜΕΣΗ ΗΡΑΚΛΕΙΟΥ, ΝΕΑ ΑΡΒΗ ΗΡΑΚΛΕΙΟΥ, ΞΕΡΟΚΑΜΠΟΣ ΛΑΣΙΘΙΟΥ, ΠΕΡΒΟΛΑ ΗΡΑΚΛΕΙΟΥ, ΠΕΥΚΟΣ ΗΡΑΚΛΕΙΟΥ, ΣΚΑΦΙΔΙΑ ΗΡΑΚΛΕΙΟΥ, ΣΤΑΥΡΙΑ ΗΡΑΚΛΕΙΟΥ, ΣΥΚΟΛΟΓΟΣ ΛΑΣΙΘΙΟΥ, ΣΥΝΔΟΝΙΑ ΛΑΣΙΘΙΟΥ, ΤΕΡΤΣΑ ΛΑΣΙΘΙΟΥ, ΦΑΦΛΑΓΚΟΣ ΛΑΣΙΘΙΟΥ, ΧΑΝΔΡΑΣ ΗΡΑΚΛΕΙΟΥ, ΧΟΝΔΡΟΣ ΗΡΑΚΛΕΙΟΥ, ΨΑΡΗ ΦΟΡΑΔΑ ΛΑΣΙΘΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70005', Area: 'ΑΒΔΟΥ ΗΡΑΚΛΕΙΟΥ, ΑΝΩ ΚΕΡΑ ΗΡΑΚΛΕΙΟΥ, ΓΩΝΙΕΣ ΧΕΡΣΟΝΗΣΟΥ ΗΡΑΚΛΕΙΟΥ, ΚΕΡΑ ΗΡΑΚΛΕΙΟΥ, ΚΡΑΣΙΟ ΗΡΑΚΛΕΙΟΥ, ΜΟΝΗ ΚΑΡΔΙΩΤΙΣΣΗΣ ΗΡΑΚΛΕΙΟΥ, ΜΟΧΟΣ ΗΡΑΚΛΕΙΟΥ, ΠΟΤΑΜΙΕΣ ΗΡΑΚΛΕΙΟΥ, ΣΦΕΝΔΥΛΙ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70006', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΠΕΔΙΑΔΟΣ ΗΡΑΚΛΕΙΟΥ, ΑΓΝΟΣ ΗΡΑΚΛΕΙΟΥ, ΑΜΑΡΙΑΝΟ ΗΡΑΚΛΕΙΟΥ, ΑΝΩ ΚΑΡΟΥΖΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΑΠΟΣΤΟΛΟΙ ΗΡΑΚΛΕΙΟΥ, ΑΡΜΑΧΑ ΗΡΑΚΛΕΙΟΥ, ΑΡΧΑΓΓΕΛΟΣ ΗΡΑΚΛΕΙΟΥ, ΑΣΚΟΙ ΗΡΑΚΛΕΙΟΥ, ΒΟΝΗ ΗΡΑΚΛΕΙΟΥ, ΓΑΛΑΤΑΣ ΗΡΑΚΛΕΙΟΥ, ΓΑΛΕΝΙΑΝΟ ΗΡΑΚΛΕΙΟΥ, ΓΕΡΑΚΙ ΗΡΑΚΛΕΙΟΥ, ΕΥΑΓΓΕΛΙΣΜΟΣ ΗΡΑΚΛΕΙΟΥ, ΖΩΦΟΡΟΙ ΗΡΑΚΛΕΙΟΥ, ΘΡΑΨΑΝΟ ΗΡΑΚΛΕΙΟΥ, ΚΑΣΤΑΜΟΝΙΤΣΑ ΗΡΑΚΛΕΙΟΥ, ΚΑΣΤΕΛΛΙ ΠΕΔΙΑΔΟΣ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΚΑΡΟΥΖΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΛΑΓΟΣ ΗΡΑΚΛΕΙΟΥ, ΛΙΛΙΑΝΟ ΗΡΑΚΛΕΙΟΥ, ΛΥΤΤΟΣ ΗΡΑΚΛΕΙΟΥ, ΜΑΘΙΑ ΗΡΑΚΛΕΙΟΥ, ΜΠΙΤΖΑΡΙΑΝΟ ΗΡΑΚΛΕΙΟΥ, ΠΟΛΥΘΕΑ ΗΡΑΚΛΕΙΟΥ, ΣΑΜΠΑΣ ΗΡΑΚΛΕΙΟΥ, ΣΚΛΑΒΕΡΟΧΩΡΙ ΗΡΑΚΛΕΙΟΥ, ΣΜΑΡΙ ΗΡΑΚΛΕΙΟΥ, ΤΖΙΓΚΟΥΝΑ ΚΑΣΤΕΛΛΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΤΟΙΧΟΣ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70007', Area: 'ΜΑΛΙΑ ΗΡΑΚΛΕΙΟΥ, ΣΤΑΛΙΔΑ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70008', Area: 'ΑΙΤΑΝΙΑ ΗΡΑΚΛΕΙΟΥ, ΑΝΩΠΟΛΗ ΗΡΑΚΛΕΙΟΥ, ΒΑΘΕΙΑΝΟΣ ΚΑΜΠΟΣ ΗΡΑΚΛΕΙΟΥ, ΓΑΛΙΠΕ ΗΡΑΚΛΕΙΟΥ, ΓΑΛΙΦΑ ΗΡΑΚΛΕΙΟΥ, ΕΛΑΙΑ ΗΡΑΚΛΕΙΟΥ, ΕΠΑΝΩ ΒΑΘΕΙΑ ΗΡΑΚΛΕΙΟΥ, ΕΠΙΣΚΟΠΗ ΗΡΑΚΛΕΙΟΥ, ΚΑΙΝΟΥΡΓΙΟ ΧΩΡΙΟ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΒΑΘΕΙΑ ΗΡΑΚΛΕΙΟΥ, ΜΟΝΗ ΑΓΙΟΥ ΙΩΑΝΝΟΥ ΘΕΟΛΟΓΟΥ ΗΡΑΚΛΕΙΟΥ, ΜΟΝΗ ΑΓΚΑΡΑΘΟΥ ΗΡΑΚΛΕΙΟΥ, ΣΓΟΥΡΟΚΕΦΑΛΙ ΗΡΑΚΛΕΙΟΥ, ΣΚΟΠΕΛΑ ΗΡΑΚΛΕΙΟΥ, ΣΤΑΜΝΟΙ ΗΡΑΚΛΕΙΟΥ, ΧΟΧΛΑΚΙΕΣ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70010', Area: 'ΑΓΙΑ ΑΝΝΑ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΑΧΕΝΤΡΙΑ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΑ ΦΩΤΙΑ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΑΧΕΝΤΡΙΑ ΗΡΑΚΛΕΙΟΥ, ΑΜΥΓΔΑΛΟΣ ΗΡΑΚΛΕΙΟΥ, ΑΝΩ ΑΚΡΙΑ ΗΡΑΚΛΕΙΟΥ, ΑΝΩ ΚΑΣΤΕΛΛΙΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΑΠΟΣΕΛΕΜΙ ΗΡΑΚΛΕΙΟΥ, ΑΡΜΑΝΩΓΕΙΑ ΗΡΑΚΛΕΙΟΥ, ΑΧΕΝΤΡΙΑΣ ΗΡΑΚΛΕΙΟΥ, ΒΟΡΙΑΣ ΗΡΑΚΛΕΙΟΥ, ΔΑΜΑΝΙΑ ΗΡΑΚΛΕΙΟΥ, ΔΕΜΑΤΙ ΗΡΑΚΛΕΙΟΥ, ΔΩΡΑΚΙΟ ΗΡΑΚΛΕΙΟΥ, ΕΘΙΑ ΗΡΑΚΛΕΙΟΥ, ΚΑΣΤΕΛΛΙ ΜΟΝΟΦΑΤΣΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΑΚΡΙΑ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΚΑΛΥΒΙΑ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΚΑΣΤΕΛΛΙΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΚΕΦΑΛΑΔΟΣ ΗΡΑΚΛΕΙΟΥ, ΛΙΓΟΡΤΥΝΟΣ ΗΡΑΚΛΕΙΟΥ, ΜΑΔΕ ΗΡΑΚΛΕΙΟΥ, ΜΕΛΙΔΟΧΩΡΙ ΗΡΑΚΛΕΙΟΥ, ΜΕΣΟΧΩΡΙ ΗΡΑΚΛΕΙΟΥ, ΜΕΤΑΞΟΧΩΡΙ ΗΡΑΚΛΕΙΟΥ, ΜΟΝΗ ΑΓΙΟΥ ΓΕΩΡΓΙΟΥ ΕΠΑΝΩΣΗΦΗ ΗΡΑΚΛΕΙΟΥ, ΜΟΝΗ ΚΟΥΔΟΥΜΑ ΗΡΑΚΛΕΙΟΥ, ΜΟΥΡΝΙΑ ΗΡΑΚΛΕΙΟΥ, ΝΕΟΧΩΡΙ ΗΡΑΚΛΕΙΟΥ, ΠΑΡΑΝΥΜΦΟΙ ΗΡΑΚΛΕΙΟΥ, ΠΑΡΘΕΝΙ ΗΡΑΚΛΕΙΟΥ, ΠΛΑΚΙΩΤΙΣΣΑ ΗΡΑΚΛΕΙΟΥ, ΠΛΑΤΑΝΙΑΣ ΗΡΑΚΛΕΙΟΥ, ΠΡΑΙΤΩΡΙΑ ΗΡΑΚΛΕΙΟΥ, ΠΡΙΝΙΑΣ ΠΥΡΓΟΥ ΗΡΑΚΛΕΙΟΥ, ΠΡΟΤΟΡΙΑ ΗΡΑΚΛΕΙΟΥ, ΠΥΡΑΘΙΟ ΗΡΑΚΛΕΙΟΥ, ΠΥΡΓΟΣ ΜΟΝΟΦΑΤΣΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΡΟΤΑΣΙ ΗΡΑΚΛΕΙΟΥ, ΤΕΦΕΛΙ ΗΡΑΚΛΕΙΟΥ, ΤΟΥΡΛΩΤΗ ΗΡΑΚΛΕΙΟΥ, ΤΡΕΙΣ ΕΚΚΛΗΣΙΕΣ ΗΡΑΚΛΕΙΟΥ, ΤΣΟΥΤΣΟΥΡΟΣ ΗΡΑΚΛΕΙΟΥ, ΦΑΒΡΙΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΦΙΛΙΠΠΟΙ ΗΡΑΚΛΕΙΟΥ, ΧΑΡΑΚΑΣ ΗΡΑΚΛΕΙΟΥ, ΧΑΡΑΚΙΟ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70012', Area: 'ΑΓΙΟΙ ΔΕΚΑ ΗΡΑΚΛΕΙΟΥ, ΑΜΠΕΛΟΥΖΟΣ ΗΡΑΚΛΕΙΟΥ, ΑΠΕΣΩΚΑΡΙΟ ΗΡΑΚΛΕΙΟΥ, ΑΤΣΙΠΑΔΕΣ ΗΡΑΚΛΕΙΟΥ, ΒΑΓΙΟΝΙΑ ΗΡΑΚΛΕΙΟΥ, ΒΑΛΗΣ ΗΡΑΚΛΕΙΟΥ, ΒΑΣΙΛΙΚΑ ΑΝΩΓΕΙΑ ΗΡΑΚΛΕΙΟΥ, ΒΑΣΙΛΙΚΗ ΗΡΑΚΛΕΙΟΥ, ΒΟΥΡΒΟΥΛΙΤΗΣ ΗΡΑΚΛΕΙΟΥ, ΓΚΑΓΚΑΛΕΣ ΗΡΑΚΛΕΙΟΥ, ΙΝΙΑ ΗΡΑΚΛΕΙΟΥ, ΚΑΝΔΗΛΑ ΗΡΑΚΛΕΙΟΥ, ΚΑΣΤΕΛΛΙ ΚΑΙΝΟΥΡΓΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΚΟΥΜΑΣΑ ΗΡΑΚΛΕΙΟΥ, ΛΟΥΚΙΑ ΗΡΑΚΛΕΙΟΥ, ΜΗΤΡΟΠΟΛΗ ΗΡΑΚΛΕΙΟΥ, ΠΑΠΑΔΟΓΙΑΝΝΗΣ ΗΡΑΚΛΕΙΟΥ, ΠΛΑΤΑΝΟΣ ΗΡΑΚΛΕΙΟΥ, ΠΛΟΥΤΗ ΗΡΑΚΛΕΙΟΥ, ΠΛΩΡΑ ΗΡΑΚΛΕΙΟΥ, ΣΤΟΛΟΙ ΗΡΑΚΛΕΙΟΥ, ΤΡΥΠΗΤΑ ΗΡΑΚΛΕΙΟΥ, ΦΛΑΘΙΑΚΕΣ ΗΡΑΚΛΕΙΟΥ, ΧΟΥΣΤΟΥΛΙΑΝΑ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70013', Area: 'ΑΓΙΑ ΕΙΡΗΝΗ ΚΡΟΥΣΩΝΑ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΜΥΡΩΝΑΣ ΗΡΑΚΛΕΙΟΥ, ΑΝΩ ΑΣΙΤΕΣ ΗΡΑΚΛΕΙΟΥ, ΒΟΥΤΕΣ ΗΡΑΚΛΕΙΟΥ, ΙΕΡΑ ΜΟΝΗ ΓΟΡΓΟΛΑΪΝΗ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΑΣΙΤΕΣ ΗΡΑΚΛΕΙΟΥ, ΚΙΘΑΡΙΣ ΗΡΑΚΛΕΙΟΥ, ΝΙΣΗ ΗΡΑΚΛΕΙΟΥ, ΠΕΝΤΑΜΟΔΙ ΗΡΑΚΛΕΙΟΥ, ΠΕΤΡΟΚΕΦΑΛΟ ΓΑΖΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΠΥΡΓΟΥ ΗΡΑΚΛΕΙΟΥ, ΣΑΡΧΟΣ ΗΡΑΚΛΕΙΟΥ, ΣΤΑΥΡΑΚΙΑ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70014', Area: 'ΑΓΙΑ ΠΕΛΑΓΙΑ ΠΕΔΙΑΔΟΣ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΧΕΡΣΟΝΗΣΟΥ ΗΡΑΚΛΕΙΟΥ, ΑΓΚΙΣΑΡΑΣ ΗΡΑΚΛΕΙΟΥ, ΑΓΡΙΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΑΝΑΛΗΨΗ ΗΡΑΚΛΕΙΟΥ, ΑΝΙΣΣΑΡΑΣ ΗΡΑΚΛΕΙΟΥ, ΑΠΟΣΕΛΕΜΗΣ ΗΡΑΚΛΕΙΟΥ, ΒΟΡΟΣ ΓΟΥΒΩΝ ΗΡΑΚΛΕΙΟΥ, ΒΡΑΧΟΚΗΠΟΣ ΗΡΑΚΛΕΙΟΥ, ΓΟΥΒΕΣ ΗΡΑΚΛΕΙΟΥ, ΚΑΛΟ ΧΩΡΙΟ ΓΟΥΒΩΝ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΓΟΥΒΕΣ ΗΡΑΚΛΕΙΟΥ, ΚΟΞΑΡΗ ΗΡΑΚΛΕΙΟΥ, ΚΟΥΤΟΥΛΟΥΦΑΡΙ ΗΡΑΚΛΕΙΟΥ, ΛΙΜΕΝΑΣ ΧΕΡΣΟΝΗΣΟΥ ΗΡΑΚΛΕΙΟΥ, ΠΕΛΕΚΗΤΑ ΗΡΑΚΛΕΙΟΥ, ΠΙΣΚΟΠΙΑΝΟ ΗΡΑΚΛΕΙΟΥ, ΣΚΟΤΕΙΝΟ ΗΡΑΚΛΕΙΟΥ, ΧΑΡΑΣΟ ΗΡΑΚΛΕΙΟΥ, ΧΑΤΖΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΧΕΡΣΟΝΗΣΟΣ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70016', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΜΟΝΟΦΑΤΣΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΜΟΝΟΦΑΤΣΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΑΚΑΜΩΤΟΣ ΗΡΑΚΛΕΙΟΥ, ΑΠΟΙΝΙΟ ΗΡΑΚΛΕΙΟΥ, ΑΣΗΜΙ ΜΟΝΟΦΑΤΣΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΒΕΛΟΥΛΙ ΗΡΑΚΛΕΙΟΥ, ΔΙΟΝΥΣΙ ΗΡΑΚΛΕΙΟΥ, ΚΑΠΕΤΑΝΙΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΛΟΥΡΕΣ ΗΡΑΚΛΕΙΟΥ, ΜΕΤΟΧΙΑ ΣΟΚΑΡΑ ΗΡΑΚΛΕΙΟΥ, ΜΟΡΙΑ ΗΡΑΚΛΕΙΟΥ, ΠΑΝΑΓΙΑ ΜΟΝΟΦΑΤΣΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΣΟΚΑΡΑΣ ΗΡΑΚΛΕΙΟΥ, ΣΤΑΒΙΕΣ ΗΡΑΚΛΕΙΟΥ, ΣΤΕΡΝΕΣ ΗΡΑΚΛΕΙΟΥ, ΦΟΥΡΝΟΦΑΡΑΓΓΟ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70100', Area: 'ΑΓΙΕΣ ΠΑΡΑΣΚΙΕΣ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ NIKOY KAZANTZAKH ΗΡΑΚΛΕΙΟΥ, ΑΜΠΕΛΑ ΗΡΑΚΛΕΙΟΥ, ΑΣΤΡΑΚΟΙ ΗΡΑΚΛΕΙΟΥ, ΒΑΘΥΠΕΤΡΟ ΗΡΑΚΛΕΙΟΥ, ΕΠΑΝΩ ΑΡΧΑΝΕΣ ΗΡΑΚΛΕΙΟΥ, ΚΑΛΛΟΝΗ ΗΡΑΚΛΕΙΟΥ, ΚΑΡΝΑΡΙ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΑΛΑΓΑΡΙ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΑΡΧΑΝΕΣ ΗΡΑΚΛΕΙΟΥ, ΚΕΛΛΙΑ ΗΡΑΚΛΕΙΟΥ, ΚΕΡΑ ΕΛΑΙΟΥΣΑ ΗΡΑΚΛΕΙΟΥ, ΚΟΥΝΑΒΟΙ ΗΡΑΚΛΕΙΟΥ, ΜΥΡΤΙΑ ΗΡΑΚΛΕΙΟΥ, ΠΑΤΣΙΔΕΣ ΗΡΑΚΛΕΙΟΥ, ΠΕΖΑ ΗΡΑΚΛΕΙΟΥ, ΧΟΥΔΕΤΣΙ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70200', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΤΥΜΠΑΚΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΒΩΡΟΙ ΗΡΑΚΛΕΙΟΥ, ΓΡΗΓΟΡΙΑ ΗΡΑΚΛΕΙΟΥ, ΚΑΛΑΜΑΚΙ ΗΡΑΚΛΕΙΟΥ, ΚΑΛΟΧΩΡΑΦΙΤΗΣ ΗΡΑΚΛΕΙΟΥ, ΚΑΛΥΒΙΑ ΤΥΜΠΑΚΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΚΑΜΗΛΑΡΙ ΗΡΑΚΛΕΙΟΥ, ΚΙΣΣΟΙ ΗΡΑΚΛΕΙΟΥ, ΚΛΗΜΑ ΗΡΑΚΛΕΙΟΥ, ΚΟΚΚΙΝΟΣ ΠΥΡΓΟΣ ΗΡΑΚΛΕΙΟΥ, ΛΑΓΟΛΙ ΗΡΑΚΛΕΙΟΥ, ΜΑΓΑΡΙΚΑΡΙ ΗΡΑΚΛΕΙΟΥ, ΜΑΤΑΛΑ ΗΡΑΚΛΕΙΟΥ, ΝΕΟ ΚΑΛΑΜΑΚΙ ΗΡΑΚΛΕΙΟΥ, ΠΙΤΣΙΔΙΑ ΗΡΑΚΛΕΙΟΥ, ΣΙΒΑΣ ΗΡΑΚΛΕΙΟΥ, ΣΚΟΥΡΒΟΥΛΑ ΗΡΑΚΛΕΙΟΥ, ΤΥΜΠΑΚΙ ΗΡΑΚΛΕΙΟΥ, ΦΑΝΕΡΩΜΕΝΗ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70300', Area: 'ΑΓΙΑ ΣΕΜΝΗ ΗΡΑΚΛΕΙΟΥ, ΑΛΑΓΝΙ ΗΡΑΚΛΕΙΟΥ, ΑΜΟΥΡΓΕΛΛΕΣ ΗΡΑΚΛΕΙΟΥ, ΑΝΩ ΠΟΥΛΙΑ ΗΡΑΚΛΕΙΟΥ, ΑΡΚΑΛΟΧΩΡΙ ΗΡΑΚΛΕΙΟΥ, ΑΡΧΟΝΤΙΚΟ ΗΡΑΚΛΕΙΟΥ, ΑΣΤΡΙΤΣΙ ΗΡΑΚΛΕΙΟΥ, ΑΥΛΗ ΗΡΑΚΛΕΙΟΥ, ΒΑΚΙΩΤΕΣ ΗΡΑΚΛΕΙΟΥ, ΓΑΡΙΠΑ ΗΡΑΚΛΕΙΟΥ, ΔΡΑΠΕΤΙ ΗΡΑΚΛΕΙΟΥ, ΖΙΝΤΑ ΗΡΑΚΛΕΙΟΥ, ΙΝΙΟ ΗΡΑΚΛΕΙΟΥ, ΚΑΛΟ ΧΩΡΙΟ ΑΡΚΑΛΟΧΩΡΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΚΑΛΥΒΙΑ ΜΟΝΟΦΑΤΣΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΚΑΡΑΒΑΔΟΣ ΗΡΑΚΛΕΙΟΥ, ΚΑΣΑΝΟΣ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΠΟΥΛΙΑ ΗΡΑΚΛΕΙΟΥ, ΚΡΑΣΑΣ ΗΡΑΚΛΕΙΟΥ, ΛΑΓΟΥΤΑ ΗΡΑΚΛΕΙΟΥ, ΛΕΥΚΟΧΩΡΙ ΗΡΑΚΛΕΙΟΥ, ΜΑΧΑΙΡΑ ΗΡΑΚΛΕΙΟΥ, ΜΕΛΕΣΕΣ ΗΡΑΚΛΕΙΟΥ, ΜΙΚΡΑ ΕΠΙΣΚΟΠΗ ΗΡΑΚΛΕΙΟΥ, ΜΙΛΛΙΑΡΗΣΙ ΗΡΑΚΛΕΙΟΥ, ΜΟΝΑΣΤΗΡΑΚΙ ΗΡΑΚΛΕΙΟΥ, ΜΟΥΣΟΥΤΑ ΗΡΑΚΛΕΙΟΥ, ΜΠΑΔΙΑ ΗΡΑΚΛΕΙΟΥ, ΝΙΠΙΔΙΤΟΣ ΗΡΑΚΛΕΙΟΥ, ΠΑΝΑΓΙΑ ΠΕΔΙΑΔΟΣ ΗΡΑΚΛΕΙΟΥ, ΠΑΝΟΡΑΜΑ ΗΡΑΚΛΕΙΟΥ, ΠΑΡΤΙΡΑ ΗΡΑΚΛΕΙΟΥ, ΠΑΤΣΙΔΕΡΟΣ ΗΡΑΚΛΕΙΟΥ, ΡΟΥΣΣΟΧΩΡΙΑ ΗΡΑΚΛΕΙΟΥ, ΣΚΙΝΙΑΣ ΗΡΑΚΛΕΙΟΥ, ΣΤΙΡΟΝΑΣ ΗΡΑΚΛΕΙΟΥ, ΦΙΛΙΣΙΑ ΗΡΑΚΛΕΙΟΥ, ΧΑΝΔΡΟΥ ΗΡΑΚΛΕΙΟΥ, ΧΟΥΜΕΡΙΟ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '70400', Area: 'ΑΓΙΟΣ ΑΝΤΩΝΙΟΣ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΜΑΡΚΟΣ ΗΡΑΚΛΕΙΟΥ, ΑΠΟΛΥΧΝΟΣ ΗΡΑΚΛΕΙΟΥ, ΓΑΛΙΑ ΗΡΑΚΛΕΙΟΥ, ΚΑΠΠΑΡΙΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΚΟΥΣΕΣ ΗΡΑΚΛΕΙΟΥ, ΛΙΣΤΑΡΟΣ ΗΡΑΚΛΕΙΟΥ, ΜΑΚΡΟΝΗΣΙ ΗΡΑΚΛΕΙΟΥ, ΜΙΚΡΟΝΗΣΙ ΗΡΑΚΛΕΙΟΥ, ΜΟΙΡΕΣ ΗΡΑΚΛΕΙΟΥ, ΜΟΝΗ ΚΑΛΥΒΙΑΝΗΣ ΗΡΑΚΛΕΙΟΥ, ΜΟΝΟΧΩΡΟ ΗΡΑΚΛΕΙΟΥ, ΠΕΤΡΟΚΕΦΑΛΟ ΜΟΙΡΩΝ ΗΡΑΚΛΕΙΟΥ, ΡΟΥΦΑΣ ΗΡΑΚΛΕΙΟΥ, ΤΡΑΦΟΣ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '71201', Area: 'ΗΡΑΚΛΕΙΟ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '71202', Area: 'ΔΡΑΚΟΥΛΙΑΡΗΣ ΗΡΑΚΛΕΙΟΥ, ΛΟΦΟΥΠΟΛΗ ΗΡΑΚΛΕΙΟΥ, ΣΕΜΕΛΗ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '71301', Area: 'ΗΡΑΚΛΕΙΟΥ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '71303', Area: 'ΗΡΑΚΛΕΙΟ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '71304', Area: 'ΓΑΖΙ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '71305', Area: 'ΗΡΑΚΛΕΙΟ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '71306', Area: 'ΗΡΑΚΛΕΙΟ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '71307', Area: 'ΗΡΑΚΛΕΙΟ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '71405', Area: 'ΜΑΛΕΒΥΖΙΟΥ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '71408', Area: 'ΗΡΑΚΛΕΙΟΥ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '71409', Area: 'ΗΡΑΚΛΕΙΟ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '71500', Area: 'ΑΓΙΑ ΕΙΡΗΝΗ ΤΕΜΕΝΟΥΣ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΑ ΜΑΡΙΝΑ ΜΑΛΕΒΙΖΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ BIANOY ΗΡΑΚΛΕΙΟΥ, ΑΓΙΑ ΠΕΛΑΓΙΑ ΓΑΖΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΒΛΑΣΙΟΣ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ BIANOY ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΓΑΖΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΡΟΔΙΑΣ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΓΑΖΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΣΥΛΛΑΣ ΗΡΑΚΛΕΙΟΥ, ΑΘΑΝΑΤΟΙ ΗΡΑΚΛΕΙΟΥ, ΑΜΜΟΥΔΑΡΑ ΗΡΑΚΛΕΙΟΥ, ΑΣΤΡΙΝΟ ΗΡΑΚΛΕΙΟΥ, ΑΧΛΑΔΑ ΗΡΑΚΛΕΙΟΥ, ΒΑΣΙΛΕΙΕΣ ΗΡΑΚΛΕΙΟΥ, ΒΛΥΧΙΑ ΗΡΑΚΛΕΙΟΥ, ΓΙΟΦΥΡΑΚΙΑ ΗΡΑΚΛΕΙΟΥ, ΓΟΥΡΝΕΣ ΓΟΥΒΩΝ ΗΡΑΚΛΕΙΟΥ, ΓΟΥΡΝΕΣ ΗΡΑΚΛΕΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΔΑΜΑΣΤΑ ΗΡΑΚΛΕΙΟΥ, ΕΡΓΑΤΙΚΕΣ ΚΑΤΟΙΚΙΕΣ ΗΡΑΚΛΕΙΟΥ, ΖΕΡΒΟΥ ΜΕΤΟΧΙ ΗΡΑΚΛΕΙΟΥ, ΚΑΒΡΟΧΩΡΙ ΗΡΑΚΛΕΙΟΥ, ΚΑΛΛΙΘΕΑ ΗΡΑΚΛΕΙΟΥ, ΚΑΜΑΡΙ ΗΡΑΚΛΕΙΟΥ, ΚΑΜΠΟΣ ΗΡΑΚΛΕΙΟΥ, ΚΑΠΕΤΑΝΑΚΙ ΜΕΤΟΧΙ ΗΡΑΚΛΕΙΟΥ, ΚΑΡΤΕΡΟΣ ΚΑΛΛΙΘΕΑΣ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΚΑΛΕΣΙΑ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΛΟΥΤΡΑΚΙ ΗΡΑΚΛΕΙΟΥ, ΚΕΡΑΜΟΥΤΣΙ ΗΡΑΚΛΕΙΟΥ, ΚΕΦΑΛΟΓΙΑΝΝΗΣ ΗΡΑΚΛΕΙΟΥ, ΚΝΩΣΟΣ ΗΡΑΚΛΕΙΟΥ, ΚΟΛΛΥΒΑΣ ΗΡΑΚΛΕΙΟΥ, ΚΟΡΑΚΟΒΟΥΝΙ ΗΡΑΚΛΕΙΟΥ, ΚΟΡΦΕΣ ΗΡΑΚΛΕΙΟΥ, ΛΙΝΟΠΕΡΑΜΑΤΑ ΗΡΑΚΛΕΙΟΥ, ΛΟΥΤΡΑΚΙ ΜΑΛΕΒΙΖΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΜΑΛΑΔΕΣ ΗΡΑΚΛΕΙΟΥ, ΜΑΡΑΘΙΤΗΣ ΗΡΑΚΛΕΙΟΥ, ΜΑΡΑΘΟΣ ΗΡΑΚΛΕΙΟΥ, ΜΟΝΗ ΗΡΑΚΛΕΙΟΥ, ΜΟΝΗ ΣΑΒΒΑΘΙΑΝΩΝ ΗΡΑΚΛΕΙΟΥ, ΞΕΡΟΠΟΤΑΜΟΣ ΗΡΑΚΛΕΙΟΥ, ΠΑΛΑΙΟΚΑΣΤΡΟ ΗΡΑΚΛΕΙΟΥ, ΠΑΝΤΑΝΑΣΣΑ ΗΡΑΚΛΕΙΟΥ, ΠΑΠΑ ΤΙΤΟΥ ΜΕΤΟΧΙ ΗΡΑΚΛΕΙΟΥ, ΠΑΡΑΛΙΑ ΦΟΔΕΛΕ ΗΡΑΚΛΕΙΟΥ, ΠΡΑΣΑΣ ΗΡΑΚΛΕΙΟΥ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΗΡΑΚΛΕΙΟΥ, ΡΟΔΙΑ ΗΡΑΚΛΕΙΟΥ, ΣΙΛΑΜΟΣ ΗΡΑΚΛΕΙΟΥ, ΣΚΑΛΑΝΙ ΗΡΑΚΛΕΙΟΥ, ΣΠΗΛΙΑ ΗΡΑΚΛΕΙΟΥ, ΤΣΑΓΚΑΡΑΚΙ ΗΡΑΚΛΕΙΟΥ, ΤΥΛΙΣΟΣ ΗΡΑΚΛΕΙΟΥ, ΦΟΔΕΛΕ ΗΡΑΚΛΕΙΟΥ, ΦΟΙΝΙΚΙΑ ΗΡΑΚΛΕΙΟΥ, ΧΑΝΙ ΚΟΚΚΙΝΗ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Ηρακλείου' },
    { PostalCode: '46030', Area: 'ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΘΕΣΠΡΩΤΙΑΣ, ΑΡΙΛΛΑΣ ΘΕΣΠΡΩΤΙΑΣ, ΕΛΕΥΘΕΡΙ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΛΟΔΙΚΙ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΡΤΕΡΙ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΤΑΒΟΘΡΑ ΘΕΣΠΡΩΤΙΑΣ, ΜΑΖΑΡΑΚΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΜΑΡΓΑΡΙΤΙ ΘΕΣΠΡΩΤΙΑΣ, ΜΕΣΟΒΟΥΝΙΟ ΘΕΣΠΡΩΤΙΑΣ, ΜΗΛΟΚΟΚΚΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΠΑΛΑΙΟΚΑΣΤΡΟ ΘΕΣΠΡΩΤΙΑΣ, ΠΑΝΑΙΝΑ ΘΕΣΠΡΩΤΙΑΣ, ΠΕΡΔΙΚΑ ΘΕΣΠΡΩΤΙΑΣ, ΠΥΡΓΙ ΘΕΣΠΡΩΤΙΑΣ', Prefecture: 'Θεσπρωτίας' },
    { PostalCode: '46100', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΘΥΑΜΙΔΟΣ ΘΕΣΠΡΩΤΙΑΣ, ΑΓΙΟΣ ΒΛΑΣΙΟΣ ΘΕΣΠΡΩΤΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΠΑΡΑΠΟΤΑΜΟΥ ΘΕΣΠΡΩΤΙΑΣ, ΑΜΠΕΛΙΑ ΝΕΑΣ ΣΕΛΕΥΚΕΙΑΣ ΘΕΣΠΡΩΤΙΑΣ, ΑΡΓΥΡΟΤΟΠΟΣ ΘΕΣΠΡΩΤΙΑΣ, ΒΑΣΙΛΙΚΟΣ ΘΕΣΠΡΩΤΙΑΣ, ΒΡΥΣΗ ΘΕΣΠΡΩΤΙΑΣ, ΓΡΑΙΚΟΧΩΡΙ ΘΕΣΠΡΩΤΙΑΣ, ΔΙΛΟΦΟ ΘΕΣΠΡΩΤΙΑΣ, ΔΡΑΜΕΣΗ ΘΕΣΠΡΩΤΙΑΣ, ΔΡΙΜΙΤΣΑ ΘΕΣΠΡΩΤΙΑΣ, ΔΡΟΣΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΕΘΝΙΚΗ ΑΝΤΙΣΤΑΣΗ ΘΕΣΠΡΩΤΙΑΣ, ΗΓΟΥΜΕΝΙΤΣΑ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΡΑΒΟΣΤΑΣΙ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΣΤΡΙ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΤΩ ΚΟΡΙΤΙΑΝΗ ΘΕΣΠΡΩΤΙΑΣ, ΚΕΣΤΡΙΝΗ ΘΕΣΠΡΩΤΙΑΣ, ΚΟΔΡΑ ΘΕΣΠΡΩΤΙΑΣ, ΚΟΡΙΤΙΑΝΗ ΘΕΣΠΡΩΤΙΑΣ, ΚΡΥΟΒΡΥΣΗ ΘΕΣΠΡΩΤΙΑΣ, ΛΑΔΟΧΩΡΙ ΘΕΣΠΡΩΤΙΑΣ, ΛΑΚΚΑ ΘΕΣΠΡΩΤΙΑΣ, ΛΙΟΦΥΤΑ ΘΕΣΠΡΩΤΙΑΣ, ΜΑΥΡΟΥΔΙ ΘΕΣΠΡΩΤΙΑΣ, ΜΥΛΟΙ ΘΕΣΠΡΩΤΙΑΣ, ΝΕΑ ΣΕΛΕΥΚΕΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΝΟΥΝΕΣΑΤΙ ΘΕΣΠΡΩΤΙΑΣ, ΠΑΡΑΠΟΤΑΜΟΣ ΘΕΣΠΡΩΤΙΑΣ, ΠΕΣΤΑΝΙΩΤΙΚΑ ΘΕΣΠΡΩΤΙΑΣ, ΠΗΓΑΔΙ ΘΕΣΠΡΩΤΙΑΣ, ΠΛΑΤΑΡΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΠΟΛΥΝΕΡΙ ΘΕΣΠΡΩΤΙΑΣ, ΡΑΓΙΟ ΘΕΣΠΡΩΤΙΑΣ, ΣΕΜΕΡΙΖΑ ΘΕΣΠΡΩΤΙΑΣ, ΣΚΟΡΠΙΩΝΑ ΘΕΣΠΡΩΤΙΑΣ, ΣΥΒΟΤΑ ΘΕΣΠΡΩΤΙΑΣ, ΦΑΣΚΟΜΗΛΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΦΙΛΟΘΕΗ ΘΕΣΠΡΩΤΙΑΣ, ΦΡΑΓΜΑ ΚΑΛΑΜΑ ΘΕΣΠΡΩΤΙΑΣ', Prefecture: 'Θεσπρωτίας' },
    { PostalCode: '46200', Area: 'ΑΒΑΡΙΤΣΑ ΘΕΣΠΡΩΤΙΑΣ, ΑΓΙΑ ΚΥΡΙΑΚΗ ΘΕΣΠΡΩΤΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΝΕΟΧΩΡΙΟΥ ΘΕΣΠΡΩΤΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΠΑΡΑΜΥΘΙΑΣ ΘΕΣΠΡΩΤΙΑΣ, ΑΓΙΟΣ ΔΟΝΑΤΟΣ ΘΕΣΠΡΩΤΙΑΣ, ΑΓΟΡΑ ΘΕΣΠΡΩΤΙΑΣ, ΑΜΠΕΛΙΑ ΣΟΥΛΙΟΥ ΘΕΣΠΡΩΤΙΑΣ, ΑΣΦΑΚΑ ΘΕΣΠΡΩΤΙΑΣ, ΒΑΛΑΝΙΔΙΑ ΙΩΑΝΝΙΝΩΝ, ΒΡΥΣΟΠΟΥΛΑ ΘΕΣΠΡΩΤΙΑΣ, ΓΚΡΙΚΑ ΘΕΣΠΡΩΤΙΑΣ, ΔΑΦΝΟΥΛΑ ΘΕΣΠΡΩΤΙΑΣ, ΕΛΑΤΑΡΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΖΕΡΒΟΧΩΡΙ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΚΟΛΑΚΚΟΣ ΙΩΑΝΝΙΝΩΝ, ΚΑΛΛΙΘΕΑ ΠΑΡΑΜΥΘΙΑΣ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΜΙΝΙ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΡΒΟΥΝΑΡΙ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΡΙΩΤΙ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΤΑΜΑΧΗ ΙΩΑΝΝΙΝΩΝ, ΚΕΦΑΛΟΒΡΥΣΟ ΘΕΣΠΡΩΤΙΑΣ, ΚΡΥΣΤΑΛΛΟΠΗΓΗ ΘΕΣΠΡΩΤΙΑΣ, ΚΥΡΑ ΠΑΝΑΓΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΝΕΟΧΩΡΙ ΠΑΡΑΜΥΘΙΑΣ ΘΕΣΠΡΩΤΙΑΣ, ΝΕΡΑΙΔΑ ΘΕΣΠΡΩΤΙΑΣ, ΞΗΡΟΛΟΦΟΣ ΘΕΣΠΡΩΤΙΑΣ, ΠΑΓΚΡΑΤΕΣ ΘΕΣΠΡΩΤΙΑΣ, ΠΑΡΑΜΥΘΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΠΑΡΔΑΛΙΤΣΑ ΙΩΑΝΝΙΝΩΝ, ΠΕΝΤΕ ΕΚΚΛΗΣΙΕΣ ΘΕΣΠΡΩΤΙΑΣ, ΠΕΤΟΥΣΙ ΘΕΣΠΡΩΤΙΑΣ, ΠΕΤΡΟΒΙΤΣΑ ΘΕΣΠΡΩΤΙΑΣ, ΠΗΛΟΓΡΑΝΙΤΣΑ ΙΩΑΝΝΙΝΩΝ, ΠΛΑΚΩΤΗ ΘΕΣΠΡΩΤΙΑΣ, ΠΡΟΔΡΟΜΙΟ ΘΕΣΠΡΩΤΙΑΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΒΑΛΑΝΙΔΙΑΣ ΙΩΑΝΝΙΝΩΝ, ΡΑΠΙΟ ΘΕΣΠΡΩΤΙΑΣ, ΡΑΧΟΥΛΙ ΘΕΣΠΡΩΤΙΑΣ, ΣΑΛΟΝΙΚΗ ΘΕΣΠΡΩΤΙΑΣ, ΣΕΒΑΣΤΟ ΘΕΣΠΡΩΤΙΑΣ, ΣΚΑΝΔΑΛΟ ΘΕΣΠΡΩΤΙΑΣ, ΧΡΥΣΑΥΓΗ ΘΕΣΠΡΩΤΙΑΣ, ΨΑΚΑ ΘΕΣΠΡΩΤΙΑΣ', Prefecture: 'Θεσπρωτίας' },
    { PostalCode: '46300', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΦΙΛΙΑΤΩΝ ΘΕΣΠΡΩΤΙΑΣ, ΑΓΙΟΣ ΑΡΣΕΝΙΟΣ ΘΕΣΠΡΩΤΙΑΣ, ΑΕΤΟΣ ΘΕΣΠΡΩΤΙΑΣ, ΑΝΩ ΠΑΛΑΙΟΚΚΛΗΣΙ ΘΕΣΠΡΩΤΙΑΣ, ΑΣΠΡΟΚΚΛΗΣΙ ΘΕΣΠΡΩΤΙΑΣ, ΑΧΛΑΔΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΒΡΥΣΕΛΛΑ ΘΕΣΠΡΩΤΙΑΣ, ΒΡΥΣΟΥΛΑ ΘΕΣΠΡΩΤΙΑΣ, ΓΕΡΟΠΛΑΤΑΝΟΣ ΘΕΣΠΡΩΤΙΑΣ, ΓΙΡΟΜΕΡΙ ΘΕΣΠΡΩΤΙΑΣ, ΓΟΛΑ ΘΕΣΠΡΩΤΙΑΣ, ΔΑΦΝΗ ΘΕΣΠΡΩΤΙΑΣ, ΔΟΝΑΤΟΣ ΘΕΣΠΡΩΤΙΑΣ, ΕΛΑΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΜΠΟΣ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΤΩ ΞΕΧΩΡΟ ΘΕΣΠΡΩΤΙΑΣ, ΚΑΤΩ ΠΑΛΑΙΟΚΚΛΗΣΙ ΘΕΣΠΡΩΤΙΑΣ, ΚΕΡΑΣΟΧΩΡΙ ΘΕΣΠΡΩΤΙΑΣ, ΚΟΚΚΙΝΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΚΥΠΑΡΙΣΣΟ ΘΕΣΠΡΩΤΙΑΣ, ΚΩΤΣΙΚΑ ΘΕΣΠΡΩΤΙΑΣ, ΜΑΥΡΟΝΕΡΙ ΘΕΣΠΡΩΤΙΑΣ, ΞΕΧΩΡΟ ΘΕΣΠΡΩΤΙΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΘΕΣΠΡΩΤΙΑΣ, ΠΑΛΑΜΠΑΣ ΘΕΣΠΡΩΤΙΑΣ, ΠΗΓΑΔΟΥΛΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΠΛΑΙΣΙΟ ΘΕΣΠΡΩΤΙΑΣ, ΠΟΤΑΜΙΑ ΦΙΛΙΑΤΩΝ ΘΕΣΠΡΩΤΙΑΣ, ΡΙΖΟ ΘΕΣΠΡΩΤΙΑΣ, ΡΟΔΟΣΤΙΒΑ ΘΕΣΠΡΩΤΙΑΣ, ΣΑΓΙΑΔΑ ΘΕΣΠΡΩΤΙΑΣ, ΣΙΔΕΡΗ ΘΕΣΠΡΩΤΙΑΣ, ΣΙΤΑΝΙΑ ΘΕΣΠΡΩΤΙΑΣ, ΣΜΕΡΤΟΣ ΘΕΣΠΡΩΤΙΑΣ, ΤΡΙΚΟΡΥΦΟ ΘΕΣΠΡΩΤΙΑΣ, ΤΣΑΤΣΟΥΛΑΙΙΚΑ ΘΕΣΠΡΩΤΙΑΣ, ΦΑΝΕΡΩΜΕΝΗ ΘΕΣΠΡΩΤΙΑΣ, ΦΙΛΙΑΤΕΣ ΘΕΣΠΡΩΤΙΑΣ, ΦΟΙΝΙΚΙΟ ΘΕΣΠΡΩΤΙΑΣ, ΧΛΟΜΟΣ ΡΙΖΟΥ ΘΕΣΠΡΩΤΙΑΣ', Prefecture: 'Θεσπρωτίας' },
    { PostalCode: '46404', Area: 'ΚΑΒΑΛΑΣ ΚΑΒΑΛΑΣ', Prefecture: 'Θεσπρωτίας' },
    { PostalCode: '54248', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54249', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54250', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54252', Area: 'ΘΕΣΣΑΛΟΝΙΚΗΣ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54351', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54352', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54453', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54454', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54500', Area: 'ΔΡΥΜΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΕΛΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΑΓΥΝΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΗΤΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΜΕΣΑΙΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΜΟΝΟΛΟΦΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΝΕΑ ΦΙΛΑΔΕΛΦΕΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΝΕΟΧΩΡΟΥΔΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΑΛΑΙΟΧΩΡΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΑΝΤΕΛΕΗΜΩΝΑΣ ΚΙΛΚΙΣ, ΠΕΝΤΑΛΟΦΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΕΤΡΩΤΟ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54621', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54622', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54623', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54624', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54625', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54626', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54627', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54628', Area: 'ΜΕΝΕΜΕΝΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54629', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54630', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54631', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54632', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54633', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54634', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54635', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54636', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54638', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54639', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54640', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54641', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54642', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54643', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54644', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54645', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54646', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '54655', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '55131', Area: 'ΚΑΛΑΜΑΡΙΑ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '55132', Area: 'ΚΑΛΑΜΑΡΙΑ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '55133', Area: 'ΚΑΛΑΜΑΡΙΑ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '55134', Area: 'ΚΑΛΑΜΑΡΙΑ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '55135', Area: 'ΚΑΛΑΜΑΡΙΑΣ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '55236', Area: 'ΠΥΛΑΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '55337', Area: 'ΤΡΙΑΝΔΡΙΑ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '55437', Area: 'ΝΕΑΠΟΛΗΣ - ΣΥΚΕΩΝ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '55438', Area: 'ΑΓΙΟΣ ΠΑΥΛΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '55534', Area: 'ΘΕΣΣΑΛΟΝΙΚΗΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΥΛΑΙΑΣ - ΧΟΡΤΙΑΤΗ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '55535', Area: 'ΠΑΝΟΡΑΜΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '55536', Area: 'ΠΥΛΑΙΑΣ - ΧΟΡΤΙΑΤΗ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56121', Area: 'ΑΜΠΕΛΟΚΗΠΟΙ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56122', Area: 'ΜΕΝΕΜΕΝΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56123', Area: 'ΑΜΠΕΛΟΚΗΠΟΙ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56224', Area: 'ΕΥΟΣΜΟ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56225', Area: 'ΚΟΡΔΕΛΙΟΥ - ΕΥΟΣΜΟΥ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56226', Area: 'ΚΟΡΔΕΛΙΟΥ - ΕΥΟΣΜΟΥ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56238', Area: 'ΚΟΡΔΕΛΙΟΥ - ΕΥΟΣΜΟΥ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56334', Area: 'ΕΛΕΥΘΕΡΙΟ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56335', Area: 'ΠΑΥΛΟΥ ΜΕΛΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56404', Area: 'ΘΕΣΣΑΛΟΝΙΚΗ ΠΕΙΡΑΙΑΣ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56429', Area: 'ΑΝΘΟΚΗΠΟΙ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56430', Area: 'ΣΤΑΥΡΟΥΠΟΛΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56431', Area: 'ΣΤΑΥΡΟΥΠΟΛΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56436', Area: 'ΠΑΥΛΟΥ ΜΕΛΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56437', Area: 'ΠΑΥΛΟΥ ΜΕΛΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56532', Area: 'ΠΟΛΙΧΝΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56533', Area: 'ΠΟΛΙΧΝΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56535', Area: 'ΠΑΥΛΟΥ ΜΕΛΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56625', Area: 'ΣΥΚΙΕΣ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56626', Area: 'ΣΥΚΙΕΣ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56727', Area: 'ΝΕΑΠΟΛΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '56728', Area: 'ΝΕΑΠΟΛΗ ΘΕΣΣΑΛΟΝΙΚΗ - ΠΡΟΑΣΤΙΑ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57001', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΘΕΡΜΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΙΩΑΝΝΗΣ ΘΕΟΛΟΓΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΜΗΛΙΕΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΝΕΑ ΡΑΙΔΕΣΤΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΝΕΟ ΡΥΣΙΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΣΥΚΕΕΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΤΑΓΑΡΑΔΕΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΤΡΙΑΔΙΟ ΘΕΡΜΗΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΦΑΡΜΑΚΑΙΙΚΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57002', Area: 'ΑΡΕΘΟΥΣΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΑΡΕΤΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΑΥΓΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΚΡΥΟΝΕΡΙ ΛΑΓΚΑΔΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΕΥΚΟΥΔΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΙΜΝΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΟΦΙΣΚΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΜΑΥΡΟΥΔΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΣΚΕΠΑΣΤΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΣΟΧΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΣΤΕΦΑΝΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57003', Area: 'ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57004', Area: 'ΝΕΑ ΚΕΡΑΣΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΝΕΑ ΜΗΧΑΝΙΩΝΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57006', Area: 'ΑΓΙΟΣ ΑΝΤΩΝΙΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΒΑΣΙΛΙΚΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΓΑΛΑΡΙΝΟΣ  ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΑΚΚΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΙΒΑΔΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΟΥΤΡΑ ΘΕΡΜΗΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΜΟΝΟΠΗΓΑΔΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΕΡΙΣΤΕΡΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΡΙΝΟΧΩΡΙ ΧΑΛΚΙΔΙΚΗΣ, ΣΟΥΡΩΤΗ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57007', Area: 'ΑΔΕΝΔΡΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΒΑΛΤΟΧΩΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΒΡΑΧΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΕΛΕΟΥΣΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΟΥΔΙΑΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΜΙΚΡΟ ΜΟΝΑΣΤΗΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΑΡΘΕΝΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΧΑΛΚΗΔΩΝΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57008', Area: 'ΙΩΝΙΑ ΘΕΣ/ΝΙΚΗΣ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57009', Area: 'ΚΑΛΟΧΩΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57010', Area: 'ΑΣΒΕΣΤΟΧΩΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57011', Area: 'ΑΓΧΙΑΛΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΑΚΡΟΠΟΤΑΜΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΒΑΘΥΛΑΚΚΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΓΕΦΥΡΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΚΑΣΤΑΝΑΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΜΠΑΛΑΙΙΚΑ ΚΙΛΚΙΣ, ΝΕΑ ΜΕΣΗΜΒΡΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΞΗΡΟΧΩΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΕΥΚΟΔΑΣΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΡΟΧΩΜΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57012', Area: 'ΑΓΙΟΣ ΧΑΡΑΛΑΜΠΟΣ ΣΑΡΑΚΗΝΑΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΑΔΑΜ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΑΡΔΑΜΕΡΙΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΒΑΣΙΛΟΥΔΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΓΕΡΑΚΑΡΟΥ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΖΑΓΚΛΙΒΕΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΚΑΛΑΜΩΤΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΚΡΗΜΝΗ ΧΑΛΚΙΔΙΚΗΣ, ΜΑΡΑΘΟΥΣΣΑ ΧΑΛΚΙΔΙΚΗΣ, ΜΕΛΙΣΣΟΥΡΓΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΜΕΣΟΚΩΜΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΕΤΡΟΚΕΡΑΣΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΛΑΤΑΝΟΧΩΡΙ ΧΑΛΚΙΔΙΚΗΣ, ΠΛΑΤΕΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΣΑΡΑΚΗΝΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57013', Area: 'ΩΡΑΙΟΚΑΣΤΡΟ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57014', Area: 'ΑΝΩ ΣΤΑΥΡΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΒΑΜΒΑΚΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΚΑΛΥΒΙΑ ΒΑΡΒΑΡΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΜΙΚΡΗ ΒΟΛΒΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΜΟΔΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΝΕΑ ΜΑΔΥΤΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΟΛΥΜΠΙΑΔΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΡΕΝΤΙΝΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΣΤΑΥΡΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΧΡΥΣΗ ΑΚΤΗ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57017', Area: 'ΒΕΡΤΙΣΚΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΔΟΡΚΑΔΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΕΛΛΗΝΙΚΟ ΚΙΛΚΙΣ, ΕΥΑΓΓΕΛΙΣΤΡΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΘΕΟΔΟΣΙΑ ΚΙΛΚΙΣ, ΘΕΡΑΠΕΥΤΗΡΙΟ ΤΟΞΙΚΟΜΑΝΩΝ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΙΣΩΜΑ ΚΙΛΚΙΣ, ΚΑΡΤΕΡΕΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΚΕΦΑΛΟΧΩΡΙ ΣΕΡΡΩΝ, ΚΥΔΩΝΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΑΧΑΝΑΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΕΥΚΟΧΩΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΜΑΥΡΟΡΡΑΧΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΜΕΛΑΝΘΙΟ ΚΙΛΚΙΣ, ΝΙΚΟΠΟΛΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΞΥΛΟΠΟΛΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΡΙΖΑΝΑ ΚΙΛΚΙΣ, ΣΤΑΥΡΟΥΠΟΛΗ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57019', Area: 'ΑΓΓΕΛΟΧΩΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΑΓΙΑ ΤΡΙΑΔΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΙΒΑΔΑΚΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΝΕΟΙ ΕΠΙΒΑΤΕΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΕΡΑΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57021', Area: 'ΑΣΠΡΟΒΑΛΤΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΒΡΑΣΝΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΝΕΑ ΒΡΑΣΝΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57100', Area: 'ΑΓΡΟΣΥΚΙΑ ΠΕΛΛΗΣ, ΑΘΥΡΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΔΥΤΙΚΟ ΠΕΛΛΗΣ, ΚΟΥΦΑΛΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΙΒΑΔΙΤΣΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΡΑΧΩΝΑ ΠΕΛΛΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57200', Area: 'ΑΓΙΑ ΒΑΡΒΑΡΑ ΠΕΡΙΒΟΛΑΚΙΟΥ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΑΝΑΛΗΨΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΑΣΣΗΡΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΓΑΛΗΝΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΔΡΑΚΟΝΤΙΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΕΞΑΜΙΛΙΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΕΥΑΓΓΕΛΙΣΜΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΗΡΑΚΛΕΙΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΚΑΒΑΛΛΑΡΙΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΚΟΛΧΙΚΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΚΡΙΘΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΛΑΓΚΑΔΑΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΜΙΚΡΟΚΩΜΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΟΣΣΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΕΝΤΕ ΒΡΥΣΕΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΕΡΙΒΟΛΑΚΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΟΛΥΔΕΝΔΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΡΟΦΗΤΗΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΣΤΙΒΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΣΧΟΛΑΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΧΡΥΣΑΥΓΗ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57300', Area: 'ΑΝΑΤΟΛΙΚΟ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΚΥΜΙΝΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΝΕΑ ΜΑΛΓΑΡΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΧΑΛΑΣΤΡΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57400', Area: 'ΒΑΛΤΟΤΟΠΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΣΙΝΔΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '57500', Area: 'ΑΝΩ ΣΧΟΛΑΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΕΠΑΝΟΜΗ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΚΑΡΔΙΑ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΚΑΤΩ ΣΧΟΛΑΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΜΕΣΗΜΕΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΠΛΑΓΙΑΡΙ ΘΕΣΣΑΛΟΝΙΚΗΣ, ΤΡΙΛΟΦΟΣ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Θεσσαλονίκης' },
    { PostalCode: '44001', Area: 'ΚΑΛΑΡΙΤΕΣ ΙΩΑΝΝΙΝΩΝ, ΚΗΠΙΝΑ ΙΩΑΝΝΙΝΩΝ, ΚΟΜΜΑΤΑΚΙΑ ΙΩΑΝΝΙΝΩΝ, ΜΑΤΣΟΥΚΙ ΙΩΑΝΝΙΝΩΝ, ΜΕΛΙΣΣΟΥΡΓΟΙ ΑΡΤΑΣ, ΜΥΣΤΡΑΣ ΙΩΑΝΝΙΝΩΝ, ΠΛΑΤΑΝΙΑ ΜΑΤΣΟΥΚΙΟΥ ΙΩΑΝΝΙΝΩΝ, ΠΡΑΜΑΝΤΑ ΙΩΑΝΝΙΝΩΝ, ΠΡΟΣΗΛΙΟ ΙΩΑΝΝΙΝΩΝ, ΣΙΡΑΚΟ ΙΩΑΝΝΙΝΩΝ, ΤΣΟΠΕΛΑ ΙΩΑΝΝΙΝΩΝ, ΦΡΑΞΟΣ ΠΡΑΜΑΝΤΩΝ ΙΩΑΝΝΙΝΩΝ, ΧΡΙΣΤΟΙ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '44002', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΙΩΑΝΝΙΝΩΝ, ΑΡΓΥΡΟΧΩΡΙ ΙΩΑΝΝΙΝΩΝ, ΒΡΙΣΤΟΒΟ ΙΩΑΝΝΙΝΩΝ, ΔΕΛΒΙΝΑΚΙ ΙΩΑΝΝΙΝΩΝ, ΔΙΜΟΚΟΡΙΟ ΙΩΑΝΝΙΝΩΝ, ΖΑΒΡΟΧΟ ΙΩΑΝΝΙΝΩΝ, ΚΑΣΤΑΝΗ ΙΩΑΝΝΙΝΩΝ, ΚΑΣΤΑΝΙΑΝΗ ΙΩΑΝΝΙΝΩΝ, ΚΑΤΩ ΛΑΒΔΑΝΗ ΙΩΑΝΝΙΝΩΝ, ΚΕΡΑΣΟΒΟ ΙΩΑΝΝΙΝΩΝ, ΚΤΙΣΜΑΤΑ ΙΩΑΝΝΙΝΩΝ, ΛΑΒΔΑΝΗ ΙΩΑΝΝΙΝΩΝ, ΜΑΥΡΟΠΟΥΛΟ ΙΩΑΝΝΙΝΩΝ, ΝΕΟΧΩΡΙ ΠΩΓΩΝΙΟΥ ΙΩΑΝΝΙΝΩΝ, ΠΕΡΙΣΤΕΡΙ ΙΩΑΝΝΙΝΩΝ, ΣΤΑΥΡΟΔΡΟΜΙ ΠΩΓΩΝΙΟΥ ΙΩΑΝΝΙΝΩΝ, ΣΤΡΑΤΙΝΙΣΤΑ ΙΩΑΝΝΙΝΩΝ, ΤΕΡΙΑΧΙ ΙΩΑΝΝΙΝΩΝ, ΦΑΡΑΓΓΙ ΙΩΑΝΝΙΝΩΝ, ΧΑΡΑΥΓΗ ΙΩΑΝΝΙΝΩΝ, ΧΡΥΣΟΔΟΥΛΗ ΙΩΑΝΝΙΝΩΝ, ΨΗΛΟΚΑΣΤΡΟ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '44003', Area: 'ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΙΩΑΝΝΙΝΩΝ, ΑΕΤΟΠΕΤΡΑ ΙΩΑΝΝΙΝΩΝ, ΑΡΑΧΩΒΙΤΣΑ ΙΩΑΝΝΙΝΩΝ, ΒΑΣΙΛΟΠΟΥΛΟ ΙΩΑΝΝΙΝΩΝ, ΒΑΤΑΤΑΔΕΣ ΙΩΑΝΝΙΝΩΝ, ΒΛΑΧΑΤΑΝΟ ΙΩΑΝΝΙΝΩΝ, ΒΟΥΤΣΑΡΑΣ ΙΩΑΝΝΙΝΩΝ, ΒΡΟΝΤΙΣΜΕΝΗ ΙΩΑΝΝΙΝΩΝ, ΓΑΒΡΙΣΙΟΙ ΙΩΑΝΝΙΝΩΝ, ΓΡΑΝΙΤΣΟΠΟΥΛΑ ΙΩΑΝΝΙΝΩΝ, ΔΑΦΝΟΦΥΤΟ ΙΩΑΝΝΙΝΩΝ, ΔΕΣΠΟΤΙΚΟ ΙΩΑΝΝΙΝΩΝ, ΔΡΑΓΟΥΜΗ  (ΠΑΛΙΟΥΡΗ) ΙΩΑΝΝΙΝΩΝ, ΕΚΚΛΗΣΟΧΩΡΙ ΙΩΑΝΝΙΝΩΝ, ΖΙΤΣΑ ΙΩΑΝΝΙΝΩΝ, ΙΕΡΟΜΝΗΜΗ ΙΩΑΝΝΙΝΩΝ, ΚΑΛΟΧΩΡΙ ΙΩΑΝΝΙΝΩΝ, ΚΑΡΙΤΣΑ ΙΩΑΝΝΙΝΩΝ, ΚΑΣΤΡΙ ΒΑΣΙΛΟΠΟΥΛΟΥ ΙΩΑΝΝΙΝΩΝ, ΚΑΤΑΡΡΑΚΤΗΣ ΙΩΑΝΝΙΝΩΝ, ΚΑΤΩ ΑΕΤΟΠΕΤΡΑ ΙΩΑΝΝΙΝΩΝ, ΚΛΗΜΑΤΙΑ ΙΩΑΝΝΙΝΩΝ, ΚΟΥΡΝΟΡΡΑΧΗ ΙΩΑΝΝΙΝΩΝ, ΛΕΥΚΟΘΕΑ ΙΩΑΝΝΙΝΩΝ, ΛΙΓΟΨΑ ΙΩΑΝΝΙΝΩΝ, ΛΙΘΙΝΟ ΙΩΑΝΝΙΝΩΝ, ΜΑΖΑΡΑΚΙ ΙΩΑΝΝΙΝΩΝ, ΜΕΛΙΣΣΙ ΙΩΑΝΝΙΝΩΝ, ΜΙΚΡΟ ΣΟΥΛΟΠΟΥΛΟ ΙΩΑΝΝΙΝΩΝ, ΝΕΟΧΩΡΙ ΔΩΔΩΝΗΣ ΙΩΑΝΝΙΝΩΝ, ΠΑΛΙΟΥΡΗ ΑΓΙΟΥ ΝΙΚΟΛΑΟΥ ΙΩΑΝΝΙΝΩΝ, ΠΑΛΙΟΥΡΗ ΔΩΔΩΝΗΣ ΙΩΑΝΝΙΝΩΝ, ΠΕΤΣΑΛΙ ΙΩΑΝΝΙΝΩΝ, ΠΡΩΤΟΠΑΠΠΑΣ ΙΩΑΝΝΙΝΩΝ, ΡΑΙΚΟ ΙΩΑΝΝΙΝΩΝ, ΡΙΑΧΟΒΟ ΙΩΑΝΝΙΝΩΝ, ΡΙΖΟ ΙΩΑΝΝΙΝΩΝ, ΣΑΚΕΛΛΑΡΙΚΟ ΙΩΑΝΝΙΝΩΝ, ΣΟΥΛΟΠΟΥΛΟ ΙΩΑΝΝΙΝΩΝ, ΦΩΤΕΙΝΟ ΙΩΑΝΝΙΝΩΝ, ΧΡΥΣΟΡΡΑΧΗ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '44004', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΔΟΛΙΑΝΩΝ ΙΩΑΝΝΙΝΩΝ, ΑΛΩΝΑΚΙΑ ΙΩΑΝΝΙΝΩΝ, ΑΝΩ ΠΑΡΑΚΑΛΑΜΟΣ ΙΩΑΝΝΙΝΩΝ, ΑΝΩ ΡΑΒΕΝΙΑ ΙΩΑΝΝΙΝΩΝ, ΑΡΕΤΗ ΙΩΑΝΝΙΝΩΝ, ΒΙΓΛΑ ΙΩΑΝΝΙΝΩΝ, ΔΟΛΙΑΝΑ ΙΩΑΝΝΙΝΩΝ, ΕΛΑΙΑ ΙΩΑΝΝΙΝΩΝ, ΚΑΛΠΑΚΙ ΙΩΑΝΝΙΝΩΝ, ΚΑΤΩ ΡΑΒΕΝΙΑ ΙΩΑΝΝΙΝΩΝ, ΚΟΥΚΛΙΟΙ ΙΩΑΝΝΙΝΩΝ, ΚΟΧΛΙΟΙ ΙΩΑΝΝΙΝΩΝ, ΛΙΟΥΜΠΑ ΙΩΑΝΝΙΝΩΝ, ΜΑΥΡΟΒΟΥΝΙ ΙΩΑΝΝΙΝΩΝ, ΜΑΥΡΟΝΟΡΟΣ ΙΩΑΝΝΙΝΩΝ, ΜΕΣΟΒΟΥΝΙ ΙΩΑΝΝΙΝΩΝ, ΜΟΝΗ ΓΕΝΝΗΣΙΟΥ ΘΕΟΤΟΚΟΥ ΒΕΛΛΑΣ ΙΩΑΝΝΙΝΩΝ, ΜΟΣΧΟΜΑΝΤΣΑ ΙΩΑΝΝΙΝΩΝ, ΜΠΟΛΑΙΙΚΑ ΙΩΑΝΝΙΝΩΝ, ΝΕΓΡΑΔΕΣ ΙΩΑΝΝΙΝΩΝ, ΠΑΗΔΟΝΙΑ ΙΩΑΝΝΙΝΩΝ, ΠΑΡΑΚΑΛΑΜΟΣ ΙΩΑΝΝΙΝΩΝ, ΡΕΠΕΤΙΣΤΑ ΙΩΑΝΝΙΝΩΝ, ΣΙΤΑΡΙΑ ΙΩΑΝΝΙΝΩΝ, ΣΤΑΥΡΟΔΡΟΜΙ ΙΩΑΝΝΙΝΩΝ, ΤΣΑΠΑΡΑ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '44006', Area: 'ΚΕΦΑΛΟΒΡΥΣΟ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '44010', Area: 'ΒΡΥΣΟΧΩΡΙ ΙΩΑΝΝΙΝΩΝ, ΓΥΦΤΟΚΑΜΠΟΣ ΙΩΑΝΝΙΝΩΝ, ΗΛΙΟΧΩΡΙ ΙΩΑΝΝΙΝΩΝ, ΛΑΙΣΤΑ ΙΩΑΝΝΙΝΩΝ, ΣΚΑΜΝΕΛΛΙ ΙΩΑΝΝΙΝΩΝ, ΤΣΕΠΕΛΟΒΟ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '44013', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΜΟΝΟΛΙΘΙΟΥ ΙΩΑΝΝΙΝΩΝ, ΑΕΤΟΡΡΑΧΗ ΙΩΑΝΝΙΝΩΝ, ΔΑΦΝΗ ΙΩΑΝΝΙΝΩΝ, ΔΑΦΝΩΤΗ ΙΩΑΝΝΙΝΩΝ, ΕΛΛΗΝΙΚΟ ΙΩΑΝΝΙΝΩΝ, ΖΩΟΔΟΧΟΣ ΠΗΓΗ ΠΛΑΤΑΝΟΥΣΣΗΣ ΙΩΑΝΝΙΝΩΝ, ΚΑΛΕΝΤΖΙ ΙΩΑΝΝΙΝΩΝ, ΚΟΡΙΤΙΑΝΗ ΙΩΑΝΝΙΝΩΝ, ΚΩΣΤΗΤΣΙ ΙΩΑΝΝΙΝΩΝ, ΛΑΖΑΙΝΑ ΙΩΑΝΝΙΝΩΝ, ΜΑΧΑΛΑΣ ΙΩΑΝΝΙΝΩΝ, ΜΟΝΟΛΙΘΙΟ ΙΩΑΝΝΙΝΩΝ, ΜΠΟΥΚΟΡΙ ΙΩΑΝΝΙΝΩΝ, ΝΙΣΤΟΡΑ ΙΩΑΝΝΙΝΩΝ, ΞΗΡΟΒΟΥΝΙ ΙΩΑΝΝΙΝΩΝ, ΠΑΤΕΡΟ ΙΩΑΝΝΙΝΩΝ, ΠΗΓΑΔΙΑ ΙΩΑΝΝΙΝΩΝ, ΠΛΑΙΣΙΑ ΙΩΑΝΝΙΝΩΝ, ΠΛΑΤΑΝΟΥΣΣΑ ΙΩΑΝΝΙΝΩΝ, ΦΑΝΕΡΩΜΕΝΗ ΙΩΑΝΝΙΝΩΝ, ΦΟΡΤΟΣΙ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '44014', Area: 'ΑΓΙΑ ΒΑΡΒΑΡΑ ΔΕΜΑΤΙΟΥ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΔΕΜΑΤΙΟΥ ΙΩΑΝΝΙΝΩΝ, ΑΜΠΕΛΟΣ ΙΩΑΝΝΙΝΩΝ, ΒΟΒΟΥΣΑ ΙΩΑΝΝΙΝΩΝ, ΒΟΥΤΑΝΣΑΙΟΙ ΙΩΑΝΝΙΝΩΝ, ΓΡΕΒΕΝΙΤΙΟ ΙΩΑΝΝΙΝΩΝ, ΔΕΜΑΤΙ ΙΩΑΝΝΙΝΩΝ, ΔΕΡΒΕΝΙ ΙΩΑΝΝΙΝΩΝ, ΔΙΛΑΚΚΟ ΙΩΑΝΝΙΝΩΝ, ΔΟΛΙΑΝΗ ΙΩΑΝΝΙΝΩΝ, ΕΛΑΤΟΧΩΡΙ ΙΩΑΝΝΙΝΩΝ, ΙΤΕΑ ΙΩΑΝΝΙΝΩΝ, ΚΑΣΤΑΝΩΝΑΣ ΙΩΑΝΝΙΝΩΝ, ΛΙΑΠΗ ΙΩΑΝΝΙΝΩΝ, ΜΑΚΡΙΝΟ ΙΩΑΝΝΙΝΩΝ, ΝΕΟ ΜΑΡΟΥΣΙ  (ΔΟΛΙΑΝΗ) ΙΩΑΝΝΙΝΩΝ, ΤΡΙΣΤΕΝΟ ΙΩΑΝΝΙΝΩΝ, ΤΣΙΠΙΑΝΗ  (ΑΜΠΕΛΟΣ) ΙΩΑΝΝΙΝΩΝ, ΦΛΑΜΠΟΥΡΑΡΙΟ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '44100', Area: 'ΑΓΙΑ ΒΑΡΒΑΡΑ ΙΩΑΝΝΙΝΩΝ, ΑΕΤΟΠΕΤΡΑ ΚΟΝΙΤΣΗΣ ΙΩΑΝΝΙΝΩΝ, ΑΗΔΟΝΟΧΩΡΙ ΙΩΑΝΝΙΝΩΝ, ΑΜΑΡΑΝΤΟΣ ΙΩΑΝΝΙΝΩΝ, ΕΞΟΧΗ ΚΟΝΙΤΣΗΣ ΙΩΑΝΝΙΝΩΝ, ΗΛΙΟΡΡΑΧΗ ΙΩΑΝΝΙΝΩΝ, ΚΑΒΑΣΙΛΑ ΙΩΑΝΝΙΝΩΝ, ΚΑΛΛΙΘΕΑ ΙΩΑΝΝΙΝΩΝ, ΚΑΛΟΒΡΥΣΗ ΙΩΑΝΝΙΝΩΝ, ΚΑΛΥΒΙΑ ΚΟΝΙΤΣΗΣ ΙΩΑΝΝΙΝΩΝ, ΚΛΕΙΔΩΝΙΑ ΙΩΑΝΝΙΝΩΝ, ΚΟΝΙΤΣΑ ΙΩΑΝΝΙΝΩΝ, ΛΟΥΤΡΑ ΙΩΑΝΝΙΝΩΝ, ΜΑΖΙ ΙΩΑΝΝΙΝΩΝ, ΜΕΛΙΣΣΟΠΕΤΡΑ ΙΩΑΝΝΙΝΩΝ, ΜΟΛΥΒΔΟΣΚΕΠΑΣΤΟΣ ΙΩΑΝΝΙΝΩΝ, ΜΠΟΥΡΑΖΑΝΙ ΙΩΑΝΝΙΝΩΝ, ΝΙΚΑΝΩΡΑΣ ΙΩΑΝΝΙΝΩΝ, ΠΗΓΗ ΙΩΑΝΝΙΝΩΝ, ΠΥΞΑΡΙΑ ΙΩΑΝΝΙΝΩΝ, ΠΥΡΓΟΣ ΙΩΑΝΝΙΝΩΝ, ΣΙΑΝΟΒΟ ΙΩΑΝΝΙΝΩΝ, ΣΤΡΑΤΣΙΑΝΗ  (ΠΥΡΓΟΣ ΚΟΝΙΤΣΑΣ) ΙΩΑΝΝΙΝΩΝ, ΤΡΑΠΕΖΑ ΙΩΑΝΝΙΝΩΝ, ΦΥΤΟΚ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '44200', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΠΕΤΡΑΣ ΙΩΑΝΝΙΝΩΝ, ΑΜΠΕΛΙΑ ΧΡΥΣΟΒΙΤΣΑΣ ΙΩΑΝΝΙΝΩΝ, ΑΝΑΛΗΨΗ ΧΡΥΣΟΒΙΤΣΑΣ ΙΩΑΝΝΙΝΩΝ, ΑΝΗΛΙΟ ΙΩΑΝΝΙΝΩΝ, ΑΝΘΟΧΩΡΙ ΜΕΤΣΟΒΟΥ ΙΩΑΝΝΙΝΩΝ, ΒΟΤΟΝΟΣΙ ΙΩΑΝΝΙΝΩΝ, ΓΙΑΡΑΚΑΡΙ ΙΩΑΝΝΙΝΩΝ, ΚΑΛΛΙΘΕΑ ΠΕΤΡΑΣ ΙΩΑΝΝΙΝΩΝ, ΜΕΤΣΟΒΟ ΙΩΑΝΝΙΝΩΝ, ΜΗΛΙΑ ΜΕΤΣΟΒΟΥ ΙΩΑΝΝΙΝΩΝ, ΜΙΚΡΟ ΠΕΡΙΣΤΕΡΙ ΙΩΑΝΝΙΝΩΝ, ΜΥΛΟΙ ΙΩΑΝΝΙΝΩΝ, ΝΕΟ ΓΕΡΑΚΑΡΙ ΙΩΑΝΝΙΝΩΝ, ΞΗΡΙΚΟ ΙΩΑΝΝΙΝΩΝ, ΠΑΛΑΙΟΧΩΡΙ ΜΙΚΡΟΥ ΠΕΡΙΣΤΕΡΙΟΥ ΙΩΑΝΝΙΝΩΝ, ΠΕΤΡΑ ΙΩΑΝΝΙΝΩΝ, ΠΡΟΣΗΛΙΑ ΙΩΑΝΝΙΝΩΝ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΑΝΗΛΙΟΥ ΙΩΑΝΝΙΝΩΝ, ΡΑΧΟΥΛΑ ΙΩΑΝΝΙΝΩΝ, ΣΙΤΣΑΙΝΑ ΙΩΑΝΝΙΝΩΝ, ΣΙΩΛΑΔΕΣ ΙΩΑΝΝΙΝΩΝ, ΤΑΜΠΟΥΡΙΑ ΙΩΑΝΝΙΝΩΝ, ΧΡΥΣΟΒΙΤΣΑ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '45221', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΙΩΑΝΝΙΝΩΝ, ΑΝΑΤΟΛΗΣ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '45222', Area: 'ΙΩΑΝΝΙΤΩΝ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '45332', Area: 'ΙΩΑΝΝΙΝΑ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '45333', Area: 'ΙΩΑΝΝΙΝΑ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '45444', Area: 'ΙΩΑΝΝΙΝΑ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '45445', Area: 'ΙΩΑΝΝΙΝΑ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '45500', Area: 'ΑΒΓΟ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΑ ΑΝΑΣΤΑΣΙΑ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΑ ΚΥΡΙΑΚΗ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΑ ΜΑΡΙΝΑ ΚΡΥΑΣ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΜΕΛΙΑΣ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΑ ΤΡΙΑΔΑ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΑ ΤΡΙΑΔΑ ΜΕΛΙΓΩΝ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΟΙ ΑΝΑΡΓΥΡΟΙ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΟΙ ΑΠΟΣΤΟΛΟΙ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΣΚΛΙΒΑΝΗΣ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΟΣ ΜΗΝΑΣ ΜΙΚΡΗΣ ΓΟΤΙΣΤΑΣ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΟΣ ΧΡΙΣΤΟΦΟΡΟΣ ΓΙΟΥΡΓΑΝΙΣΤΑΣ ΙΩΑΝΝΙΝΩΝ, ΑΓΙΟΣ ΧΡΙΣΤΟΦΟΡΟΣ ΣΚΛΙΒΑΝΗΣ ΙΩΑΝΝΙΝΩΝ, ΑΜΜΟΣ ΙΩΑΝΝΙΝΩΝ, ΑΜΠΕΛΑΚΙΑ ΙΩΑΝΝΙΝΩΝ, ΑΜΠΕΛΕΙΑ ΙΩΑΝΝΙΝΩΝ, ΑΜΦΙΘΕΑ ΙΩΑΝΝΙΝΩΝ, ΑΝΑΡΓΥΡΟΙ ΙΩΑΝΝΙΝΩΝ, ΑΝΑΤΟΛΙΚΗ ΙΩΑΝΝΙΝΩΝ, ΑΝΘΟΧΩΡΙ ΔΩΔΩΝΗΣ ΙΩΑΝΝΙΝΩΝ, ΑΝΩ ΛΑΨΙΣΤΑ ΙΩΑΝΝΙΝΩΝ, ΑΝΩ ΜΟΥΣΙΩΤΙΤΣΑ ΙΩΑΝΝΙΝΩΝ, ΑΡΤΟΠΟΥΛΑ ΙΩΑΝΝΙΝΩΝ, ΑΣΒΕΣΤΟΧΩΡΙ ΙΩΑΝΝΙΝΩΝ, ΑΣΠΡΟΧΩΜΑ ΙΩΑΝΝΙΝΩΝ, ΑΣΠΡΟΧΩΡΙ ΙΩΑΝΝΙΝΩΝ, ΑΣΦΑΚΑ ΙΩΑΝΝΙΝΩΝ, ΑΥΧΕΝΑΣ ΙΩΑΝΝΙΝΩΝ, ΒΑΓΕΝΙΤΙ ΙΩΑΝΝΙΝΩΝ, ΒΑΘΥΠΕΔΟ ΙΩΑΝΝΙΝΩΝ, ΒΑΠΤΙΣΤΗΣ ΙΩΑΝΝΙΝΩΝ, ΒΑΡΛΑΑΜ ΙΩΑΝΝΙΝΩΝ, ΒΑΣΑΙΙΚΑ ΙΩΑΝΝΙΝΩΝ, ΒΑΣΙΛΙΚΗ ΙΩΑΝΝΙΝΩΝ, ΒΕΛΙΣΣΑΡΙΟΣ ΙΩΑΝΝΙΝΩΝ, ΒΟΥΛΙΑΣΤΑ ΙΩΑΝΝΙΝΩΝ, ΒΟΥΝΟΠΛΑΓΙΑ ΙΩΑΝΝΙΝΩΝ, ΒΡΥΣΗ ΠΑΣΙΑ ΙΩΑΝΝΙΝΩΝ, ΓΕΡΑΚΑΡΙ ΙΩΑΝΝΙΝΩΝ, ΓΙΟΥΡΓΑΝΙΣΤΑ ΙΩΑΝΝΙΝΩΝ, ΓΚΑΛΝΤΕΡΙΜΙ ΙΩΑΝΝΙΝΩΝ, ΓΚΟΡΤΣΙΕΣ ΙΩΑΝΝΙΝΩΝ, ΓΟΡΙΤΣΑ ΙΩΑΝΝΙΝΩΝ, ΓΟΥΛΑΣ ΙΩΑΝΝΙΝΩΝ, ΓΡΑΜΜΕΝΟ ΙΩΑΝΝΙΝΩΝ, ΔΑΦΝΟΥΛΑ ΙΩΑΝΝΙΝΩΝ, ΔΕΛΒΙΝΑΚΟΠΟΥΛΟ ΙΩΑΝΝΙΝΩΝ, ΔΡΑΓΟΨΑ ΙΩΑΝΝΙΝΩΝ, ΔΡΑΜΕΣΙΟΙ ΙΩΑΝΝΙΝΩΝ, ΔΡΙΣΚΟΣ ΙΩΑΝΝΙΝΩΝ, ΔΡΟΣΟΧΩΡΙ ΙΩΑΝΝΙΝΩΝ, ΔΩΔΩΝΗ ΙΩΑΝΝΙΝΩΝ, ΕΙΣΟΔΙΑ ΘΕΟΤΟΚΟΥ ΙΩΑΝΝΙΝΩΝ, ΕΛΕΟΥΣΑ ΙΩΑΝΝΙΝΩΝ, ΕΛΕΥΘΕΡΟΧΩΡΙ ΙΩΑΝΝΙΝΩΝ, ΕΞΟΧΗ ΠΕΡΑΜΑΤΟΣ ΙΩΑΝΝΙΝΩΝ, ΕΠΙΣΚΟΠΙΚΟ ΙΩΑΝΝΙΝΩΝ, ΖΑΝΑΙΟΙ ΙΩΑΝΝΙΝΩΝ, ΖΟΡΓΙΑΝΝΗ ΙΩΑΝΝΙΝΩΝ, ΖΩΟΔΟΧΟΣ ΙΩΑΝΝΙΝΩΝ, ΖΩΟΔΟΧΟΣ ΠΗΓΗ ΙΩΑΝΝΙΝΩΝ, ΗΛΙΟΚΑΛΗ ΙΩΑΝΝΙΝΩΝ, ΘΕΡΙΑΚΗΣΙ ΙΩΑΝΝΙΝΩΝ, ΚΑΒΑΛΛΑΡΙΟ ΙΩΑΝΝΙΝΩΝ, ΚΑΜΠΟΣ ΨΗΝΑΣ ΙΩΑΝΝΙΝΩΝ, ΚΑΝΝΕΤΑ ΙΩΑΝΝΙΝΩΝ, ΚΑΡΑΔΗΜΑΣ ΙΩΑΝΝΙΝΩΝ, ΚΑΡΔΑΜΙΤΣΙΑ ΙΩΑΝΝΙΝΩΝ, ΚΑΡΥΕΣ ΑΝΑΤΟΛΙΚΟΥ ΖΑΓΟΡΙΟΥ ΙΩΑΝΝΙΝΩΝ, ΚΑΡΥΕΣ ΑΣΦΑΚΑΣ ΙΩΑΝΝΙΝΩΝ, ΚΑΡΥΟΦΥΤΟ ΙΩΑΝΝΙΝΩΝ, ΚΑΣΤΡΙ ΜΕΓΑΛΟΥ ΠΕΡΙΣΤΕΡΙΟΥ ΙΩΑΝΝΙΝΩΝ, ΚΑΣΤΡΙΤΣΑ ΙΩΑΝΝΙΝΩΝ, ΚΑΤΑΒΟΘΡΑ ΙΩΑΝΝΙΝΩΝ, ΚΑΤΣΙΚΑΣ ΙΩΑΝΝΙΝΩΝ, ΚΑΤΩ ΑΣΠΡΟΧΩΡΙ ΙΩΑΝΝΙΝΩΝ, ΚΑΤΩ ΚΡΥΦΟΒΟ ΙΩΑΝΝΙΝΩΝ, ΚΑΤΩ ΛΑΨΙΣΤΑ ΙΩΑΝΝΙΝΩΝ, ΚΑΤΩ ΜΑΡΜΑΡΑ ΙΩΑΝΝΙΝΩΝ, ΚΑΤΩ ΜΟΥΣΙΩΤΙΤΣΑ ΙΩΑΝΝΙΝΩΝ, ΚΑΤΩ ΝΕΟΧΩΡΟΠΟΥΛΟ ΙΩΑΝΝΙΝΩΝ, ΚΕΔΡΟΣ ΙΩΑΝΝΙΝΩΝ, ΚΕΡΑΣΙΑ ΙΩΑΝΝΙΝΩΝ, ΚΗΠΟΙ ΜΑΖΙΑΣ ΙΩΑΝΝΙΝΩΝ, ΚΟΚΚΙΝΟΧΩΜΑ ΙΩΑΝΝΙΝΩΝ, ΚΟΛΥΖΩΑΙΟΙ ΙΩΑΝΝΙΝΩΝ, ΚΟΛΩΝΙΑΤΙ ΙΩΑΝΝΙΝΩΝ, ΚΟΝΤΙΝΟΙ ΙΩΑΝΝΙΝΩΝ, ΚΟΝΤΣΙΚΑ ΙΩΑΝΝΙΝΩΝ, ΚΟΠΑΝΗ ΙΩΑΝΝΙΝΩΝ, ΚΟΡΔΟΛΟΙΑ ΙΩΑΝΝΙΝΩΝ, ΚΟΣΜΗΡΑ ΙΩΑΝΝΙΝΩΝ, ΚΟΤΟΜΙΣΤΑ ΙΩΑΝΝΙΝΩΝ, ΚΟΥΛΟΥΡΑΙΙΚΑ ΙΩΑΝΝΙΝΩΝ, ΚΟΥΜΑΡΙΑ ΙΩΑΝΝΙΝΩΝ, ΚΟΥΡΕΝΤΑ ΙΩΑΝΝΙΝΩΝ, ΚΟΥΤΣΕΛΙ ΙΩΑΝΝΙΝΩΝ, ΚΡΑΝΟΥΛΑ ΙΩΑΝΝΙΝΩΝ, ΚΡΑΨΗ ΙΩΑΝΝΙΝΩΝ, ΚΡΥΑ ΙΩΑΝΝΙΝΩΝ, ΚΡΥΟΒΡΥΣΗ ΙΩΑΝΝΙΝΩΝ, ΚΡΥΦΟΒΟ ΙΩΑΝΝΙΝΩΝ, ΚΥΠΑΡΙΣΣΙΑ ΙΩΑΝΝΙΝΩΝ, ΚΩΣΤΑΝΙΑΝΗ ΙΩΑΝΝΙΝΩΝ, ΛΑΓΚΙΩΤΙΣΣΑ ΙΩΑΝΝΙΝΩΝ, ΛΑΛΙΖΑ ΙΩΑΝΝΙΝΩΝ, ΛΕΡΟΥΣΚΟ ΙΩΑΝΝΙΝΩΝ, ΛΙΓΚΙΑΔΕΣ ΙΩΑΝΝΙΝΩΝ, ΛΟΓΓΑΔΕΣ ΙΩΑΝΝΙΝΩΝ, ΛΟΦΙΣΚΟΣ ΙΩΑΝΝΙΝΩΝ, ΛΥΓΓΟΣ ΙΩΑΝΝΙΝΩΝ, ΛΥΚΟΣΤΑΝΗ ΙΩΑΝΝΙΝΩΝ, ΛΥΚΟΣΤΟΜΟ ΙΩΑΝΝΙΝΩΝ, ΛΥΚΟΤΡΙΧΙ  (ΑΓ.ΜΑΡΙΝΑ ΚΡΥΑ) ΙΩΑΝΝΙΝΩΝ, ΜΑΒΙΛΛΗΣ ΙΩΑΝΝΙΝΩΝ, ΜΑΖΙΑ ΙΩΑΝΝΙΝΩΝ, ΜΑΝΔΡΕΣ ΙΩΑΝΝΙΝΩΝ, ΜΑΝΟΛΙΑΣΑ ΙΩΑΝΝΙΝΩΝ, ΜΑΝΤΕΙΟ ΙΩΑΝΝΙΝΩΝ, ΜΑΡΜΑΡΑ ΙΩΑΝΝΙΝΩΝ, ΜΕΓΑΛΗ ΓΟΤΙΣΤΑ ΙΩΑΝΝΙΝΩΝ, ΜΕΓΑΛΟ ΓΑΡΔΙΚΙ ΙΩΑΝΝΙΝΩΝ, ΜΕΓΑΛΟ ΠΕΡΙΣΤΕΡΙ ΙΩΑΝΝΙΝΩΝ, ΜΕΛΙΑ ΙΩΑΝΝΙΝΩΝ, ΜΕΛΙΓΓΟΙ ΙΩΑΝΝΙΝΩΝ, ΜΕΣΟΥΡΑ ΙΩΑΝΝΙΝΩΝ, ΜΕΤΑΜΟΡΦΩΣΗ  (πρώην ΚΑΡΥΕΣ) ΙΩΑΝΝΙΝΩΝ, ΜΗΛΙΕΣ ΙΩΑΝΝΙΝΩΝ, ΜΗΛΙΩΤΑΔΕΣ ΙΩΑΝΝΙΝΩΝ, ΜΙΚΡΑ ΓΟΤΙΣΤΑ ΙΩΑΝΝΙΝΩΝ, ΜΙΚΡΟ ΓΑΡΔΙΚΙ ΙΩΑΝΝΙΝΩΝ, ΜΙΧΑΛΙΤΣΙ ΙΩΑΝΝΙΝΩΝ, ΜΟΛΥΒΑΔΙΑ ΙΩΑΝΝΙΝΩΝ, ΜΟΣΠΙΝΑ  (ΛΥΓΓΟΣ) ΙΩΑΝΝΙΝΩΝ, ΜΟΥΖΑΚΑΙΟΙ ΙΩΑΝΝΙΝΩΝ, ΜΟΥΣΙΩΤΙΤΣΑ ΙΩΑΝΝΙΝΩΝ, ΜΠΑΓΑΙΟΙ ΙΩΑΝΝΙΝΩΝ, ΜΠΑΛΤΟΥΜΑ ΙΩΑΝΝΙΝΩΝ, ΜΠΑΟΥΣΙΟΙ ΙΩΑΝΝΙΝΩΝ, ΜΠΑΤΖΑ ΙΩΑΝΝΙΝΩΝ, ΜΠΑΦΡΑ ΙΩΑΝΝΙΝΩΝ, ΜΠΕΡΚΟ ΙΩΑΝΝΙΝΩΝ, ΜΠΙΖΑΝΙ ΙΩΑΝΝΙΝΩΝ, ΜΠΟΥΛΜΟΥ ΙΩΑΝΝΙΝΩΝ, ΜΥΡΟΔΑΦΝΗ ΙΩΑΝΝΙΝΩΝ, ΝΕΑ ΜΟΥΣΙΩΤΙΤΣΑ ΙΩΑΝΝΙΝΩΝ, ΝΕΟ ΜΠΙΖΑΝΙ ΙΩΑΝΝΙΝΩΝ, ΝΕΟΚΑΙΣΑΡΕΙΑ ΙΩΑΝΝΙΝΩΝ, ΝΕΟΧΩΡΟΠΟΥΛΟ ΙΩΑΝΝΙΝΩΝ, ΝΗΣΟΣ ΙΩΑΝΝΙΝΩΝ ΙΩΑΝΝΙΝΩΝ, ΟΛΥΜΠΙΑΔΑ ΙΩΑΝΝΙΝΩΝ, ΠΑΛΑΙΟΓΚΟΡΤΣΙΑ ΚΡΑΨΗΣ ΙΩΑΝΝΙΝΩΝ, ΠΑΛΑΙΟΧΩΡΙ ΑΒΓΟΥ ΙΩΑΝΝΙΝΩΝ, ΠΑΛΑΙΟΧΩΡΙ ΚΟΠΑΝΗΣ ΙΩΑΝΝΙΝΩΝ, ΠΑΛΑΙΟΧΩΡΙ ΣΙΡΑΚΟΥ ΙΩΑΝΝΙΝΩΝ, ΠΑΛΙΑ ΑΛΩΝΑΚΙΑ ΙΩΑΝΝΙΝΩΝ, ΠΕΔΙΝΗ ΙΩΑΝΝΙΝΩΝ, ΠΕΝΤΕΛΗ ΙΩΑΝΝΙΝΩΝ, ΠΕΡΑΜΑ ΙΩΑΝΝΙΝΩΝ, ΠΕΡΑΤΗΣ ΙΩΑΝΝΙΝΩΝ, ΠΕΡΔΙΚΑ ΙΩΑΝΝΙΝΩΝ, ΠΕΡΙΒΛΕΠΤΟΣ ΙΩΑΝΝΙΝΩΝ, ΠΕΣΙΜΟ ΙΩΑΝΝΙΝΩΝ, ΠΕΣΤΑ ΙΩΑΝΝΙΝΩΝ, ΠΕΤΡΑΛΩΝΑ ΙΩΑΝΝΙΝΩΝ, ΠΕΤΡΟΒΟΥΝΙ ΙΩΑΝΝΙΝΩΝ, ΠΕΤΣΑΛΗ ΙΩΑΝΝΙΝΩΝ, ΠΛΑΤΑΝΙΑ ΓΕΡΑΚΑΡΙΟΥ ΙΩΑΝΝΙΝΩΝ, ΠΛΑΤΑΝΙΑ ΔΩΔΩΝΗΣ ΙΩΑΝΝΙΝΩΝ, ΠΛΑΤΑΝΟΣ ΙΩΑΝΝΙΝΩΝ, ΠΟΛΥΓΥΡΟΣ ΙΩΑΝΝΙΝΩΝ, ΠΟΛΥΛΟΦΟ ΙΩΑΝΝΙΝΩΝ, ΠΟΤΑΜΙΑ ΚΡΥΟΒΡΥΣΗΣ ΙΩΑΝΝΙΝΩΝ, ΠΟΤΑΜΙΑ ΜΠΑΛΤΟΥΜΑΣ ΙΩΑΝΝΙΝΩΝ, ΠΟΤΙΣΤΙΚΑ ΙΩΑΝΝΙΝΩΝ, ΠΟΥΡΝΑΡΙ ΙΩΑΝΝΙΝΩΝ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΣΚΛΙΒΑΝΗΣ ΙΩΑΝΝΙΝΩΝ, ΡΑΒΕΝΙΑ ΙΩΑΝΝΙΝΩΝ, ΡΑΧΗ ΙΩΑΝΝΙΝΩΝ, ΡΑΨΑΙΟΙ ΙΩΑΝΝΙΝΩΝ, ΡΙΖΑ ΙΩΑΝΝΙΝΩΝ, ΡΟΒΙΛΙΣΤΟ ΙΩΑΝΝΙΝΩΝ, ΡΟΔΟΤΟΠΙ ΙΩΑΝΝΙΝΩΝ, ΣΕΡΒΙΑΝΑ ΙΩΑΝΝΙΝΩΝ, ΣΙΟΥΤΣΟΣ ΙΩΑΝΝΙΝΩΝ, ΣΚΛΙΒΑΝΗ ΙΩΑΝΝΙΝΩΝ, ΣΠΗΛΑΙΟ ΙΩΑΝΝΙΝΩΝ, ΣΠΟΘΟΙ ΙΩΑΝΝΙΝΩΝ, ΣΤΑΜΑΤΗΣ ΙΩΑΝΝΙΝΩΝ, ΣΤΑΥΡΑΚΙ ΙΩΑΝΝΙΝΩΝ, ΣΤΑΥΡΟΣ ΙΩΑΝΝΙΝΩΝ, ΣΥΝΟΙΚΙΣΜΟΣ ΚΟΝΤΣΙΚΑΣ ΙΩΑΝΝΙΝΩΝ, ΤΑΞΙΑΡΧΕΣ ΙΩΑΝΝΙΝΩΝ, ΤΕΡΟΒΟ ΙΩΑΝΝΙΝΩΝ, ΤΡΙΑΝΤΑΦΥΛΛΟΣ ΙΩΑΝΝΙΝΩΝ, ΤΣΙΜΟΒΟ  (ΧΑΡΟΚΟΠΙ) ΙΩΑΝΝΙΝΩΝ, ΤΣΙΦΛΙΚΟΠΟΥΛΟ ΙΩΑΝΝΙΝΩΝ, ΤΥΡΙΑ ΙΩΑΝΝΙΝΩΝ, ΦΙΛΟΘΕΗ ΑΜΠΕΛΕΙΑΣ ΙΩΑΝΝΙΝΩΝ, ΦΤΕΛΙΑ ΙΩΑΝΝΙΝΩΝ, ΧΑΝΙ ΤΕΡΟΒΟΥ ΙΩΑΝΝΙΝΩΝ, ΧΑΡΟΚΟΠΙ ΙΩΑΝΝΙΝΩΝ, ΧΙΝΚΑ ΙΩΑΝΝΙΝΩΝ, ΧΙΟΝΑΣΑ ΙΩΑΝΝΙΝΩΝ, ΧΟΥΛΙΑΡΑΔΕΣ ΙΩΑΝΝΙΝΩΝ, ΧΩΡΑ ΙΩΑΝΝΙΝΩΝ, ΨΗΝΑ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '45550', Area: 'ΙΩΑΝΝΙΤΩΝ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '45560', Area: 'ΙΩΑΝΝΙΤΩΝ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '45570', Area: 'ΙΩΑΝΝΙΤΩΝ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '45580', Area: 'ΙΩΑΝΝΙΤΩΝ ΙΩΑΝΝΙΝΩΝ', Prefecture: 'Ιωαννίνων' },
    { PostalCode: '64001', Area: 'ΑΓΙΟΣ ΧΡΙΣΤΟΦΟΡΟΣ ΚΑΒΑΛΑΣ, ΓΕΩΡΓΙΑΝΗ ΚΑΒΑΛΑΣ, ΝΙΚΗΣΙΑΝΗ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '64002', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΛΙΜΕΝΑΡΙΩΝ  ΘΑΣΟΥ ΚΑΒΑΛΑΣ, ΑΣΤΡΙΣ  ΚΑΒΑΛΑΣ, ΘΥΜΩΝΙΑ  ΚΑΒΑΛΑΣ, ΚΑΣΤΡΟ  ΚΑΒΑΛΑΣ, ΛΙΜΕΝΑΡΙΑ  ΘΑΣΟΥ ΚΑΒΑΛΑΣ, ΜΑΡΙΕΣ  ΚΑΒΑΛΑΣ, ΠΕΥΚΑΡΙ  ΚΑΒΑΛΑΣ, ΠΟΤΟΣ  ΚΑΒΑΛΑΣ, ΣΚΑΛΑ ΜΑΡΙΩΝ  ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '64003', Area: 'ΑΕΡΟΔΡΟΜΙΟ ΚΑΒΑΛΑΣ (ΠΑΛΙΟ) ΚΑΒΑΛΑΣ, ΒΟΥΝΟΧΩΡΙ ΚΑΒΑΛΑΣ, ΒΡΥΣΟΥΛΑ ΚΑΒΑΛΑΣ, ΔΑΤΟ ΚΑΒΑΛΑΣ, ΚΡΗΝΙΔΕΣ ΚΑΒΑΛΑΣ, ΛΙΜΝΙΑ ΚΑΒΑΛΑΣ, ΛΥΔΙΑ ΚΑΒΑΛΑΣ, ΜΙΚΡΟΧΩΡΙ ΚΑΒΑΛΑΣ, ΠΟΛΥΣΤΥΛΟ ΚΑΒΑΛΑΣ, ΠΡΟΣΦΥΓΕΣ ΚΑΒΑΛΑΣ, ΦΙΛΙΠΠΟΙ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '64004', Area: 'ΑΛΥΚΗ ΚΑΒΑΛΑΣ, ΓΛΥΦΑΔΑ  ΚΑΒΑΛΑΣ, ΘΑΣΟΣ ΚΑΒΑΛΑΣ, ΚΟΙΝΥΡΑ ΘΕΟΛΟΓΟΥ ΚΑΒΑΛΑΣ, ΚΟΙΝΥΡΑ ΝΗΣΟΣ ΚΑΒΑΛΑΣ, ΛΕΥΚΗ ΘΑΣΟΥ ΚΑΒΑΛΑΣ, ΜΑΚΡΥΑΜΜΟΣ  ΚΑΒΑΛΑΣ, ΜΕΓΑΛΟΣ ΠΡΙΝΟΣ ΚΑΒΑΛΑΣ, ΜΟΝΗ ΑΡΧΑΓΓΕΛΟΥ  ΚΑΒΑΛΑΣ, ΠΑΛΑΙΟΧΩΡΙ  ΘΑΣΟΥ ΚΑΒΑΛΑΣ, ΠΑΝΑΓΙΑ ΘΑΣΟΥ ΚΑΒΑΛΑΣ, ΠΟΤΑΜΙΑ ΚΑΒΑΛΑΣ, ΧΡΥΣΗ ΑΚΤΗ  ΚΑΒΑΛΑΣ, ΧΡΥΣΗ ΑΜΜΟΥΔΙΑ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '64006', Area: 'ΑΝΩ ΛΕΥΚΗ ΚΑΒΑΛΑΣ, ΛΕΥΚΗ ΝΕΑΣ ΚΑΡΒΑΛΗΣ ΚΑΒΑΛΑΣ, ΝΕΑ ΚΑΡΒΑΛΗ ΚΑΒΑΛΑΣ, ΧΑΛΚΕΡΟ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '64007', Area: 'ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΚΑΒΑΛΑΣ, ΑΠΟΒΑΘΡΑ ΚΑΒΑΛΑΣ, ΕΛΑΙΟΧΩΡΙ ΚΑΒΑΛΑΣ, ΕΛΕΥΘΕΡΕΣ ΚΑΒΑΛΑΣ, ΜΥΡΤΟΦΥΤΟ ΚΑΒΑΛΑΣ, ΝΕΑ ΗΡΑΚΛΙΤΣΑ ΚΑΒΑΛΑΣ, ΝΕΑ ΠΕΡΑΜΟΣ ΚΑΒΑΛΑΣ, ΠΑΡΑΛΙΑ ΕΛΑΙΟΧΩΡΙΟΥ ΚΑΒΑΛΑΣ, ΠΑΡΑΛΙΑ ΜΥΡΤΟΦΥΤΟΥ ΚΑΒΑΛΑΣ, ΠΥΡΓΟΣ ΚΑΒΑΛΑΣ, ΣΑΡΑΝΤΑ ΚΑΒΑΛΑΣ, ΦΩΛΕΑ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '64008', Area: 'ΑΚΡΟΠΟΤΑΜΟΣ ΚΑΒΑΛΑΣ, ΑΥΛΗ ΚΑΒΑΛΑΣ, ΒΡΥΣΗ ΚΑΒΑΛΑΣ, ΓΑΛΗΨΟΣ ΚΑΒΑΛΑΣ, ΔΩΜΑΤΙΑ ΚΑΒΑΛΑΣ, ΚΑΡΑΒΑΓΓΕΛΗΣ ΚΑΒΑΛΑΣ, ΚΑΡΙΑΝΗ ΚΑΒΑΛΑΣ, ΚΟΚΚΙΝΟΧΩΡΙ ΚΑΒΑΛΑΣ, ΛΟΥΤΡΑ ΕΛΕΥΘΕΡΩΝ ΚΑΒΑΛΑΣ, ΜΕΓΑΣ ΑΛΕΞΑΝΔΡΟΣ  ΚΑΒΑΛΑΣ, ΜΕΛΙΣΣΟΚΟΜΕΙΟ ΚΑΒΑΛΑΣ, ΜΕΣΟΡΟΠΗ ΚΑΒΑΛΑΣ, ΜΟΥΣΘΕΝΗ ΚΑΒΑΛΑΣ, ΟΡΦΑΝΙΟ ΚΑΒΑΛΑΣ, ΟΦΡΥΝΙΟ ΚΑΒΑΛΑΣ, ΠΑΡΑΛΙΑ ΟΦΡΥΝΙΟΥ ΚΑΒΑΛΑΣ, ΠΛΑΤΑΝΟΤΟΠΟΣ ΚΑΒΑΛΑΣ, ΠΟΔΟΧΩΡΙ ΚΑΒΑΛΑΣ, ΠΥΡΓΟΧΩΡΙ ΚΑΒΑΛΑΣ, ΣΙΔΗΡΟΧΩΡΙ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '64009', Area: 'ΑΓΙΟΣ ΚΟΣΜΑΣ ΚΑΒΑΛΑΣ, ΔΙΠΟΤΑΜΟΣ ΚΑΒΑΛΑΣ, ΚΕΧΡΟΚΑΜΠΟΣ ΚΑΒΑΛΑΣ, ΛΕΚΑΝΗ ΚΑΒΑΛΑΣ, ΝΙΚΗΤΕΣ ΚΑΒΑΛΑΣ, ΠΛΑΤΑΜΩΝΑΣ ΚΑΒΑΛΑΣ, ΠΛΑΤΑΝΙΑ ΚΑΒΑΛΑΣ, ΣΚΟΠΟΣ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '64010', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΡΑΧΩΝΙΟΥ ΚΑΒΑΛΑΣ, ΑΚΤΗ ΚΑΒΑΛΑΣ, ΙΕΡΑ ΜΟΝΗ ΑΓΙΟΥ ΠΑΝΤΕΛΕΗΜΩΝΑ ΘΑΣΟΥ ΚΑΒΑΛΑΣ, ΚΑΛΛΙΡΑΧΗ  ΚΑΒΑΛΑΣ, ΜΙΚΡΟΣ ΠΡΙΝΟΣ  ΚΑΒΑΛΑΣ, ΟΡΜΟΣ ΠΡΙΝΟΥ  ΘΑΣΟΥ ΚΑΒΑΛΑΣ, ΠΑΧΥΣ  ΚΑΒΑΛΑΣ, ΠΡΙΝΟΣ  ΚΑΒΑΛΑΣ, ΡΑΧΩΝΙ  ΚΑΒΑΛΑΣ, ΣΚΑΛΑ ΚΑΛΛΙΡΑΧΗΣ ΚΑΒΑΛΑΣ, ΣΚΑΛΑ ΡΑΧΩΝΙΟΥ  ΚΑΒΑΛΑΣ, ΣΚΑΛΑ ΣΩΤΗΡΟΣ  ΚΑΒΑΛΑΣ, ΣΩΤΗΡΟΣ  ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '64012', Area: 'ΑΜΥΓΔΑΛΕΩΝΑΣ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '64100', Area: 'ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΚΑΒΑΛΑΣ, ΑΜΙΣΙΑΝΑ ΚΑΒΑΛΑΣ, ΑΝΤΙΦΙΛΙΠΠΟΙ ΚΑΒΑΛΑΣ, ΑΝΩ ΧΟΡΤΟΚΟΠΙ ΚΑΒΑΛΑΣ, ΒΛΑΧΙΚΟ (ΝΕΟ ΣΥΡΑΚΟ) ΚΑΒΑΛΑΣ, ΕΛΕΥΘΕΡΟΥΠΟΛΗ ΚΑΒΑΛΑΣ, ΕΞΟΧΗ ΚΑΒΑΛΑΣ, ΙΕΡΑ ΜΟΝΗ ΑΓΙΟΥ ΠΑΝΤΕΛΕΗΜΩΝΑ ΠΑΓΓΑΙΟΥ ΚΑΒΑΛΑΣ, ΚΗΠΙΑ ΚΑΒΑΛΑΣ, ΚΟΚΚΙΝΟΧΩΜΑ ΚΑΒΑΛΑΣ, ΜΕΛΙΣΣΑ ΚΑΒΑΛΑΣ, ΜΕΣΙΑ ΚΑΒΑΛΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΠΑΓΓΑΙΟΥ ΚΑΒΑΛΑΣ, ΠΑΝΑΓΙΑ ΠΑΓΓΑΙΟΥ ΚΑΒΑΛΑΣ, ΧΟΡΤΟΚΟΠΙ ΚΑΒΑΛΑΣ, ΧΡΥΣΟΚΑΣΤΡΟ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '64200', Area: 'ΑΒΡΑΜΗΛΙΑ ΚΑΒΑΛΑΣ, ΑΕΡΟΔΡΟΜΙΟ ΜΕΓΑΣ ΑΛΕΞΑΝΔΡΟΣ ΚΑΒΑΛΑΣ, ΑΝΩ ΠΟΝΤΟΛΙΒΑΔΟ ΚΑΒΑΛΑΣ, ΓΕΡΟΝΤΑΣ ΚΑΒΑΛΑΣ, ΓΡΑΒΟΥΝΑ  ΚΑΒΑΛΑΣ, ΔΑΜΑΣΚΗΝΙΑ ΚΑΒΑΛΑΣ, ΔΙΑΛΕΚΤΟ ΚΑΒΑΛΑΣ, ΔΥΣΒΑΤΟ ΚΑΒΑΛΑΣ, ΕΚΑΛΗ ΚΑΒΑΛΑΣ, ΕΚΛΕΚΤΟ ΚΑΒΑΛΑΣ, ΕΛΑΦΟΧΩΡΙ ΚΑΒΑΛΑΣ, ΕΡΑΤΕΙΝΟ ΚΑΒΑΛΑΣ, ΖΑΡΚΑΔΙΑ ΚΑΒΑΛΑΣ, ΚΡΗΝΗ ΚΑΒΑΛΑΣ, ΚΡΥΟΝΕΡΙ ΟΡΕΙΝΟΥ ΚΑΒΑΛΑΣ, ΜΑΚΡΥΧΩΡΙ ΚΑΒΑΛΑΣ, ΝΕΑ ΚΑΡΥΑ ΚΑΒΑΛΑΣ, ΝΕΑ ΚΩΜΗ ΚΑΒΑΛΑΣ, ΝΕΟΣ ΞΕΡΙΑΣ ΚΑΒΑΛΑΣ, ΠΑΡΑΔΕΙΣΟΣ ΚΑΒΑΛΑΣ, ΠΕΡΝΗ ΚΑΒΑΛΑΣ, ΠΕΤΡΟΠΗΓΗ ΚΑΒΑΛΑΣ, ΠΟΝΤΟΛΙΒΑΔΟ ΚΑΒΑΛΑΣ, ΣΤΕΓΝΟ ΚΑΒΑΛΑΣ, ΣΤΡΑΤΩΝΕΣ ΚΑΒΑΛΑΣ, ΧΡΥΣΟΥΠΟΛΗ ΚΑΒΑΛΑΣ, ΧΡΥΣΟΧΩΡΙ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '65201', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΚΑΒΑΛΑΣ, ΑΣΠΡΗ ΑΜΜΟΣ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '65302', Area: 'ΚΑΒΑΛΑ ΚΑΒΑΛΑΣ, ΣΑΝΑΤΟΡΙΟ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '65303', Area: 'ΚΑΒΑΛΑΣ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '65403', Area: 'ΚΑΒΑΛΑ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '65404', Area: 'ΚΑΒΑΛΑ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '65500', Area: 'ΑΓΙΟΣ ΣΥΛΛΑΣ ΚΑΒΑΛΑΣ, ΖΥΓΟΣ ΚΑΒΑΛΑΣ, ΚΟΡΥΦΕΣ ΚΑΒΑΛΑΣ, ΚΡΑΝΟΧΩΡΙ ΚΑΒΑΛΑΣ, ΚΡΥΟΝΕΡΙ ΦΙΛΙΠΠΩΝ ΚΑΒΑΛΑΣ, ΛΥΚΟΣΤΟΜΟ ΚΑΒΑΛΑΣ, ΠΑΛΑΙΑ ΚΑΒΑΛΑ ΚΑΒΑΛΑΣ, ΠΑΛΑΙΟ ΤΣΙΦΛΙΚΙ ΚΑΒΑΛΑΣ, ΠΟΛΥΝΕΡΟ ΚΑΒΑΛΑΣ', Prefecture: 'Καβάλας' },
    { PostalCode: '43060', Area: 'ΑΜΥΓΔΑΛΗ ΚΑΡΔΙΤΣΗΣ, ΑΝΘΟΧΩΡΙ ΚΑΡΔΙΤΣΗΣ, ΑΝΟΙΞΙΑΤΙΚΟ ΚΑΡΔΙΤΣΗΣ, ΑΡΠΑΚΙΑ ΚΑΡΔΙΤΣΗΣ, ΒΑΓΕΝΙΑ ΚΑΡΔΙΤΣΗΣ, ΒΑΤΣΟΥΝΙΑ ΚΑΡΔΙΤΣΗΣ, ΓΕΛΑΝΘΗ ΚΑΡΔΙΤΣΗΣ, ΓΕΩΡΓΙΟΣ ΚΑΡΑΙΣΚΑΚΗΣ ΚΑΡΔΙΤΣΗΣ, ΓΡΑΒΙΑ ΚΑΡΔΙΤΣΗΣ, ΔΑΦΝΗ ΟΞΥΑΣ ΚΑΡΔΙΤΣΗΣ, ΔΡΑΚΟΤΡΥΠΑ ΚΑΡΔΙΤΣΗΣ, ΕΛΛΗΝΟΚΑΣΤΡΟ ΚΑΡΔΙΤΣΗΣ, ΖΑΜΑΝΑΤΙΚΟ ΚΑΡΔΙΤΣΗΣ, ΚΕΡΑΜΑΡΓΙΩ ΚΑΡΔΙΤΣΗΣ, ΚΟΥΡΑ ΚΑΡΔΙΤΣΗΣ, ΚΡΥΟΠΗΓΗ ΚΑΡΔΙΤΣΗΣ, ΛΑΖΑΡΙΝΑ ΚΑΡΔΙΤΣΗΣ, ΛΑΚΚΕΣ ΚΑΡΔΙΤΣΗΣ, ΜΑΝΤΖΙΟΥΡΑΙΪΚΑ ΚΑΡΔΙΤΣΗΣ, ΜΑΡΤΙΝΙ ΚΑΡΔΙΤΣΗΣ, ΜΑΥΡΟΜΜΑΤΙ ΚΑΡΔΙΤΣΗΣ, ΜΕΓΑΛΗ ΒΡΥΣΗ ΚΑΡΔΙΤΣΗΣ, ΜΕΛΙΓΟΣ ΚΑΡΔΙΤΣΗΣ, ΜΕΣΟΡΡΑΧΗ ΟΞΥΑΣ ΚΑΡΔΙΤΣΗΣ, ΜΕΣΟΡΡΑΧΗ ΠΕΤΡΙΝΟΥ ΚΑΡΔΙΤΣΗΣ, ΜΗΛΕΕΣ ΚΑΡΔΙΤΣΗΣ, ΜΟΝΗ ΑΓΙΑΣ ΤΡΙΑΔΑΣ ΚΑΡΔΙΤΣΗΣ, ΜΟΝΗ ΑΓΙΟΥ ΓΕΩΡΓΙΟΥ ΚΑΡΔΙΤΣΗΣ, ΜΟΥΖΑΚΙ ΚΑΡΔΙΤΣΗΣ, ΝΗΣΙΑ ΚΑΡΔΙΤΣΗΣ, ΞΗΡΟΚΑΜΠΟΣ ΚΑΡΔΙΤΣΗΣ, ΟΞΥΑ ΚΑΡΔΙΤΣΗΣ, ΠΑΔΗ ΚΑΡΔΙΤΣΗΣ, ΠΑΛΑΙΑΜΠΕΛΑ ΚΑΡΔΙΤΣΗΣ, ΠΑΛΑΙΟΚΑΣΤΡΟ ΚΑΡΔΙΤΣΗΣ, ΠΑΛΑΙΟΧΩΡΙ ΚΑΡΔΙΤΣΑΣ ΚΑΡΔΙΤΣΗΣ, ΠΑΛΑΙΟΧΩΡΙ ΟΞΥΑΣ ΚΑΡΔΙΤΣΗΣ, ΠΑΛΑΙΟΧΩΡΙ ΦΟΥΝΤΩΤΟΥ ΚΑΡΔΙΤΣΗΣ, ΠΕΤΡΩΤΑ ΚΑΡΔΙΤΣΗΣ, ΠΕΥΚΟΦΥΤΟ ΚΑΡΔΙΤΣΗΣ, ΠΛΑΤΑΝΑΚΟΣ ΚΑΡΔΙΤΣΗΣ, ΠΛΑΤΑΝΙΑ ΚΑΡΔΙΤΣΗΣ, ΠΟΡΤΗ ΚΑΡΔΙΤΣΗΣ, ΣΟΥΛΑ ΚΑΡΔΙΤΣΗΣ, ΣΠΑΘΕΣ ΚΑΡΔΙΤΣΗΣ, ΤΡΥΓΟΝΑ ΚΑΡΔΙΤΣΗΣ, ΤΣΑΡΟΥΧΗ ΚΑΡΔΙΤΣΗΣ, ΧΑΡΑΥΓΗ ΚΑΡΔΙΤΣΗΣ', Prefecture: 'Καρδίτσας' },
    { PostalCode: '43061', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΚΑΡΔΙΤΣΗΣ, ΑΓΝΑΝΤΕΡΟ ΚΑΡΔΙΤΣΗΣ, ΚΑΛΟΓΡΙΑΝΑ ΚΑΡΔΙΤΣΗΣ, ΚΟΡΔΑ ΚΑΡΔΙΤΣΗΣ, ΜΑΡΑΘΕΑ ΚΑΡΔΙΤΣΗΣ, ΠΕΔΙΝΟ ΚΑΡΔΙΤΣΗΣ, ΡΙΖΟΒΟΥΝΙ ΚΑΡΔΙΤΣΗΣ, ΣΕΡΒΩΤΑ ΤΡΙΚΑΛΩΝ', Prefecture: 'Καρδίτσας' },
    { PostalCode: '43063', Area: 'ΑΝΑΒΡΑ ΚΑΡΔΙΤΣΗΣ, ΑΣΗΜΟΧΩΡΙ ΚΑΡΔΙΤΣΗΣ, ΑΧΛΑΔΙΑ ΚΑΡΔΙΤΣΗΣ, ΚΑΤΩ ΚΤΙΜΕΝΗ ΚΑΡΔΙΤΣΗΣ, ΚΤΙΜΕΝΗ ΚΑΡΔΙΤΣΗΣ, ΛΕΟΝΤΑΡΙ ΚΑΡΔΙΤΣΗΣ', Prefecture: 'Καρδίτσας' },
    { PostalCode: '43070', Area: 'ΠΡΟΑΣΤΙΟ ΚΑΡΔΙΤΣΗΣ', Prefecture: 'Καρδίτσας' },
    { PostalCode: '43100', Area: 'ΑΓΙΑ ΑΓΑΘΗ ΚΑΡΔΙΤΣΗΣ, ΑΓΙΑ ΜΑΡΙΝΑ ΚΑΡΔΙΤΣΗΣ, ΑΓΙΟΠΗΓΗ ΚΑΡΔΙΤΣΗΣ, ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΛΑΜΠΕΡΟΥ ΚΑΡΔΙΤΣΗΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΚΑΡΔΙΤΣΗΣ, ΑΓΙΟΣ ΘΕΟΔΩΡΟΣ ΚΑΡΔΙΤΣΗΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΜΟΣΧΑΤΟΥ ΚΑΡΔΙΤΣΗΣ, ΑΜΑΡΑΝΤΟΣ ΚΑΡΔΙΤΣΗΣ, ΑΜΠΕΛΑΚΙΑ ΚΑΡΔΙΤΣΗΣ, ΑΜΠΕΛΙΚΟ ΚΑΡΔΙΤΣΗΣ, ΑΝΘΗΡΟ ΚΑΡΟΠΛΕΣΙΟΥ ΚΑΡΔΙΤΣΗΣ, ΑΠΙΔΕΑ ΚΑΡΔΙΤΣΗΣ, ΑΡΤΕΣΙΑΝΟ ΚΑΡΔΙΤΣΗΣ, ΓΕΩΡΓΙΚΟ ΚΑΡΔΙΤΣΗΣ, ΓΙΑΝΝΟΥΣΑΙΙΚΑ ΚΑΡΔΙΤΣΗΣ, ΔΑΦΝΟΣΠΗΛΙΑ ΚΑΡΔΙΤΣΗΣ, ΖΑΙΜΙΟ ΚΑΡΔΙΤΣΗΣ, ΖΩΓΡΙ ΚΑΡΔΙΤΣΗΣ, ΙΤΑΜΟΣ ΚΑΡΔΙΤΣΗΣ, ΚΑΛΛΙΘΗΡΟ ΚΑΡΔΙΤΣΗΣ, ΚΑΛΛΙΦΩΝΙΟ ΚΑΡΔΙΤΣΗΣ, ΚΑΡΔΙΤΣΑ ΚΑΡΔΙΤΣΗΣ, ΚΑΡΔΙΤΣΟΜΑΓΟΥΛΑ ΚΑΡΔΙΤΣΗΣ, ΚΑΡΟΠΛΕΣΙ ΚΑΡΔΙΤΣΗΣ, ΚΑΡΠΟΧΩΡΙ ΚΑΡΔΙΤΣΗΣ, ΚΑΣΤΑΝΕΑ ΚΑΡΔΙΤΣΗΣ, ΚΑΤΑΦΥΓΙ ΚΑΡΔΙΤΣΗΣ, ΚΟΥΚΚΑΙΙΚΑ ΚΑΡΔΙΤΣΗΣ, ΚΟΥΤΣΟΥΡΟ ΚΑΡΔΙΤΣΗΣ, ΚΡΥΑ ΒΡΥΣΗ ΚΑΡΔΙΤΣΗΣ, ΛΑΜΠΕΡΟ ΚΑΡΔΙΤΣΗΣ, ΜΑΚΡΥΧΩΡΙ ΚΑΡΔΙΤΣΗΣ, ΜΑΥΡΟΝΕΡΙ ΚΑΡΔΙΤΣΗΣ, ΜΕΓΑΣ ΛΑΚΚΟΣ ΚΑΡΔΙΤΣΗΣ, ΜΕΛΙΣΣΑ ΚΑΡΔΙΤΣΗΣ, ΜΗΤΡΟΠΟΛΗ ΚΑΡΔΙΤΣΗΣ, ΜΟΛΟΧΑ ΚΑΡΔΙΤΣΗΣ, ΜΟΝΗ ΚΟΡΩΝΗΣ ΚΑΡΔΙΤΣΗΣ, ΜΟΣΧΑΤΟ ΚΑΡΔΙΤΣΗΣ, ΜΥΡΙΝΑ ΚΑΡΔΙΤΣΗΣ, ΝΕΡΑΙΔΑ ΚΑΡΔΙΤΣΑΣ ΚΑΡΔΙΤΣΗΣ, ΞΙΝΟΝΕΡΙ ΚΑΡΔΙΤΣΗΣ, ΠΑΛΑΙΟΖΟΓΛΟΠΙ ΚΑΡΔΙΤΣΗΣ, ΠΑΛΑΙΟΚΚΛΗΣΙ ΚΑΡΔΙΤΣΗΣ, ΠΑΝΟΡΑΜΑ ΚΑΡΔΙΤΣΗΣ, ΠΑΡΑΓΩΓΙΚΟ ΚΑΡΔΙΤΣΗΣ, ΠΕΤΡΑΛΩΝΑ ΑΓΡΑΦΩΝ ΕΥΡΥΤΑΝΙΑΣ, ΠΟΡΤΙΤΣΑ ΚΑΡΔΙΤΣΗΣ, ΠΡΟΔΡΟΜΟΣ ΚΑΡΔΙΤΣΗΣ, ΠΤΕΛΟΠΟΥΛΑ ΚΑΡΔΙΤΣΗΣ, ΡΑΧΟΥΛΑ ΚΑΡΔΙΤΣΗΣ, ΡΟΥΣΣΟ ΚΑΡΔΙΤΣΗΣ, ΣΑΡΑΝΤΑΠΟΡΟ ΚΑΡΔΙΤΣΗΣ, ΣΤΑΥΡΟΣ ΚΑΡΔΙΤΣΑΣ ΚΑΡΔΙΤΣΗΣ, ΤΣΑΡΔΑΚΙ ΚΑΡΔΙΤΣΗΣ, ΦΡΑΓΚΟ ΚΑΡΔΙΤΣΗΣ', Prefecture: 'Καρδίτσας' },
    { PostalCode: '43150', Area: 'ΚΑΛΎΒΙΑ ΜΠΕΖΟΎΛΑΣ ΚΑΡΔΙΤΣΑΣ, ΚΑΛΎΒΙΑ ΦΥΛΑΚΤΉΣ ΚΑΡΔΙΤΣΑΣ, ΚΑΠΠΆΣ ΚΑΡΔΙΤΣΑΣ, ΚΑΡΒΑΣΑΡΆΣ ΚΑΡΔΙΤΣΑΣ, ΚΑΡΊΤΣΑ ΔΟΛΟΠΏΝ ΚΑΡΔΙΤΣΑΣ, ΚΕΡΑΣΈΑ ΚΑΡΔΙΤΣΑΣ, ΚΟΥΤΣΟΔΉΜΟΣ ΚΑΡΔΙΤΣΑΣ, ΚΟΥΤΣΟΠΆΠΟΥΛΟΣ ΚΑΡΔΙΤΣΑΣ, ΚΡΥΟΝΈΡΙΟΝ ΚΑΡΔΙΤΣΑΣ, ΜΈΓΑ ΡΕΎΜΑ ΚΑΡΔΙΤΣΑΣ, ΜΕΣΕΝΙΚΌΛΑΣ ΚΑΡΔΙΤΣΑΣ, ΜΟΡΦΟΒΟΎΝΙΟΝ ΚΑΡΔΙΤΣΑΣ, ΜΠΕΛΟΚΟΜΊΤΗ ΚΑΡΔΙΤΣΑΣ, ΝΕΟΧΏΡΙΟΝ ΚΑΡΔΙΤΣΑΣ, ΝΕΡΆΪΔΑ ΜΠΕΖΟΎΛΑΣ ΚΑΡΔΙΤΣΑΣ, ΠΕΖΟΎΛΑ ΚΑΡΔΙΤΣΑΣ, ΠΕΤΡΩΤΌΝ ΚΑΡΊΤΣΗΣ ΔΟ ΚΑΡΔΙΤΣΑΣ, ΠΛΑΚΩΤΌΝ ΚΑΡΔΙΤΣΑΣ, ΡΑΦΉΝΑ ΚΑΡΔΙΤΣΑΣ, ΦΑΝΆΡΙ ΚΑΡΔΙΤΣΑΣ, ΦΥΛΑΚΤΉ ΚΑΡΔΙΤΣΑΣ', Prefecture: 'Καρδίτσας' },
    { PostalCode: '43200', Area: 'ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΚΑΡΔΙΤΣΗΣ, ΒΛΟΧΟΣ ΚΑΡΔΙΤΣΗΣ, ΓΟΡΓΟΒΙΤΕΣ ΚΑΡΔΙΤΣΗΣ, ΕΡΜΗΤΣΙ ΚΑΡΔΙΤΣΗΣ, ΚΑΛΥΒΑΚΙΑ ΚΑΡΔΙΤΣΗΣ, ΚΟΣΚΙΝΑΣ ΚΑΡΔΙΤΣΗΣ, ΛΥΚΟΡΕΜΑ ΚΑΡΔΙΤΣΗΣ, ΜΑΡΚΟΣ ΚΑΡΔΙΤΣΗΣ, ΜΕΤΑΜΟΡΦΩΣΗ ΚΑΡΔΙΤΣΑΣ ΚΑΡΔΙΤΣΗΣ, ΠΑΛΑΜΑΣ ΚΑΡΔΙΤΣΗΣ, ΨΑΘΟΧΩΡΙ ΚΑΡΔΙΤΣΗΣ', Prefecture: 'Καρδίτσας' },
    { PostalCode: '43300', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΚΑΡΔΙΤΣΗΣ, ΑΓΙΟΣ ΒΗΣΣΑΡΙΟΣ ΚΑΡΔΙΤΣΗΣ, ΑΜΠΕΛΟΣ ΚΑΡΔΙΤΣΗΣ, ΑΝΩΓΕΙΟ ΚΑΡΔΙΤΣΗΣ, ΓΕΦΥΡΙΑ ΚΑΡΔΙΤΣΗΣ, ΓΡΑΜΜΑΤΙΚΟ ΚΑΡΔΙΤΣΗΣ, ΔΑΣΟΧΩΡΙ ΚΑΡΔΙΤΣΗΣ, ΘΡΑΨΙΜΙ ΚΑΡΔΙΤΣΗΣ, ΚΑΠΠΑΔΟΚΙΚΟ ΚΑΡΔΙΤΣΗΣ, ΚΕΔΡΟΣ ΚΑΡΔΙΤΣΑΣ ΚΑΡΔΙΤΣΗΣ, ΚΕΔΡΟΣ ΜΠΕΛΟΚΟΜΙΤΗ ΚΑΡΔΙΤΣΗΣ, ΚΥΨΕΛΗ ΚΑΡΔΙΤΣΗΣ, ΛΟΥΤΡΟ ΚΑΡΔΙΤΣΗΣ, ΜΑΣΧΟΛΟΥΡΙΟ ΚΑΡΔΙΤΣΗΣ, ΜΑΤΑΡΑΓΚΑ ΚΑΡΔΙΤΣΗΣ, ΜΑΥΡΑΧΑΔΕΣ ΚΑΡΔΙΤΣΗΣ, ΜΕΛΙΣΣΟΧΩΡΙ ΚΑΡΔΙΤΣΗΣ, ΝΕΟ ΙΚΟΝΙΟ ΚΑΡΔΙΤΣΗΣ, ΠΑΛΙΟΥΡΙ ΚΑΡΔΙΤΣΗΣ, ΠΑΣΧΑΛΙΤΣΑ ΚΑΡΔΙΤΣΗΣ, ΠΥΡΓΟΣ ΚΙΕΡΙΟΥ ΚΑΡΔΙΤΣΗΣ, ΣΟΦΑΔΕΣ ΚΑΡΔΙΤΣΗΣ, ΤΑΥΡΩΠΟΣ ΚΑΡΔΙΤΣΗΣ, ΦΙΛΙΑ ΚΑΡΔΙΤΣΗΣ', Prefecture: 'Καρδίτσας' },
    { PostalCode: '52050', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΚΑΣΤΟΡΙΑΣ, ΑΚΟΝΤΙΟ ΚΑΣΤΟΡΙΑΣ, ΔΕΝΔΡΟΧΩΡΙ ΚΑΣΤΟΡΙΑΣ, ΙΕΡΟΠΗΓΗ ΚΑΣΤΟΡΙΑΣ, ΚΑΛΟΧΩΡΙ ΚΑΣΤΟΡΙΑΣ, ΚΑΤΩ ΠΤΕΡΙΑ ΚΑΣΤΟΡΙΑΣ, ΚΟΛΟΚΥΝΘΟΥ ΚΑΣΤΟΡΙΑΣ, ΜΕΣΟΠΟΤΑΜΙΑ ΚΑΣΤΟΡΙΑΣ, ΟΙΝΟΗ ΚΑΣΤΟΡΙΑΣ, ΠΟΛΥΑΝΕΜΟ ΚΑΣΤΟΡΙΑΣ, ΠΤΕΡΙΑ ΚΑΣΤΟΡΙΑΣ', Prefecture: 'Καστοριάς' },
    { PostalCode: '52051', Area: 'ΑΓΙΑ ΑΝΝΑ ΚΑΣΤΟΡΙΑΣ, ΓΙΑΝΝΟΧΩΡΙ ΚΑΣΤΟΡΙΑΣ, ΚΑΤΩ ΠΤΕΛΕΑ ΚΑΣΤΟΡΙΑΣ, ΚΡΑΝΟΧΩΡΙ ΚΑΣΤΟΡΙΑΣ, ΛΕΙΒΑΔΟΤΟΠΙ ΚΑΣΤΟΡΙΑΣ, ΜΟΝΟΠΥΛΟ ΚΑΣΤΟΡΙΑΣ, ΝΕΑ ΚΟΤΥΛΗ ΚΑΣΤΟΡΙΑΣ, ΝΕΣΤΟΡΙΟ ΚΑΣΤΟΡΙΑΣ, ΠΕΥΚΟΣ ΚΑΣΤΟΡΙΑΣ, ΠΤΕΛΕΑ ΚΑΣΤΟΡΙΑΣ, ΣΤΕΝΑ ΚΑΣΤΟΡΙΑΣ, ΤΡΙΛΟΦΟΣ ΚΑΣΤΟΡΙΑΣ', Prefecture: 'Καστοριάς' },
    { PostalCode: '52052', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΚΑΣΤΟΡΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΚΟΡΗΣΟΥ ΚΑΣΤΟΡΙΑΣ, ΒΑΣΙΛΕΙΑΔΑ ΚΑΣΤΟΡΙΑΣ, ΒΕΡΓΑ ΚΑΣΤΟΡΙΑΣ, ΚΟΡΗΣΟΣ ΚΑΣΤΟΡΙΑΣ, ΛΙΘΙΑ ΚΑΣΤΟΡΙΑΣ, ΜΕΛΙΣΣΟΤΟΠΟΣ ΚΑΣΤΟΡΙΑΣ, ΜΟΝΗ ΑΓΙΩΝ ΑΝΑΡΓΥΡΩΝ ΚΑΣΤΟΡΙΑΣ, ΣΤΑΥΡΟΠΟΤΑΜΟΣ ΚΑΣΤΟΡΙΑΣ', Prefecture: 'Καστοριάς' },
    { PostalCode: '52055', Area: 'ΑΓΙΟΣ ΑΝΤΩΝΙΟΣ ΚΑΣΤΟΡΙΑΣ, ΑΝΩ ΜΕΛΑΣ ΚΑΣΤΟΡΙΑΣ, ΜΑΚΡΟΧΩΡΙ ΚΑΣΤΟΡΙΑΣ, ΜΑΥΡΟΚΑΜΠΟΣ ΚΑΣΤΟΡΙΑΣ, ΜΕΛΑΣ ΚΑΣΤΟΡΙΑΣ, ΧΑΛΑΡΑ ΚΑΣΤΟΡΙΑΣ', Prefecture: 'Καστοριάς' },
    { PostalCode: '52056', Area: 'ΚΡΕΠΕΝΗ ΚΑΣΤΟΡΙΑΣ, ΜΑΥΡΟΧΩΡΙ ΚΑΣΤΟΡΙΑΣ, ΠΟΛΥΚΑΡΠΗ ΚΑΣΤΟΡΙΑΣ', Prefecture: 'Καστοριάς' },
    { PostalCode: '52057', Area: 'ΔΙΣΠΗΛΙΟ ΚΑΣΤΟΡΙΑΣ', Prefecture: 'Καστοριάς' },
    { PostalCode: '52059', Area: 'ΒΥΣΣΙΝΕΑ ΚΑΣΤΟΡΙΑΣ, ΜΕΤΑΜΟΡΦΩΣΗ ΚΑΣΤΟΡΙΑΣ, ΟΞΥΑ ΚΑΣΤΟΡΙΑΣ, ΠΟΛΥΚΕΡΑΣΟ ΚΑΣΤΟΡΙΑΣ, ΣΙΔΗΡΟΧΩΡΙ ΚΑΣΤΟΡΙΑΣ, ΤΟΙΧΙΟ ΚΑΣΤΟΡΙΑΣ, ΦΩΤΕΙΝΗ ΚΑΣΤΟΡΙΑΣ', Prefecture: 'Καστοριάς' },
    { PostalCode: '52100', Area: 'ΑΜΠΕΛΟΚΗΠΟΙ ΚΑΣΤΟΡΙΑΣ, ΑΠΟΣΚΕΠΟΣ ΚΑΣΤΟΡΙΑΣ, ΚΑΣΤΟΡΙΑ ΚΑΣΤΟΡΙΑΣ, ΚΕΦΑΛΑΡΙ ΚΑΣΤΟΡΙΑΣ, ΚΟΡΟΜΗΛΕΑ ΚΑΣΤΟΡΙΑΣ, ΛΕΥΚΗ ΚΑΣΤΟΡΙΑΣ, ΜΑΝΙΑΚΟΙ ΚΑΣΤΟΡΙΑΣ, ΜΗΛΙΤΣΑ ΚΑΣΤΟΡΙΑΣ, ΝΕΑ ΛΕΥΚΗ ΚΑΣΤΟΡΙΑΣ, ΧΛΟΗ ΚΑΣΤΟΡΙΑΣ', Prefecture: 'Καστοριάς' },
    { PostalCode: '52200', Area: 'ΑΓΙΟΣ ΗΛΙΑΣ ΚΑΣΤΟΡΙΑΣ, ΑΜΜΟΥΔΑΡΑ ΚΑΣΤΟΡΙΑΣ, ΑΜΠΕΛΟΧΩΡΙ ΚΑΣΤΟΡΙΑΣ, ΑΝΘΗΡΟ ΚΑΣΤΟΡΙΑΣ, ΑΝΩ ΠΕΡΙΒΟΛΙ ΚΑΣΤΟΡΙΑΣ, ΑΡΓΟΣ ΟΡΕΣΤΙΚΟ ΚΑΣΤΟΡΙΑΣ, ΑΣΠΡΟΚΚΛΗΣΙΑ ΚΑΣΤΟΡΙΑΣ, ΑΣΠΡΟΝΕΡΙ ΚΑΣΤΟΡΙΑΣ, ΑΥΓΗ ΚΑΣΤΟΡΙΑΣ, ΒΕΛΟΣ ΚΑΣΤΟΡΙΑΣ, ΒΟΤΑΝΙΟΝ ΚΑΣΤΟΡΙΑΣ, ΒΡΑΧΟΣ ΚΑΣΤΟΡΙΑΣ, ΓΑΒΡΟΣ ΚΑΣΤΟΡΙΑΣ, ΓΕΡΜΑΣ ΚΑΣΤΟΡΙΑΣ, ΓΡΑΜΟΣ ΚΑΣΤΟΡΙΑΣ, ΔΙΑΛΕΚΤΟ ΚΑΣΤΟΡΙΑΣ, ΖΕΥΓΟΣΤΑΣΙ ΚΑΣΤΟΡΙΑΣ, ΖΟΥΖΟΥΛΗ ΚΑΣΤΟΡΙΑΣ, ΚΑΣΤΑΝΟΦΥΤΟ ΚΑΣΤΟΡΙΑΣ, ΚΕΡΑΣΩΝΑ ΚΑΣΤΟΡΙΑΣ, ΚΡΑΝΙΩΝΑΣ ΚΑΣΤΟΡΙΑΣ, ΚΡΕΜΑΣΤΟ ΚΑΣΤΟΡΙΑΣ, ΚΡΥΑ ΝΕΡΑ ΚΑΣΤΟΡΙΑΣ, ΚΥΨΕΛΗ ΚΑΣΤΟΡΙΑΣ, ΚΩΣΤΑΡΑΖΙ ΚΑΣΤΟΡΙΑΣ, ΛΑΓΚΑ ΚΑΣΤΟΡΙΑΣ, ΛΑΚΚΩΜΑΤΑ ΚΑΣΤΟΡΙΑΣ, ΛΑΧΑΝΟΚΗΠΟΙ ΚΑΣΤΟΡΙΑΣ, ΜΕΛΑΝΘΙ ΚΑΣΤΟΡΙΑΣ, ΝΕΟ ΚΩΣΤΑΡΑΖΙ ΚΑΣΤΟΡΙΑΣ, ΝΕΟΣ ΟΙΚΙΣΜΟΣ ΚΑΣΤΟΡΙΑΣ, ΝΙΚΗ ΚΑΣΤΟΡΙΑΣ, ΝΟΣΤΙΜΟ ΚΑΣΤΟΡΙΑΣ, ΟΜΟΡΦΟΚΚΛΗΣΙΑ ΚΑΣΤΟΡΙΑΣ, ΠΕΝΤΑΒΡΥΣΟ ΚΑΣΤΟΡΙΑΣ, ΠΕΤΡΟΠΟΥΛΑΚΙ ΚΑΣΤΟΡΙΑΣ, ΠΟΡΕΙΑ ΚΑΣΤΟΡΙΑΣ, ΣΚΑΛΟΧΩΡΙ ΚΟΖΑΝΗΣ, ΣΠΗΛΑΙΑ ΚΑΣΤΟΡΙΑΣ, ΣΠΗΛΙΟΣ ΚΑΣΤΟΡΙΑΣ, ΤΣΑΚΟΝΗ ΚΑΣΤΟΡΙΑΣ, ΥΨΗΛΟ ΚΑΣΤΟΡΙΑΣ, ΧΙΛΙΟΔΕΝΔΡΟ ΚΑΣΤΟΡΙΑΣ', Prefecture: 'Καστοριάς' },
    { PostalCode: '49080', Area: 'ΑΓΙΑ ΑΙΚΑΤΕΡΙΝΗ ΚΕΡΚΥΡΑΣ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΠΕΤΡΙΤΗΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΙ  ΘΕΟΔΩΡΟΙ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΑΡΓΥΡΑΔΩΝ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΓΟΡΔΙΟΣ (ΛΕΥΚΙΜΜΑΙΩΝ) ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΚΕΡΚΥΡΑΣ ΚΕΡΚΥΡΑΣ, ΑΛΥΚΕΣ ΛΕΥΚΙΜΜΗΣ ΚΕΡΚΥΡΑΣ, ΑΡΓΥΡΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΒΑΣΙΛΑΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΒΙΤΑΛΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΒΡΑΓΚΑΝΙΩΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΓΑΡΔΕΝΟΣ ΚΕΡΚΥΡΑΣ, ΔΡΑΓΩΤΙΝΑ ΚΕΡΚΥΡΑΣ, ΚΑΒΟΣ ΚΕΡΚΥΡΑΣ, ΚΑΛΥΒΙΩΤΗΣ ΠΕΡΙΒΟΛΙΟΥ ΚΕΡΚΥΡΑΣ, ΚΑΤΩ ΣΠΗΛΑΙΟ ΚΕΡΚΥΡΑΣ, ΚΟΡΑΚΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΚΟΥΣΠΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΚΡΗΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΚΡΙΝΙΑΣ ΚΕΡΚΥΡΑΣ, ΛΕΥΚΙΜΜΗ ΚΕΡΚΥΡΑΣ, ΛΙΝΙΑ ΚΕΡΚΥΡΑΣ, ΜΑΡΑΘΙΑΣ ΚΕΡΚΥΡΑΣ, ΜΕΛΙΚΙΑ ΚΕΡΚΥΡΑΣ, ΜΕΣΟΓΓΗ ΚΕΡΚΥΡΑΣ, ΜΠΑΣΤΑΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΜΠΟΥΚΑΡΗΣ ΚΕΡΚΥΡΑΣ, ΜΩΛΟΣ ΚΕΡΚΥΡΑΣ, ΝΕΟΧΩΡΑΚΙ ΚΕΡΚΥΡΑΣ, ΝΕΟΧΩΡΙ ΚΕΡΚΥΡΑΣ, ΝΟΤΟΣ ΚΕΡΚΥΡΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΚΕΡΚΥΡΑΣ, ΠΕΡΙΒΟΛΙ ΚΕΡΚΥΡΑΣ, ΠΕΤΡΙΤΗ ΚΕΡΚΥΡΑΣ, ΠΟΤΑΜΙ  ΚΕΡΚΥΡΑΣ, ΠΟΤΑΜΙΑ ΠΕΡΙΒΟΛΙΟΥ ΚΕΡΚΥΡΑΣ, ΡΙΓΓΛΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΡΟΥΜΑΝΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΣΠΑΡΤΕΡΑ ΚΕΡΚΥΡΑΣ, ΧΛΟΜΑΤΙΑΝΑ ΚΕΡΚΥΡΑΣ, ΧΛΟΜΟΣ ΚΕΡΚΥΡΑΣ, ΨΑΡΑΣ ΚΕΡΚΥΡΑΣ', Prefecture: 'Κέρκυρας' },
    { PostalCode: '49081', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΑΓΡΑΦΩΝ ΚΕΡΚΥΡΑΣ, ΑΓΙΑ ΠΕΛΑΓΙΑ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΙ ΔΟΥΛΟΙ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΑΡΜΕΝΑΔΩΝ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΣΠΥΡΙΔΩΝΑΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΑΥΛΙΩΤΩΝ ΚΕΡΚΥΡΑΣ, ΑΓΡΑΦΟΙ ΚΕΡΚΥΡΑΣ, ΑΝΤΙΠΕΡΝΟΙ ΚΕΡΚΥΡΑΣ, ΑΡΙΛΛΑΣ ΚΑΒΒΑΔΑΔΩΝ ΚΕΡΚΥΡΑΣ, ΑΡΙΛΛΑΣ ΜΑΓΟΥΛΑΔΩΝ ΚΕΡΚΥΡΑΣ, ΑΡΜΕΝΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΑΣΤΡΑΚΕΡΗ ΚΕΡΚΥΡΑΣ, ΑΥΛΙΩΤΕΣ ΚΕΡΚΥΡΑΣ, ΑΦΙΩΝ ΚΕΡΚΥΡΑΣ, ΒΑΛΑΝΕΙΟ ΚΕΡΚΥΡΑΣ, ΒΕΛΟΝΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΓΑΒΡΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΓΑΡΝΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΓΟΥΣΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΔΑΦΝΗ ΚΕΡΚΥΡΑΣ, ΕΠΙΣΚΟΠΗ ΚΕΡΚΥΡΑΣ, ΚΑΒΑΛΛΟΥΡΙ ΚΕΡΚΥΡΑΣ, ΚΑΒΒΑΔΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΚΑΡΟΥΣΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΚΛΗΜΑΤΙΑ ΚΕΡΚΥΡΑΣ, ΚΟΥΚΝΙΚΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΚΟΥΝΑΒΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΚΥΠΡΙΑΝΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΛΙΒΑΔΙ ΚΕΡΚΥΡΑΣ, ΜΑΓΟΥΛΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΜΕΓΑ ΥΔΡΙ ΚΕΡΚΥΡΑΣ, ΝΥΜΦΕΣ ΚΕΡΚΥΡΑΣ, ΞΑΝΘΑΤΕΣ ΚΕΡΚΥΡΑΣ, ΠΕΡΟΥΛΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΠΛΑΤΩΝΑΣ ΚΕΡΚΥΡΑΣ, ΠΟΥΛΗΜΑΤΕΣ ΚΕΡΚΥΡΑΣ, ΡΑΧΤΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΡΟΔΑ ΚΑΡΟΥΣΑΔΩΝ ΚΕΡΚΥΡΑΣ, ΡΟΔΑ ΚΕΡΚΥΡΑΣ ΚΕΡΚΥΡΑΣ, ΣΑΟΥΛΑΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΣΙΔΑΡΙΟ ΚΕΡΚΥΡΑΣ, ΣΙΝΙΕΣ ΚΕΡΚΥΡΑΣ, ΣΤΑΟΥΣΑ ΚΕΡΚΥΡΑΣ, ΣΦΑΚΕΡΑ ΚΕΡΚΥΡΑΣ, ΤΣΟΥΚΑΛΙΟ ΚΕΡΚΥΡΑΣ, ΨΑΘΥΛΑΣ ΚΕΡΚΥΡΑΣ', Prefecture: 'Κέρκυρας' },
    { PostalCode: '49082', Area: 'ΑΝΕΜΟΓΙΑΝΝΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΑΝΤΙΠΑΞΟΣ ΚΕΡΚΥΡΑΣ, ΑΠΕΡΓΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΑΡΒΑΝΙΤΑΚΑΙΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΑΡΩΝΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΒΕΛΙΑΝΙΤΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΒΛΑΧΟΠΟΥΛΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΓΑΙΟΣ ΚΕΡΚΥΡΑΣ, ΓΡΑΜΜΑΤΙΚΑΙΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΔΑΛΙΕΤΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΔΕΝΔΙΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΙΕΡΟΜΟΝΑΧΟΣ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΚΑΓΚΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΚΑΤΣΙΜΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΚΟΝΤΟΓΙΑΝΝΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΚΟΥΡΤΑΙΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΚΟΥΤΣΙΟ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΛΑΚΚΑ ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΛΟΓΓΟΣ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΜΑΓΑΖΙΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΜΑΚΡΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΜΑΝΕΣΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΜΑΣΤΟΡΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΜΟΥΓΚΕΛΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΜΠΟΓΔΑΝΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΜΠΟΙΚΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΟΖΙΑΣ ΚΕΡΚΥΡΑΣ, ΟΞΙΑΣ ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΠΑΝΑΓΙΑ  ΝΗΣΟΣ ΚΕΡΚΥΡΑΣ, ΠΑΞΟΙ ΚΕΡΚΥΡΑΣ, ΠΕΤΡΑΤΙΚΑ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ, ΠΛΑΤΑΝΟΣ  ΠΑΞΩΝ ΚΕΡΚΥΡΑΣ', Prefecture: 'Κέρκυρας' },
    { PostalCode: '49083', Area: 'ΑΓΙΑ ΑΝΝΑ ΑΛΕΙΜΜΑΤΑΔΩΝ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΠΑΓΩΝ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΜΑΡΚΟΣ ΚΕΡΚΥΡΑΣ, ΑΓΡΟΣ ΚΕΡΚΥΡΑΣ, ΑΛΕΙΜΜΑΤΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΑΝΑΛΗΨΗ ΚΕΡΚΥΡΑΣ, ΑΝΩ ΚΟΡΑΚΙΑΝΑ ΚΕΡΚΥΡΑΣ, ΑΡΚΑΔΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΑΣΠΙΩΤΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΑΦΙΩΝΙΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΒΑΤΩΝΙΕΣ ΚΕΡΚΥΡΑΣ, ΒΙΣΤΩΝΑΣ ΚΕΡΚΥΡΑΣ, ΓΑΖΑΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΓΑΡΔΕΛΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΓΕΦΥΡΑ ΚΕΡΚΥΡΑΣ, ΔΟΥΚΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΔΡΟΣΑΤΟ ΚΕΡΚΥΡΑΣ, ΖΥΓΟΣ ΚΕΡΚΥΡΑΣ, ΚΑΣΤΕΛΛΑΝΟΙ ΓΥΡΟΥ ΚΕΡΚΥΡΑΣ, ΚΑΤΩ ΑΓΙΟΣ ΜΑΡΚΟΣ ΚΕΡΚΥΡΑΣ, ΚΑΤΩ ΚΟΡΑΚΙΑΝΑ ΚΕΡΚΥΡΑΣ, ΚΟΨΟΧΕΙΛΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΚΡΗΝΗ ΚΕΡΚΥΡΑΣ, ΛΑΚΩΝΕΣ ΚΕΡΚΥΡΑΣ, ΛΙΑΠΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΛΙΜΝΗ ΚΕΡΚΥΡΑΣ, ΜΑΚΡΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΜΑΝΑΤΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΜΕΣΑΡΙΑ ΚΕΡΚΥΡΑΣ, ΠΑΓΟΙ ΚΕΡΚΥΡΑΣ, ΠΑΛΑΙΟΚΑΣΤΡΙΤΣΑ ΚΕΡΚΥΡΑΣ, ΠΑΠΑΘΑΝΑΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΠΗΛΙΔΑ ΚΕΡΚΥΡΑΣ, ΠΟΥΛΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΠΡΙΝΥΛΑΣ ΚΕΡΚΥΡΑΣ, ΠΥΡΓΙ ΚΕΡΚΥΡΑΣ, ΡΑΦΑΛΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΣΚΡΙΠΕΡΟ ΚΕΡΚΥΡΑΣ, ΣΩΚΡΑΚΙ ΚΕΡΚΥΡΑΣ, ΤΕΡΜΕΝΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΤΡΟΥΜΠΕΤΤΑΣ ΚΕΡΚΥΡΑΣ, ΥΨΟΣ ΚΕΡΚΥΡΑΣ, ΦΕΛΕΚΑΣ ΚΕΡΚΥΡΑΣ, ΧΩΡΕΠΙΣΚΟΠΟΙ ΚΕΡΚΥΡΑΣ', Prefecture: 'Κέρκυρας' },
    { PostalCode: '49084', Area: 'ΑΓΙΟΙ ΔΕΚΑ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΒΙΡΟΥ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΓΟΡΔΙΟΣ (ΠΑΡΕΛΙΩΝ) ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΠΕΡΙΣΤΕΡΩΝ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΜΑΤΘΑΙΟΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΠΡΟΚΟΠΙΟΣ ΚΕΡΚΥΡΑΣ, ΑΛΕΠΟΧΩΡΙ ΚΕΡΚΥΡΑΣ, ΑΝΩ ΓΑΡΟΥΝΑ ΚΕΡΚΥΡΑΣ, ΑΝΩ ΠΑΥΛΙΑΝΑ ΚΕΡΚΥΡΑΣ, ΑΣΠΕΣ ΚΕΡΚΥΡΑΣ, ΒΑΡΥΠΑΤΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΒΙΡΟΣ ΚΕΡΚΥΡΑΣ, ΒΟΥΝΙΑΤΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΓΑΣΤΟΥΡΙ ΚΕΡΚΥΡΑΣ, ΔΑΦΝΑΤΑ ΚΕΡΚΥΡΑΣ, ΕΠΙΣΚΟΠΙΑΝΑ ΚΕΡΚΥΡΑΣ, ΕΣΤΑΥΡΩΜΕΝΟΣ ΚΕΡΚΥΡΑΣ, ΚΑΛΑΦΑΤΙΩΝΕΣ ΚΕΡΚΥΡΑΣ, ΚΑΜΑΡΑ ΚΕΡΚΥΡΑΣ, ΚΑΡΔΑΜΑΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΚΑΣΤΑΝΕΑ ΚΕΡΚΥΡΑΣ, ΚΑΣΤΕΛΛΑΝΟΙ ΜΕΣΗΣ ΚΕΡΚΥΡΑΣ, ΚΑΤΩ ΓΑΡΟΥΝΑ ΚΕΡΚΥΡΑΣ, ΚΑΤΩ ΠΑΥΛΙΑΝΑ ΚΕΡΚΥΡΑΣ, ΚΟΜΙΑΝΑΤΑ ΚΕΡΚΥΡΑΣ, ΚΟΝΤΟΓΙΑΛΟΣ ΚΕΡΚΥΡΑΣ, ΚΟΡΝΑΤΑ ΚΕΡΚΥΡΑΣ, ΚΟΥΡΑΜΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΚΥΝΟΠΙΑΣΤΕΣ ΚΕΡΚΥΡΑΣ, ΛΟΥΚΑΤΑ ΚΕΡΚΥΡΑΣ, ΜΑΚΡΑΤΑ ΚΕΡΚΥΡΑΣ, ΜΠΑΣΤΟΥΝΙΟΝ ΚΕΡΚΥΡΑΣ, ΜΠΕΝΙΤΣΕΣ ΚΕΡΚΥΡΑΣ, ΜΩΡΑΙΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΠΑΡΑΜΟΝΑΣ ΚΕΡΚΥΡΑΣ, ΠΕΝΤΑΤΙ ΚΕΡΚΥΡΑΣ, ΠΕΡΑΜΑ ΓΑΣΤΟΥΡΙΟΥ ΚΕΡΚΥΡΑΣ, ΠΙΚΟΥΛΑΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΣΙΝΑΡΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΣΚΑΛΑ ΚΕΡΚΥΡΑΣ, ΣΟΥΛΑΙΙΚΑ ΚΕΡΚΥΡΑΣ, ΣΤΑΥΡΟΣ ΚΕΡΚΥΡΑΣ, ΣΤΡΟΓΓΥΛΗ ΘΙΝΑΛΙΟΥ ΚΕΡΚΥΡΑΣ, ΣΤΡΟΓΓΥΛΗ ΚΕΡΚΥΡΑΣ ΚΕΡΚΥΡΑΣ, ΧΑΛΙΔΙΑΤΑ ΚΕΡΚΥΡΑΣ, ΧΑΛΙΚΟΥΝΑΣ ΚΕΡΚΥΡΑΣ, ΧΡΥΣΗΙΔΑ ΚΕΡΚΥΡΑΣ', Prefecture: 'Κέρκυρας' },
    { PostalCode: '49100', Area: 'ΑΒΡΑΜΗΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΑ ΤΡΙΑΔΑ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΒΛΑΣΙΟΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΚΑΣΣΙΟΠΗΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΗΛΙΑΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΚΑΡΟΥΣΑΔΩΝ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΜΑΡΤΙΝΟΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΟΝΟΥΦΡΙΟΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΚΕΡΚΥΡΑΣ, ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΣΙΝΙΩΝ ΚΕΡΚΥΡΑΣ, ΑΓΝΙΤΣΙΝΗ ΚΕΡΚΥΡΑΣ, ΑΛΕΠΟΥ ΚΕΡΚΥΡΑΣ, ΑΛΥΚΕΣ ΠΟΤΑΜΟΥ ΚΕΡΚΥΡΑΣ, ΑΝΑΠΑΥΤΗΡΙΑ ΚΕΡΚΥΡΑΣ, ΑΝΩ ΠΕΡΙΘΕΙΑ ΚΕΡΚΥΡΑΣ, ΑΠΟΛΥΣΟΙ ΚΕΡΚΥΡΑΣ, ΑΠΡΑΟΣ ΚΕΡΚΥΡΑΣ, ΑΦΡΑ ΚΕΡΚΥΡΑΣ, ΑΧΑΡΑΒΗ ΚΕΡΚΥΡΑΣ, ΒΑΘΥ ΚΕΡΚΥΡΑΣ, ΒΑΣΙΛΙΚΑ ΘΙΝΑΛΙΟΥ ΚΕΡΚΥΡΑΣ, ΒΑΣΙΛΙΚΑ ΠΑΡΕΛΙΩΝ ΚΕΡΚΥΡΑΣ, ΒΑΤΟΣ ΚΕΡΚΥΡΑΣ, ΒΙΓΓΛΑ ΚΕΡΚΥΡΑΣ, ΒΙΓΓΛΑΤΟΥΡΙ ΚΕΡΚΥΡΑΣ, ΒΛΑΧΑΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΒΟΥΝΟ ΚΕΡΚΥΡΑΣ, ΒΡΑΧΛΕΡΗ ΚΕΡΚΥΡΑΣ, ΒΡΥΩΝΗ ΚΕΡΚΥΡΑΣ, ΓΙΑΝΝΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΓΙΜΑΡΙ ΚΕΡΚΥΡΑΣ, ΓΛΥΦΑΔΑ ΚΕΡΚΥΡΑΣ, ΓΟΥΒΙΑ ΚΕΡΚΥΡΑΣ, ΔΑΝΙΛΙΑ ΚΕΡΚΥΡΑΣ, ΔΑΣΙΑ ΚΕΡΚΥΡΑΣ, ΔΑΦΝΙΛΑΣ ΚΕΡΚΥΡΑΣ, ΔΙΑΚΟΠΟ ΜΑΘΡΑΚΙΟΥ ΚΕΡΚΥΡΑΣ, ΔΙΑΠΛΟ ΜΑΘΡΑΚΙΟΥ ΚΕΡΚΥΡΑΣ, ΔΡΟΣΕΡΗ ΚΕΡΚΥΡΑΣ, ΕΒΡΟΠΟΥΛΟΙ ΚΕΡΚΥΡΑΣ, ΕΠΙΣΚΕΨΗ ΚΕΡΚΥΡΑΣ, ΕΡΕΙΚΟΥΣΣΑ ΝΗΣΟΣ ΚΕΡΚΥΡΑΣ, ΕΡΙΒΑ ΚΕΡΚΥΡΑΣ, ΕΡΜΟΝΕΣ ΚΕΡΚΥΡΑΣ, ΗΜΕΡΟΛΙΑ ΚΕΡΚΥΡΑΣ, ΚΑΒΑΛΛΕΡΑΙΝΑ ΚΕΡΚΥΡΑΣ, ΚΑΛΑΜΙ ΚΕΡΚΥΡΑΣ, ΚΑΝΑΚΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΚΑΝΑΛΙ ΚΕΡΚΥΡΑΣ, ΚΑΝΟΝΙ ΚΕΡΚΥΡΑΣ, ΚΑΡΝΙΑΡΗΣ ΚΕΡΚΥΡΑΣ, ΚΑΡΥΩΤΙΚΟ ΚΕΡΚΥΡΑΣ, ΚΑΣΣΙΟΠΗ ΚΕΡΚΥΡΑΣ, ΚΑΤΑΒΟΛΟΣ ΚΕΡΚΥΡΑΣ, ΚΑΤΩ ΠΕΡΙΘΕΙΑ ΚΕΡΚΥΡΑΣ, ΚΕΛΛΙΑ ΚΕΡΚΥΡΑΣ, ΚΕΝΤΡΩΜΑ ΚΕΡΚΥΡΑΣ, ΚΕΡΚΥΡΑ ΚΕΡΚΥΡΑΣ, ΚΟΚΚΙΝΗ ΚΕΡΚΥΡΑΣ, ΚΟΚΚΙΝΙΟ ΚΕΡΚΥΡΑΣ, ΚΟΚΚΙΝΟΓΕΙΑ ΚΕΡΚΥΡΑΣ, ΚΟΚΚΟΚΥΛΑΣ ΚΕΡΚΥΡΑΣ, ΚΟΜΠΙΤΣΙ ΚΕΡΚΥΡΑΣ, ΚΟΝΤΟΚΑΛΙ ΚΕΡΚΥΡΑΣ, ΚΟΥΛΟΥΡΑ ΚΕΡΚΥΡΑΣ, ΚΟΥΡΑΜΑΔΙΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΚΟΥΡΚΟΥΛΑΙΙΚΑ ΚΕΡΚΥΡΑΣ, ΚΡΕΜΙΘΑΣ ΚΕΡΚΥΡΑΣ, ΚΥΡΑ ΧΡΥΣΙΚΟΥ ΚΕΡΚΥΡΑΣ, ΛΑΖΑΡΑΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΛΑΖΑΡΕΤΟ ΚΕΡΚΥΡΑΣ, ΛΑΥΚΙ ΚΕΡΚΥΡΑΣ, ΛΙΘΙΑΣΜΕΝΟΣ ΚΕΡΚΥΡΑΣ, ΛΟΥΤΣΕΣ ΚΕΡΚΥΡΑΣ, ΜΑΓΑΡΙΚΑ ΚΕΡΚΥΡΑΣ, ΜΑΘΡΑΚΙ ΝΗΣΟΣ ΚΕΡΚΥΡΑΣ, ΜΑΝΔΟΥΚΙ ΚΕΡΚΥΡΑΣ, ΜΑΡΜΑΡΟ ΚΕΡΚΥΡΑΣ, ΜΕΓΓΟΥΛΑΣ ΚΕΡΚΥΡΑΣ, ΜΟΝΗ ΥΠΕΡΑΓΙΑΣ ΘΕΟΤΟΚΟΥ ΜΥΡΤΙΔΙΩΝ ΚΕΡΚΥΡΑΣ, ΜΠΑΡΜΠΑΤΙ ΚΕΡΚΥΡΑΣ, ΝΗΣΑΚΙ ΚΕΡΚΥΡΑΣ, ΟΘΩΝΟΙ ΝΗΣΟΣ ΚΕΡΚΥΡΑΣ, ΟΜΑΛΗ ΚΕΡΚΥΡΑΣ, ΠΕΛΕΚΑΣ ΚΕΡΚΥΡΑΣ, ΠΕΛΕΚΗΤΟ ΚΕΡΚΥΡΑΣ, ΠΕΡΑΜΑ ΚΕΡΚΥΡΑΣ, ΠΕΡΙΘΕΙΑ ΚΕΡΚΥΡΑΣ, ΠΕΡΙΣΤΕΡΕΣ ΚΕΡΚΥΡΑΣ, ΠΕΡΟΥΛΙΟΝ ΚΕΡΚΥΡΑΣ, ΠΕΤΑΛΕΙΑ ΚΕΡΚΥΡΑΣ, ΠΗΓΗ ΚΕΡΚΥΡΑΣ, ΠΙΘΟΣ ΚΕΡΚΥΡΑΣ, ΠΛΑΓΙΑ ΚΕΡΚΥΡΑΣ, ΠΛΑΚΩΤΟ ΚΕΡΚΥΡΑΣ, ΠΛΑΤΕΙΑ ΚΕΡΚΥΡΑΣ, ΠΟΔΟΛΑΚΚΟΣ ΚΕΡΚΥΡΑΣ, ΠΟΝΤΙΚΟΝΗΣΙ ΚΕΡΚΥΡΑΣ, ΠΟΡΤΑ ΚΕΡΚΥΡΑΣ, ΠΟΤΑΜΟΣ ΚΕΡΚΥΡΑΣ, ΠΡΙΦΤΙΑΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΠΤΥΧΙΑ ΝΗΣΟΣ ΚΕΡΚΥΡΑΣ, ΡΑΧΗ ΚΕΡΚΥΡΑΣ, ΡΙΛΙΑΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΡΟΥ ΚΕΡΚΥΡΑΣ, ΣΑΝΤΑ ΚΕΡΚΥΡΑΣ, ΣΑΡΑΚΗΝΑΤΙΚΑ ΚΕΡΚΥΡΑΣ, ΣΓΟΜΠΟΥ ΚΕΡΚΥΡΑΣ, ΣΓΟΥΡΑΔΕΣ ΚΕΡΚΥΡΑΣ, ΣΠΑΡΤΥΛΑΣ ΚΕΡΚΥΡΑΣ, ΣΤΡΙΝΥΛΑΣ ΚΕΡΚΥΡΑΣ, ΤΕΜΠΛΟΝΙ ΚΕΡΚΥΡΑΣ, ΤΖΑΒΡΟΣ ΚΕΡΚΥΡΑΣ, ΤΡΑΧΕΙΑ ΜΑΘΡΑΚΙΟΥ ΚΕΡΚΥΡΑΣ, ΤΡΙΚΛΙΝΟ ΚΕΡΚΥΡΑΣ, ΤΡΙΜΟΔΙ ΚΕΡΚΥΡΑΣ, ΤΡΙΤΣΙΟ ΚΕΡΚΥΡΑΣ, ΤΣΑΡΟΥ ΚΕΡΚΥΡΑΣ, ΦΟΥΡΝΙ ΚΕΡΚΥΡΑΣ, ΨΑΧΝΙΑ ΚΕΡΚΥΡΑΣ, ΨΥΛΛΟΣ ΔΥΟ ΚΕΡΚΥΡΑΣ, ΨΥΛΛΟΣ ΕΝΑ ΚΕΡΚΥΡΑΣ', Prefecture: 'Κέρκυρας' },
    { PostalCode: '28080', Area: 'ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΓΡΙΖΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΔΙΓΑΛΕΤΟ ΚΕΦΑΛΛΗΝΙΑΣ, ΖΕΡΒΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΑΡΑΒΟΜΥΛΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΑΤΑΠΟΔΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΟΥΛΟΥΡΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΟΥΛΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΥΡΓΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΣΑΜΗ ΚΕΦΑΛΛΗΝΙΑΣ, ΤΖΑΝΕΤΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΤΣΑΚΑΡΙΣΙΑΝΟ ΚΕΦΑΛΛΗΝΙΑΣ, ΧΑΛΙΩΤΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ', Prefecture: 'Κεφαλληνίας' },
    { PostalCode: '28081', Area: 'ΑΓΙΑ ΕΥΦΗΜΙΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΓΙΑ ΣΟΦΙΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΝΤΙΠΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΒΑΛΙΑΝΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΒΑΣΙΛΟΠΟΥΛΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΓΕΩΡΓΑΚΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΔΕΝΔΡΙΝΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΔΙΒΑΡΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΔΡΑΚΟΠΟΥΛΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΑΛΟΓΗΡΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΟΜΙΤΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΑΜΠΡΙΝΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΟΥΚΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΑΚΡΙΩΤΙΚΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΟΔΙΟ ΚΕΦΑΛΛΗΝΙΑΣ, ΝΕΟΧΩΡΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΞΗΡΟΠΟΤΑΜΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΕΤΑΛΑΣ ΝΗΣΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΙΣΤΡΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΟΤΑΜΙΑΝΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΡΑΣΟ ΚΕΦΑΛΛΗΝΙΑΣ, ΣΟΦΙΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΣΩΡΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΦΕΡΕΝΤΙΝΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΦΙΛΙΠΠΟΣ ΚΕΦΑΛΛΗΝΙΑΣ', Prefecture: 'Κεφαλληνίας' },
    { PostalCode: '28084', Area: 'ΑΓΙΑ ΙΕΡΟΥΣΑΛΗΜ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΓΡΙΛΙΑΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΝΤΙΠΑΤΑ ΕΡΙΣΟΥ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΣΤΕΡΙΣ ΝΗΣΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΒΕΝΤΟΥΡΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΒΙΓΛΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΓΕΡΜΕΝΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΕΥΡΕΤΗ ΚΕΦΑΛΛΗΝΙΑΣ, ΖΑΜΠΕΛΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΑΤΣΑΡΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΑΒΩΝΙΚΕΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΑΓΓΑΝΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΑΡΚΑΝΤΩΝΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΑΡΚΟΥΛΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΑΤΣΟΥΚΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΠΑΡΖΟΥΚΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΣΤΕΛΙΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΤΖΑΜΑΡΕΛΛΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΤΟΥΛΙΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΤΣΕΛΕΝΤΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΦΙΣΚΑΡΔΟ ΚΕΦΑΛΛΗΝΙΑΣ, ΧΑΛΙΚΕΡΗ ΚΕΦΑΛΛΗΝΙΑΣ, ΨΙΛΙΘΡΙΑΣ ΚΕΦΑΛΛΗΝΙΑΣ', Prefecture: 'Κεφαλληνίας' },
    { PostalCode: '28086', Area: 'ΑΓΙΑ ΕΙΡΗΝΗ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΣΠΡΟΓΕΡΑΚΑΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΟΝΗ ΥΠΕΡΑΓΙΑΣ ΘΕΟΤΟΚΟΥ ΑΤΡΟΥ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΟΡΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΤΖΑΝΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ', Prefecture: 'Κεφαλληνίας' },
    { PostalCode: '28100', Area: 'ΑΓΙΟΙ ΑΠΟΣΤΟΛΟΙ ΒΑΛΣΑΜΑΤΩΝ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΓΙΟΣ ΕΛΕΥΘΕΡΙΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΓΚΩΝΑΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΡΓΟΣΤΟΛΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΒΑΛΣΑΜΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΔΑΥΓΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΔΕΜΟΥΤΣΑΝΤΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΔΙΛΙΝΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΔΡΑΠΑΝΟ ΚΕΦΑΛΛΗΝΙΑΣ, ΕΠΑΝΩΧΩΡΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΖΕΡΒΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΖΟΛΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΑΡΔΑΚΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΟΚΟΛΑΤΑ ΑΡΓΟΣΤΟΛΙΟΥ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΟΜΠΟΘΕΚΡΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΟΥΛΟΥΜΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΟΥΡΟΥΚΛΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΑΚΗΘΡΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΑΣΣΗ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΟΓΑΡΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΕΝΕΓΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΕΤΑΞΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΗΝΙΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΙΤΑΚΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΙΧΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΓΕΡΑΣΙΜΟΥ ΚΕΦΑΛΛΗΝΙΑΣ, ΝΥΦΙΟ ΚΕΦΑΛΛΗΝΙΑΣ, ΟΜΑΛΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΛΑΤΥΣ ΓΙΑΛΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΡΟΚΟΠΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΡΑΖΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΡΙΖΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΣΒΟΡΩΝΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΤΡΩΙΑΝΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΦΑΡΑΚΛΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΦΑΡΣΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΦΡΑΓΚΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ', Prefecture: 'Κεφαλληνίας' },
    { PostalCode: '28200', Area: 'ΑΓΙΑ ΘΕΚΛΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΠΑΛΗΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΘΕΡΑΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΒΑΡΔΙΑΝΟΙ ΝΗΣΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΒΙΛΑΤΩΡΙΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΒΛΥΧΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΒΟΒΥΚΕΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΒΟΥΝΙΟ ΚΕΦΑΛΛΗΝΙΑΣ, ΔΑΜΟΥΛΙΑΝΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΔΕΛΑΠΟΡΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΔΕΛΛΑΠΟΡΤΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΔΕΜΑΤΟΡΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΑΛΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΑΜΙΝΑΡΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΑΤΕΡΕΛΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΟΝΤΟΓΕΝΑΔΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΟΥΒΑΛΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΟΥΜΟΠΕΤΡΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΕΠΕΔΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΗΞΟΥΡΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΙΒΑΔΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΟΓΓΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΟΥΚΕΡΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΑΝΤΖΑΒΙΝΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΕΓΑ ΛΑΚΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΙΧΑΛΙΤΣΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΟΝΗ ΥΠΕΡΑΓΙΑΣ ΘΕΟΤΟΚΟΥ ΚΗΠΟΥΡΑΙΩΝ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΟΝΟΠΟΛΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΞΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΑΡΙΣΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΕΤΑΝΟΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΡΙΦΙΟ ΚΕΦΑΛΛΗΝΙΑΣ, ΣΚΙΝΕΑΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΣΟΥΛΛΑΡΟΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΤΥΠΑΛΔΑΤΟ ΚΕΦΑΛΛΗΝΙΑΣ, ΦΑΒΑΤΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΧΑΒΔΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΧΑΒΡΙΑΤΑ ΚΕΦΑΛΛΗΝΙΑΣ', Prefecture: 'Κεφαλληνίας' },
    { PostalCode: '28300', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΕΤΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΝΩΓΗ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΡΚΟΥΔΙ ΝΗΣΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΑΤΟΚΟΣ ΝΗΣΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΒΡΟΜΩΝΑΣ ΝΗΣΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΔΡΑΚΟΝΕΡΑ ΝΗΣΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΕΞΩΓΗ ΚΕΦΑΛΛΗΝΙΑΣ, ΙΘΑΚΗ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΑΡΛΟΝΗΣΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΚΙΟΝΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΑΖΑΡΕΤΟ ΝΗΣΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΕΥΚΗ ΚΕΦΑΛΛΗΝΙΑΣ, ΛΥΓΙΑ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΑΚΡΗ ΝΗΣΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΜΟΝΗ ΚΑΘΑΡΩΝ ΚΕΦΑΛΛΗΝΙΑΣ, ΟΞΕΙΑ ΝΗΣΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΕΡΑΧΩΡΙ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΛΑΤΡΕΙΘΙΑΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΟΝΤΙΚΟΣ ΝΗΣΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΠΡΟΒΑΤΙΟ ΝΗΣΟΣ ΚΕΦΑΛΛΗΝΙΑΣ, ΦΡΙΚΕΣ ΚΕΦΑΛΛΗΝΙΑΣ', Prefecture: 'Κεφαλληνίας' },
    { PostalCode: '61002', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΚΙΛΚΙΣ, ΕΛΕΥΘΕΡΟΧΩΡΙ ΚΙΛΚΙΣ, ΗΛΙΟΦΩΤΟ ΚΙΛΚΙΣ, ΚΑΛΙΝΔΡΙΑ ΚΙΛΚΙΣ, ΚΟΡΟΜΗΛΙΑ ΚΙΛΚΙΣ, ΜΕΓΑΛΗ ΣΤΕΡΝΑ ΚΙΛΚΙΣ, ΜΙΧΑΛΙΤΣΙ ΚΙΛΚΙΣ, ΠΛΑΓΙΑ ΚΙΛΚΙΣ ΚΙΛΚΙΣ, ΠΛΑΓΙΑ ΠΑΙΟΝΙΑΣ ΚΙΛΚΙΣ, ΣΟΥΛΤΟΓΙΑΝΝΑΙΙΚΑ ΚΙΛΚΙΣ, ΧΕΡΣΟ ΚΙΛΚΙΣ', Prefecture: 'Κιλκίς' },
    { PostalCode: '61003', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΚΙΛΚΙΣ, ΑΓΙΟΣ ΧΑΡΑΛΑΜΠΟΣ ΚΙΛΚΙΣ, ΑΚΑΚΙΕΣ ΚΙΛΚΙΣ, ΑΚΡΙΤΑΣ ΚΙΛΚΙΣ, ΑΛΕΞΑΝΔΡΑ ΚΙΛΚΙΣ, ΑΜΑΡΑΝΤΑ ΚΙΛΚΙΣ, ΑΝΩ ΣΟΥΡΜΕΝΑ ΚΙΛΚΙΣ, ΔΟΙΡΑΝΗ ΚΙΛΚΙΣ, ΔΡΟΣΑΤΟ ΚΙΛΚΙΣ, ΚΑΒΑΛΛΑΡΗΣ ΚΙΛΚΙΣ, ΚΑΛΛΙΡΡΟΗ ΚΙΛΚΙΣ, ΚΑΤΩ ΣΟΥΡΜΕΝΑ ΚΙΛΚΙΣ, ΚΟΡΥΦΗ ΚΙΛΚΙΣ, ΜΙΚΡΟΒΡΥΣΗ ΚΙΛΚΙΣ, ΜΟΥΡΙΕΣ ΚΙΛΚΙΣ, ΜΥΡΙΟΦΥΤΟ ΚΙΛΚΙΣ, ΝΕΟ ΜΥΡΙΟΦΥΤΟ ΚΙΛΚΙΣ, ΡΟΔΩΝΑΣ ΚΙΛΚΙΣ, ΣΤΑΘΜΟΣ ΜΟΥΡΙΩΝ ΚΙΛΚΙΣ, ΣΥΚΑΜΙΝΕΑ ΚΙΛΚΙΣ, ΨΥΧΟΒΡΥΣΗ ΚΙΛΚΙΣ', Prefecture: 'Κιλκίς' },
    { PostalCode: '61004', Area: 'ΚΙΛΚΙΣ ΚΙΛΚΙΣ', Prefecture: 'Κιλκίς' },
    { PostalCode: '61007', Area: 'ΕΥΡΩΠΟΣ ΚΙΛΚΙΣ', Prefecture: 'Κιλκίς' },
    { PostalCode: '61100', Area: 'ΑΓΙΟΣ ΑΝΤΩΝΙΟΣ ΚΙΛΚΙΣ, ΑΓΙΟΣ ΜΑΡΚΟΣ ΚΙΛΚΙΣ, ΑΚΡΟΠΟΤΑΜΙΑ ΚΙΛΚΙΣ, ΑΝΑΒΡΥΤΟ ΚΙΛΚΙΣ, ΑΝΘΟΦΥΤΟ ΚΙΛΚΙΣ, ΑΝΤΙΓΟΝΕΙΑ ΚΙΛΚΙΣ, ΑΝΩ ΑΠΟΣΤΟΛΟΙ ΚΙΛΚΙΣ, ΑΝΩ ΠΟΤΑΜΙΑ ΚΙΛΚΙΣ, ΑΡΓΥΡΟΥΠΟΛΗ ΚΙΛΚΙΣ, ΒΑΠΤΙΣΤΗΣ ΚΙΛΚΙΣ, ΓΑΒΡΑ ΚΙΛΚΙΣ, ΓΑΛΛΙΚΟΣ ΚΙΛΚΙΣ, ΔΑΦΝΟΧΩΡΙ ΚΙΛΚΙΣ, ΔΙΠΟΤΑΜΟΣ ΚΙΛΚΙΣ, ΕΠΤΑΛΟΦΟΣ ΚΙΛΚΙΣ, ΕΥΚΑΡΠΙΑ ΚΙΛΚΙΣ, ΖΑΧΑΡΑΤΟ ΚΙΛΚΙΣ, ΗΛΙΟΛΟΥΣΤΟ ΚΙΛΚΙΣ, ΚΑΛΟΛΙΒΑΔΟ ΚΙΛΚΙΣ, ΚΑΜΠΑΝΗΣ ΚΙΛΚΙΣ, ΚΑΣΤΑΝΙΕΣ ΚΙΛΚΙΣ, ΚΑΤΩ ΑΠΟΣΤΟΛΟΙ ΚΙΛΚΙΣ, ΚΑΤΩ ΠΟΤΑΜΙΑ ΚΙΛΚΙΣ, ΚΕΝΤΡΙΚΟ ΚΙΛΚΙΣ, ΚΙΛΚΙΣ ΚΙΛΚΙΣ, ΚΟΙΛΑΔΙ ΚΙΛΚΙΣ, ΚΟΚΚΙΝΙΑ ΚΙΛΚΙΣ, ΚΟΛΧΙΔΑ ΚΙΛΚΙΣ, ΚΟΡΩΝΟΥΔΑ ΚΙΛΚΙΣ, ΚΡΗΣΤΩΝΗ ΚΙΛΚΙΣ, ΚΥΡΙΑΚΑΙΙΚΑ ΚΙΛΚΙΣ, ΛΑΟΔΙΚΗΝΟ ΚΙΛΚΙΣ, ΛΕΒΕΝΤΟΧΩΡΙ ΚΙΛΚΙΣ, ΛΕΙΨΥΔΡΙΟ ΚΙΛΚΙΣ, ΜΑΝΔΡΕΣ ΚΙΛΚΙΣ, ΜΑΥΡΟΝΕΡΙ ΚΙΛΚΙΣ, ΜΑΥΡΟΠΛΑΓΙΑ ΚΙΛΚΙΣ, ΜΕΓΑΛΗ ΒΡΥΣΗ ΚΙΛΚΙΣ, ΜΕΛΙΣΣΟΥΡΓΕΙΟ ΚΙΛΚΙΣ, ΜΕΣΙΑΝΟ ΚΙΛΚΙΣ, ΜΕΣΟΙ ΑΠΟΣΤΟΛΟΙ ΚΙΛΚΙΣ, ΜΕΤΑΛΛΙΚΟ ΚΙΛΚΙΣ, ΜΕΤΑΞΟΧΩΡΙ ΚΙΛΚΙΣ, ΜΙΚΡΟΚΑΜΠΟΣ ΚΙΛΚΙΣ, ΜΟΝΟΛΙΘΙ ΚΙΛΚΙΣ, ΜΠΑΚΑΙΙΚΑ ΚΙΛΚΙΣ, ΜΥΛΟΣ ΚΙΛΚΙΣ, ΜΥΛΟΧΩΡΙ ΚΙΛΚΙΣ, ΝΕΑ ΣΑΝΤΑ ΚΙΛΚΙΣ, ΝΕΟ ΑΓΙΟΝΕΡΙ ΚΙΛΚΙΣ, ΝΕΟ ΓΥΝΑΙΚΟΚΑΣΤΡΟ ΚΙΛΚΙΣ, ΞΗΡΟΒΡΥΣΗ ΚΙΛΚΙΣ, ΞΥΛΟΚΕΡΑΤΕΑ ΚΙΛΚΙΣ, ΠΑΛΑΙΟ ΑΓΙΟΝΕΡΙ ΚΙΛΚΙΣ, ΠΑΛΑΙΟ ΓΥΝΑΙΚΟΚΑΣΤΡΟ ΚΙΛΚΙΣ, ΠΑΛΑΤΙΑΝΟ ΚΙΛΚΙΣ, ΠΑΡΟΧΘΙΟ ΚΙΛΚΙΣ, ΠΕΔΙΝΟ ΚΙΛΚΙΣ, ΠΕΡΙΝΘΟΣ ΚΙΛΚΙΣ, ΠΕΡΙΣΤΕΡΙ ΚΙΛΚΙΣ, ΠΕΤΡΑΔΕΣ ΚΙΛΚΙΣ, ΠΙΚΡΟΛΙΜΝΗ ΚΙΛΚΙΣ, ΠΛΑΓΙΟΧΩΡΙ ΚΙΛΚΙΣ, ΠΟΝΤΟΚΕΡΑΣΙΑ ΚΙΛΚΙΣ, ΠΥΡΓΩΤΟΣ ΚΙΛΚΙΣ, ΣΕΒΑΣΤΟ ΚΙΛΚΙΣ, ΣΤΑΥΡΟΧΩΡΙ ΚΙΛΚΙΣ, ΤΕΡΠΥΛΛΟΣ ΚΙΛΚΙΣ, ΤΡΙΠΟΤΑΜΟΣ ΚΙΛΚΙΣ, ΦΑΝΑΡΙ ΚΙΛΚΙΣ, ΧΕΙΜΑΔΙΟ ΚΙΛΚΙΣ, ΧΡΥΣΟΠΕΤΡΑ ΚΙΛΚΙΣ, ΧΩΡΥΓΙ ΚΙΛΚΙΣ', Prefecture: 'Κιλκίς' },
    { PostalCode: '61200', Area: 'ΑΞΙΟΧΩΡΙ ΚΙΛΚΙΣ, ΑΣΠΡΟΣ ΚΙΛΚΙΣ, ΒΑΚΟΥΦΙ ΚΙΛΚΙΣ, ΒΑΛΤΟΥΔΙ ΚΙΛΚΙΣ, ΒΑΦΙΟΧΩΡΙ ΚΙΛΚΙΣ, ΕΙΡΗΝΙΚΟ ΚΙΛΚΙΣ, ΕΥΖΩΝΟΙ ΚΙΛΚΙΣ, ΚΑΣΤΡΟ ΚΙΛΚΙΣ, ΚΟΚΑΡΤΖΑ ΚΙΛΚΙΣ, ΚΟΡΩΝΑ ΚΙΛΚΙΣ, ΚΟΤΥΛΙ ΚΙΛΚΙΣ, ΚΟΥΛΙΝΑΙΙΚΑ ΚΙΛΚΙΣ, ΛΑΤΟΜΕΙΟ ΚΙΛΚΙΣ, ΛΙΜΝΟΤΟΠΟΣ ΚΙΛΚΙΣ, ΜΕΤΑΜΟΡΦΩΣΗ ΚΙΛΚΙΣ, ΜΙΚΡΟ ΔΑΣΟΣ ΚΙΛΚΙΣ, ΝΕΑ ΚΑΒΑΛΑ ΚΙΛΚΙΣ, ΝΕΟ ΣΥΡΑΚΙ ΚΙΛΚΙΣ, ΞΗΡΟΛΑΚΚΟΣ ΚΙΛΚΙΣ, ΠΕΥΚΟΔΑΣΟΣ ΚΙΛΚΙΣ, ΠΛΑΤΑΝΙΑ ΕΥΖΩΝΩΝ ΚΙΛΚΙΣ, ΠΛΑΤΑΝΙΕΣ ΚΙΛΚΙΣ, ΠΟΛΥΚΑΣΤΡΟ ΚΙΛΚΙΣ, ΠΟΝΤΟΗΡΑΚΛΕΙΑ ΚΙΛΚΙΣ, ΣΙΤΑΡΙΑ ΚΙΛΚΙΣ, ΧΕΡΣΟΤΟΠΙ ΚΙΛΚΙΣ, ΧΡΥΣΟΚΑΜΠΟΣ ΚΙΛΚΙΣ', Prefecture: 'Κιλκίς' },
    { PostalCode: '61300', Area: 'ΑΓΙΟΣ ΠΕΤΡΟΣ ΚΙΛΚΙΣ, ΓΕΡΑΚΩΝΑΣ ΚΙΛΚΙΣ, ΓΟΥΜΕΝΙΣΣΑ ΚΙΛΚΙΣ, ΓΡΙΒΑ ΚΙΛΚΙΣ, ΚΑΡΠΗ ΚΙΛΚΙΣ, ΚΑΣΤΑΝΕΡΗ ΚΙΛΚΙΣ, ΛΙΒΑΔΙΑ ΚΙΛΚΙΣ, ΟΜΑΛΟ ΚΙΛΚΙΣ, ΠΕΝΤΑΛΟΦΟΣ ΚΙΛΚΙΣ, ΦΙΛΥΡΙΑ ΚΙΛΚΙΣ', Prefecture: 'Κιλκίς' },
    { PostalCode: '50001', Area: 'ΑΗΔΟΝΟΧΩΡΙ ΚΟΖΑΝΗΣ, ΑΛΙΑΚΜΩΝΑΣ ΚΟΖΑΝΗΣ, ΑΞΙΟΚΑΣΤΡΟ ΚΟΖΑΝΗΣ, ΑΣΠΡΟΥΛΑ ΚΟΖΑΝΗΣ, ΒΕΛΑΝΙΔΙΑ ΚΟΖΑΝΗΣ, ΚΑΛΛΙΣΤΡΑΤΙ ΚΟΖΑΝΗΣ, ΚΛΗΜΑ ΚΟΖΑΝΗΣ, ΚΡΥΟΝΕΡΙ ΚΟΖΑΝΗΣ, ΜΕΛΙΔΟΝΙ ΚΟΖΑΝΗΣ, ΜΕΣΟΛΟΓΓΟΣ ΚΟΖΑΝΗΣ, ΜΟΛΟΧΑ ΚΟΖΑΝΗΣ, ΝΕΑΠΟΛΗ ΚΟΖΑΝΗΣ, ΠΑΝΑΓΙΑ ΧΟΡΗΓΟΥ ΚΟΖΑΝΗΣ, ΠΑΝΑΡΕΤΗ ΚΟΖΑΝΗΣ, ΠΕΠΟΝΙΑ ΚΟΖΑΝΗΣ, ΠΕΡΙΣΤΕΡΑ ΚΟΖΑΝΗΣ, ΠΛΑΤΑΝΙΑ ΚΟΖΑΝΗΣ, ΠΟΛΥΛΑΚΚΟ ΚΟΖΑΝΗΣ, ΠΥΛΩΡΙ ΚΟΖΑΝΗΣ, ΣΗΜΑΝΤΡΟ ΚΟΖΑΝΗΣ, ΣΤΕΡΝΑ ΚΟΖΑΝΗΣ, ΤΡΑΠΕΖΙΤΣΑ ΚΟΖΑΝΗΣ, ΧΕΙΜΕΡΙΝΟ ΚΟΖΑΝΗΣ, ΧΟΡΗΓΟΣ ΚΟΖΑΝΗΣ', Prefecture: 'Κοζάνης' },
    { PostalCode: '50002', Area: 'ΑΓΙΑ ΣΩΤΗΡΑ ΚΟΖΑΝΗΣ, ΑΓΙΑΣΜΑ ΚΟΖΑΝΗΣ, ΑΓΙΟΙ ΑΝΑΡΓΥΡΟΙ ΚΟΖΑΝΗΣ, ΑΓΙΟΣ ΘΕΟΔΩΡΟΣ ΚΟΖΑΝΗΣ, ΑΝΘΟΥΣΑ ΚΟΖΑΝΗΣ, ΑΝΘΟΧΩΡΙ ΚΟΖΑΝΗΣ, ΑΠΙΔΕΑ ΚΟΖΑΝΗΣ, ΑΧΛΑΔΙΑ ΚΟΖΑΝΗΣ, ΒΟΥΧΩΡΙΝΑ ΚΟΖΑΝΗΣ, ΒΡΟΝΤΗ ΚΟΖΑΝΗΣ, ΓΛΥΚΟΚΕΡΑΣΕΑ ΚΟΖΑΝΗΣ, ΔΑΜΑΣΚΗΝΙΑ ΚΟΖΑΝΗΣ, ΔΑΦΝΗ ΚΟΖΑΝΗΣ, ΔΙΧΕΙΜΑΡΡΟ ΚΟΖΑΝΗΣ, ΔΡΑΓΑΣΙΑ ΚΟΖΑΝΗΣ, ΖΩΝΗ ΚΟΖΑΝΗΣ, ΚΛΕΙΣΩΡΕΙΑ ΚΟΖΑΝΗΣ, ΚΟΙΛΑΔΑ ΑΓΙΑΣΜΑΤΟΣ ΚΟΖΑΝΗΣ, ΚΟΡΥΦΗ ΚΟΖΑΝΗΣ, ΚΡΙΜΗΝΙΟ ΚΟΖΑΝΗΣ, ΛΕΥΚΑΔΙ ΚΟΖΑΝΗΣ, ΛΕΥΚΗ ΚΟΖΑΝΗΣ, ΛΕΥΚΟΘΕΑ ΚΟΖΑΝΗΣ, ΛΙΚΝΑΔΕΣ ΚΟΖΑΝΗΣ, ΛΟΥΒΡΗ ΚΟΖΑΝΗΣ, ΛΟΥΚΟΜΙ ΚΟΖΑΝΗΣ, ΜΟΡΦΗ ΚΟΖΑΝΗΣ, ΟΜΑΛΗ ΚΟΖΑΝΗΣ, ΠΑΡΟΧΘΙΟ ΚΟΖΑΝΗΣ, ΠΛΑΚΙΔΑ ΚΟΖΑΝΗΣ, ΠΟΛΥΚΑΣΤΑΝΟ ΚΟΖΑΝΗΣ, ΡΟΔΟΧΩΡΙ ΚΟΖΑΝΗΣ, ΡΟΚΑΣΤΡΟ ΚΟΖΑΝΗΣ, ΣΤΑΥΡΟΔΡΟΜΙ ΚΟΖΑΝΗΣ, ΤΡΙΑΔΑ ΚΟΖΑΝΗΣ, ΤΣΟΤΙΛΙ ΚΟΖΑΝΗΣ, ΦΥΤΩΚΙΟ ΚΟΖΑΝΗΣ, ΧΡΥΣΑΥΓΗ ΚΟΖΑΝΗΣ', Prefecture: 'Κοζάνης' },
    { PostalCode: '50003', Area: 'ΔΡΥΟΒΟΥΝΟ ΚΟΖΑΝΗΣ, ΕΡΑΤΥΡΑ ΚΟΖΑΝΗΣ, ΝΑΜΑΤΑ ΚΟΖΑΝΗΣ, ΠΕΛΕΚΑΝΟΣ ΚΟΖΑΝΗΣ, ΣΙΣΑΝΙΟ ΚΟΖΑΝΗΣ', Prefecture: 'Κοζάνης' },
    { PostalCode: '50004', Area: 'ΑΙΑΝΗ ΚΟΖΑΝΗΣ, ΚΕΡΑΣΕΑ ΚΟΖΑΝΗΣ, ΚΤΕΝΙ ΚΟΖΑΝΗΣ, ΧΡΩΜΙΟ ΚΟΖΑΝΗΣ', Prefecture: 'Κοζάνης' },
    { PostalCode: '50005', Area: 'ΑΝΑΡΡΑΧΗ ΚΟΖΑΝΗΣ, ΒΑΡΙΚΟ ΚΟΖΑΝΗΣ, ΕΜΠΟΡΙΟ ΚΟΖΑΝΗΣ, ΚΡΥΟΒΡΥΣΗ ΚΟΖΑΝΗΣ, ΜΗΛΟΧΩΡΙ ΚΟΖΑΝΗΣ, ΦΟΥΦΑΣ ΚΟΖΑΝΗΣ', Prefecture: 'Κοζάνης' },
    { PostalCode: '50007', Area: 'ΒΥΘΟΣ ΚΟΖΑΝΗΣ, ΔΑΣΥΛΛΙΟ ΓΡΕΒΕΝΩΝ, ΔΙΛΟΦΟ ΚΟΖΑΝΗΣ, ΕΠΤΑΧΩΡΙ ΚΑΣΤΟΡΙΑΣ, ΠΕΝΤΑΛΟΦΟΣ ΚΟΖΑΝΗΣ, ΠΕΥΚΟΦΥΤΟ ΚΑΣΤΟΡΙΑΣ, ΧΡΥΣΗ ΚΑΣΤΟΡΙΑΣ', Prefecture: 'Κοζάνης' },
    { PostalCode: '50010', Area: 'ΑΜΥΓΔΑΛΙΑ ΚΟΖΑΝΗΣ, ΑΝΑΤΟΛΗ ΚΟΖΑΝΗΣ, ΑΝΩ ΚΩΜΗ ΚΟΖΑΝΗΣ, ΚΑΙΣΑΡΕΙΑ ΚΟΖΑΝΗΣ, ΚΑΤΩ ΚΩΜΗ ΚΟΖΑΝΗΣ, ΚΗΠΟΣ ΚΟΖΑΝΗΣ, ΚΟΝΤΟΒΟΥΝΙ ΚΟΖΑΝΗΣ, ΚΡΟΚΟΣ ΚΟΖΑΝΗΣ, ΜΗΛΕΑ ΚΟΖΑΝΗΣ, ΠΥΡΓΟΣ ΚΟΖΑΝΗΣ, ΣΠΑΡΤΟ ΚΟΖΑΝΗΣ, ΣΤΑΥΡΩΤΗ ΚΟΖΑΝΗΣ', Prefecture: 'Κοζάνης' },
    { PostalCode: '50100', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΚΟΖΑΝΗΣ ΚΟΖΑΝΗΣ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΚΟΖΑΝΗΣ, ΑΓΙΟ ΠΝΕΥΜΑ ΚΟΖΑΝΗΣ, ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΠΟΛΥΜΥΛΟΥ ΚΟΖΑΝΗΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΚΟΖΑΝΗΣ, ΑΓΙΟΣ ΧΑΡΑΛΑΜΠΟΣ ΚΟΖΑΝΗΣ, ΑΕΡΟΔΡΟΜΙΟ ΚΟΖΑΝΗΣ, ΑΚΡΙΝΗ ΚΟΖΑΝΗΣ, ΑΚΡΙΤΑΣ ΚΟΖΑΝΗΣ, ΑΛΩΝΑΚΙΑ ΚΟΖΑΝΗΣ, ΑΝΑΤΟΛΙΚΟ ΚΑΠΝΟΧΩΡΙΟΥ ΚΟΖΑΝΗΣ, ΑΝΘΟΤΟΠΟΣ ΚΟΖΑΝΗΣ, ΑΡΓΙΛΟΣ ΚΟΖΑΝΗΣ, ΑΥΓΗ ΚΟΖΑΝΗΣ, ΑΥΡΑ ΚΟΖΑΝΗΣ, ΒΑΘΥΛΑΚΚΟΣ ΚΟΖΑΝΗΣ, ΒΑΤΕΡΟ ΚΟΖΑΝΗΣ, ΒΟΣΚΟΧΩΡΙ ΚΟΖΑΝΗΣ, ΓΑΛΑΝΙΟ ΚΟΖΑΝΗΣ, ΓΗΡΟΚΟΜΕΙΟ ΚΟΖΑΝΗΣ, ΔΡΕΠΑΝΟ ΚΟΖΑΝΗΣ, ΕΞΟΧΗ ΚΟΖΑΝΗΣ, ΖΩΟΔΟΧΟΣ ΠΗΓΗ ΚΟΖΑΝΗΣ, ΘΥΜΑΡΙΑ ΚΟΖΑΝΗΣ, ΙΕΡΑ ΜΟΝΗ ΑΝΑΛΗΨΕΩΣ ΚΟΖΑΝΗΣ, ΙΜΕΡΑ ΚΟΖΑΝΗΣ, ΚΑΛΑΜΙΑ ΚΟΖΑΝΗΣ, ΚΑΠΝΟΧΩΡΙ ΚΟΖΑΝΗΣ, ΚΑΡΥΔΙΤΣΑ ΚΟΖΑΝΗΣ, ΚΗΠΑΡΙΟ ΚΟΖΑΝΗΣ, ΚΟΖΑΝΗ ΚΟΖΑΝΗΣ, ΚΟΙΛΑ ΚΟΖΑΝΗΣ, ΚΟΙΛΑΔΑ ΚΟΖΑΝΗΣ ΚΟΖΑΝΗΣ, ΚΟΚΚΙΝΑΡΑΣ ΚΟΖΑΝΗΣ, ΚΟΥΒΟΥΚΛΙΑ ΚΟΖΑΝΗΣ, ΚΡΕΜΑΣΤΗ ΚΟΖΑΝΗΣ, ΛΕΒΕΝΤΗΣ ΚΟΖΑΝΗΣ, ΛΕΥΚΑΡΑ ΚΟΖΑΝΗΣ, ΛΕΥΚΟΒΡΥΣΗ ΚΟΖΑΝΗΣ, ΛΕΥΚΟΠΗΓΗ ΚΟΖΑΝΗΣ, ΛΙΒΕΡΑ ΚΟΖΑΝΗΣ, ΛΥΓΕΡΗ ΚΟΖΑΝΗΣ, ΜΕΛΙΣΣΙΑ ΚΟΖΑΝΗΣ, ΜΕΣΙΑΝΗ ΚΟΖΑΝΗΣ, ΜΕΤΑΜΟΡΦΩΣΗ ΚΟΖΑΝΗΣ, ΝΕΑ ΝΙΚΟΠΟΛΗ ΚΟΖΑΝΗΣ, ΝΕΑ ΧΑΡΑΥΓΗ ΚΟΖΑΝΗΣ, ΝΕΡΑΙΔΑ ΚΟΖΑΝΗΣ, ΞΗΡΟΛΙΜΝΗ ΚΟΖΑΝΗΣ, ΟΙΝΟΗ ΚΟΖΑΝΗΣ, ΠΕΤΡΑΝΑ ΚΟΖΑΝΗΣ, ΠΟΛΥΜΥΛΟΣ ΚΟΖΑΝΗΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΚΟΖΑΝΗΣ, ΠΡΩΤΟΧΩΡΙ ΚΟΖΑΝΗΣ, ΠΤΕΛΕΑ ΕΟΡΔΑΙΑΣ ΚΟΖΑΝΗΣ, ΠΤΕΛΕΑ ΚΟΖΑΝΗΣ ΚΟΖΑΝΗΣ, ΡΟΔΙΑΝΗ ΚΟΖΑΝΗΣ, ΡΟΔΙΤΗΣ ΚΟΖΑΝΗΣ, ΡΥΑΚΙ ΚΟΖΑΝΗΣ, ΣΙΔΕΡΑΣ ΚΟΖΑΝΗΣ, ΣΚΑΦΗ ΚΟΖΑΝΗΣ, ΣΚΗΤΗ ΚΟΖΑΝΗΣ, ΣΠΙΝΑΡΗΣ (ΚΛΙΝΙΚΗ) ΚΟΖΑΝΗΣ, ΣΧΟΛΕΣ ΟΑΕΔ ΚΟΖΑΝΗΣ, ΤΕΤΡΑΛΟΦΟΣ ΚΟΖΑΝΗΣ, ΤΣΕΛΙΚΑΣ ΚΟΖΑΝΗΣ, ΦΥΛΑΚΙΟ ΚΟΖΑΝΗΣ', Prefecture: 'Κοζάνης' },
    { PostalCode: '50200', Area: 'ΑΓΙΟΣ ΧΡΙΣΤΟΦΟΡΟΣ ΚΟΖΑΝΗΣ, ΑΝΑΡΓΥΡΟΙ ΦΛΩΡΙΝΑΣ, ΑΝΑΤΟΛΙΚΟ ΕΟΡΔΑΙΑΣ ΚΟΖΑΝΗΣ, ΑΡΔΑΣΣΑ ΚΟΖΑΝΗΣ, ΑΣΒΕΣΤΟΠΕΤΡΑ ΚΟΖΑΝΗΣ, ΓΑΛΑΤΕΙΑ ΚΟΖΑΝΗΣ, ΓΕΝΙΚΟ ΝΟΣΟΚΟΜΕΙΟ ΜΠΟΔΟΣΑΚΕΙΟ ΚΟΖΑΝΗΣ, ΔΡΟΣΕΡΟ ΚΟΖΑΝΗΣ, ΕΡΜΑΚΙΑ ΚΟΖΑΝΗΣ, ΚΑΡΔΙΑ ΚΟΖΑΝΗΣ, ΚΑΡΥΟΧΩΡΙ ΚΟΖΑΝΗΣ, ΚΛΕΙΤΟΣ ΚΟΖΑΝΗΣ, ΚΟΜΑΝΟΣ ΚΟΖΑΝΗΣ, ΜΑΥΡΟΔΕΝΔΡΙ ΚΟΖΑΝΗΣ, ΜΑΥΡΟΠΗΓΗ ΚΟΖΑΝΗΣ, ΞΕΝΟΔΟΧΕΙΟ ΠΑΝΤΕΛΙΔΗΣ ΚΟΖΑΝΗΣ, ΞΕΝΟΔΟΧΕΙΟ ΠΤΟΛΕΜΑΙΟΣ ΚΟΖΑΝΗΣ, ΟΛΥΜΠΙΑΔΑ ΚΟΖΑΝΗΣ, ΠΑΛΑΙΑ ΑΜΠΕΛΙΑ ΚΟΖΑΝΗΣ, ΠΕΝΤΑΒΡΥΣΟΣ ΚΟΖΑΝΗΣ, ΠΕΡΔΙΚΚΑΣ ΚΟΖΑΝΗΣ, ΠΟΝΤΟΚΩΜΗ ΚΟΖΑΝΗΣ, ΠΡΟΑΣΤΙΟ ΚΟΖΑΝΗΣ, ΠΤΟΛΕΜΑΙΔΑ ΚΟΖΑΝΗΣ, ΣΠΗΛΙΑ ΚΟΖΑΝΗΣ, ΧΑΡΑΥΓΗ  ΚΟΖΑΝΗΣ, ΧΑΡΑΥΓΗ ΚΟΙΛΩΝ ΚΟΖΑΝΗΣ', Prefecture: 'Κοζάνης' },
    { PostalCode: '50300', Area: 'ΓΑΛΑΤΙΝΗ ΚΟΖΑΝΗΣ, ΔΑΦΝΕΡΟ ΚΟΖΑΝΗΣ, ΚΑΛΟΝΕΡΙ ΚΟΖΑΝΗΣ, ΜΙΚΡΟΚΑΣΤΡΟ ΚΟΖΑΝΗΣ, ΜΟΝΗ ΚΟΙΜΗΣΕΩΣ ΘΕΟΤΟΚΟΥ ΜΙΚΡΟΚΑΣΤΡΟΥ ΚΟΖΑΝΗΣ, ΠΑΛΑΙΟΚΑΣΤΡΟ ΚΟΖΑΝΗΣ, ΣΙΑΤΙΣΤΑ ΚΟΖΑΝΗΣ', Prefecture: 'Κοζάνης' },
    { PostalCode: '50400', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΒΕΛΒΕΝΤΟΥ ΚΟΖΑΝΗΣ, ΒΕΛΒΕΝΤΟΣ ΚΟΖΑΝΗΣ, ΚΑΤΑΦΥΓΙΟ ΚΟΖΑΝΗΣ, ΠΑΛΑΙΟΓΡΑΤΣΑΝΟ ΚΟΖΑΝΗΣ, ΠΟΛΥΦΥΤΟ ΚΟΖΑΝΗΣ', Prefecture: 'Κοζάνης' },
    { PostalCode: '50500', Area: 'ΑΥΛΕΣ ΚΟΖΑΝΗΣ, ΓΟΥΛΕΣ ΚΟΖΑΝΗΣ, ΕΛΑΤΗ ΚΟΖΑΝΗΣ, ΚΑΣΤΑΝΙΑ ΚΟΖΑΝΗΣ, ΚΡΑΝΙΔΙΑ ΚΟΖΑΝΗΣ, ΛΑΒΑ ΚΟΖΑΝΗΣ, ΛΑΖΑΡΑΔΕΣ ΚΟΖΑΝΗΣ, ΛΙΒΑΔΕΡΟ ΚΟΖΑΝΗΣ, ΜΕΤΑΞΑΣ ΚΟΖΑΝΗΣ, ΜΙΚΡΟΒΑΛΤΟ ΚΟΖΑΝΗΣ, ΜΟΝΗ ΣΤΑΝΟΥ ΚΟΖΑΝΗΣ, ΝΕΑ ΛΑΒΑ ΚΟΖΑΝΗΣ, ΠΛΑΤΑΝΟΡΡΕΥΜΑ ΚΟΖΑΝΗΣ, ΠΟΛΥΡΡΑΧΟ ΚΟΖΑΝΗΣ, ΠΡΟΣΗΛΙΟ ΚΟΖΑΝΗΣ, ΡΥΜΝΙΟ ΚΟΖΑΝΗΣ, ΣΕΡΒΙΑ ΚΟΖΑΝΗΣ, ΤΡΑΝΟΒΑΛΤΟ ΚΟΖΑΝΗΣ, ΤΡΙΓΩΝΙΚΟ ΚΟΖΑΝΗΣ, ΦΡΟΥΡΙΟ ΚΟΖΑΝΗΣ', Prefecture: 'Κοζάνης' },
    { PostalCode: '20001', Area: 'ΖΕΥΓΟΛΑΤΕΙΟ ΚΟΡΙΝΘΟΥ, ΚΑΛΕΝΤΖΙ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20002', Area: 'ΒΕΛΟ ΚΟΡΙΝΘΟΥ, ΕΛΛΗΝΟΧΩΡΙ ΚΟΡΙΝΘΟΥ, ΚΟΚΚΩΝΙ ΚΟΡΙΝΘΟΥ, ΚΡΗΝΕΣ ΚΟΡΙΝΘΟΥ, ΝΕΡΑΝΤΖΑ ΚΟΡΙΝΘΟΥ, ΣΑΤΑΙΙΚΑ ΚΟΡΙΝΘΟΥ, ΣΤΙΜΑΓΚΑ ΚΟΡΙΝΘΟΥ, ΤΑΡΣΙΝΑ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20003', Area: 'ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΚΟΡΙΝΘΟΥ, ΑΡΤΕΜΙΔΟΣ ΚΟΡΙΝΘΟΥ, ΓΑΛΗΝΗ ΚΟΡΙΝΘΟΥ, ΓΕΡΑΝΕΙΑ ΚΟΡΙΝΘΟΥ, ΚΑΛΥΒΙΤΣΕΣ ΚΟΡΙΝΘΟΥ, ΚΑΜΙΝΑΚΙ ΚΟΡΙΝΘΟΥ, ΚΑΤΣΙΒΙΡΙ ΚΟΡΙΝΘΟΥ, ΚΟΚΚΙΝΗ ΣΠΗΛΙΑ ΚΟΡΙΝΘΟΥ, ΛΙΟΝΤΑΡΙ ΚΟΡΙΝΘΟΥ, ΜΠΕΚΑ ΚΙΑΦΑ ΚΟΡΙΝΘΟΥ, ΜΠΕΣΚΑΚΗ ΚΟΡΙΝΘΟΥ, ΝΕΑ ΠΟΛΙΤΕΙΑ ΚΟΡΙΝΘΟΥ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΚΟΡΙΝΘΟΥ, ΣΕΣΙ ΚΟΡΙΝΘΟΥ, ΣΚΥΡΩΝΙΔΑ ΚΟΡΙΝΘΟΥ, ΣΟΥΣΑΚΙ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20004', Area: 'ΑΓΓΕΛΟΚΑΣΤΡΟ ΚΟΡΙΝΘΟΥ, ΑΓΙΟΣ ΒΛΑΣΣΗΣ ΚΟΡΙΝΘΟΥ, ΑΓΙΟΣ ΠΕΤΡΟΣ ΚΟΡΙΝΘΟΥ, ΚΑΒΟΣ ΣΟΛΥΓΕΙΑΣ ΚΟΡΙΝΘΟΥ, ΚΙΟΥΡΚΑΤΙ ΚΟΡΙΝΘΟΥ, ΚΟΡΦΟΣ ΚΟΡΙΝΘΟΥ, ΜΟΝΗ ΑΓΙΑΣ ΜΑΡΙΝΑΣ ΚΟΡΙΝΘΟΥ, ΠΕΥΚΑΛΙ ΚΟΡΙΝΘΟΥ, ΡΥΤΟ ΚΟΡΙΝΘΟΥ, ΣΟΦΙΚΟ ΚΟΡΙΝΘΟΥ, ΦΡΑΓΚΟΛΙΜΑΝΟ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20006', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΚΟΡΙΝΘΟΥ, ΑΣΣΟΣ ΚΟΡΙΝΘΟΥ, ΒΕΛΗΝΙΑΤΙΚΑ ΚΟΡΙΝΘΟΥ, ΒΟΧΑΙΚΟ ΚΟΡΙΝΘΟΥ, ΒΡΑΧΑΤΙ ΚΟΡΙΝΘΟΥ, ΕΥΑΓΓΕΛΙΣΤΡΙΑ ΚΟΡΙΝΘΟΥ, ΚΑΤΩ ΑΣΣΟΣ ΚΟΡΙΝΘΟΥ, ΜΠΟΛΑΤΙ ΚΟΡΙΝΘΟΥ, ΠΟΥΛΛΙΤΣΑ ΚΟΡΙΝΘΟΥ, ΣΟΥΛΗΝΑΡΙ ΚΟΡΙΝΘΟΥ, ΧΑΛΚΕΙΟ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20008', Area: 'ΑΓΙΟΝΟΡΙ ΚΟΡΙΝΘΟΥ, ΚΛΕΝΙΑ ΚΟΡΙΝΘΟΥ, ΚΟΥΤΑΛΑΣ ΚΟΡΙΝΘΟΥ, ΜΑΨΟΣ ΚΟΡΙΝΘΟΥ, ΣΠΑΘΟΒΟΥΝΙ ΚΟΡΙΝΘΟΥ, ΣΤΕΦΑΝΙ ΚΟΡΙΝΘΟΥ, ΧΙΛΙΟΜΟΔΙ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20009', Area: 'ΑΝΩ ΑΙΓΙΑΛΟΣ ΚΟΡΙΝΘΟΥ, ΔΕΡΒΕΝΙ ΚΟΡΙΝΘΟΥ, ΕΒΡΟΣΤΙΝΑ ΚΟΡΙΝΘΟΥ, ΚΟΥΜΑΡΙΑΣ ΚΟΡΙΝΘΟΥ, ΛΥΓΙΑ ΚΟΡΙΝΘΟΥ, ΜΑΥΡΑ ΛΙΘΑΡΙΑ ΚΟΡΙΝΘΟΥ, ΜΕΝΤΟΥΡΓΙΑΝΙΚΑ ΚΟΡΙΝΘΟΥ, ΠΕΤΑΛΟΥ ΚΟΡΙΝΘΟΥ, ΠΥΡΓΟΣ ΚΟΡΙΝΘΟΥ, ΡΟΖΕΝΑ ΚΟΡΙΝΘΟΥ, ΣΤΟΜΙΟ ΚΟΡΙΝΘΟΥ, ΧΕΛΥΔΟΡΕΟ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20011', Area: 'ΛΕΧΑΙΟ ΚΟΡΙΝΘΟΥ, ΠΕΡΙΓΙΑΛΙ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20014', Area: 'ΑΜΥΓΔΑΛΕΑ ΚΟΡΙΝΘΟΥ, ΑΝΩ ΤΑΡΣΟΣ ΚΟΡΙΝΘΟΥ, ΑΡΧΑΙΑ ΦΕΝΕΟΣ ΚΟΡΙΝΘΟΥ, ΑΧΛΑΔΙΕΣ ΚΟΡΙΝΘΟΥ, ΒΙΛΙΑ ΚΟΡΙΝΘΟΥ, ΓΚΟΥΡΑ ΚΟΡΙΝΘΟΥ, ΙΕΡΑ ΜΟΝΗ ΑΓΙΟΥ ΓΕΩΡΓΙΟΥ ΦΕΝΕΟΥ ΚΟΡΙΝΘΟΥ, ΚΑΤΩ ΤΑΡΣΟΣ ΚΟΡΙΝΘΟΥ, ΛΟΥΖΙΟ ΚΟΡΙΝΘΟΥ, ΜΑΤΙ ΚΟΡΙΝΘΟΥ, ΜΕΣΙΝΟ ΚΟΡΙΝΘΟΥ, ΜΟΣΙΑ ΚΟΡΙΝΘΟΥ, ΠΑΝΟΡΑΜΑ ΚΟΡΙΝΘΟΥ, ΣΑΡΑΝΤΑΠΗΧΟ ΚΟΡΙΝΘΟΥ, ΣΤΕΝΟ ΚΟΡΙΝΘΟΥ, ΦΕΝΕΟΣ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20016', Area: 'ΔΡΟΣΟΠΗΓΗ ΚΟΡΙΝΘΟΥ, ΚΑΛΙΑΝΟΙ ΚΟΡΙΝΘΟΥ, ΚΑΡΤΕΡΙ ΚΟΡΙΝΘΟΥ, ΚΑΣΤΑΝΕΑ ΚΟΡΙΝΘΟΥ, ΚΕΦΑΛΑΡΙ ΚΟΡΙΝΘΟΥ, ΚΙΟΝΙΑ ΚΟΡΙΝΘΟΥ, ΚΥΛΛΗΝΗ ΚΟΡΙΝΘΟΥ, ΛΑΥΚΑ ΚΟΡΙΝΘΟΥ, ΜΙΚΡΟΣ ΜΑΧΑΛΑΣ ΚΟΡΙΝΘΟΥ, ΣΤΥΜΦΑΛΙΑ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20100', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΞΥΛΟΚΕΡΙΖΗΣ ΚΟΡΙΝΘΟΥ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΞΥΛΟΚΕΡΙΖΑΣ ΚΟΡΙΝΘΟΥ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΚΟΡΙΝΘΟΥ, ΑΓΙΟΣ ΚΟΣΜΑΣ ΕΞΑΜΙΛΙΩΝ ΚΟΡΙΝΘΟΥ, ΑΛΑΜΑΝΝΟΣ ΚΟΡΙΝΘΟΥ, ΑΝΩ ΑΛΜΥΡΗ ΚΟΡΙΝΘΟΥ, ΑΡΑΚΟΥΚΙΑ ΚΟΡΙΝΘΟΥ, ΑΡΧΑΙΟ ΛΙΜΑΝΙ ΚΟΡΙΝΘΟΥ, ΒΑΛΤΟΣ ΓΛΥΦΑΔΑΣ ΚΟΡΙΝΘΟΥ, ΒΛΑΣΑΙΙΚΑ ΚΟΡΙΝΘΟΥ, ΓΑΛΑΤΑΚΙ ΚΟΡΙΝΘΟΥ, ΓΕΦΥΡΑ ΙΣΘΜΟΥ ΚΟΡΙΝΘΟΥ, ΔΑΦΝΗ ΕΞΑΜΙΛΙΩΝ ΚΟΡΙΝΘΟΥ, ΕΞΑΜΙΛΙΑ ΚΟΡΙΝΘΟΥ, ΘΥΜΑΡΙΩΝΑ ΚΟΡΙΝΘΟΥ, ΙΕΡΑ ΜΟΝΗ  ΑΓΙΑΣ ΤΡΙΑΔΑΣ ΚΟΡΙΝΘΟΥ, ΚΑΒΟΣ ΚΟΡΙΝΘΟΥ, ΚΑΤΑΚΑΛΙ ΚΟΡΙΝΘΟΥ, ΚΑΤΩ ΑΛΜΥΡΗ ΚΟΡΙΝΘΟΥ, ΚΑΤΩ ΕΞΑΜΙΛΙΑ ΚΟΡΙΝΘΟΥ, ΚΕΧΡΙΕΣ ΚΟΡΙΝΘΟΥ, ΚΟΡΙΝΘΟΣ ΚΟΡΙΝΘΟΥ, ΚΥΡΑ ΒΡΥΣΗ ΚΟΡΙΝΘΟΥ, ΛΟΥΤΡΟ ΕΛΕΝΗΣ ΚΟΡΙΝΘΟΥ, ΜΠΕΚΙΑΝΙΚΑ ΚΟΡΙΝΘΟΥ, ΜΥΡΤΕΖΑ ΚΟΡΙΝΘΟΥ, ΝΕΑ ΑΛΜΥΡΗ ΚΟΡΙΝΘΟΥ, ΝΤΡΑΣΣΑ ΚΟΡΙΝΘΟΥ, ΞΥΛΟΚΕΡΙΖΑ ΚΟΡΙΝΘΟΥ, ΠΑΛΑΙΟ ΚΑΛΑΜΑΚΙ ΚΟΡΙΝΘΟΥ, ΠΑΡΑΔΕΙΣΟΣ ΚΟΡΙΝΘΟΥ, ΣΙΔΕΡΩΝΑ ΚΟΡΙΝΘΟΥ, ΣΟΛΟΜΟΣ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20200', Area: 'ΑΝΑΤΟΛΙΚΗ ΤΡΑΓΑΝΑ ΚΟΡΙΝΘΟΥ, ΒΑΛΤΣΑΙΙΚΑ ΚΟΡΙΝΘΟΥ, ΔΙΜΗΝΙΟ ΚΟΡΙΝΘΟΥ, ΔΟΥΡΒΑΤΙΩΝΑ ΚΟΡΙΝΘΟΥ, ΘΑΛΕΡΟ ΚΟΡΙΝΘΟΥ, ΚΑΤΩ ΔΙΜΗΝΙΟ ΚΟΡΙΝΘΟΥ, ΚΙΑΤΟ ΚΟΡΙΝΘΟΥ, ΚΟΚΚΙΝΙΑ ΚΟΡΙΝΘΟΥ, ΛΑΛΙΩΤΗΣ ΚΟΡΙΝΘΟΥ, ΜΕΛΙΣΣΙ ΚΟΡΙΝΘΟΥ, ΜΟΥΛΚΙΟ ΚΟΡΙΝΘΟΥ, ΟΙΚΟΔΟΜΙΚΟΣ ΣΥΝΕΤ.ΥΠΑΛΛΗΛΩΝ ΔΕΗ ΚΟΡΙΝΘΟΥ, ΠΑΡΑΛΙΑ ΔΙΜΗΝΙΟΥ ΚΟΡΙΝΘΟΥ, ΠΑΣΙΟ ΚΟΡΙΝΘΟΥ, ΣΙΚΥΩΝ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20300', Area: 'ΑΓΙΑ ΣΩΤΗΡΑ ΚΟΡΙΝΘΟΥ, ΑΛΚΥΟΝΑ ΚΟΡΙΝΘΟΥ, ΑΛΚΥΟΝΙΔΕΣ ΝΗΣΟΙ ΚΟΡΙΝΘΟΥ, ΑΣΠΡΟΚΑΜΠΟΣ ΛΟΥΤΡΑΚΙΟΥ ΚΟΡΙΝΘΟΥ, ΒΑΜΒΑΚΕΣ ΚΟΡΙΝΘΟΥ, ΕΙΡΗΝΗ ΚΟΡΙΝΘΟΥ, ΚΑΛΛΙΘΕΑ ΛΟΥΤΡΑΚΙΟΥ ΚΟΡΙΝΘΟΥ, ΛΙΜΝΗ ΒΟΥΛΙΑΓΜΕΝΗΣ ΚΟΡΙΝΘΟΥ, ΛΟΥΤΡΑΚΙ ΚΟΡΙΝΘΟΥ, ΜΑΥΡΟΛΙΜΝΗ ΚΟΡΙΝΘΟΥ, ΜΟΝΗ ΑΓΙΟΥ ΙΩΑΝΝΗ ΚΟΡΙΝΘΟΥ, ΜΟΝΗ ΟΣΙΟΥ ΠΑΤΑΠΙΟΥ ΚΟΡΙΝΘΟΥ, ΠΕΡΑΧΩΡΑ ΚΟΡΙΝΘΟΥ, ΠΙΣΙΑ ΚΟΡΙΝΘΟΥ, ΣΚΑΛΩΜΑ ΚΟΡΙΝΘΟΥ, ΣΧΙΝΟΣ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20400', Area: 'ΑΜΦΙΘΕΑ ΚΟΡΙΝΘΟΥ, ΑΝΩ ΤΡΙΚΑΛΑ ΚΟΡΙΝΘΟΥ, ΒΑΛΤΟΣ ΡΙΖΗΣ ΚΟΡΙΝΘΟΥ, ΓΕΛΙΝΙΑΤΙΚΑ ΚΟΡΙΝΘΟΥ, ΓΕΩΡΓΑΝΤΑΙΙΚΑ ΚΟΡΙΝΘΟΥ, ΔΕΝΔΡΟ ΚΟΡΙΝΘΟΥ, ΖΕΜΕΝΟ ΚΟΡΙΝΘΟΥ, ΖΗΡΕΙΑ ΚΟΡΙΝΘΟΥ, ΗΛΙΟΣ ΚΟΡΙΝΘΟΥ, ΚΑΡΙΩΤΙΚΑ ΚΑΡΥΑΣ ΚΟΡΙΝΘΟΥ, ΚΑΡΥΑ ΚΟΡΙΝΘΟΥ, ΚΑΤΩ ΣΥΝΟΙΚΙΑ ΤΡΙΚΑΛΩΝ ΚΟΡΙΝΘΟΥ, ΛΑΓΚΑΔΑΙΙΚΑ ΚΟΡΙΝΘΟΥ, ΜΕΡΤΙΚΑΙΙΚΑ ΚΟΡΙΝΘΟΥ, ΜΕΣΗ ΣΥΝΟΙΚΙΑ ΤΡΙΚΑΛΩΝ ΚΟΡΙΝΘΟΥ, ΞΑΝΘΟΧΩΡΙ ΚΟΡΙΝΘΟΥ, ΞΥΛΟΚΑΣΤΡΟ ΚΟΡΙΝΘΟΥ, ΠΕΛΛΗΝΗ ΚΟΡΙΝΘΟΥ, ΡΕΘΙΟ ΚΟΡΙΝΘΟΥ, ΡΙΖΑ ΚΟΡΙΝΘΟΥ, ΣΙΓΕΡΙΤΣΑ ΚΟΡΙΝΘΟΥ, ΣΟΦΙΑΝΑ ΚΟΡΙΝΘΟΥ, ΣΠΑΡΤΙΝΑΙΙΚΑ ΚΟΡΙΝΘΟΥ, ΣΥΚΕΑ ΚΟΡΙΝΘΟΥ, ΧΑΡΤΣΙΑΝΙΚΑ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '20500', Area: 'ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΚΟΡΙΝΘΟΥ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΑΡΓΟΥΣ ΑΡΓΟΛΙΔΑΣ, ΑΗΔΟΝΙΑ ΚΟΡΙΝΘΟΥ, ΑΛΕΑ ΑΡΓΟΛΙΔΑΣ, ΑΡΧΑΙΑ ΝΕΜΕΑ ΚΟΡΙΝΘΟΥ, ΑΡΧΑΙΕΣ ΚΛΕΩΝΕΣ ΚΟΡΙΝΘΟΥ, ΑΣΠΡΟΚΑΜΠΟΣ ΝΕΜΕΑΣ ΚΟΡΙΝΘΟΥ, ΓΑΛΑΤΑΣ ΚΟΡΙΝΘΟΥ, ΓΥΜΝΟ ΑΡΓΟΛΙΔΑΣ, ΔΑΦΝΗ ΝΕΜΕΑΣ ΚΟΡΙΝΘΟΥ, ΔΕΡΒΕΝΑΚΙΑ ΚΟΡΙΝΘΟΥ, ΕΞΟΧΗ ΑΡΓΟΛΙΔΑΣ, ΚΑΣΤΡΑΚΙ ΚΟΡΙΝΘΟΥ, ΚΟΥΤΣΙΟ ΚΟΡΙΝΘΟΥ, ΚΟΥΤΣΟΜΟΔΙ ΚΟΡΙΝΘΟΥ, ΛΕΟΝΤΙΟ ΚΟΡΙΝΘΟΥ, ΜΠΟΖΙΚΑΣ ΚΟΡΙΝΘΟΥ, ΝΕΜΕΑ ΚΟΡΙΝΘΟΥ, ΠΕΤΡΙΟ ΚΟΡΙΝΘΟΥ, ΠΛΑΤΑΝΙ ΑΡΓΟΛΙΔΑΣ, ΣΚΟΤΕΙΝΗ ΑΡΓΟΛΙΔΑΣ, ΤΙΤΑΝΗ ΚΟΡΙΝΘΟΥ, ΦΡΟΥΣΙΟΥΝΑ ΑΡΓΟΛΙΔΑΣ, ΨΑΡΙΟ ΚΟΡΙΝΘΟΥ', Prefecture: 'Κορινθίας' },
    { PostalCode: '84001', Area: 'ΑΓΙΑ ΘΕΟΔΟΤΗ ΙΟΥ ΚΥΚΛΑΔΩΝ, ΕΠΑΝΩ ΚΑΜΠΟΣ ΙΟΥ ΚΥΚΛΑΔΩΝ, ΙΟΣ ΚΥΚΛΑΔΩΝ, ΚΟΥΜΠΑΡΑ ΚΥΚΛΑΔΩΝ, ΜΑΓΓΑΝΑΡΙ   ΙΟΥ ΚΥΚΛΑΔΩΝ, ΜΠΟΥΡΗΣ  ΚΥΚΛΑΔΩΝ, ΜΥΛΟΠΟΤΑΣ  ΙΟΥ ΚΥΚΛΑΔΩΝ, ΠΕΤΑΛΙΔΙ ΚΥΚΛΑΔΩΝ, ΨΑΘΗ  ΙΟΥ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84002', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΚΕΑΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΑ ΜΑΥΡΑ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΘΕΟΔΩΡΟΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΙΟΥΛΙΔΟΣ ΚΕΑΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΣΥΜΕΩΝ ΚΕΑΣ ΚΥΚΛΑΔΩΝ, ΑΣΤΡΑΣ ΚΥΚΛΑΔΩΝ, ΒΟΥΡΚΑΡΙ ΚΥΚΛΑΔΩΝ, ΕΛΛΗΝΙΚΑ  ΚΥΚΛΑΔΩΝ, ΖΩΟΔΟΧΟΣ ΠΗΓΗ ΚΕΑΣ ΚΥΚΛΑΔΩΝ, ΙΟΥΛΙΔΑ ΚΥΚΛΑΔΩΝ, ΚΑΛΑΜΟΣ ΚΕΑΣ ΚΥΚΛΑΔΩΝ, ΚΑΜΠΙ ΚΕΑΣ ΚΥΚΛΑΔΩΝ, ΚΑΣΤΑΝΙΕΣ ΚΕΑΣ ΚΥΚΛΑΔΩΝ, ΚΑΣΤΡΙΑΝΗ ΚΥΚΛΑΔΩΝ, ΚΑΤΩ ΜΕΡΙΑ ΚΥΚΛΑΔΩΝ, ΚΟΚΚΙΝΑΔΑ ΚΥΚΛΑΔΩΝ, ΚΟΡΗΣΣΙΑ ΚΥΚΛΑΔΩΝ, ΚΟΥΚΟΥΒΑΓΙΑ ΚΥΚΛΑΔΩΝ, ΚΟΥΝΔΟΥΡΟΣ ΚΥΚΛΑΔΩΝ, ΛΙΓΙΑ ΚΥΚΛΑΔΩΝ, ΜΑΚΡΟΝΗΣΟΣ ΚΥΚΛΑΔΩΝ, ΜΑΡΑΔΕΣ ΚΥΚΛΑΔΩΝ, ΜΑΥΡΑΜΠΕΛΙ ΚΥΚΛΑΔΩΝ, ΜΑΥΡΟ ΚΥΚΛΑΔΩΝ, ΜΕΛΙΣΣΑΚΙ ΚΥΚΛΑΔΩΝ, ΜΥΛΟΙ ΚΕΑΣ ΚΥΚΛΑΔΩΝ, ΜΥΛΟΠΟΤΑΜΟΣ ΚΕΑΣ ΚΥΚΛΑΔΩΝ, ΟΡΚΟΣ ΚΥΚΛΑΔΩΝ, ΟΤΖΙΑΣ ΚΥΚΛΑΔΩΝ, ΠΕΡΑ ΜΕΡΙΑ ΚΥΚΛΑΔΩΝ, ΠΗΣΣΕΣ ΚΥΚΛΑΔΩΝ, ΠΛΑΓΙΑ ΚΥΚΛΑΔΩΝ, ΣΠΑΘΙ ΚΥΚΛΑΔΩΝ, ΣΤΑΥΡΟΥΔΑΚΙ ΚΥΚΛΑΔΩΝ, ΦΩΤΗΜΑΡΙ ΚΥΚΛΑΔΩΝ, ΧΑΒΟΥΝΑ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84003', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΣΙΦΝΟΥ ΚΥΚΛΑΔΩΝ, ΑΠΟΛΛΩΝΙΑ ΣΙΦΝΟΥ ΚΥΚΛΑΔΩΝ, ΑΡΤΕΜΩΝ ΚΥΚΛΑΔΩΝ, ΒΑΘΥ ΚΥΚΛΑΔΩΝ, ΚΑΜΑΡΕΣ ΣΙΦΝΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΣΤΡΟ ΚΥΚΛΑΔΩΝ, ΚΑΤΩ ΠΕΤΑΛΙ ΚΥΚΛΑΔΩΝ, ΚΙΤΡΙΑΝΗ ΝΗΣΟΣ ΚΥΚΛΑΔΩΝ, ΠΛΑΤΥΣ ΓΙΑΛΟΣ ΣΙΦΝΟΥ ΚΥΚΛΑΔΩΝ, ΤΡΟΥΛΑΚΙ ΚΥΚΛΑΔΩΝ, ΦΑΡΟΣ ΚΥΚΛΑΔΩΝ, ΧΕΡΡΟΝΗΣΟΣ ΚΥΚΛΑΔΩΝ, ΧΡΥΣΟΠΗΓΗ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84004', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΚΙΜΩΛΟΥ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΕΥΣΤΑΘΙΟΣ ΚΙΜΩΛΟΥ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΚΙΜΩΛΟΥ ΚΥΚΛΑΔΩΝ, ΑΛΥΚΗ ΚΙΜΩΛΟΥ ΚΥΚΛΑΔΩΝ, ΓΟΥΠΑ-ΚΑΡΑ ΚΙΜΩΛΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΛΑΜΙΤΣΙ ΚΙΜΩΛΟΥ ΚΥΚΛΑΔΩΝ, ΚΙΜΩΛΟΣ ΚΥΚΛΑΔΩΝ, ΠΟΛΥΑΙΓΟΣ ΚΙΜΩΛΟΥ ΚΥΚΛΑΔΩΝ, ΠΡΑΣΣΑ ΚΙΜΩΛΟΥ ΚΥΚΛΑΔΩΝ, ΨΑΘΗ ΚΙΜΩΛΟΥ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84005', Area: 'ΑΒΥΣΣΑΛΟΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΣΕΡΙΦΟΥ ΚΥΚΛΑΔΩΝ, ΒΟΥΣ ΚΥΚΛΑΔΩΝ, ΓΑΛΑΝΗ ΚΥΚΛΑΔΩΝ, ΓΑΝΕΜΑ ΚΥΚΛΑΔΩΝ, ΓΛΑΡΟΝΗΣΙ ΣΕΡΙΦΟΥ ΚΥΚΛΑΔΩΝ, ΚΕΝΤΑΡΧΟΣ ΚΥΚΛΑΔΩΝ, ΚΟΥΤΑΛΑΣ ΚΥΚΛΑΔΩΝ, ΛΙΒΑΔΙ ΣΕΡΙΦΟΥ ΚΥΚΛΑΔΩΝ, ΜΕΓΑΛΟ ΛΙΒΑΔΙ ΚΥΚΛΑΔΩΝ, ΜΕΓΑΛΟ ΧΩΡΙΟ ΚΥΚΛΑΔΩΝ, ΜΟΝΗ ΕΥΑΓΓΕΛΙΣΤΡΙΑΣ ΚΥΚΛΑΔΩΝ, ΜΟΝΗ ΤΑΞΙΑΡΧΩΝ ΚΥΚΛΑΔΩΝ, ΠΑΝΑΓΙΑ ΣΕΡΙΦΟΥ ΚΥΚΛΑΔΩΝ, ΠΛΑΤΥΣ ΓΙΑΛΟΣ ΣΕΡΙΦΟΥ ΚΥΚΛΑΔΩΝ, ΡΑΜΟΣ ΚΥΚΛΑΔΩΝ, ΣΕΡΙΦΟΠΟΥΛΑ ΝΗΣΟΣ ΚΥΚΛΑΔΩΝ, ΣΕΡΙΦΟΣ ΚΥΚΛΑΔΩΝ, ΣΥΚΑΜΙΑ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84006', Area: 'ΑΓΙΑ ΕΙΡΗΝΗ ΚΥΘΝΟΥ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΚΥΘΝΟΥ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΚΥΘΝΟΥ ΚΥΚΛΑΔΩΝ, ΑΟΣΑ ΚΥΚΛΑΔΩΝ, ΑΠΟΚΡΙΣΗ ΚΥΚΛΑΔΩΝ, ΓΑΝΤΡΟΜΑΝΤΡΑ ΚΥΚΛΑΔΩΝ, ΔΡΥΟΠΙΔΑ ΚΥΚΛΑΔΩΝ, ΕΠΙΣΚΟΠΗ ΚΥΘΝΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΛΟ ΛΙΒΑΔΙ ΚΥΚΛΑΔΩΝ, ΚΑΝΑΛΑ ΚΥΚΛΑΔΩΝ, ΚΥΘΝΟΣ ΚΥΚΛΑΔΩΝ, ΛΕΥΚΕΣ ΚΥΘΝΟΥ ΚΥΚΛΑΔΩΝ, ΛΙΟΤΡΙΒΙ ΚΥΚΛΑΔΩΝ, ΛΟΥΤΡΑ ΚΥΘΝΟΥ ΚΥΚΛΑΔΩΝ, ΜΕΡΙΧΑΣ ΚΥΚΛΑΔΩΝ, ΠΙΠΕΡΙ ΚΥΚΛΑΔΩΝ, ΣΚΥΛΟΣ ΚΥΘΝΟΥ ΚΥΚΛΑΔΩΝ, ΦΛΑΜΠΟΥΡΙΑ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84007', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΑΝΤΙΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΑΝΤΙΠΑΡΟΣ ΚΥΚΛΑΔΩΝ, ΑΠΑΝΤΗΜΑ ΑΝΤΙΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΓΛΥΦΑ ΑΝΤΙΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΔΕΣΠΟΤΙΚΟ ΑΝΤΙΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΒΟΥΡΑΣ ΑΝΤΙΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΜΠΟΣ ΑΝΤΙΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΡΕΥΜΑΤΟΝΗΣΙ ΑΝΤΙΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΣΤΡΟΓΓΥΛΗ ΝΗΣΟΣ ΚΥΚΛΑΔΩΝ, ΣΩΡΟΣ ΑΝΤΙΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΤΣΙΜΗΝΤΗΡΙ ΑΝΤΙΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΦΕΙΡΑ ΑΝΤΙΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΦΡΑΓΚΟΠΑΠΑΔΕΣ ΑΝΤΙΠΑΡΟΥ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84008', Area: 'ΑΓΙΟΣ ΠΑΥΛΟΣ ΑΙΓΙΑΛΗΣ ΚΥΚΛΑΔΩΝ, ΑΙΓΙΑΛΗ ΚΥΚΛΑΔΩΝ, ΑΜΟΡΓΟΣ ΚΥΚΛΑΔΩΝ, ΑΝΩ ΑΝΤΙΚΕΡΙ ΚΥΚΛΑΔΩΝ, ΑΡΚΕΣΙΝΗ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΒΡΟΥΤΣΗΣ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΓΡΑΜΒΟΥΣΣΑ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΓΡΑΜΠΟΝΗΣΙΟ ΚΥΚΛΑΔΩΝ, ΘΟΛΑΡΙΑ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΛΟΤΑΡΙΤΙΣΣΑ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΛΟΦΑΝΑ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΜΑΡΙ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΣΤΕΛΟΠΕΤΡΑ ΚΥΚΛΑΔΩΝ, ΚΑΤΑΠΟΛΑ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΤΩ ΑΝΤΙΚΕΡΙ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΚΕΡΟΣ ΚΟΥΦΟΝΗΣΙΟΥ ΚΥΚΛΑΔΩΝ, ΛΑΓΚΑΔΑ ΑΙΓΙΑΛΗΣ ΚΥΚΛΑΔΩΝ, ΛΕΥΚΕΣ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΜΑΥΡΗ ΜΥΤΗ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΝΕΡΑ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΝΙΚΟΥΡΙΑ ΚΥΚΛΑΔΩΝ, ΞΥΛΟΚΕΡΑΤΙΔΙ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΟΡΜΟΣ ΑΙΓΙΑΛΗΣ ΚΥΚΛΑΔΩΝ, ΠΑΡΑΛΙΑ ΘΟΛΑΡΙΩΝ  ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΠΕΡΑ ΡΑΧΙΔΙ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΠΟΤΑΜΟΣ ΑΙΓΙΑΛΗΣ ΚΥΚΛΑΔΩΝ, ΡΑΧΙΔΙ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΡΑΧΟΥΛΑ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΤΣΕΣΕΜΕΣ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΦΕΛΟΥΚΑ ΚΥΚΛΑΔΩΝ, ΧΡΙΣΤΟΥΛΑΚΙ ΑΜΟΡΓΟΥ ΚΥΚΛΑΔΩΝ, ΨΑΛΙΔΑ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84009', Area: 'ΑΝΑΦΗ ΚΥΚΛΑΔΩΝ, ΚΛΗΣΙΔΙ ΑΝΑΦΗΣ ΚΥΚΛΑΔΩΝ, ΜΑΚΡΑ ΑΝΑΦΗΣ ΚΥΚΛΑΔΩΝ, ΟΡΜΟΣ ΑΓΙΟΥ ΝΙΚΟΛΑΟΥ ΑΝΑΦΗΣ ΚΥΚΛΑΔΩΝ, ΠΑΧΕΙΑ ΑΝΑΦΗΣ ΚΥΚΛΑΔΩΝ, ΦΤΕΝΑ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84010', Area: 'ΑΒΟΛΑΔΟΝΗΣΙΟ ΚΥΚΛΑΔΩΝ, ΑΛΟΠΡΟΝΟΙΑ ΣΙΚΙΝΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΛΟΓΕΡΟΣ ΚΥΚΛΑΔΩΝ, ΚΑΡΑΒΟΣ ΚΥΚΛΑΔΩΝ, ΚΑΡΔΙΩΤΙΣΣΑ ΚΥΚΛΑΔΩΝ, ΣΙΚΙΝΟΣ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84011', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΦΟΛΕΓΑΝΔΡΟΥ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΦΟΛΕΓΑΝΔΡΟΥ ΚΥΚΛΑΔΩΝ, ΑΓΚΑΛΗ ΦΟΛΕΓΑΝΔΡΟΥ ΚΥΚΛΑΔΩΝ, ΑΝΩ ΜΕΡΙΑ ΦΟΛΕΓΑΝΔΡΟΥ ΚΥΚΛΑΔΩΝ, ΔΡΑΚΟΝΗΣΙΟ ΚΥΚΛΑΔΩΝ, ΚΑΡΑΒΟΣΤΑΣΗΣ ΦΟΛΕΓΑΝΔΡΟΥ ΚΥΚΛΑΔΩΝ, ΛΙΒΑΔΙ ΦΟΛΕΓΑΝΔΡΟΥ ΚΥΚΛΑΔΩΝ, ΤΡΙΑ ΑΔΕΛΦΙΑ ΚΥΚΛΑΔΩΝ, ΦΟΛΕΓΑΝΔΡΟΣ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84100', Area: 'ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΣΥΡΟΥ ΚΥΚΛΑΔΩΝ, ΑΓΡΟΣ ΚΥΚΛΑΔΩΝ, ΑΔΕΙΑΤΑ ΚΥΚΛΑΔΩΝ, ΑΖΟΛΙΜΝΟΣ ΒΑΡΗΣ ΚΥΚΛΑΔΩΝ, ΑΖΟΛΙΜΝΟΣ ΜΑΝΝΑ ΚΥΚΛΑΔΩΝ, ΑΗ ΜΙΧΑΛΗΣ ΚΥΚΛΑΔΩΝ, ΑΛΗΘΙΝΗ ΚΥΚΛΑΔΩΝ, ΑΝΩ ΜΑΝΝΑ ΚΥΚΛΑΔΩΝ, ΑΝΩ ΣΥΡΟΣ ΚΥΚΛΑΔΩΝ, ΑΣΠΡΟ ΣΥΡΟΥ ΚΥΚΛΑΔΩΝ, ΒΑΡΒΑΡΟΥΣΑ ΚΥΚΛΑΔΩΝ, ΒΑΡΗ ΚΥΚΛΑΔΩΝ, ΒΗΣΣΑ ΚΥΚΛΑΔΩΝ, ΓΑΛΗΣΣΑΣ ΚΥΚΛΑΔΩΝ, ΓΥΑΡΟΣ ΝΗΣΟΣ ΚΥΚΛΑΔΩΝ, ΔΑΝΑΚΟΣ ΣΥΡΟΥ ΚΥΚΛΑΔΩΝ, ΔΙΔΥΜΗ ΝΗΣΟΣ ΚΥΚΛΑΔΩΝ, ΕΠΙΣΚΟΠΕΙΟ ΣΥΡΟΥ ΚΥΚΛΑΔΩΝ, ΕΡΜΟΥΠΟΛΗ ΚΥΚΛΑΔΩΝ, ΚΙΝΙΟ ΚΥΚΛΑΔΩΝ, ΜΑΝΝΑ ΚΥΚΛΑΔΩΝ, ΜΕΓΑΣ ΓΙΑΛΟΣ ΒΑΡΗΣ ΚΥΚΛΑΔΩΝ, ΜΕΓΑΣ ΓΙΑΛΟΣ ΠΟΣΕΙΔΩΝΙΑΣ ΚΥΚΛΑΔΩΝ, ΜΕΣΑΡΙΑ ΣΥΡΟΥ ΚΥΚΛΑΔΩΝ, ΜΥΤΤΑΚΑΣ ΚΥΚΛΑΔΩΝ, ΝΑΤΑ ΚΥΚΛΑΔΩΝ, ΠΑΓΟΣ ΚΥΚΛΑΔΩΝ, ΠΑΠΟΥΡΙ ΚΥΚΛΑΔΩΝ, ΠΑΡΑΚΟΠΗ ΚΥΚΛΑΔΩΝ, ΠΛΑΤΥ ΒΟΥΝΙ ΚΥΚΛΑΔΩΝ, ΠΟΣΕΙΔΩΝΙΑ ΚΥΚΛΑΔΩΝ, ΣΧΙΝΟΝΗΣΙ ΠΟΣΕΙΔΩΝΙΑΣ ΚΥΚΛΑΔΩΝ, ΤΑΛΑΝΤΑ ΚΥΚΛΑΔΩΝ, ΦΟΙΝΙΚΑΣ ΚΥΚΛΑΔΩΝ, ΦΟΙΝΙΚΙΑ ΑΝΩ ΣΥΡΟΥ ΚΥΚΛΑΔΩΝ, ΧΑΛΑΝΔΡΙΑΝΗ ΚΥΚΛΑΔΩΝ, ΧΡΟΥΣΑ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84200', Area: 'ΑΓΑΠΗ ΚΥΚΛΑΔΩΝ, ΑΓΙΑ ΒΑΡΒΑΡΑ ΚΥΚΛΑΔΩΝ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΤΗΝΟΥ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΡΩΜΑΝΟΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΣΩΣΤΗΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΦΩΚΑΣ ΤΗΝΟΥ ΚΥΚΛΑΔΩΝ, ΑΕΤΟΦΩΛIΑ ΚΥΚΛΑΔΩΝ, ΑΡΝΑΔΟΣ ΚΥΚΛΑΔΩΝ, ΒΩΛΑΞ ΤΗΝΟΥ ΚΥΚΛΑΔΩΝ, ΔΥΟ ΧΩΡΙΑ ΚΥΚΛΑΔΩΝ, ΚΑΛΛΟΝΗ ΤΗΝΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΜΠΟΣ ΤΗΝΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΡΥΑ ΚΥΚΛΑΔΩΝ, ΚΑΤΩ ΚΛΕΙΣΜΑ ΚΥΚΛΑΔΩΝ, ΚΕΧΡΟΣ ΚΥΚΛΑΔΩΝ, ΚΙΟΝΙΑ  ΚΥΚΛΑΔΩΝ, ΚΟΛΥΜΠΗΘΡΑ ΤΗΝΟΥ ΚΥΚΛΑΔΩΝ, ΚΟΥΜΑΡΟΣ ΚΥΚΛΑΔΩΝ, ΚΡΟΚΟΣ ΚΥΚΛΑΔΩΝ, ΚΤΙΚΑΔΟΣ ΚΥΚΛΑΔΩΝ, ΚΩΜΗ ΚΥΚΛΑΔΩΝ, ΛΑΟΥΤΗ ΚΥΚΛΑΔΩΝ, ΛΙΒΑΔΑ ΚΥΚΛΑΔΩΝ, ΛΙΜΕΝΑΣ ΣΤΑΥΡΟΥ ΚΥΚΛΑΔΩΝ, ΛΟΥΤΡΑ ΤΗΝΟΥ ΚΥΚΛΑΔΩΝ, ΛΥΧΝΑΦΤΙΑ ΚΥΚΛΑΔΩΝ, ΜΕΣΗ ΤΗΝΟΥ ΚΥΚΛΑΔΩΝ, ΜΟΝΑΣΤΗΡΙΑ ΤΗΝΟΥ ΚΥΚΛΑΔΩΝ, ΜΟΝΗ ΚΟΙΜΗΣΕΩΣ ΘΕΟΤΟΚΟΥ ΚΕΧΡΟΒΟΥΝΙΟΥ ΚΥΚΛΑΔΩΝ, ΜΟΥΝΤΑΔΟΣ ΚΥΚΛΑΔΩΝ, ΜΠΕΡΔΕΜΙΑΡΟΣ  ΚΥΚΛΑΔΩΝ, ΜΥΡΣΙΝΗ ΚΥΚΛΑΔΩΝ, ΞΙΝΑΡΑ ΚΥΚΛΑΔΩΝ, ΟΡΜΟΣ ΑΓΙΟΥ ΙΩΑΝΝΗ ΤΗΝΟΥ ΚΥΚΛΑΔΩΝ, ΠΕΡΑΣΤΡΑ ΚΥΚΛΑΔΩΝ, ΠΟΤΑΜΙΑ ΚΥΚΛΑΔΩΝ, ΠΥΡΓΟΣ ΤΗΝΟΥ ΚΥΚΛΑΔΩΝ, ΣΚΑΛΑΔΟΣ  ΚΥΚΛΑΔΩΝ, ΣΚΛΑΒΟΧΩΡΙ ΚΥΚΛΑΔΩΝ, ΣΜΑΡΔΑΚΙ ΚΥΚΛΑΔΩΝ, ΣΠΕΡΑΔΟΣ  ΚΥΚΛΑΔΩΝ, ΣΤΕΝΗ ΚΥΚΛΑΔΩΝ, ΤΑΡΑΜΠΑΔΟΣ ΚΥΚΛΑΔΩΝ, ΤΖΑΔΟΣ ΚΥΚΛΑΔΩΝ, ΤΗΝΟΣ ΚΥΚΛΑΔΩΝ, ΤΡΙΑΝΤΑΡΟΣ ΚΥΚΛΑΔΩΝ, ΤΡΙΠΟΤΑΜΟΣ ΚΥΚΛΑΔΩΝ, ΦΑΛΑΤΑΔΟΣ ΚΥΚΛΑΔΩΝ, ΦΕΡΟ ΧΩΡΙΟ ΚΥΚΛΑΔΩΝ, ΧΑΤΖΙΡΑΔΟΣ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84300', Area: 'ΑΓΙΑ ΑΝΝΑ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΙ ΠΑΝΤΕΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΚΟΥΦΟΝΗΣΙΟΥ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΑΡΣΕΝΙΟΣ  ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΗΡΑΚΛΕΙΑΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΘΑΛΕΛΑΙΟΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΠΡΟΚΟΠΙΟΣ ΚΥΚΛΑΔΩΝ, ΑΓΚΙΔΙΑ ΚΥΚΛΑΔΩΝ, ΑΝΩ ΠΟΤΑΜΙΑ ΝΑΞΟΥ ΚΥΚΛΑΔΩΝ, ΑΝΩ ΣΑΓΚΡΙ ΚΥΚΛΑΔΩΝ, ΑΡΓΙΛΟΣ ΚΥΚΛΑΔΩΝ, ΒΕΝΕΤΙΚΟ ΚΥΚΛΑΔΩΝ, ΒΙΒΛΟΣ ΚΥΚΛΑΔΩΝ, ΒΟΥΛΓΑΡΗ ΚΥΚΛΑΔΩΝ, ΓΑΛΑΝΑΔΟ ΚΥΚΛΑΔΩΝ, ΓΑΛΗΝΗ ΚΥΚΛΑΔΩΝ, ΓΛΑΡΟΝΗΣΙ ΚΟΥΦΟΝΗΣΙΩΝ ΚΥΚΛΑΔΩΝ, ΓΛΙΝΑΔΟ ΚΥΚΛΑΔΩΝ, ΔΟΝΟΥΣΑ ΚΥΚΛΑΔΩΝ, ΕΓΓΑΡΕΣ ΚΥΚΛΑΔΩΝ, ΗΡΑΚΛΕΙΑ ΚΥΚΛΑΔΩΝ, ΚΑΛΟΤΑΡΙΤΙΣΣΑ ΔΟΝΟΥΣΑΣ ΚΥΚΛΑΔΩΝ, ΚΑΝΑΚΑΡΙ ΚΥΚΛΑΔΩΝ, ΚΑΣΤΡΑΚΙ  ΚΥΚΛΑΔΩΝ, ΚΑΤΩ ΚΟΥΦΟΝΗΣΙ ΚΥΚΛΑΔΩΝ, ΚΑΤΩ ΠΟΤΑΜΙΑ ΝΑΞΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΤΩ ΣΑΓΚΡΙ ΚΥΚΛΑΔΩΝ, ΚΛΙΔΟΥΡΑ ΚΥΚΛΑΔΩΝ, ΚΟΥΡΟΥΝΟΧΩΡΙ ΚΥΚΛΑΔΩΝ, ΚΟΥΦΟΝΗΣΙ ΚΥΚΛΑΔΩΝ, ΛΑΖΑΡΟΣ ΚΥΚΛΑΔΩΝ, ΜΑΡΑΓΚΑΣ ΚΥΚΛΑΔΩΝ, ΜΑΣΤΟΡΑΚΗΣ ΚΥΚΛΑΔΩΝ, ΜΑΧΑΙΡΕΣ ΚΥΚΛΑΔΩΝ, ΜΕΓΑΛΗ ΠΛΑΚΑ ΚΥΚΛΑΔΩΝ, ΜΕΓΑΛΟΣ ΑΒΕΛΑΣ ΚΥΚΛΑΔΩΝ, ΜΕΛΑΝΕΣ ΚΥΚΛΑΔΩΝ, ΜΕΡΣΙΝΗ ΔΟΝΟΥΣΑΣ ΚΥΚΛΑΔΩΝ, ΜΕΣΑΡΙΑ ΣΧΟΙΝΟΥΣΣΑΣ ΚΥΚΛΑΔΩΝ, ΜΕΣΗ ΠΟΤΑΜΙΑ ΚΥΚΛΑΔΩΝ, ΜΙΚΡΗ ΒΙΓΛΑ ΚΥΚΛΑΔΩΝ, ΜΙΚΡΟΣ ΑΒΕΛΑΣ ΚΥΚΛΑΔΩΝ, ΜΟΝΗ ΧΡΥΣΟΣΤΟΜΟΥ ΚΥΚΛΑΔΩΝ, ΜΥΛΟΙ ΝΑΞΟΥ ΚΥΚΛΑΔΩΝ, ΝΑΞΟΣ ΚΥΚΛΑΔΩΝ, ΟΦΕΙΔΟΥΣΣΑ ΚΥΚΛΑΔΩΝ, ΠΑΝΑΓΙΑ ΝΑΞΟΥ ΚΥΚΛΑΔΩΝ, ΠΛΑΚΑ ΝΑΞΟΥ ΚΥΚΛΑΔΩΝ, ΠΛΑΚΗ ΚΟΥΦΟΝΗΣΙΩΝ ΚΥΚΛΑΔΩΝ, ΠΡΑΣΟΥΡΑ ΚΥΚΛΑΔΩΝ, ΣΚΥΛΟΝΗΣΙ ΔΟΝΟΥΣΗΣ ΚΥΚΛΑΔΩΝ, ΣΤΕΛΙΔΑ ΚΥΚΛΑΔΩΝ, ΣΤΡΟΓΓΥΛΗ ΝΗΣΟΣ ΚΥΚΛΑΔΩΝ, ΣΧΟΙΝΟΥΣΣΑ ΚΥΚΛΑΔΩΝ, ΤΣΟΥΛΟΥΦΙ ΚΥΚΛΑΔΩΝ, ΦΟΙΝΙΚΑΣ ΚΟΥΦΟΝΗΣΙΟΥ ΚΥΚΛΑΔΩΝ, ΧΑΡΑΥΓΗ ΔΟΝΟΥΣΑΣ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84302', Area: 'ΑΓΙΑΣΣΟΣ ΚΥΚΛΑΔΩΝ, ΑΖΑΛΑΣ ΚΥΚΛΑΔΩΝ, ΑΙ ΓΙΑΝΝΗΣ ΛΕΥΚΩΝΗΣ ΚΥΚΛΑΔΩΝ, ΑΚΡΩΤΗΡΙ ΝΑΞΟΥ ΚΥΚΛΑΔΩΝ, ΑΠΕΙΡΑΘΟΣ ΚΥΚΛΑΔΩΝ, ΒΟΥΡΒΟΥΡΙΑ ΚΥΚΛΑΔΩΝ, ΔΑΜΑΛΑΣ ΚΥΚΛΑΔΩΝ, ΔΑΜΑΡΙΩΝΑΣ ΚΥΚΛΑΔΩΝ, ΔΑΝΑΚΟΣ ΝΑΞΟΥ ΚΥΚΛΑΔΩΝ, ΖΩΟΔΟΧΟΣ ΠΗΓΗ ΝΑΞΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΛΑΝΤΟΣ ΚΥΚΛΑΔΩΝ, ΚΑΝΑΚΙ ΚΥΚΛΑΔΩΝ, ΚΕΡΑΜΩΤΗ ΚΥΚΛΑΔΩΝ, ΚΙΝΙΔΑΡΟΣ ΚΥΚΛΑΔΩΝ, ΚΛΕΙΔΩ ΚΥΚΛΑΔΩΝ, ΛΥΓΑΡΙΔΙΑ ΚΥΚΛΑΔΩΝ, ΜΟΝΗ ΚΥΚΛΑΔΩΝ, ΜΟΥΤΣΟΥΝΑ ΚΥΚΛΑΔΩΝ, ΠΑΝΕΡΜΟΣ ΚΥΚΛΑΔΩΝ, ΠΥΡΓΑΚΙ ΝΑΞΟΥ ΚΥΚΛΑΔΩΝ, ΡΑΧΗ ΚΥΚΛΑΔΩΝ, ΣΙΦΩΝΕΣ ΚΥΚΛΑΔΩΝ, ΦΙΛΟΤΙ ΚΥΚΛΑΔΩΝ, ΧΑΛΚΕΙΟ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84400', Area: 'ΑΓΙΟΣ ΑΡΤΕΜΙΟΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΤΡΥΠΗΤΗΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΣΠΥΡΙΔΩΝΑΣ ΝΗΣΟΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΧΑΡΑΛΑΜΠΟΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΩΝ ΘΕΟΔΩΡΩΝ ΚΥΚΛΑΔΩΝ, ΑΓΚΑΙΡΙΑ ΚΥΚΛΑΔΩΝ, ΑΛΥΚΗ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΑΝΕΡΑΤΖΑ ΚΥΚΛΑΔΩΝ, ΑΣΠΡΟ ΧΩΡΙΟ ΚΥΚΛΑΔΩΝ, ΒΟΥΝΙΑ ΛΕΥΚΩΝ ΚΥΚΛΑΔΩΝ, ΒΟΥΝΙΑ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΒΟΥΤΑΚΟΣ ΑΓΚΑΙΡΙΑΣ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΒΟΥΤΑΚΟΣ ΚΥΚΛΑΔΩΝ, ΓΑΙΔΟΥΡΟΝΗΣΙ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΓΑΛΙΑΤΣΟΣ ΚΥΚΛΑΔΩΝ, ΓΛΑΡΟΜΠΟΥΤΑ ΚΥΚΛΑΔΩΝ, ΓΛΑΡΟΠΟΥΝΤΑ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΓΛΥΣΙΔΑ ΚΥΚΛΑΔΩΝ, ΓΛΥΦΑ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΓΛΥΦΑΔΕΣ ΚΥΚΛΑΔΩΝ, ΔΡΥΟΝΗΣΙ ΚΥΚΛΑΔΩΝ, ΔΡΥΟΣ ΚΥΚΛΑΔΩΝ, ΕΒΡΙΟΚΑΣΤΡΟ ΚΥΚΛΑΔΩΝ, ΕΛΗΤΑΣ ΚΥΚΛΑΔΩΝ, ΙΕΡΑ ΜΟΝΗ ΘΑΨΑΝΩΝ ΚΥΚΛΑΔΩΝ, ΙΣΤΕΡΝΙΟ ΚΥΚΛΑΔΩΝ, ΚΑΚΑΠΕΤΡΑ ΚΥΚΛΑΔΩΝ, ΚΑΛΑΜΙ  ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΜΑΡΕΣ ΝΑΟΥΣΑΣ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΜΑΡΕΣ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΜΑΡΙ ΑΓΚΑΙΡΙΑΣ ΚΥΚΛΑΔΩΝ, ΚΑΜΠΟΙ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΜΠΟΣ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΚΟΥΚΟΥΜΑΛΕΥΣ ΚΥΚΛΑΔΩΝ, ΚΡΩΤΗΡΙ ΚΥΚΛΑΔΩΝ, ΚΩΣΤΟΣ ΚΥΚΛΑΔΩΝ, ΛΑΓΚΑΔΑ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΛΕΥΚΕΣ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΛΟΓΑΡΑΣ ΚΥΚΛΑΔΩΝ, ΜΑΚΡΙΑ ΜΥΤΗ ΚΥΚΛΑΔΩΝ, ΜΑΚΡΟΝΗΣΙ ΚΥΚΛΑΔΩΝ, ΜΑΡΑΘΙ ΚΥΚΛΑΔΩΝ, ΜΑΡΜΑΡΑ ΚΥΚΛΑΔΩΝ, ΜΑΡΠΗΣΣΑ ΚΥΚΛΑΔΩΝ, ΜΑΥΡΟΝΗΣΙ ΚΥΚΛΑΔΩΝ, ΜΟΝΗ ΑΓΙΩΝ ΘΕΟΔΩΡΩΝ ΚΥΚΛΑΔΩΝ, ΜΟΝΗ ΧΡΙΣΤΟΥ ΔΑΣΟΥΣ ΚΥΚΛΑΔΩΝ, ΜΩΛΟΣ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΠΑΝΤΕΡΟΝΗΣΙ ΚΥΚΛΑΔΩΝ, ΠΑΡΑΣΠΟΡΟΣ ΚΥΚΛΑΔΩΝ, ΠΑΡΟΣ ΚΥΚΛΑΔΩΝ, ΠΙΣΩ ΛΙΒΑΔΙ ΚΥΚΛΑΔΩΝ, ΠΟΥΝΤΑ ΚΥΚΛΑΔΩΝ, ΠΡΟΔΡΟΜΟΣ ΚΥΚΛΑΔΩΝ, ΠΥΡΓΑΚΙ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΣΑΡΑΚΙΝΙΚΟ ΚΥΚΛΑΔΩΝ, ΣΩΤΗΡΕΣ ΚΥΚΛΑΔΩΝ, ΤΕΤΑΡΤΟΝΗΣΙ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΤΖΑΝΕΣ ΚΥΚΛΑΔΩΝ, ΤΟΥΡΛΟΣ ΝΑΟΥΣΗΣ ΚΥΚΛΑΔΩΝ, ΤΟΥΡΛΟΣ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΤΣΟΥΚΑΛΑΣ ΚΥΚΛΑΔΩΝ, ΤΣΟΥΚΑΛΙΑ ΚΥΚΛΑΔΩΝ, ΥΣΤΕΡΝΙΑ ΚΥΚΛΑΔΩΝ, ΦΙΛΙΔΙ ΚΥΚΛΑΔΩΝ, ΦΟΙΝΙΣΣΕΣ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΧΡΥΣΗ ΑΚΤΗ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΧΩΡΙΔΑΚΙ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84401', Area: 'ΑΓΙΑ ΚΑΛΗ ΝΗΣΟΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΚΥΚΛΑΔΩΝ, ΑΜΠΕΛΑΣ ΚΥΚΛΑΔΩΝ, ΚΟΛΥΜΠΗΘΡΕΣ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΛΑΓΚΕΡΗ ΚΥΚΛΑΔΩΝ, ΛΙΒΑΔΙΑ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΜΟΝΗ ΑΓΙΟΥ ΑΝΤΩΝΙΟΥ ΚΥΚΛΑΔΩΝ, ΜΟΝΗ ΛΟΓΓΟΒΑΡΔΑΣ ΚΥΚΛΑΔΩΝ, ΝΑΟΥΣΑ ΠΑΡΟΥ ΚΥΚΛΑΔΩΝ, ΞΙΦΑΡΑ ΚΥΚΛΑΔΩΝ, ΠΡΩΤΟΡΓΙΑ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84500', Area: 'ΑΓΙΑ ΕΛΕΟΥΣΑ ΚΥΚΛΑΔΩΝ, ΑΚΑΜΑΤΗΣ ΑΝΔΡΟΥ ΚΥΚΛΑΔΩΝ, ΑΛΑΔΙΝΟ ΚΥΚΛΑΔΩΝ, ΑΛΑΔΟ ΚΥΚΛΑΔΩΝ, ΑΛΙΚΑΝΔΡΟ ΚΥΚΛΑΔΩΝ, ΑΜΟΛΟΧΟΣ ΚΥΚΛΑΔΩΝ, ΑΝΔΡΟΣ ΚΥΚΛΑΔΩΝ, ΑΝΩ ΑΠΡΟΒΑΤΟ ΚΥΚΛΑΔΩΝ, ΑΠΟΙΚΙΑ ΚΥΚΛΑΔΩΝ, ΒΑΚΟΝΙ ΜΕΣΣΑΡΙΑΣ ΚΥΚΛΑΔΩΝ, ΒΟΥΡΚΩΤΗ ΚΥΚΛΑΔΩΝ, ΒΡΑΧΝΟΣ ΚΥΚΛΑΔΩΝ, ΖΑΓΑΝΙΑΡΗΣ ΚΥΚΛΑΔΩΝ, ΚΑΛΑΜΑΚΙ ΚΥΚΛΑΔΩΝ, ΚΑΤΑΚΑΛΑΙΟΙ ΚΥΚΛΑΔΩΝ, ΚΑΤΩ ΑΠΡΟΒΑΤΟ ΚΥΚΛΑΔΩΝ, ΚΟΛΥΜΠΟΣ ΚΥΚΛΑΔΩΝ, ΚΟΥΜΑΝΤΗ ΚΥΚΛΑΔΩΝ, ΚΟΥΡΕΛΙ ΚΥΚΛΑΔΩΝ, ΚΟΥΤΣΙΟ ΚΥΚΛΑΔΩΝ, ΛΑΜΥΡΑ ΚΥΚΛΑΔΩΝ, ΛΙΒΑΔΙΑ ΑΝΔΡΟΥ ΚΥΚΛΑΔΩΝ, ΜΕΛΙΔΑ ΚΥΚΛΑΔΩΝ, ΜΕΝΗΤΕΣ ΚΥΚΛΑΔΩΝ, ΜΕΣΑ ΧΩΡΙΟ ΚΥΚΛΑΔΩΝ, ΜΕΣΑΘΟΥΡΙ  ΚΥΚΛΑΔΩΝ, ΜΕΣΑΡΙΑ ΑΝΔΡΟΥ ΚΥΚΛΑΔΩΝ, ΜΟΝΗ ΑΓΙΟΥ ΝΙΚΟΛΑΟΥ ΚΥΚΛΑΔΩΝ, ΜΟΝΗ ΠΑΝΑΧΡΑΝΤΟΥ ΚΥΚΛΑΔΩΝ, ΟΡΕΙΝΟ ΚΥΚΛΑΔΩΝ, ΠΑΛΑΙΠΟΛΗ ΚΥΚΛΑΔΩΝ, ΠΙΤΡΟΦΟΣ ΚΥΚΛΑΔΩΝ, ΣΤΕΝΙΕΣ ΚΥΚΛΑΔΩΝ, ΣΤΡΑΠΟΥΡΙΕΣ ΚΥΚΛΑΔΩΝ, ΣΥΝΕΤΙΟ ΚΥΚΛΑΔΩΝ, ΥΨΗΛΑ ΚΥΚΛΑΔΩΝ, ΦΑΛΛΙΚΑ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84501', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΑΝΔΡΟΥ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΠΕΤΡΟΣ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΣΥΜΕΩΝ ΑΝΔΡΟΥ ΚΥΚΛΑΔΩΝ, ΑΝΩ ΓΑΥΡΙΟ ΚΥΚΛΑΔΩΝ, ΑΡΝΗ ΚΥΚΛΑΔΩΝ, ΑΤΕΝΗ ΑΡΝΑ ΚΥΚΛΑΔΩΝ, ΑΤΕΝΗ ΚΑΤΑΚΟΙΛΟΥ  ΚΥΚΛΑΔΩΝ, ΒΑΡΙΔΙ ΚΥΚΛΑΔΩΝ, ΒΙΤΑΛΙ ΚΥΚΛΑΔΩΝ, ΓΑΙΔΑΡΟΣ ΓΑΥΡΙΟΥ ΑΝΔΡΟΥ ΚΥΚΛΑΔΩΝ, ΓΑΥΡΙΟ ΚΥΚΛΑΔΩΝ, ΓΙΔΕΣ ΚΥΚΛΑΔΩΝ, ΔΑΜΑΣΚΗΝΟΣ ΚΥΚΛΑΔΩΝ, ΕΠΑΝΩ ΦΕΛΛΟΣ ΚΥΚΛΑΔΩΝ, ΚΑΛΥΒΑΡΙ ΚΥΚΛΑΔΩΝ, ΚΑΤΑΚΟΙΛΟΣ ΚΥΚΛΑΔΩΝ, ΚΑΤΩ ΑΓΙΟΣ ΠΕΤΡΟΣ ΚΥΚΛΑΔΩΝ, ΚΑΤΩ ΚΑΤΑΚΟΙΛΟΣ ΚΥΚΛΑΔΩΝ, ΚΑΤΩ ΦΕΛΛΟΣ ΚΥΚΛΑΔΩΝ, ΚΟΥΜΑΡΙ ΚΥΚΛΑΔΩΝ, ΚΥΠΡΙ ΚΥΚΛΑΔΩΝ, ΜΑΚΡΟΤΑΝΤΑΛΟ ΚΥΚΛΑΔΩΝ, ΜΕΓΑΛΟ ΚΥΚΛΑΔΩΝ, ΜΕΡΜΗΓΚΙΕΣ ΚΥΚΛΑΔΩΝ, ΜΟΝΗ ΖΩΟΔΟΧΟΥ ΠΗΓΗΣ ΚΥΚΛΑΔΩΝ, ΜΠΑΤΣΙ ΚΥΚΛΑΔΩΝ, ΠΑΛΑΙΣΤΟ ΚΥΚΛΑΔΩΝ, ΠΙΣΩ ΛΙΜΝΙΩΝΑΣ ΚΥΚΛΑΔΩΝ, ΠΛΑΤΥ ΑΝΔΡΟΥ ΚΥΚΛΑΔΩΝ, ΠΡΑΣΣΟ ΚΥΚΛΑΔΩΝ, ΡΕΥΜΑΤΑ ΚΥΚΛΑΔΩΝ, ΣΤΙΒΑΡΙ ΚΥΚΛΑΔΩΝ, ΣΧΟΛΗ  ΚΥΚΛΑΔΩΝ, ΤΟΥΡΛΙΤΗΣ ΚΥΚΛΑΔΩΝ, ΧΑΡΤΕΣ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84600', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΜΥΚΟΝΟΥ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΜΥΚΟΝΟΥ ΚΥΚΛΑΔΩΝ, ΑΓΡΑΡΙ ΚΥΚΛΑΔΩΝ, ΑΝΩ ΜΕΡΑ ΚΥΚΛΑΔΩΝ, ΔΗΛΟΣ ΝΗΣΟΣ ΚΥΚΛΑΔΩΝ, ΕΛΙΑ ΚΥΚΛΑΔΩΝ, ΚΑΒΟΥΡΑΣ ΜΥΚΟΝΟΥ ΚΥΚΛΑΔΩΝ, ΚΑΛΑΦΑΤΗ ΚΥΚΛΑΔΩΝ, ΚΛΟΥΒΑΣ ΚΥΚΛΑΔΩΝ, ΚΟΥΝΟΥΠΑΣ ΚΥΚΛΑΔΩΝ, ΚΡΟΜΜΥΔΙ ΚΥΚΛΑΔΩΝ, ΚΤΑΠΟΔΙΑ ΚΥΚΛΑΔΩΝ, ΛΙΑ ΚΥΚΛΑΔΩΝ, ΜΑΡΜΑΡΟΝΗΣΙ ΜΥΚΟΝΟΥ ΚΥΚΛΑΔΩΝ, ΜΠΑΟΣ ΝΗΣΟΣ ΚΥΚΛΑΔΩΝ, ΜΥΚΟΝΟΣ ΚΥΚΛΑΔΩΝ, ΟΡΝΟΣ ΚΥΚΛΑΔΩΝ, ΠΛΑΤΥΣ ΓΙΑΛΟΣ ΜΥΚΟΝΟΥ ΚΥΚΛΑΔΩΝ, ΠΛΥΝΤΡΙ ΚΥΚΛΑΔΩΝ, ΡΗΝΕΙΑ  ΝΗΣΟΣ ΚΥΚΛΑΔΩΝ, ΣΦΟΝΤΗΛΙ ΜΥΚΟΝΟΥ ΚΥΚΛΑΔΩΝ, ΤΗΓΑΝΙ ΡΑΝΤΑΡ ΚΥΚΛΑΔΩΝ, ΤΟΥΡΛΟΣ ΜΥΚΟΝΟΥ ΚΥΚΛΑΔΩΝ, ΤΡΑΓΟΝΗΣΙ ΚΥΚΛΑΔΩΝ, ΦΑΡΟΣ ΑΡΜΕΝΙΣΤΗΣ ΚΥΚΛΑΔΩΝ, ΨΑΡΡΟΥ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84700', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΒΟΘΩΝΟΣ  ΘΗΡΑΣ ΚΥΚΛΑΔΩΝ, ΑΚΡΩΤΗΡΙ ΘΗΡΑΣ ΚΥΚΛΑΔΩΝ, ΑΝΥΔΡΟΣ ΚΥΚΛΑΔΩΝ, ΑΣΚΑΝΙΑ ΘΗΡΑΣ ΚΥΚΛΑΔΩΝ, ΑΣΠΡΟΝΗΣΙ ΘΗΡΑΣ ΚΥΚΛΑΔΩΝ, ΒΟΘΩΝΑΣ ΚΥΚΛΑΔΩΝ, ΒΟΥΡΒΟΥΛΟΣ ΚΥΚΛΑΔΩΝ, ΕΞΩ ΓΙΑΛΟΣ ΚΑΡΤΕΡΑΔΟΥ ΚΥΚΛΑΔΩΝ, ΕΞΩ ΓΙΑΛΟΣ ΚΥΚΛΑΔΩΝ, ΕΞΩ ΓΩΝΙΑ ΚΥΚΛΑΔΩΝ, ΕΞΩ ΚΑΤΟΙΚΙΕΣ ΚΥΚΛΑΔΩΝ, ΕΠΙΣΚΟΠΗ ΓΩΝΙΑΣ ΘΗΡΑΣ ΚΥΚΛΑΔΩΝ, ΕΣΧΑΤΗ ΚΥΚΛΑΔΩΝ, ΗΜΕΡΟΒΙΓΛΙ ΚΥΚΛΑΔΩΝ, ΘΗΡΑ ΚΥΚΛΑΔΩΝ, ΚΑΜΑΡΙ ΕΠΙΣΚΟΠΗΣ ΓΩΝΙΑΣ ΚΥΚΛΑΔΩΝ, ΚΑΡΤΕΡΑΔΟΣ ΚΥΚΛΑΔΩΝ, ΜΕΓΑΛΟΧΩΡΙ ΚΥΚΛΑΔΩΝ, ΜΕΣΑ ΚΑΤΟΙΚΙΕΣ ΚΥΚΛΑΔΩΝ, ΜΕΣΑΡΙΑ ΘΗΡΑΣ ΚΥΚΛΑΔΩΝ, ΜΟΝΟΛΙΘΟΣ ΚΥΚΛΑΔΩΝ, ΝΕΑ ΚΑΜΕΝΗ ΚΥΚΛΑΔΩΝ, ΟΡΜΟΣ ΦΗΡΩΝ ΚΥΚΛΑΔΩΝ, ΠΑΛΑΙΑ  ΚΑΜΕΝΗ ΚΥΚΛΑΔΩΝ, ΠΑΝΑΓΙΑ ΚΑΛΟΥ  ΚΥΚΛΑΔΩΝ, ΠΕΡΙΒΟΛΙΑ ΚΥΚΛΑΔΩΝ, ΦΗΡΑ ΚΥΚΛΑΔΩΝ, ΧΡΙΣΤΙΑΝΑ ΚΥΚΛΑΔΩΝ, ΧΡΙΣΤΙΑΝΗ ΘΗΡΑΣ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84702', Area: 'ΑΓΙΑ ΕΙΡΗΝΗ ΘΗΡΑΣΙΑΣ ΚΥΚΛΑΔΩΝ, ΑΓΡΙΛΙΑ ΘΗΡΑΣΙΑΣ ΚΥΚΛΑΔΩΝ, ΘΗΡΑΣΙΑ ΚΥΚΛΑΔΩΝ, ΘΟΛΟΣ ΚΥΚΛΑΔΩΝ, ΚΟΛΟΥΜΠΟΣ ΟΙΑΣ ΚΥΚΛΑΔΩΝ, ΟΙΑ ΚΥΚΛΑΔΩΝ, ΟΡΜΟΣ ΑΜΜΟΥΔΙΟΥ ΚΥΚΛΑΔΩΝ, ΟΡΜΟΣ ΑΡΜΕΝΗΣ ΚΥΚΛΑΔΩΝ, ΟΡΜΟΣ ΚΟΡΦΟΥ ΟΙΑΣ ΚΥΚΛΑΔΩΝ, ΠΑΡΑΔΕΙΣΟΣ ΚΥΚΛΑΔΩΝ, ΠΟΤΑΜΟΣ ΘΗΡΑΣΙΑΣ ΚΥΚΛΑΔΩΝ, ΦΟΙΝΙΚΙΑ ΘΗΡΑΣ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84703', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΕΜΠΟΡΕΙΟΥ ΚΥΚΛΑΔΩΝ, ΒΛΥΧΑΔΑ ΚΥΚΛΑΔΩΝ, ΕΜΠΟΡΕΙΟΣ ΘΗΡΑΣ ΚΥΚΛΑΔΩΝ, ΕΞΩΜΥΤΗΣ ΚΥΚΛΑΔΩΝ, ΠΕΡΙΣΣΑ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '84800', Area: 'ΑΓΙΟΙ ΑΝΑΡΓΥΡΟΙ ΚΥΚΛΑΔΩΝ, ΑΓΙΟΣ ΓΕΡΑΣΙΜΟΣ ΚΥΚΛΑΔΩΝ, ΑΚΡΑΘΙ ΜΗΛΟΥ ΚΥΚΛΑΔΩΝ, ΑΝΑΝΕΣ ΚΥΚΛΑΔΩΝ, ΑΝΤΙΜΗΛΟΣ ΚΥΚΛΑΔΩΝ, ΑΠΟΛΛΩΝΙΑ (ΠΟΛΛΩΝΙΑ) ΜΗΛΟΥ ΚΥΚΛΑΔΩΝ, ΑΡΕΤΗ ΚΥΚΛΑΔΩΝ, ΑΡΚΑΔΙΟ ΚΥΚΛΑΔΩΝ, ΒΟΥΔΙΑ ΚΥΚΛΑΔΩΝ, ΓΛΑΡΟΝΗΣΙΑ ΜΗΛΟΥ ΚΥΚΛΑΔΩΝ, ΕΜΠΟΡΕΙΟΣ ΜΗΛΟΥ ΚΥΚΛΑΔΩΝ, ΖΕΦΥΡΙΑ ΚΥΚΛΑΔΩΝ, ΘΕΙΩΡΥΧΕΙΑ ΚΥΚΛΑΔΩΝ, ΚΑΝΑΒΑ ΚΥΚΛΑΔΩΝ, ΚΑΤΣΑΡΩΝΑΣ ΚΥΚΛΑΔΩΝ, ΚΛΗΜΑ ΜΗΛΟΥ ΚΥΚΛΑΔΩΝ, ΚΟΜΙΑ ΚΥΚΛΑΔΩΝ, ΜΑΝΔΡΑΚΙΑ ΚΥΚΛΑΔΩΝ, ΜΗΛΟΣ ΚΥΚΛΑΔΩΝ, ΜΥΤΙΚΑΣ ΜΗΛΟΥ ΚΥΚΛΑΔΩΝ, ΞΥΛΟΚΕΡΑΤΙΑ ΚΥΚΛΑΔΩΝ, ΠΑΛΙΟΧΩΡΙ ΚΥΚΛΑΔΩΝ, ΠΑΞΙΜΑΔΙ ΜΗΛΟΥ ΚΥΚΛΑΔΩΝ, ΠΑΧΑΙΝΑ ΚΥΚΛΑΔΩΝ, ΠΕΡΑ ΤΡΙΟΒΑΣΑΛΟΣ ΚΥΚΛΑΔΩΝ, ΠΗΛΟΝΗΣΙΟ ΚΥΚΛΑΔΩΝ, ΠΛΑΚΑ ΜΗΛΟΥ ΚΥΚΛΑΔΩΝ, ΠΡΑΣΟΝΗΣΙ ΚΥΚΛΑΔΩΝ, ΠΡΟΒΑΤΑΣ ΚΥΚΛΑΔΩΝ, ΡΑΛΑΚΙΟ ΧΑΛΑΚΟΣ ΚΥΚΛΑΔΩΝ, ΣΧΙΝΩΠΗ ΚΥΚΛΑΔΩΝ, ΤΡΙΟΒΑΣΑΛΟΣ ΚΥΚΛΑΔΩΝ, ΤΡΥΠΗΤΗ ΚΥΚΛΑΔΩΝ, ΦΟΥΡΚΟΒΟΥΝΙ ΚΥΚΛΑΔΩΝ, ΦΥΛΑΚΩΠΗ ΚΥΚΛΑΔΩΝ, ΦΥΡΟΠΟΤΑΜΟΣ ΚΥΚΛΑΔΩΝ, ΨΑΘΑΔΙΚΑ ΚΥΚΛΑΔΩΝ', Prefecture: 'Κυκλάδων' },
    { PostalCode: '23051', Area: 'ΑΓΙΟΙ ΤΑΞΙΑΡΧΕΣ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΠΕΡΙΣΤΕΡΙΟΥ ΛΑΚΩΝΙΑΣ, ΓΡΑΜΜΟΥΣΑ ΛΑΚΩΝΙΑΣ, ΛΕΗΜΟΝΑΣ ΛΑΚΩΝΙΑΣ, ΠΑΝΗΓΥΡΙΣΤΡΑ ΛΑΚΩΝΙΑΣ, ΠΕΡΙΣΤΕΡΙ ΕΠΙΔΑΥΡΟΥ ΛΙΜΗΡΑΣ ΛΑΚΩΝΙΑΣ, ΣΚΑΛΑ ΛΑΚΩΝΙΑΣ, ΣΟΥΛΙΟ ΛΑΚΩΝΙΑΣ, ΣΤΕΦΑΝΙΑ ΛΑΚΩΝΙΑΣ, ΤΡΙΝΗΣΑ ΛΑΚΩΝΙΑΣ, ΦΙΛΗΣΙΟ ΛΑΚΩΝΙΑΣ', Prefecture: 'Λακωνίας' },
    { PostalCode: '23052', Area: 'ΑΓΓΕΛΩΝΑ ΛΑΚΩΝΙΑΣ, ΕΛΑΙΑ ΚΟΥΝΟΥ ΛΑΚΩΝΙΑΣ, ΜΕΤΑΜΟΡΦΩΣΗ ΛΑΚΩΝΙΑΣ, ΜΟΛΑΟΙ ΛΑΚΩΝΙΑΣ, ΠΑΚΙΑ ΛΑΚΩΝΙΑΣ, ΣΥΚΕΑ ΛΑΚΩΝΙΑΣ', Prefecture: 'Λακωνίας' },
    { PostalCode: '23053', Area: 'ΑΓΙΟΙ ΑΠΟΣΤΟΛΟΙ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΒΟΙΩΝ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΕΛΙΣΣΑΙΟΣ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΕΠΙΔΑΥΡΟΥ ΛΙΜΗΡΑΣ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΜΕΣΟΧΩΡΙΟΥ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΜΑΜΑΣ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΒΟΙΩΝ ΛΑΚΩΝΙΑΣ, ΑΔΙΑΚΟΠΟΣ ΛΑΚΩΝΙΑΣ, ΑΝΩ ΚΑΣΤΑΝΕΑ ΛΑΚΩΝΙΑΣ, ΑΡΧΑΓΓΕΛΟΣ ΛΑΚΩΝΙΑΣ, ΒΑΛΤΑΚΙ ΛΑΚΩΝΙΑΣ, ΒΑΡΚΟ ΛΑΚΩΝΙΑΣ, ΒΕΛΑΝΙΔΙΑ ΛΑΚΩΝΙΑΣ, ΒΙΓΚΛΑΦΙΑ ΛΑΚΩΝΙΑΣ, ΔΑΙΜΟΝΙΑ ΛΑΚΩΝΙΑΣ, ΔΕΡΜΑΤΙΑΝΙΚΑ ΛΑΚΩΝΙΑΣ, ΕΛΑΦΟΝΗΣΟΣ ΛΑΚΩΝΙΑΣ, ΕΛΙΚΑ ΛΑΚΩΝΙΑΣ, ΚΑΠΑΡΙ ΛΑΚΩΝΙΑΣ, ΚΑΤΟΥΝΙΑ ΛΑΚΩΝΙΑΣ, ΚΑΤΩ ΚΑΣΤΑΝΙΑ ΛΑΚΩΝΙΑΣ, ΚΑΤΩ ΝΗΣΙ ΛΑΚΩΝΙΑΣ, ΚΟΝΤΡΑΦΟΥΡΙΑΝΙΚΑ ΛΑΚΩΝΙΑΣ, ΚΟΡΑΚΑΣ ΛΑΚΩΝΙΑΣ, ΚΡΥΟΒΡΥΣΗ ΛΑΚΩΝΙΑΣ, ΛΑΧΙΟ ΛΑΚΩΝΙΑΣ, ΛΕΥΚΗ ΛΑΚΩΝΙΑΣ, ΛΙΜΝΕΣ ΛΑΚΩΝΙΑΣ, ΛΙΜΝΕΣ ΠΑΝΤΑΝΑΣΣΗΣ ΛΑΚΩΝΙΑΣ, ΜΑΝΟΛΑΡΙΑΝΙΚΑ ΛΑΚΩΝΙΑΣ, ΜΑΡΑΘΙΑΣ ΛΑΚΩΝΙΑΣ, ΜΕΓΑΛΗ ΣΠΗΛΙΑ ΛΑΚΩΝΙΑΣ, ΜΕΣΟΧΩΡΙ ΛΑΚΩΝΙΑΣ, ΝΕΑΠΟΛΗ ΛΑΚΩΝΙΑΣ, ΠΑΛΑΙΟΚΑΣΤΡΟ ΛΑΚΩΝΙΑΣ, ΠΑΝΑΓΙΑ ΒΟΙΩΝ ΛΑΚΩΝΙΑΣ, ΠΑΝΤΑΝΑΣΣΑ ΛΑΚΩΝΙΑΣ, ΠΑΡΑΔΕΙΣΙ ΛΑΚΩΝΙΑΣ, ΠΑΡΑΛΙΑ ΔΑΙΜΟΝΙΑΣ ΛΑΚΩΝΙΑΣ, ΠΛΑΤΑΝΙΑΣ ΛΑΚΩΝΙΑΣ, ΠΟΥΝΤΑ ΛΑΚΩΝΙΑΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΒΟΙΩΝ ΛΑΚΩΝΙΑΣ, ΣΚΛΑΒΟΥΝΑ ΛΑΚΩΝΙΑΣ, ΤΣΟΥΜΑΛΑ ΛΑΚΩΝΙΑΣ, ΦΑΡΑΚΛΟ ΛΑΚΩΝΙΑΣ', Prefecture: 'Λακωνίας' },
    { PostalCode: '23054', Area: 'ΑΓΙΟΣ ΧΡΙΣΤΟΦΟΡΟΣ ΛΑΚΩΝΙΑΣ, ΑΝΘΟΧΩΡΙ ΛΑΚΩΝΙΑΣ, ΑΝΩΓΕΙΑ ΛΑΚΩΝΙΑΣ, ΑΡΝΑ ΛΑΚΩΝΙΑΣ, ΒΑΣΙΛΙΚΗ ΛΑΚΩΝΙΑΣ, ΓΟΛΑ ΛΑΚΩΝΙΑΣ, ΓΟΡΑΝΟΙ ΛΑΚΩΝΙΑΣ, ΔΑΦΝΗ ΛΑΚΩΝΙΑΣ, ΔΙΠΟΤΑΜΑ ΛΑΚΩΝΙΑΣ, ΚΑΒΟΥΡΑΚΙ ΛΑΚΩΝΙΑΣ, ΚΡΥΟΝΕΡΙ ΛΑΚΩΝΙΑΣ, ΚΥΔΩΝΙΑ ΛΑΚΩΝΙΑΣ, ΚΥΔΩΝΙΤΣΑ ΛΑΚΩΝΙΑΣ, ΛΕΥΚΗ ΑΝΩΓΕΙΩΝ ΛΑΚΩΝΙΑΣ, ΛΕΥΚΟΧΡΩΜΑ ΛΑΚΩΝΙΑΣ, ΛΙΑΝΤΙΝΑ ΛΑΚΩΝΙΑΣ, ΜΟΝΗ ΖΕΡΜΠΙΤΣΗΣ ΛΑΚΩΝΙΑΣ, ΞΗΡΟΚΑΜΠΙ ΛΑΚΩΝΙΑΣ, ΠΑΛΑΙΟΠΑΝΑΓΙΑ ΛΑΚΩΝΙΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΔΑΦΝΗΣ ΛΑΚΩΝΙΑΣ, ΠΕΝΤΑΥΛΟΙ ΛΑΚΩΝΙΑΣ, ΠΟΛΟΒΙΤΣΑ ΛΑΚΩΝΙΑΣ, ΠΟΤΑΜΙΑ ΛΑΚΩΝΙΑΣ, ΣΠΑΡΤΙΑ ΛΑΚΩΝΙΑΣ, ΣΩΤΗΡΑ ΛΑΚΩΝΙΑΣ, ΤΟΡΙΖΑ ΛΑΚΩΝΙΑΣ, ΤΡΑΠΕΖΟΝΤΗ ΛΑΚΩΝΙΑΣ', Prefecture: 'Λακωνίας' },
    { PostalCode: '23059', Area: 'ΑΛΕΥΡΟΥ ΛΑΚΩΝΙΑΣ, ΒΟΡΔΟΝΙΑ ΛΑΚΩΝΙΑΣ, ΓΙΑΚΟΥΜΑΙΙΚΑ ΛΑΚΩΝΙΑΣ, ΕΠΑΝΩ ΧΩΡΑ ΛΑΚΩΝΙΑΣ, ΚΑΜΠΟΣ ΛΑΚΩΝΙΑΣ, ΚΑΣΤΟΡΕΙΟ ΛΑΚΩΝΙΑΣ, ΚΑΣΤΡΙ ΛΑΚΩΝΙΑΣ, ΚΑΣΤΩΡ ΛΑΚΩΝΙΑΣ, ΚΟΤΙΤΣΑ ΛΑΚΩΝΙΑΣ, ΛΟΠΕΣΙ ΛΑΚΩΝΙΑΣ, ΠΑΠΠΑΔΙΑΝΙΚΑ ΒΟΡΔΟΝΙΑΣ ΛΑΚΩΝΙΑΣ, ΠΕΡΙΒΟΛΙΑ ΛΑΚΩΝΙΑΣ, ΣΟΥΛΗΝΑ ΛΑΚΩΝΙΑΣ', Prefecture: 'Λακωνίας' },
    { PostalCode: '23062', Area: 'ΑΒΡΑΜΙΑΝΙΚΑ ΛΑΚΩΝΙΑΣ, ΑΡΕΟΠΟΛΗ ΛΑΚΩΝΙΑΣ, ΑΡΦΙΓΚΙΑ ΛΑΚΩΝΙΑΣ, ΑΡΧΙΑ ΛΑΚΩΝΙΑΣ, ΒΑΧΟΣ ΛΑΚΩΝΙΑΣ, ΓΕΡΜΑ ΛΑΚΩΝΙΑΣ, ΔΡΥΑΛΙΑ ΛΑΚΩΝΙΑΣ, ΕΛΑΙΟΧΩΡΙ ΛΑΚΩΝΙΑΣ, ΚΑΜΠΙΝΑΡΕΣ ΛΑΚΩΝΙΑΣ, ΚΑΡΑΒΟΣΤΑΣΙ ΟΙΤΥΛΟΥ ΛΑΚΩΝΙΑΣ, ΚΑΡΕΑ ΛΑΚΩΝΙΑΣ, ΚΑΤΩ ΚΑΡΕΑ ΛΑΚΩΝΙΑΣ, ΚΕΛΕΦΑ ΛΑΚΩΝΙΑΣ, ΚΡΥΟΝΕΡΙ ΑΕΡΟΠΟΛΗΣ ΛΑΚΩΝΙΑΣ, ΛΑΓΟΚΟΙΛΙΟ ΛΑΚΩΝΙΑΣ, ΛΙΜΕΝΙΟ ΛΑΚΩΝΙΑΣ, ΜΑΡΜΑΤΣΟΥΚΑ ΛΑΚΩΝΙΑΣ, ΜΕΡΜΥΓΚΙΑΝΙΚΑ ΛΑΚΩΝΙΑΣ, ΜΠΟΥΤΣΕΛΙΑΝΙΚΑ ΛΑΚΩΝΙΑΣ, ΝΕΟ ΟΙΤΥΛΟ ΛΑΚΩΝΙΑΣ, ΞΕΠΑΠΑΔΙΑΝΙΚΑ ΛΑΚΩΝΙΑΣ, ΞΕΡΟΛΑΚΚΟΣ ΛΑΚΩΝΙΑΣ, ΟΙΤΥΛΟ ΛΑΚΩΝΙΑΣ, ΟΜΑΛΕΣ ΛΑΚΩΝΙΑΣ, ΣΚΑΛΑ ΟΙΤΥΛΟΥ ΛΑΚΩΝΙΑΣ, ΣΩΤΗΡΑΣ ΛΑΚΩΝΙΑΣ, ΧΟΤΑΣΙΑ ΛΑΚΩΝΙΑΣ', Prefecture: 'Λακωνίας' },
    { PostalCode: '23070', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΜΟΝΕΜΒΑΣΙΑΣ ΛΑΚΩΝΙΑΣ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΜΟΝΕΜΒΑΣΙΑΣ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΜΟΝΕΜΒΑΣΙΑΣ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΦΩΚΑΣ ΛΑΚΩΝΙΑΣ, ΒΕΛΙΕΣ ΛΑΚΩΝΙΑΣ, ΓΕΦΥΡΑ ΛΑΚΩΝΙΑΣ, ΕΛΛΗΝΙΚΟ ΛΑΚΩΝΙΑΣ, ΚΑΛΥΒΕΣ ΛΑΚΩΝΙΑΣ, ΚΑΣΤΕΛΛΑ ΛΑΚΩΝΙΑΣ, ΚΛΗΡΟΝΟΜΑΙΙΚΑ ΛΑΚΩΝΙΑΣ, ΛΙΡΑ ΛΑΚΩΝΙΑΣ, ΜΟΝΕΜΒΑΣΙΑ ΛΑΚΩΝΙΑΣ, ΝΟΜΙΑ ΣΠΑΡΤΗΣ ΛΑΚΩΝΙΑΣ, ΞΙΦΙΑΣ ΛΑΚΩΝΙΑΣ, ΠΑΝΑΓΙΤΣΑ ΛΑΚΩΝΙΑΣ, ΤΑΛΑΝΤΑ ΛΑΚΩΝΙΑΣ, ΤΕΡΙΑ ΛΑΚΩΝΙΑΣ, ΤΡΟΧΑΛΙΑ ΛΑΚΩΝΙΑΣ, ΦΛΟΚΑ ΛΑΚΩΝΙΑΣ, ΦΟΥΤΙΑ ΛΑΚΩΝΙΑΣ', Prefecture: 'Λακωνίας' },
    { PostalCode: '23100', Area: 'ΑΓΙΑ ΕΙΡΗΝΗ ΛΑΚΩΝΙΑΣ, ΑΓΙΑ ΚΥΡΙΑΚΗ ΚΟΥΝΟΥ ΛΑΚΩΝΙΑΣ, ΑΓΙΑ ΚΥΡΙΑΚΗ ΣΠΑΡΤΗΣ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΛΑΚΕΔΑΙΜΟΝΟΣ ΛΑΚΩΝΙΑΣ, ΑΓΡΙΑΝΟΙ ΛΑΚΩΝΙΑΣ, ΑΜΥΚΛΕΣ ΛΑΚΩΝΙΑΣ, ΑΝΑΒΡΥΤΗ ΛΑΚΩΝΙΑΣ, ΑΦΙΣΙΟ ΛΑΚΩΝΙΑΣ, ΒΑΦΕΙΟ ΛΑΚΩΝΙΑΣ, ΒΛΑΧΟΧΩΡΙΟ ΛΑΚΩΝΙΑΣ, ΓΚΟΡΙΤΣΑ ΛΑΚΩΝΙΑΣ, ΓΟΥΝΑΡΗΣ ΛΑΚΩΝΙΑΣ, ΖΑΓΑΝΟ ΠΛΑΤΑΝΑΣ ΛΑΚΩΝΙΑΣ, ΚΑΛΑΜΙΟ ΛΑΚΩΝΙΑΣ, ΚΑΛΛΟΝΗ ΛΑΚΩΝΙΑΣ, ΚΑΛΥΒΙΑ ΣΟΧΑΣ ΛΑΚΩΝΙΑΣ, ΚΑΡΑΒΑΣ ΛΟΓΓΑΣΤΡΑΣ ΛΑΚΩΝΙΑΣ, ΚΑΡΑΒΑΣ ΣΟΥΣΤΙΑΝΩΝ ΛΑΚΩΝΙΑΣ, ΚΑΡΑΒΑΣ ΤΡΥΠΗΣ ΛΑΚΩΝΙΑΣ, ΚΑΤΣΑΡΟΣ ΛΑΚΩΝΙΑΣ, ΚΕΦΑΛΑΣ ΛΑΚΩΝΙΑΣ, ΚΛΑΔΑΣ ΛΑΚΩΝΙΑΣ, ΚΟΚΚΙΝΟΡΡΑΧΗ ΛΑΚΩΝΙΑΣ, ΛΟΓΓΑΣΤΡΑ ΛΑΚΩΝΙΑΣ, ΜΑΓΟΥΛΑ ΛΑΚΩΝΙΑΣ, ΜΟΝΗ ΑΓΙΩΝ ΤΕΣΣΑΡΑΚΟΝΤΑ ΛΑΚΩΝΙΑΣ, ΜΟΝΗ ΦΑΝΕΡΩΜΕΝΗΣ ΛΑΚΩΝΙΑΣ, ΜΥΣΤΡΑΣ ΛΑΚΩΝΙΑΣ, ΠΑΛΑΙΟΛΟΓΙΟ ΛΑΚΩΝΙΑΣ, ΠΑΡΟΡΕΙΟ ΛΑΚΩΝΙΑΣ, ΠΕΡΙΣΤΕΡΙ ΑΜΥΚΛΩΝ ΛΑΚΩΝΙΑΣ, ΠΙΚΟΥΛΙΑΝΙΚΑ ΛΑΚΩΝΙΑΣ, ΠΛΑΤΑΝΑ ΛΑΚΩΝΙΑΣ, ΠΟΛΥΔΡΟΣΟ ΛΑΚΩΝΙΑΣ, ΡΙΒΙΩΤΙΣΣΑ ΛΑΚΩΝΙΑΣ, ΡΙΖΑ ΛΑΚΩΝΙΑΣ, ΣΑΝΑΤΟΡΙΟ ΜΑΓΟΥΛΑΣ ΛΑΚΩΝΙΑΣ, ΣΚΟΥΡΑ ΛΑΚΩΝΙΑΣ, ΣΟΥΣΤΙΑΝΟΙ ΛΑΚΩΝΙΑΣ, ΣΟΧΑ ΛΑΚΩΝΙΑΣ, ΣΠΑΡΤΗ ΛΑΚΩΝΙΑΣ, ΣΤΑΥΡΟΣ ΛΑΚΩΝΙΑΣ, ΤΑΥΓΕΤΗ ΛΑΚΩΝΙΑΣ, ΤΡΥΠΗ ΛΑΚΩΝΙΑΣ, ΧΡΥΣΑΦΑ ΛΑΚΩΝΙΑΣ', Prefecture: 'Λακωνίας' },
    { PostalCode: '23200', Area: 'ΑΓΕΡΑΝΟΣ ΛΑΚΩΝΙΑΣ, ΑΓΙΑ ΜΑΡΙΝΑ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΓΥΘΕΙΟΥ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΝΕΟΧΩΡΙΟΥ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΕΥΣΤΡΑΤΙΟΣ ΛΑΚΩΝΙΑΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΓΥΘΕΙΟΥ ΛΑΚΩΝΙΑΣ, ΑΙΓΙΕΣ ΛΑΚΩΝΙΑΣ, ΑΡΒΑΝΙΤΗΣ ΛΑΚΩΝΙΑΣ, ΑΡΧΟΝΤΙΚΟ ΛΑΚΩΝΙΑΣ, ΑΣΤΕΡΙ ΓΥΘΕΙΟΥ ΛΑΚΩΝΙΑΣ, ΒΑΘΥ ΛΑΚΩΝΙΑΣ, ΒΟΥΤΡΟΥΒΗ ΛΑΚΩΝΙΑΣ, ΒΡΥΣΕΣ ΛΑΚΩΝΙΑΣ, ΓΕΦΥΡΑΚΙ ΛΑΚΩΝΙΑΣ, ΓΥΘΕΙΟ ΛΑΚΩΝΙΑΣ, ΓΥΡΙΣΤΑ ΛΑΚΩΝΙΑΣ, ΔΙΡΟ ΛΑΚΩΝΙΑΣ, ΔΙΧΟΒΑ ΛΑΚΩΝΙΑΣ, ΔΡΟΣΟΠΗΓΗ ΛΑΚΩΝΙΑΣ, ΕΛΑΙΑ ΜΟΛΑΩΝ ΛΑΚΩΝΙΑΣ, ΚΑΛΥΒΙΑ ΓΥΘΕΙΟΥ ΛΑΚΩΝΙΑΣ, ΚΑΜΑΡΕΣ ΛΑΚΩΝΙΑΣ, ΚΑΡΒΕΛΑΣ ΛΑΚΩΝΙΑΣ, ΚΑΡΥΟΥΠΟΛΗ ΛΑΚΩΝΙΑΣ, ΚΑΥΚΙ ΛΑΚΩΝΙΑΣ, ΚΟΝΑΚΙΑ ΛΑΚΩΝΙΑΣ, ΚΟΥΛΟΥΚΑ ΛΑΚΩΝΙΑΣ, ΚΡΗΝΗ ΛΑΚΩΝΙΑΣ, ΛΑΓΚΑΔΑ ΛΑΚΩΝΙΑΣ, ΛΕΜΟΝΕΑ ΛΑΚΩΝΙΑΣ, ΛΙΜΝΗ ΛΑΚΩΝΙΑΣ, ΛΥΓΕΡΕΑΣ ΛΑΚΩΝΙΑΣ, ΜΑΛΛΙΑΡΗ ΣΥΚΙΑ ΛΑΚΩΝΙΑΣ, ΜΑΡΑΘΕΑ ΛΑΚΩΝΙΑΣ, ΜΑΡΟΥΛΙΑ ΛΑΚΩΝΙΑΣ, ΜΕΛΙΤΙΝΗ ΛΑΚΩΝΙΑΣ, ΜΕΣΟΧΩΡΙ ΣΙΔΗΡΟΚΑΣΤΡΟΥ ΓΥΘΕΙΟΥ ΛΑΚΩΝΙΑΣ, ΜΟΝΑΧΗ ΣΥΚΙΑ ΛΑΚΩΝΙΑΣ, ΜΥΡΣΙΝΗ ΛΑΚΩΝΙΑΣ, ΝΕΑ ΜΑΡΑΘΕΑ ΛΑΚΩΝΙΑΣ, ΝΕΟΧΩΡΙ ΓΥΘΕΙΟΥ ΛΑΚΩΝΙΑΣ, ΠΑΓΑΝΕΑ ΛΑΚΩΝΙΑΣ, ΠΑΛΑΙΟΒΡΥΣΗ ΛΑΚΩΝΙΑΣ, ΠΑΡΑΣΥΡΟΣ ΛΑΚΩΝΙΑΣ, ΠΑΣΣΑΒΑΣ ΛΑΚΩΝΙΑΣ, ΠΕΤΡΙΝΑ ΛΑΚΩΝΙΑΣ, ΠΕΤΡΟΒΟΥΝΙ ΛΑΚΩΝΙΑΣ, ΠΙΛΑΛΑ ΛΑΚΩΝΙΑΣ, ΠΛΑΤΑΝΟΣ ΛΑΚΩΝΙΑΣ, ΠΟΛΥΑΡΑΒΟΣ ΛΑΚΩΝΙΑΣ, ΠΡΙΤΣΙΩΤΙΚΟ ΛΑΚΩΝΙΑΣ, ΠΡΟΣΗΛΙΟ ΛΑΚΩΝΙΑΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΓΥΘΕΙΟΥ ΛΑΚΩΝΙΑΣ, ΠΡΩΤΟΒΑ ΛΑΚΩΝΙΑΣ, ΣΕΛΙΝΙΤΣΑ ΛΑΚΩΝΙΑΣ, ΣΙΔΗΡΟΚΑΣΤΡΟ ΛΑΚΩΝΙΑΣ, ΣΙΝΑ ΛΑΚΩΝΙΑΣ, ΣΚΑΜΝΑΚΙ ΛΑΚΩΝΙΑΣ, ΣΚΑΜΝΙΤΣΑ ΛΑΚΩΝΙΑΣ, ΣΚΟΥΤΑΡΙ ΛΑΚΩΝΙΑΣ, ΣΚΥΦΙΑΝΙΚΑ ΛΑΚΩΝΙΑΣ, ΣΜΗΝΟΣ ΛΑΚΩΝΙΑΣ, ΣΥΝΟΡΑ ΛΑΚΩΝΙΑΣ, ΧΩΣΙΑΡΙΟ ΛΑΚΩΝΙΑΣ, ΨΑΘΑΚΙΑ ΛΑΚΩΝΙΑΣ', Prefecture: 'Λακωνίας' },
    { PostalCode: '40001', Area: 'ΑΚΡΗ ΛΑΡΙΣΗΣ, ΒΑΛΑΝΙΔΑ ΛΑΡΙΣΗΣ, ΚΕΦΑΛΟΒΡΥΣΟ ΛΑΡΙΣΗΣ, ΚΛΕΙΣΟΥΡΑ ΛΑΡΙΣΗΣ, ΚΡΑΝΕΑ ΕΛΑΣΣΟΝΑΣ ΛΑΡΙΣΗΣ, ΛΟΥΤΡΟ ΕΛΛΑΣΟΝΑΣ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '40002', Area: 'ΒΙΓΛΑ ΛΑΡΙΣΗΣ, ΛΙΒΑΔΙ ΛΑΡΙΣΗΣ, ΛΟΦΟΣ ΕΛΑΣΣΟΝΑΣ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '40003', Area: 'ΑΓΙΑ ΛΑΡΙΣΗΣ ΛΑΡΙΣΗΣ, ΑΓΙΟΚΑΜΠΟΣ ΛΑΡΙΣΗΣ, ΑΕΤΟΛΟΦΟΣ ΛΑΡΙΣΗΣ, ΑΜΥΓΔΑΛΗ ΛΑΡΙΣΗΣ, ΑΝΑΒΡΑ ΛΑΡΙΣΗΣ, ΑΝΑΤΟΛΗ ΛΑΡΙΣΗΣ, ΒΕΛΙΚΑ ΛΑΡΙΣΗΣ, ΓΕΡΑΚΑΡΙ ΛΑΡΙΣΗΣ, ΔΗΜΗΤΡΑ ΛΑΡΙΣΗΣ, ΕΛΑΦΟΣ ΛΑΡΙΣΗΣ, ΕΛΕΥΘΕΡΙ ΛΑΡΙΣΗΣ, ΙΣΙΩΜΑΤΑ ΛΑΡΙΣΗΣ, ΚΑΛΑΜΑΚΙ ΛΑΡΙΣΗΣ, ΚΑΣΤΡΙ ΛΑΡΙΣΗΣ, ΚΑΤΩ ΑΜΥΓΔΑΛΗ ΛΑΡΙΣΗΣ, ΚΑΤΩ ΠΟΛΥΔΕΝΔΡΙ ΛΑΡΙΣΗΣ, ΚΑΤΩ ΣΩΤΗΡΙΤΣΑ ΛΑΡΙΣΗΣ, ΚΟΚΚΙΝΟ ΝΕΡΟ ΜΕΛΙΒΟΙΑΣ ΛΑΡΙΣΗΣ, ΚΟΥΤΣΟΥΠΙΑ ΛΑΡΙΣΗΣ, ΜΑΡΜΑΡΙΝΗ ΛΑΡΙΣΗΣ, ΜΕΓΑΛΟΒΡΥΣΟ ΛΑΡΙΣΗΣ, ΜΕΛΙΒΟΙΑ ΛΑΡΙΣΗΣ, ΜΕΤΑΞΟΧΩΡΙ ΛΑΡΙΣΗΣ, ΝΕΟΧΩΡΙ ΑΓΙΑΣ ΛΑΡΙΣΗΣ, ΝΕΡΟΜΥΛΟΙ ΛΑΡΙΣΗΣ, ΠΑΛΙΟΥΡΙΑ ΛΑΡΙΣΗΣ, ΠΟΤΑΜΙΑ ΛΑΡΙΣΗΣ, ΠΡΙΝΙΑΣ ΛΑΡΙΣΗΣ, ΡΑΚΟΠΟΤΑΜΟΣ ΛΑΡΙΣΗΣ, ΣΚΗΤΗ ΛΑΡΙΣΗΣ, ΣΚΛΗΘΡΟ ΛΑΡΙΣΗΣ, ΣΩΤΗΡΙΤΣΑ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '40005', Area: 'ΑΜΠΕΛΙΑ ΛΑΡΙΣΗΣ, ΒΑΡΚΟΣ ΛΑΡΙΣΗΣ, ΒΕΡΔΙΚΟΥΣΣΑ ΛΑΡΙΣΗΣ, ΚΟΥΤΣΟΥΦΛΙΑΝΗ ΛΑΡΙΣΗΣ, ΠΑΛΙΑΜΠΕΛΑ ΛΑΡΙΣΗΣ, ΠΑΛΙΑΣΚΑ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '40006', Area: 'ΑΚΡΙΝΟ ΛΑΡΙΣΗΣ, ΕΛΑΤΕΙΑ ΛΑΡΙΣΗΣ, ΚΑΛΟΧΩΡΙ ΛΑΡΙΣΗΣ, ΚΟΡΑΚΑΣ ΛΑΡΙΣΗΣ, ΚΥΨΕΛΟΧΩΡΙΟ ΛΑΡΙΣΗΣ, ΜΑΚΡΥΧΩΡΙ ΛΑΡΙΣΗΣ, ΝΕΣΣΩΝ ΛΑΡΙΣΗΣ, ΟΣΣΑ ΛΑΡΙΣΗΣ, ΠΟΥΡΝΑΡΙ ΛΑΡΙΣΗΣ, ΣΠΗΛΙΑ ΛΑΡΙΣΗΣ, ΣΥΚΟΥΡΙ ΛΑΡΙΣΗΣ, ΧΕΙΜΑΔΙ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '40010', Area: 'ΤΣΑΡΙΤΣΑΝΗ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '40100', Area: 'ΑΝΩ ΑΡΓΥΡΟΠΟΥΛΕΙΟ ΛΑΡΙΣΗΣ, ΑΡΓΥΡΟΠΟΥΛΕΙΟ ΛΑΡΙΣΗΣ, ΒΛΑΧΟΓΙΑΝΝΙΟ ΛΑΡΙΣΗΣ, ΒΟΤΑΝΟΧΩΡΙ ΛΑΡΙΣΗΣ, ΔΑΜΑΣΙΟ ΛΑΡΙΣΗΣ, ΔΑΜΑΣΟΥΛΙΟ ΛΑΡΙΣΗΣ, ΔΕΛΕΡΙΑ ΛΑΡΙΣΗΣ, ΚΡΙΤΗΡΙ ΛΑΡΙΣΗΣ, ΛΥΓΑΡΙΑ ΛΑΡΙΣΗΣ, ΜΕΓΑ ΕΛΕΥΘΕΡΟΧΩΡΙΟ ΛΑΡΙΣΗΣ, ΜΕΣΟΧΩΡΙ ΛΑΡΙΣΗΣ, ΠΕΡΙΧΩΡΑ ΛΑΡΙΣΗΣ, ΡΟΔΙΑ ΛΑΡΙΣΗΣ, ΤΥΡΝΑΒΟΣ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '40200', Area: 'ΑΓΙΟΝΕΡΟ ΛΑΡΙΣΗΣ, ΑΕΤΟΡΡΑΧΗ ΛΑΡΙΣΗΣ, ΑΖΩΡΟΣ ΒΟΥΒΑΛΑ ΛΑΡΙΣΗΣ, ΑΜΟΥΡΙΟ ΛΑΡΙΣΗΣ, ΑΣΠΡΟΧΩΜΑ ΛΑΡΙΣΗΣ, ΒΡΥΣΟΠΟΥΛΕΣ ΛΑΡΙΣΗΣ, ΓΑΛΑΝΟΒΡΥΣΗ ΛΑΡΙΣΗΣ, ΓΕΡΑΝΙΑ ΛΑΡΙΣΗΣ, ΓΙΑΝΝΩΤΑ ΛΑΡΙΣΗΣ, ΔΟΛΙΧΗ ΛΑΡΙΣΗΣ, ΔΟΜΕΝΙΚΟ ΛΑΡΙΣΗΣ, ΔΡΥΜΟΣ ΛΑΡΙΣΗΣ, ΕΛΑΣΣΟΝΑ ΛΑΡΙΣΗΣ, ΕΥΑΓΓΕΛΙΣΜΟΣ ΕΛΑΣΣΟΝΑΣ ΛΑΡΙΣΗΣ, ΙΕΡΑ ΜΟΝΗ ΣΠΑΡΜΟΥ ΛΑΡΙΣΗΣ, ΚΑΛΛΙΘΕΑ ΛΑΡΙΣΗΣ, ΚΑΛΥΒΙΑ ΑΝΑΛΗΨΕΩΣ ΛΑΡΙΣΗΣ, ΚΑΛΥΒΙΑ ΚΟΚΚΙΝΟΠΗΛΟΥ ΛΑΡΙΣΗΣ, ΚΑΡΥΑ ΛΑΡΙΣΗΣ, ΚΟΚΚΙΝΟΓΕΙΟ ΛΑΡΙΣΗΣ, ΚΟΚΚΙΝΟΠΗΛΟΣ ΛΑΡΙΣΗΣ, ΚΡΥΟΒΡΥΣΗ ΛΑΡΙΣΗΣ, ΛΕΥΚΗ ΛΑΡΙΣΗΣ, ΛΥΚΟΥΔΙ ΛΑΡΙΣΗΣ, ΜΑΓΟΥΛΑ ΛΑΡΙΣΗΣ, ΜΗΛΕΑ ΛΑΡΙΣΗΣ, ΜΙΚΡΟ ΕΛΕΥΘΕΡΟΧΩΡΙ ΛΑΡΙΣΗΣ, ΟΛΥΜΠΙΑΔΑ ΛΑΡΙΣΗΣ, ΠΑΛΑΙΟΚΑΣΤΡΟ ΛΑΡΙΣΗΣ, ΠΕΤΡΩΤΟ ΛΑΡΙΣΗΣ, ΠΡΑΙΤΩΡΙΟ ΛΑΡΙΣΗΣ, ΠΥΘΙΟ ΛΑΡΙΣΗΣ, ΣΑΡΑΝΤΑΠΟΡΟ ΛΑΡΙΣΗΣ, ΣΚΟΠΙΑ ΛΑΡΙΣΗΣ, ΣΠΑΡΜΟΣ ΛΑΡΙΣΗΣ, ΣΤΕΦΑΝΟΒΟΥΝΟ ΛΑΡΙΣΗΣ, ΣΥΚΑΜΙΝΕΑ ΛΑΡΙΣΗΣ, ΣΥΚΕΑ ΛΑΡΙΣΗΣ, ΣΥΚΙΑ ΛΑΡΙΣΗΣ, ΤΣΑΠΟΥΡΝΙΑ ΛΑΡΙΣΗΣ, ΦΑΡΜΑΚΗ ΛΑΡΙΣΗΣ, ΦΛΑΜΠΟΥΡΟ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '40300', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΣΚΟΤΟΥΣΣΑΣ ΛΑΡΙΣΗΣ, ΑΓΙΟΣ ΑΝΤΩΝΙΟΣ ΛΑΡΙΣΗΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΦΑΡΣΑΛΩΝ ΛΑΡΙΣΗΣ, ΑΓΙΟΣ ΚΩΣΤΑΝΤΙΝΟΣ ΣΚΟΤΟΥΣΣΑΣ ΛΑΡΙΣΗΣ, ΑΓΙΟΣ ΧΑΡΑΛΑΜΠΟΣ ΛΑΡΙΣΗΣ, ΑΜΠΕΛΕΙΑ ΛΑΡΙΣΗΣ, ΑΝΩ ΒΑΣΙΛΙΚΑ ΛΑΡΙΣΗΣ, ΑΝΩ ΣΚΟΤΟΥΣΑ ΛΑΡΙΣΗΣ, ΑΝΩΧΩΡΙ ΛΑΡΙΣΗΣ, ΑΡΓΙΘΕΑ ΛΑΡΙΣΗΣ, ΑΣΠΡΟΓΕΙΑ ΛΑΡΙΣΗΣ, ΑΥΡΑ ΛΑΡΙΣΗΣ, ΑΧΙΛΛΕΙΟ ΦΑΡΣΑΛΩΝ ΛΑΡΙΣΗΣ, ΒΑΜΒΑΚΟΥ ΛΑΡΙΣΗΣ, ΒΑΣΙΛΗΣ ΛΑΡΙΣΗΣ, ΒΡΥΣΙΑ ΛΑΡΙΣΗΣ, ΔΑΣΟΛΟΦΟΣ ΛΑΡΙΣΗΣ, ΔΕΝΔΡΑ ΦΑΡΣΑΛΩΝ ΛΑΡΙΣΗΣ, ΔΕΝΔΡΑΚΙ ΛΑΡΙΣΗΣ, ΔΕΝΔΡΟΧΩΡΙ ΛΑΡΙΣΗΣ, ΔΙΛΟΦΟ ΦΑΡΣΑΛΩΝ ΛΑΡΙΣΗΣ, ΕΛΛΗΝΙΚΟ ΛΑΡΙΣΗΣ, ΕΡΕΤΡΙΑ ΛΑΡΙΣΗΣ, ΖΩΟΔΟΧΟΣ ΠΗΓΗ ΛΑΡΙΣΗΣ, ΘΕΤΙΔΙΟ ΛΑΡΙΣΗΣ, ΚΑΛΛΙΘΕΑ ΦΑΡΣΑΛΩΝ ΛΑΡΙΣΗΣ, ΚΑΣΤΡΑΚΙ ΛΑΡΙΣΗΣ, ΚΑΤΩ ΒΑΣΙΛΙΚΑ ΛΑΡΙΣΗΣ, ΚΑΤΩ ΔΑΣΟΛΟΦΟΣ ΛΑΡΙΣΗΣ, ΚΑΤΩΧΩΡΙ ΛΑΡΙΣΗΣ, ΚΟΚΚΙΝΩ ΛΑΡΙΣΗΣ, ΚΡΗΝΗ ΛΑΡΙΣΗΣ, ΛΟΦΟΣ ΦΑΡΣΑΛΩΝ ΛΑΡΙΣΗΣ, ΜΕΓΑ ΕΥΥΔΡΙΟ ΛΑΡΙΣΗΣ, ΝΑΡΘΑΚΙ ΛΑΡΙΣΗΣ, ΝΕΡΑΙΔΑ ΛΑΡΙΣΗΣ, ΞΥΛΑΔΕΣ ΛΑΡΙΣΗΣ, ΠΑΛΑΙΟΜΥΛΟΣ ΛΑΡΙΣΗΣ, ΠΛΑΤΑΝΟΣ ΚΑΛΛΙΘΕΑΣ ΛΑΡΙΣΗΣ, ΠΟΛΥΔΑΜΕΙΟ ΛΑΡΙΣΗΣ, ΠΟΛΥΝΕΡΙ ΛΑΡΙΣΗΣ, ΠΥΡΓΑΚΙΑ ΛΑΡΙΣΗΣ, ΡΕΥΜΑΤΙΑ ΛΑΡΙΣΗΣ, ΡΗΓΑΙΟ ΛΑΡΙΣΗΣ, ΡΥΖΙΟ ΛΑΡΙΣΗΣ, ΣΕΡΙΦΗΣ ΛΑΡΙΣΗΣ, ΣΙΤΟΧΩΡΙ ΛΑΡΙΣΗΣ, ΣΚΟΤΟΥΣΣΑ ΛΑΡΙΣΗΣ, ΣΤΑΘΜΟΣ ΦΑΡΣΑΛΩΝ ΛΑΡΙΣΗΣ, ΣΤΑΥΡΟΣ ΛΑΡΙΣΗΣ, ΥΠΕΡΕΙΑ ΛΑΡΙΣΗΣ, ΦΑΡΣΑΛΑ ΛΑΡΙΣΗΣ, ΧΑΙΔΑΡΙΑ ΛΑΡΙΣΗΣ, ΧΑΛΚΙΑΔΕΣ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '40400', Area: 'ΑΜΠΕΛΩΝΑΣ ΛΑΡΙΣΗΣ, ΒΡΥΟΤΟΠΟΣ ΛΑΡΙΣΗΣ, ΜΙΚΡΟΛΙΘΟΣ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '41000', Area: 'ΛΑΡΙΣΣΑ', Prefecture: 'Λάρισας' },
    { PostalCode: '41005', Area: 'ΚΙΛΕΛΕΡ ΛΑΡΙΣΑΣ, ΛΑΡΙΣΑΙΩΝ ΛΑΡΙΣΑΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '41221', Area: 'ΛΑΡΙΣΑ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '41222', Area: 'ΛΑΡΙΣΑ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '41223', Area: 'ΓΑΛΗΝΗ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '41234', Area: 'ΛΑΡΙΣΑΙΩΝ ΛΑΡΙΣΑΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '41236', Area: 'ΛΑΡΙΣΑΙΩΝ ΛΑΡΙΣΑΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '41334', Area: 'ΛΑΡΙΣΑ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '41335', Area: 'ΛΑΡΙΣΑ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '41336', Area: 'ΛΑΡΙΣΑ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '41435', Area: 'ΛΑΡΙΣΑΙΩΝ ΛΑΡΙΣΑΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '41447', Area: 'ΛΑΡΙΣΑ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '41448', Area: 'ΛΑΡΙΣΑΙΩΝ ΛΑΡΙΣΑΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '41500', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΚΥΠΑΡΙΣΣΟΥ ΛΑΡΙΣΗΣ, ΑΓΙΑ ΣΟΦΙΑ ΔΕΝΔΡΩΝ ΛΑΡΙΣΗΣ, ΑΓΙΟΙ ΑΝΑΡΓΥΡΟΙ ΛΑΡΙΣΗΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΛΑΡΙΣΗΣ, ΑΓΝΑΝΤΕΡΗ ΛΑΡΙΣΗΣ, ΑΓΡΟΚΗΠΙΟ ΛΑΡΙΣΗΣ, ΑΜΥΓΔΑΛΕΑ ΛΑΡΙΣΗΣ, ΑΜΦΙΘΕΑ ΛΑΡΙΣΗΣ, ΑΝΑΓΕΝΝΗΣΙΣ ΛΑΡΙΣΗΣ, ΑΡΓΙΣΣΑ ΛΑΡΙΣΗΣ, ΑΡΓΥΡΟΜΥΛΟΣ ΛΑΡΙΣΗΣ, ΑΡΜΕΝΙΟ ΛΑΡΙΣΗΣ, ΑΧΙΛΛΕΙΟ ΛΑΡΙΣΗΣ, ΓΙΑΝΝΟΥΛΗ ΛΑΡΙΣΗΣ, ΓΛΑΥΚΗ ΛΑΡΙΣΗΣ, ΓΥΡΤΩΝΗ ΛΑΡΙΣΗΣ, ΔΕΝΔΡΑ ΤΥΡΝΑΒΟΥ ΛΑΡΙΣΗΣ, ΔΙΛΟΦΟ ΛΑΡΙΣΗΣ, ΔΟΞΑΡΑΣ ΛΑΡΙΣΗΣ, ΕΛΕΥΘΕΡΕΣ ΛΑΡΙΣΗΣ, ΖΑΠΠΕΙΟ ΛΑΡΙΣΗΣ, ΘΕΡΑΠΕΥΤΙΚΗ ΚΟΙΝΟΤΗΤΑ ΕΞΟΔΟΣ ΛΑΡΙΣΗΣ, ΚΑΛΟ ΝΕΡΟ ΛΑΡΙΣΗΣ, ΚΑΜΠΟΣ ΛΑΡΙΣΗΣ, ΚΑΣΤΡΟ ΛΑΡΙΣΗΣ, ΚΙΛΕΛΕΡ ΛΑΡΙΣΗΣ, ΚΟΙΛΑΔΑ ΛΑΡΙΣΗΣ, ΚΟΚΚΙΝΑ ΛΑΡΙΣΗΣ, ΚΟΥΛΟΥΡΙ ΛΑΡΙΣΗΣ, ΚΟΥΤΣΟΧΕΡΟ ΛΑΡΙΣΗΣ, ΚΡΑΝΝΩΝΑΣ ΛΑΡΙΣΗΣ, ΚΡΥΑ ΒΡΥΣΗ ΛΑΡΙΣΗΣ, ΚΥΠΑΡΙΣΣΙΑ ΛΑΡΙΣΗΣ, ΚΥΠΑΡΙΣΣΟΣ ΛΑΡΙΣΗΣ, ΛΟΥΤΡΟ ΛΑΡΙΣΗΣ, ΛΟΦΙΣΚΟΣ ΛΑΡΙΣΗΣ, ΜΑΝΔΡΑ ΛΑΡΙΣΗΣ, ΜΑΥΡΟΒΟΥΝΙΟ ΛΑΡΙΣΗΣ, ΜΕΓΑ ΜΟΝΑΣΤΗΡΙ ΛΑΡΙΣΗΣ, ΜΕΛΙΑ ΛΑΡΙΣΗΣ, ΜΕΛΙΣΣΑ ΛΑΡΙΣΗΣ, ΜΕΛΙΣΣΟΧΩΡΙ ΛΑΡΙΣΗΣ, ΜΕΣΟΡΡΑΧΗ ΛΑΡΙΣΗΣ, ΜΙΚΡΟ ΒΟΥΝΟ ΛΑΡΙΣΗΣ, ΜΟΔΕΣΤΟΣ ΛΑΡΙΣΗΣ, ΜΟΣΧΟΧΩΡΙ ΛΑΡΙΣΗΣ, ΜΥΡΑ ΛΑΡΙΣΗΣ, ΝΑΜΑΤΑ ΛΑΡΙΣΗΣ, ΝΕΑ ΛΕΥΚΗ ΛΑΡΙΣΗΣ, ΝΕΕΣ ΚΑΡΥΕΣ ΛΑΡΙΣΗΣ, ΝΕΟ ΠΕΡΙΒΟΛΙ ΛΑΡΙΣΗΣ, ΝΙΚΑΙΑ ΛΑΡΙΣΗΣ, ΝΙΚΗ ΛΑΡΙΣΗΣ, ΟΜΟΡΦΟΧΩΡΙ ΛΑΡΙΣΗΣ, ΠΛΑΤΑΝΟΥΛΙΑ ΛΑΡΙΣΗΣ, ΠΡΟΔΡΟΜΟΣ ΛΑΡΙΣΗΣ, ΡΑΧΟΥΛΑ ΛΑΡΙΣΗΣ, ΡΕΥΜΑ ΛΑΡΙΣΗΣ, ΣΟΦΟ ΛΑΡΙΣΗΣ, ΣΥΝΟΙΚΙΣΜΟΣ ΠΡΟΣΦΥΓΩΝ ΛΑΡΙΣΗΣ, ΣΩΤΗΡΙΟ ΛΑΡΙΣΗΣ, ΤΕΡΨΙΘΕΑ ΛΑΡΙΣΗΣ, ΧΑΛΚΗ ΛΑΡΙΣΗΣ, ΧΑΡΑ ΛΑΡΙΣΗΣ, ΧΑΣΑΜΠΑΛΗ ΛΑΡΙΣΗΣ, ΨΥΧΙΚΟ ΛΑΡΙΣΗΣ', Prefecture: 'Λάρισας' },
    { PostalCode: '72052', Area: 'ΑΒΡΑΚΟΝΤΕΣ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΛΑΣΙΘΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΛΑΣΙΘΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΑΓΙΟΣ ΧΑΡΑΛΑΜΠΟΣ ΗΡΑΚΛΕΙΟΥ, ΑΡΓΥΡΟ ΝΕΡΟ ΗΡΑΚΛΕΙΟΥ, ΕΞΩ ΠΟΤΑΜΟΙ ΗΡΑΚΛΕΙΟΥ, ΚΑΜΙΝΑΚΙ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΩ ΜΕΤΟΧΙ ΗΡΑΚΛΕΙΟΥ, ΛΑΓΟΥ ΗΡΑΚΛΕΙΟΥ, ΜΑΓΟΥΛΑΣ ΗΡΑΚΛΕΙΟΥ, ΜΑΡΜΑΚΕΤΟ ΗΡΑΚΛΕΙΟΥ, ΜΕΣΑ ΛΑΣΙΘΑΚΙ ΗΡΑΚΛΕΙΟΥ, ΜΕΣΑ ΛΑΣΙΘΙ ΗΡΑΚΛΕΙΟΥ, ΜΕΣΑ ΠΟΤΑΜΟΙ ΗΡΑΚΛΕΙΟΥ, ΜΟΝΗ ΚΡΥΣΤΑΛΛΕΝΙΑΣ ΗΡΑΚΛΕΙΟΥ, ΠΙΝΑΚΙΑΝΟ ΗΡΑΚΛΕΙΟΥ, ΠΛΑΤΗ ΗΡΑΚΛΕΙΟΥ, ΡΟΥΣΣΑΚΙΑΝΑ ΗΡΑΚΛΕΙΟΥ, ΤΖΕΡΜΙΑΔΟ ΗΡΑΚΛΕΙΟΥ, ΦΑΡΣΑΡΟ ΗΡΑΚΛΕΙΟΥ, ΨΥΧΡΟ ΗΡΑΚΛΕΙΟΥ', Prefecture: 'Λασιθίου' },
    { PostalCode: '72053', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΛΑΣΙΘΙΟΥ, ΒΑΛΤΟΣ ΛΑΣΙΘΙΟΥ, ΒΛΙΧΑΔΙΑ ΛΑΣΙΘΙΟΥ, ΒΡΟΥΧΑΣ ΛΑΣΙΘΙΟΥ, ΕΛΟΥΝΤΑ ΕΠΑΝΩ ΛΑΣΙΘΙΟΥ, ΕΛΟΥΝΤΑ ΚΑΤΩ ΛΑΣΙΘΙΟΥ, ΕΛΟΥΝΤΑΣ ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΛΑΣΙΘΙΟΥ, ΕΠΑΝΩ ΛΟΥΜΑΣ ΛΑΣΙΘΙΟΥ, ΕΠΑΝΩ ΠΙΝΕΣ ΛΑΣΙΘΙΟΥ, ΚΑΤΩ ΛΟΥΜΑΣ ΛΑΣΙΘΙΟΥ, ΚΑΤΩ ΠΙΝΕΣ ΛΑΣΙΘΙΟΥ, ΚΑΤΩ ΣΕΛΛΕΣ ΛΑΣΙΘΙΟΥ, ΜΑΥΡΙΚΙΑΝΟ ΛΑΣΙΘΙΟΥ, ΜΥΡΩΝΙΚΗΤΑΣ ΛΑΣΙΘΙΟΥ, ΠΛΑΚΑ ΛΑΣΙΘΙΟΥ, ΣΕΛΛΕΣ ΛΑΣΙΘΙΟΥ, ΣΚΙΝΙΑΣ ΛΑΣΙΘΙΟΥ, ΣΧΙΣΜΑ ΕΛΟΥΝΤΑΣ ΛΑΣΙΘΙΟΥ', Prefecture: 'Λασιθίου' },
    { PostalCode: '72055', Area: 'ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΟΡΕΙΝΟΥ ΛΑΣΙΘΙΟΥ, ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΛΑΣΙΘΙΟΥ, ΑΝΑΛΗΨΗ ΛΑΣΙΘΙΟΥ, ΑΝΔΡΙΑΝΟΣ ΛΑΣΙΘΙΟΥ, ΑΣΠΡΟΣ ΠΟΤΑΜΟΣ ΛΑΣΙΘΙΟΥ, ΑΧΛΙΑ ΛΑΣΙΘΙΟΥ, ΓΑΛΗΝΗ ΛΑΣΙΘΙΟΥ, ΔΑΦΝΗ ΛΑΣΙΘΙΟΥ, ΕΠΑΝΩ ΚΡΥΑ ΛΑΣΙΘΙΟΥ, ΚΑΛΥΒΙΤΗΣ ΛΑΣΙΘΙΟΥ, ΚΑΤΩ ΚΡΥΑ ΛΑΣΙΘΙΟΥ, ΚΟΥΤΣΟΥΡΑΣ ΛΑΣΙΘΙΟΥ, ΛΑΠΙΘΟΣ ΛΑΣΙΘΙΟΥ, ΜΑΚΡΥΓΙΑΛΟΣ ΛΑΣΙΘΙΟΥ, ΜΑΥΡΟΣ ΚΟΛΥΜΠΟΣ ΛΑΣΙΘΙΟΥ, ΜΠΕΜΠΟΝΑΣ ΛΑΣΙΘΙΟΥ, ΟΡΕΙΝΟ ΛΑΣΙΘΙΟΥ, ΠΕΥΚΟΙ ΛΑΣΙΘΙΟΥ, ΠΙΛΑΛΗΜΑΤΑ ΛΑΣΙΘΙΟΥ, ΡΙΖΑ ΣΗΤΕΙΑΣ ΛΑΣΙΘΙΟΥ, ΣΚΟΡΔΙΛΟ ΛΑΣΙΘΙΟΥ, ΣΤΑΥΡΟΧΩΡΙ ΛΑΣΙΘΙΟΥ, ΣΧΙΝΟΚΑΨΑΛΑ ΛΑΣΙΘΙΟΥ, ΤΣΙΚΚΑΛΑΡΙΑ ΛΑΣΙΘΙΟΥ, ΧΡΥΣΟΠΗΓΗ ΛΑΣΙΘΙΟΥ', Prefecture: 'Λασιθίου' },
    { PostalCode: '72100', Area: 'ΑΓΙΟΙ ΠΑΝΤΕΣ ΝΗΣΟΣ ΛΑΣΙΘΙΟΥ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΛΑΣΙΘΙΟΥ, ΑΜΜΟΥΔΑΡΑ ΑΓ.ΝΙΚΟΛΑΟΥ ΛΑΣΙΘΙΟΥ, ΒΑΘΥ ΛΑΣΙΘΙΟΥ, ΒΛΑΧΗΔΕΣ ΛΑΣΙΘΙΟΥ, ΒΡΥΟΝΗΣΙ ΛΑΣΙΘΙΟΥ, ΕΛΛΗΝΙΚΑ ΛΑΣΙΘΙΟΥ, ΕΞΩ ΛΑΚΚΩΝΙΑ ΛΑΣΙΘΙΟΥ, ΘΕΟΛΟΓΟΣ ΛΑΣΙΘΙΟΥ, ΙΣΤΡΟ ΛΑΣΙΘΙΟΥ, ΚΑΚΟΚΑΜΩΤΕΣ ΛΑΣΙΘΙΟΥ, ΚΑΛΟ ΧΩΡΙΟ ΑΓ.ΝΙΚΟΛΑΟΥ ΛΑΣΙΘΙΟΥ, ΚΑΛΟ ΧΩΡΙΟ ΣΗΤΕΙΑΣ ΛΑΣΙΘΙΟΥ, ΚΑΛΥΒΟΣ ΛΑΣΙΘΙΟΥ, ΚΑΣΤΕΛΙ ΦΟΥΡΝΗΣ ΛΑΣΙΘΙΟΥ, ΚΑΤΣΙΚΙΑ ΛΑΣΙΘΙΟΥ, ΚΕΡΤΕΡΗΔΕΣ ΛΑΣΙΘΙΟΥ, ΚΡΟΥΣΤΑΣ ΛΑΣΙΘΙΟΥ, ΜΑΡΓΙΕΛΙ ΛΑΣΙΘΙΟΥ, ΜΑΡΔΑΤΙ ΛΑΣΙΘΙΟΥ, ΜΑΡΝΕΛΛΗΔΕΣ ΛΑΣΙΘΙΟΥ, ΜΙΚΡΟΝΗΣΙ ΛΑΣΙΘΙΟΥ, ΞΗΡΟΚΑΜΠΟΣ ΑΓ.ΝΙΚΟΛΑΟΥ ΛΑΣΙΘΙΟΥ, ΠΕΠΟΝΗΔΕΣ ΛΑΣΙΘΙΟΥ, ΠΙΣΣΙΔΟΣ ΛΑΣΙΘΙΟΥ, ΠΡΙΝΑ ΛΑΣΙΘΙΟΥ, ΠΥΡΓΟΣ ΚΑΛΟΥ ΧΩΡΙΟΥ ΛΑΣΙΘΙΟΥ, ΡΟΥΣΑ ΛΙΜΝΗ ΛΑΣΙΘΙΟΥ, ΣΧΙΣΜΑ ΛΑΣΙΘΙΟΥ, ΤΑΠΕΣ ΛΑΣΙΘΙΟΥ, ΦΙΟΡΕΤΖΙΔΕΣ ΛΑΣΙΘΙΟΥ, ΦΛΑΜΟΥΡΙΑΝΑ ΛΑΣΙΘΙΟΥ, ΦΟΡΤΙ ΛΑΣΙΘΙΟΥ, ΧΑΜΗΛΟ ΛΑΣΙΘΙΟΥ', Prefecture: 'Λασιθίου' },
    { PostalCode: '72200', Area: 'ΑΓΙΑ ΦΩΤΙΑ ΙΕΡΑΠΕΤΡΑΣ ΛΑΣΙΘΙΟΥ, ΑΓΙΑ ΦΩΤΙΑ ΣΗΤΕΙΑΣ ΛΑΣΙΘΙΟΥ, ΑΓΙΑΣΜΕΝΟΣ ΛΑΣΙΘΙΟΥ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΙΕΡΑΠΕΤΡΑΣ ΛΑΣΙΘΙΟΥ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΙΕΡΑΠΕΤΡΑΣ ΛΑΣΙΘΙΟΥ, ΑΜΜΟΥΔΑΡΕΣ ΙΕΡΑΠΕΤΡΑΣ ΛΑΣΙΘΙΟΥ, ΑΝΑΤΟΛΗ ΛΑΣΙΘΙΟΥ, ΒΑΙΝΙΑ ΛΑΣΙΘΙΟΥ, ΒΑΣΙΛΙΚΗ ΛΑΣΙΘΙΟΥ, ΓΑΒΡΙΛΗΣ ΛΑΣΙΘΙΟΥ, ΓΡΑ ΛΥΓΙΑ ΛΑΣΙΘΙΟΥ, ΔΡΑΚΑΛΕΥΡΙΟ ΛΑΣΙΘΙΟΥ, ΘΡΥΠΤΗ ΛΑΣΙΘΙΟΥ, ΙΕΡΑ ΜΟΝΗ ΠΑΝΑΓΙΑΣ ΕΞΑΚΟΥΣΤΗΣ ΛΑΣΙΘΙΟΥ, ΙΕΡΑ ΜΟΝΗ ΦΑΝΕΡΩΜΕΝΗΣ ΛΑΣΙΘΙΟΥ, ΙΕΡΑΠΕΤΡΑ ΛΑΣΙΘΙΟΥ, ΚΑΒΟΥΣΙΟ ΛΑΣΙΘΙΟΥ, ΚΑΗΜΕΝΟΣ ΛΑΣΙΘΙΟΥ, ΚΑΛΑΜΑΥΚΑ ΛΑΣΙΘΙΟΥ, ΚΑΛΛΙΘΕΑ ΛΑΣΙΘΙΟΥ, ΚΑΛΟΓΕΡΟΙ ΛΑΣΙΘΙΟΥ, ΚΑΜΑΡΑ ΙΕΡΑΠΕΤΡΑΣ ΛΑΣΙΘΙΟΥ, ΚΑΜΠΟΣ ΛΑΣΙΘΙΟΥ, ΚΑΤΩ ΧΩΡΙΟ ΛΑΣΙΘΙΟΥ, ΚΕΝΤΡΙ ΛΑΣΙΘΙΟΥ, ΚΕΦΑΛΑ ΛΑΣΙΘΙΟΥ, ΚΟΥΤΣΟΥΝΑΡΙ ΛΑΣΙΘΙΟΥ, ΜΑΚΡΥΛΙΑ ΛΑΣΙΘΙΟΥ, ΜΕΛΙΣΣΕΣ ΛΑΣΙΘΙΟΥ, ΜΕΣΕΛΕΡΟΙ ΛΑΣΙΘΙΟΥ, ΜΟΝΑΣΤΗΡΑΚΙ ΛΑΣΙΘΙΟΥ, ΝΕΑ ΑΝΑΤΟΛΗ ΛΑΣΙΘΙΟΥ, ΞΗΡΟΚΑΜΠΟΣ ΙΕΡΑΠΕΤΡΑΣ ΛΑΣΙΘΙΟΥ, ΟΡΝΙΑΣ ΛΑΣΙΘΙΟΥ, ΠΑΝΑΓΙΑ ΚΑΒΟΥΣΙΟΥ ΛΑΣΙΘΙΟΥ, ΠΑΝΩ ΧΩΡΙΟ ΛΑΣΙΘΙΟΥ, ΠΑΧΕΙΑ ΑΜΜΟΣ ΛΑΣΙΘΙΟΥ, ΠΟΤΑΜΟΙ ΛΑΣΙΘΙΟΥ, ΡΙΖΑ ΙΕΡΑΠΕΤΡΑΣ ΛΑΣΙΘΙΟΥ, ΣΑΡΑΤΣΙ ΚΑΜΠΟΣ ΛΑΣΙΘΙΟΥ, ΣΤΑΥΡΟΣ ΛΑΣΙΘΙΟΥ, ΣΤΟΜΙΟ ΛΑΣΙΘΙΟΥ, ΣΥΚΙΑ ΙΕΡΑΠΕΤΡΑΣ ΛΑΣΙΘΙΟΥ, ΣΦΑΚΟΥΡΑ ΛΑΣΙΘΙΟΥ, ΤΣΑΜΑΝΤΗΣ ΛΑΣΙΘΙΟΥ, ΦΕΡΜΑ ΛΑΣΙΘΙΟΥ, ΧΡΥΣΗ ΝΗΣΟΣ ΛΑΣΙΘΙΟΥ, ΨΑΘΙ ΛΑΣΙΘΙΟΥ', Prefecture: 'Λασιθίου' },
    { PostalCode: '72300', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΖΑΚΡΟΥ ΛΑΣΙΘΙΟΥ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΣΗΤΕΙΑΣ ΛΑΣΙΘΙΟΥ, ΑΓΚΑΘΙΑ ΛΑΣΙΘΙΟΥ, ΑΔΡΑΒΑΣΤΟΙ ΛΑΣΙΘΙΟΥ, ΑΖΟΚΕΡΑΜΟΣ ΛΑΣΙΘΙΟΥ, ΑΝΕΜΟΜΥΛΙΑ ΛΑΣΙΘΙΟΥ, ΑΡΝΙΚΟ ΛΑΣΙΘΙΟΥ, ΑΧΛΑΔΙΑ ΛΑΣΙΘΙΟΥ, ΒΙΓΛΑ ΛΑΣΙΘΙΟΥ, ΒΡΥΣΙΔΙ ΛΑΣΙΘΙΟΥ, ΓΙΑΝΥΣΑΔΑ ΛΑΣΙΘΙΟΥ, ΔΙΟΝΥΣΟΣ ΛΑΣΙΘΙΟΥ, ΔΡΑΓΟΝΑΔΑ ΛΑΣΙΘΙΟΥ, ΖΑΚΡΟΣ ΛΑΣΙΘΙΟΥ, ΖΟΥ ΛΑΣΙΘΙΟΥ, ΚΑΜΑΡΑ ΣΗΤΕΙΑΣ ΛΑΣΙΘΙΟΥ, ΚΑΡΥΔΙ ΣΗΤΕΙΑΣ ΛΑΣΙΘΙΟΥ, ΚΑΤΩ ΔΡΥΣ ΛΑΣΙΘΙΟΥ, ΚΑΤΩ ΕΠΙΣΚΟΠΗ ΛΑΣΙΘΙΟΥ, ΚΑΤΩ ΖΑΚΡΟΣ ΛΑΣΙΘΙΟΥ, ΚΕΛΛΑΡΙΑ ΛΑΣΙΘΙΟΥ, ΚΙΜΟΥΡΙΩΤΗΣ ΛΑΣΙΘΙΟΥ, ΚΛΗΣΙΔΙ ΛΑΣΙΘΙΟΥ, ΚΟΥΡΕΜΕΝΟΣ ΛΑΣΙΘΙΟΥ, ΚΡΥΟΝΕΡΙ ΛΑΣΙΘΙΟΥ, ΚΥΡΙΑΜΑΔΙ ΛΑΣΙΘΙΟΥ, ΛΑΓΚΑΔΑ ΚΑΡΥΔΙΟΥ ΛΑΣΙΘΙΟΥ, ΛΑΓΚΑΔΑ ΛΙΘΙΝΩΝ ΛΑΣΙΘΙΟΥ, ΛΥΔΙΑ ΛΑΣΙΘΙΟΥ, ΜΑΡΩΝΙΑ ΛΑΣΙΘΙΟΥ, ΜΕΡΤΥΔΙΑ ΛΑΣΙΘΙΟΥ, ΜΗΤΑΤΟ ΛΑΣΙΘΙΟΥ, ΞΕΡΟΚΑΜΠΙΑΣ ΙΤΑΝΟΥ ΛΑΣΙΘΙΟΥ, ΞΗΡΟΛΙΜΝΗ ΣΗΤΕΙΑΣ ΛΑΣΙΘΙΟΥ, ΠΑΛΑΙΚΑΣΤΡΟ ΛΑΣΙΘΙΟΥ, ΠΑΝΑΓΙΑ ΦΑΝΕΡΩΜΕΝΗ ΛΑΣΙΘΙΟΥ, ΠΑΞΙΜΑΔΑ ΛΑΣΙΘΙΟΥ, ΠΑΡΑΣΠΟΡΙΟ ΛΑΣΙΘΙΟΥ, ΠΕΤΡΑΣ ΛΑΣΙΘΙΟΥ, ΠΙΣΚΟΚΕΦΑΛΟ ΛΑΣΙΘΙΟΥ, ΡΟΥΣΣΑ ΕΚΚΛΗΣΙΑ ΛΑΣΙΘΙΟΥ, ΣΑΡΑΝΤΑΠΗΧΟΣ ΛΑΣΙΘΙΟΥ, ΣΗΤΕΙΑ ΛΑΣΙΘΙΟΥ, ΣΚΟΠΗ ΛΑΣΙΘΙΟΥ, ΣΤΑΥΡΩΜΕΝΟΣ ΛΑΣΙΘΙΟΥ, ΣΦΑΚΑ ΙΤΑΝΟΥ ΛΑΣΙΘΙΟΥ, ΤΟΠΛΟΥ ΛΑΣΙΘΙΟΥ, ΤΡΥΠΗΤΟΣ ΛΑΣΙΘΙΟΥ, ΧΑΜΕΖΙΟ ΛΑΣΙΘΙΟΥ, ΧΙΩΝΑ ΛΑΣΙΘΙΟΥ, ΧΟΧΛΑΚΙΕΣ ΛΑΣΙΘΙΟΥ, ΧΩΝΟΣ ΛΑΣΙΘΙΟΥ', Prefecture: 'Λασιθίου' },
    { PostalCode: '72400', Area: 'ΑΓΙΑ ΒΑΡΒΑΡΑ ΛΑΣΙΘΙΟΥ, ΑΓΙΑ ΠΕΛΑΓΙΑ ΛΑΣΙΘΙΟΥ, ΑΓΙΟΣ ΑΝΤΩΝΙΟΣ ΛΑΣΙΘΙΟΥ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΛΙΜΝΩΝ ΛΑΣΙΘΙΟΥ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΝΕΑΠΟΛΗΣ ΛΑΣΙΘΙΟΥ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΝΕΑΠΟΛΕΩΣ ΛΑΣΙΘΙΟΥ, ΑΓΟΡΟΙ ΛΑΣΙΘΙΟΥ, ΑΔΡΑΒΑΣΤΟΣ ΛΑΣΙΘΙΟΥ, ΑΔΡΙΑΝΟΣ ΛΑΣΙΘΙΟΥ, ΑΜΥΓΔΑΛΕΑ ΛΑΣΙΘΙΟΥ, ΑΜΥΓΔΑΛΟΙ ΛΑΣΙΘΙΟΥ, ΑΜΥΓΔΑΛΟΛΑΚΚΟΣ ΛΑΣΙΘΙΟΥ, ΑΝΩ ΑΜΥΓΔΑΛΟΙ ΛΑΣΙΘΙΟΥ, ΑΝΩΓΕΙΑ ΛΑΣΙΘΙΟΥ, ΑΥΓΟ ΛΑΣΙΘΙΟΥ, ΒΟΥΛΙΣΜΕΝΗ ΛΑΣΙΘΙΟΥ, ΒΡΥΣΕΣ ΛΑΣΙΘΙΟΥ, ΓΙΟΦΥΡΙ ΛΑΣΙΘΙΟΥ, ΔΙΛΑΚΚΟΣ ΛΑΣΙΘΙΟΥ, ΔΟΡΙΕΣ ΛΑΣΙΘΙΟΥ, ΔΡΑΚΟΣ ΛΑΣΙΘΙΟΥ, ΔΡΑΣΙ ΛΑΣΙΘΙΟΥ, ΔΥΟ ΠΡΙΝΟΙ ΛΑΣΙΘΙΟΥ, ΕΠΑΝΩ ΣΙΣΙΟ ΛΑΣΙΘΙΟΥ, ΖΕΝΙΑ ΛΑΣΙΘΙΟΥ, ΖΟΥΡΒΑ ΛΑΣΙΘΙΟΥ, ΚΑΛΟΣ ΛΑΚΚΟΣ ΑΓ.ΝΙΚΟΛΑΟΥ ΛΑΣΙΘΙΟΥ, ΚΑΡΤΣΙΝΙΑΝΟΣ ΛΑΣΙΘΙΟΥ, ΚΑΡΥΔΙ ΝΕΑΠΟΛΗΣ ΛΑΣΙΘΙΟΥ, ΚΟΥΔΟΥΜΑΛΟΣ ΛΑΣΙΘΙΟΥ, ΚΟΥΝΑΛΙ ΛΑΣΙΘΙΟΥ, ΚΟΥΡΟΥΝΕΣ ΛΑΣΙΘΙΟΥ, ΛΑΤΣΙΔΑ ΛΑΣΙΘΙΟΥ, ΛΙΜΝΕΣ ΛΑΣΙΘΙΟΥ, ΜΑΚΡΥΓΕΝΝΗΣΑ ΛΑΣΙΘΙΟΥ, ΜΙΛΑΤΟΣ ΛΑΣΙΘΙΟΥ, ΜΟΝΗ ΑΡΕΤΙΟΥ ΛΑΣΙΘΙΟΥ, ΝΕΑΠΟΛΗ ΛΑΣΙΘΙΟΥ, ΝΙΚΗΘΙΑΝΟΣ ΛΑΣΙΘΙΟΥ, ΝΙΣΠΗΤΑΣ ΛΑΣΙΘΙΟΥ, ΝΟΦΑΛΙΑΣ ΛΑΣΙΘΙΟΥ, ΞΕΡΑ ΞΥΛΑ ΛΑΣΙΘΙΟΥ, ΞΗΡΟΛΙΜΝΗ ΝΕΑΠΟΛΗΣ ΛΑΣΙΘΙΟΥ, ΠΑΡΑΛΙΑ ΜΙΛΑΤΟΥ ΛΑΣΙΘΙΟΥ, ΠΑΤΣΟΠΟΥΛΟΣ ΛΑΣΙΘΙΟΥ, ΠΕΡΑΜΠΕΛΑ ΛΑΣΙΘΙΟΥ, ΠΕΡΟΝΙΔΕΣ ΛΑΣΙΘΙΟΥ, ΠΕΤΡΟΣ ΛΑΣΙΘΙΟΥ, ΠΛΑΤΥΠΟΔΙ ΛΑΣΙΘΙΟΥ, ΠΥΡΓΟΣ ΒΡΑΧΑΣΙΟΥ ΛΑΣΙΘΙΟΥ, ΡΟΥΣΣΑΠΙΔΙΑ ΛΑΣΙΘΙΟΥ, ΡΩΜΑΝΟΣ ΛΑΣΙΘΙΟΥ, ΣΕΛΗΝΑΡΙ ΛΑΣΙΘΙΟΥ, ΣΙΣΙΟ ΛΑΣΙΘΙΟΥ, ΣΟΥΒΛΟΣ ΛΑΣΙΘΙΟΥ, ΣΥΡΜΕΣΟ ΛΑΣΙΘΙΟΥ, ΤΣΑΜΠΙΟ ΛΑΣΙΘΙΟΥ, ΦΙΝΟΚΑΛΙΑ ΛΑΣΙΘΙΟΥ, ΦΡΑΘΙΑΣ ΛΑΣΙΘΙΟΥ, ΧΑΥΓΑΣ ΛΑΣΙΘΙΟΥ, ΧΟΝΔΡΟΒΟΛΑΚΟΙ ΛΑΣΙΘΙΟΥ, ΧΟΥΜΕΡΙΑΚΟΣ ΛΑΣΙΘΙΟΥ', Prefecture: 'Λασιθίου' },
    { PostalCode: '81100', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΛΕΣΒΟΥ, ΑΓΙΑ ΤΡΙΑΔΑ ΑΦΑΛΩΝΑ ΛΕΣΒΟΥ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΛΟΥΤΡΟΠΟΛΕΩΣ ΛΕΣΒΟΥ, ΑΓΡΙΛΙΑ ΚΡΑΤΗΓΟΥ ΛΕΣΒΟΥ, ΑΛΥΦΑΝΤΑ ΛΕΣΒΟΥ, ΑΝΩ ΧΑΡΑΜΙΔΑ ΛΕΣΒΟΥ, ΑΦΑΛΩΝΑΣ ΛΕΣΒΟΥ, ΑΧΛΙΑ ΛΕΣΒΟΥ, ΒΑΡΕΙΑ ΛΕΣΒΟΥ, ΘΕΡΜΗ ΛΕΣΒΟΥ, ΚΕΔΡΟ ΛΕΣΒΟΥ, ΚΟΥΜΙΚΟ ΛΕΣΒΟΥ, ΚΟΥΝΤΟΥΡΟΥΔΙΑ ΛΕΣΒΟΥ, ΚΡΑΤΗΓΟΣ ΛΕΣΒΟΥ, ΚΩΜΗ ΛΕΣΒΟΥ, ΛΑΡΙΣΟΣ (ή ΛΑΡΣΟΣ) ΛΕΣΒΟΥ, ΛΟΥΤΡΑ ΘΕΡΜΗΣ ΛΕΣΒΟΥ, ΛΟΥΤΡΑ ΛΕΣΒΟΥ, ΛΟΥΤΡΟΠΟΛΗ ΘΕΡΜΗΣ ΛΕΣΒΟΥ, ΜΑΡΜΑΡΟ ΜΟΡΙΑΣ ΛΕΣΒΟΥ, ΜΙΣΤΕΓΝΑ ΛΕΣΒΟΥ, ΜΟΝΗ ΑΓΙΟΥ ΡΑΦΑΗΛ ΛΕΣΒΟΥ, ΜΟΡΙΑ ΛΕΣΒΟΥ, ΜΥΤΙΛΗΝΗ ΛΕΣΒΟΥ, ΝΕΑΠΟΛΗ ΛΕΣΒΟΥ, ΝΕΕΣ ΚΥΔΩΝΙΕΣ ΛΕΣΒΟΥ, ΝΗΣΕΛΙΑ ΛΕΣΒΟΥ, ΞΑΜΠΕΛΙΑ ΛΕΣΒΟΥ, ΟΥΤΖΑ ΛΕΣΒΟΥ, ΠΑΜΦΙΛΑ ΛΕΣΒΟΥ, ΠΑΝΑΓΙΑ ΛΕΣΒΟΥ, ΠΑΝΑΓΙΟΥΔΑ ΛΕΣΒΟΥ, ΠΑΡΑΛΙΑ ΘΕΡΜΗΣ ΛΕΣΒΟΥ, ΠΑΡΑΛΙΑ ΛΕΣΒΟΥ, ΠΗΓΗ ΛΕΣΒΟΥ, ΠΛΙΓΟΝΙ ΛΕΣΒΟΥ, ΠΥΡΓΙ ΛΕΣΒΟΥ, ΠΥΡΓΟΙ ΘΕΡΜΗΣ ΛΕΣΒΟΥ, ΣΚΑΛΑ ΛΟΥΤΡΩΝ ΛΕΣΒΟΥ, ΣΚΑΛΑ ΜΙΣΤΕΓΝΩΝ ΛΕΣΒΟΥ, ΣΚΑΛΑ ΝΕΩΝ ΚΥΔΩΝΙΩΝ ΛΕΣΒΟΥ, ΤΑΞΙΑΡΧΕΣ ΜΥΤΙΛΗΝΗΣ ΛΕΣΒΟΥ, ΤΟΥΜΠΕΣ ΛΕΣΒΟΥ, ΦΥΛΑΚΙΟ ΠΡΟΒΟΣΚΙΔΑ ΛΕΣΒΟΥ, ΧΑΡΑΜΙΔΑ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81101', Area: 'ΑΓΙΑΣΟΣ ΛΕΣΒΟΥ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΕΥΕΡΓΕΤΟΥΛΑΣ ΛΕΣΒΟΥ, ΑΣΩΜΑΤΟΣ ΛΕΣΒΟΥ, ΓΙΑΛΟΥ ΠΗΓΑΔΙ ΛΕΣΒΟΥ, ΙΠΠΕΙΟ ΛΕΣΒΟΥ, ΚΑΓΙΑΝΙ ΛΕΣΒΟΥ, ΚΑΡΗΝΗ ΛΕΣΒΟΥ, ΚΕΡΑΜΕΙΑ ΛΕΣΒΟΥ, ΛΑΜΠΟΥ ΜΥΛΟΙ ΛΕΣΒΟΥ, ΛΑΡΣΟΣ ΕΥΕΡΓΕΤΟΥΛΑΣ ΛΕΣΒΟΥ, ΜΕΓΑΛΗ ΛΙΜΝΗ ΛΕΣΒΟΥ, ΝΤΙΠΙ ΣΥΚΟΥΝΤΑΣ ΛΕΣΒΟΥ, ΣΑΝΑΤΟΡΙΟ ΛΕΣΒΟΥ, ΣΚΑΛΑ ΣΥΚΟΥΝΤΟΣ ΛΕΣΒΟΥ, ΣΥΚΟΥΝΤΑ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81102', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ (ΑΓΙΑΣ ΠΑΡΑΣΚΕΥΗΣ) ΛΕΣΒΟΥ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΜΥΤΙΛΗΝΗΣ ΛΕΣΒΟΥ, ΚΑΝΤΡΙ ΛΕΣΒΟΥ, ΜΕΣΑ ΛΕΣΒΟΥ, ΝΑΠΗ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81103', Area: 'ΑΝΤΙΣΣΑ ΛΕΣΒΟΥ, ΜΟΝΗ ΑΓΙΟΥ ΙΩΑΝΝΟΥ ΘΕΟΛΟΓΟΥ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81104', Area: 'ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΛΕΣΒΟΥ, ΑΣΠΡΗ ΠΛΑΚΟΥΔΑ ΛΕΣΒΟΥ, ΑΣΠΡΟΝΗΣΙΑ ΛΕΣΒΟΥ, ΑΣΠΡΟΠΟΤΑΜΟΣ ΛΕΣΒΟΥ, ΚΑΠΗ ΛΕΣΒΟΥ, ΚΛΕΙΩ ΛΕΣΒΟΥ, ΛΑΓΚΑΔΑ ΜΑΝΤΑΜΑΔΟΥ ΛΕΣΒΟΥ, ΛΙΜΑΝΙ ΚΑΠΗΣ ΛΕΣΒΟΥ, ΜΑΝΤΑΜΑΔΟΣ ΛΕΣΒΟΥ, ΜΑΥΡΗ ΠΛΑΚΟΥΔΑ ΛΕΣΒΟΥ, ΜΠΑΡΜΠΑΛΙΑΣ ΛΕΣΒΟΥ, ΠΑΛΙΟΣ ΛΕΣΒΟΥ, ΠΑΝΑΓΙΑ ΜΑΝΤΑΜΑΔΟΥ ΛΕΣΒΟΥ, ΠΕΔΗ ΛΕΣΒΟΥ, ΠΕΛΟΠΗ ΛΕΣΒΟΥ, ΣΚΑΛΑ ΣΥΚΑΜΙΝΕΑΣ ΛΕΣΒΟΥ, ΣΥΚΑΜΙΝΕΑ ΛΕΣΒΟΥ, ΤΑΞΙΑΡΧΕΣ ΜΑΝΤΑΜΑΔΟΥ ΛΕΣΒΟΥ, ΤΣΟΝΙΑ ΛΕΣΒΟΥ, ΤΣΟΥΚΑΛΑΣ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81105', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΝΗΣΟΣ ΛΕΣΒΟΥ, ΑΓΡΑ ΛΕΣΒΟΥ, ΑΠΟΘΗΚΕΣ ΑΓΡΑΣ ΛΕΣΒΟΥ, ΕΡΕΣΟΣ ΛΕΣΒΟΥ, ΛΥΓΕΡΗ ΛΕΣΒΟΥ, ΜΕΣΟΤΟΠΟΣ ΛΕΣΒΟΥ, ΠΟΔΑΡΑΣ ΛΕΣΒΟΥ, ΠΟΧΗΣ ΛΕΣΒΟΥ, ΣΚΑΛΑ ΕΡΕΣΟΥ ΛΕΣΒΟΥ, ΤΑΒΑΡΙ ΛΕΣΒΟΥ, ΧΛΙΑΡΑ ΕΡΕΣΟΥ ΛΕΣΒΟΥ, ΧΡΙΣΤΟΣ ΕΡΕΣΟΥ ΛΕΣΒΟΥ, ΧΡΟΥΣΟΣ ΕΡΕΣΟΥ ΛΕΣΒΟΥ, ΨΙΝΙΑ ΕΡΕΣΟΥ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81106', Area: 'ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΛΕΣΒΟΥ, ΑΓΛΕΦΥΡΟΣ ΛΕΣΒΟΥ, ΑΠΗΔΙΑ ΛΕΣΒΟΥ, ΑΥΛΩΝΑΣ ΛΕΣΒΟΥ, ΓΕΡΑΝΙΑ ΛΕΣΒΟΥ, ΕΥΡΕΙΑΚΗ ΛΕΣΒΟΥ, ΚΑΡΙΩΝΑΣ ΛΕΣΒΟΥ, ΚΑΤΩ ΤΡΙΤΟΣ ΛΕΣΒΟΥ, ΚΟΥΦΟ ΒΟΥΝΟ ΛΕΣΒΟΥ, ΛΑΓΚΑΔΑ ΣΚΟΠΕΛΟΥ ΛΕΣΒΟΥ, ΛΙΓΟΝΑΡΙ ΛΕΣΒΟΥ, ΜΑΡΜΑΡΟ ΠΑΠΠΑΔΟΥ ΛΕΣΒΟΥ, ΜΕΣΑΓΡΟΣ ΛΕΣΒΟΥ, ΜΥΧΟΣ ΛΕΣΒΟΥ, ΠΑΛΑΙΟΚΗΠΟΣ ΛΕΣΒΟΥ, ΠΑΠΠΑΔΟΣ ΛΕΣΒΟΥ, ΠΗΓΑΔΑΚΙΑ ΛΕΣΒΟΥ, ΠΛΑΚΑΔΟΣ ΛΕΣΒΟΥ, ΠΥΡΓΟΙ ΜΕΣΑΓΡΟΥ ΛΕΣΒΟΥ, ΣΚΟΠΕΛΟΣ ΛΕΣΒΟΥ, ΤΑΡΤΙ ΛΕΣΒΟΥ, ΤΣΑΦΙ ΛΕΣΒΟΥ, ΤΣΙΛΙΑ ΛΕΣΒΟΥ, ΦΑΡΑ ΛΕΣΒΟΥ, ΦΤΕΛΙ ΛΕΣΒΟΥ, ΧΑΛΑΤΣΕΣ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81107', Area: 'ΑΡΙΣΒΗ ΛΕΣΒΟΥ, ΔΑΦΙΑ ΛΕΣΒΟΥ, ΙΕΡΑ ΜΟΝΗ ΛΕΙΜΩΝΟΣ ΛΕΣΒΟΥ, ΚΑΛΛΟΝΗ ΛΕΣΒΟΥ, ΚΕΡΑΜΙ ΛΕΣΒΟΥ, ΚΕΧΡΑΔΑ ΛΕΣΒΟΥ, ΜΟΝΗ ΠΑΝΑΓΙΑΣ ΜΥΡΣΙΝ. ΛΕΙΜΩΝΟΣ ΛΕΣΒΟΥ, ΜΠΑΛΙΝΗ ΛΕΣΒΟΥ, ΠΑΡΑΚΟΙΛΑ ΛΕΣΒΟΥ, ΠΕΤΣΟΦΑΣ ΛΕΣΒΟΥ, ΣΚΑΛΑ ΚΑΛΛΟΝΗΣ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81108', Area: 'ΑΡΓΕΝΝΟΣ ΛΕΣΒΟΥ, ΒΑΦΕΙΟΣ ΛΕΣΒΟΥ, ΕΥΘΑΛΟΥ ΛΕΣΒΟΥ, ΛΕΠΕΤΥΜΝΟΣ ΛΕΣΒΟΥ, ΜΗΘΥΜΝΑ (ΜΟΛΥΒΟΣ) ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81109', Area: 'ΑΓΙΑ ΒΑΡΒΑΡΑ ΜΗΘΥΜΝΗΣ ΛΕΣΒΟΥ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΠΕΤΡΑΣ ΛΕΣΒΟΥ, ΑΜΠΕΛΙΑ ΛΕΣΒΟΥ, ΑΝΑΞΟΣ ΣΚΟΥΤΑΡΟΥ ΛΕΣΒΟΥ, ΛΑΦΙΩΝΑΣ ΛΕΣΒΟΥ, ΜΙΡΑΔΕΛΛΙΑ ΛΕΣΒΟΥ, ΠΕΤΡΑ ΛΕΣΒΟΥ, ΠΕΤΡΙ ΛΕΣΒΟΥ, ΣΚΟΥΤΑΡΟΣ ΛΕΣΒΟΥ, ΣΤΥΨΗ ΛΕΣΒΟΥ, ΥΨΗΛΟΜΕΤΩΠΟ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81110', Area: 'ΑΡΧΑΙΑ ΑΝΤΙΣΣΑ ΛΕΣΒΟΥ, ΒΑΤΟΥΣΣΑ ΛΕΣΒΟΥ, ΓΑΒΑΘΑΣ ΛΕΣΒΟΥ, ΚΑΛΟ ΛΙΜΑΝΙ ΛΕΣΒΟΥ, ΚΑΜΠΟΣ ΛΕΣΒΟΥ, ΠΤΕΡΟΥΝΤΑ ΛΕΣΒΟΥ, ΡΕΥΜΑ ΛΕΣΒΟΥ, ΣΚΑΛΟΧΩΡΙ ΛΕΣΒΟΥ, ΤΖΙΘΡΑ ΛΕΣΒΟΥ, ΧΙΔΗΡΑ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81112', Area: 'ΜΕΓΑΛΟΝΗΣΙ ΛΕΣΒΟΥ, ΣΙΓΡΙΟ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81200', Area: 'ΑΓΙΑ ΒΑΡΒΑΡΑ ΠΛΩΜΑΡΙΟΥ ΛΕΣΒΟΥ, ΑΓΙΟΣ ΙΣΙΔΩΡΟΣ ΛΕΣΒΟΥ, ΑΚΡΑΣΙΟ ΛΕΣΒΟΥ, ΑΜΠΕΛΙΚΟ ΛΕΣΒΟΥ, ΑΝΩ ΧΩΡΙΟ ΛΕΣΒΟΥ, ΔΡΟΤΑ ΛΕΣΒΟΥ, ΕΥΑΓΓΕΛΙΣΤΡΙΑ ΛΕΣΒΟΥ, ΚΑΤΩ ΧΩΡΙΟ ΛΕΣΒΟΥ, ΚΟΛΥΜΒΑΤΕΡΑ ΛΕΣΒΟΥ, ΚΟΥΡΝΕΛΑ ΛΕΣΒΟΥ, ΜΕΓΑΛΟΧΩΡΙ ΛΕΣΒΟΥ, ΜΕΛΙΝΤΑ ΛΕΣΒΟΥ, ΜΕΣΟΥΝΑ ΛΕΣΒΟΥ, ΜΗΛΙΕΣ ΛΕΣΒΟΥ, ΝΕΟΧΩΡΙ ΛΕΣΒΟΥ, ΠΑΛΑΙΟΧΩΡΙ ΛΕΣΒΟΥ, ΠΑΡΑΛΙΑ ΔΡΟΤΑΣ ΛΕΣΒΟΥ, ΠΛΑΓΙΑ ΛΕΣΒΟΥ, ΠΛΩΜΑΡΙ ΛΕΣΒΟΥ, ΡΑΧΙΔΙ ΛΕΣΒΟΥ, ΣΠΙΔΕΣ ΛΕΣΒΟΥ, ΤΡΥΓΟΝΑΣ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81300', Area: 'ΑΓΙΟΣ ΠΑΥΛΟΣ ΛΕΣΒΟΥ, ΑΓΙΟΣ ΦΩΚΑΣ ΛΕΣΒΟΥ, ΑΧΛΑΔΕΡΗ ΛΕΣΒΟΥ, ΒΑΣΙΛΙΚΑ ΛΕΣΒΟΥ, ΒΑΤΕΡΑ ΛΕΣΒΟΥ, ΒΡΙΣΑ ΛΕΣΒΟΥ, ΓΗΡΟΚΟΜΕΙΟ ΛΑΜΑΝΔΡΙΟΥ ΛΕΣΒΟΥ, ΘΕΡΜΟΠΗΓΕΣ ΛΕΣΒΟΥ, ΚΑΤΩ ΣΤΑΥΡΟΣ ΛΕΣΒΟΥ, ΛΙΒΑΔΙΑ ΛΕΣΒΟΥ, ΛΙΣΒΟΡΙΟ ΛΕΣΒΟΥ, ΝΥΦΙΔΑ ΛΕΣΒΟΥ, ΠΟΛΙΧΝΙΤΟΣ ΛΕΣΒΟΥ, ΣΚΑΛΑ ΠΟΛΙΧΝΙΤΟΥ ΛΕΣΒΟΥ, ΣΚΑΜΙΟΥΔΙ ΛΕΣΒΟΥ, ΣΤΑΥΡΟΣ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81400', Area: 'ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΑΓΚΑΡΥΩΝΕΣ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΑΛΟΓΟΝΗΣΙ ΛΕΣΒΟΥ, ΒΟΥΝΑΡΙΑ ΠΕΔΙΝΟΥ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΓΑΛΗ ΚΑΣΠΑΚΑ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΔΑΦΝΗ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΘΑΝΟΣ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΚΑΛΛΙΘΕΑ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΚΑΣΠΑΚΑΣ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΚΑΣΤΡΙΑ ΛΕΣΒΟΥ, ΚΑΤΑΛΑΚΚΟ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΚΟΜΠΙ ΝΗΣΟΣ ΛΕΣΒΟΥ, ΚΟΡΝΟΣ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΛΙΒΑΔΟΧΩΡΙ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΛΙΜΕΝΑΡΙΑ ΛΕΣΒΟΥ, ΜΥΡΙΝΑ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΝΕΑ ΚΟΥΤΑΛΗ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΝΕΟ ΠΕΔΙΝΟ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΠΑΡΑΛΙΑ ΘΑΝΟΥΣ ΛΕΣΒΟΥ, ΠΑΡΑΛΙΑ ΠΛΑΤΕΟΣ ΛΕΣΒΟΥ, ΠΕΔΙΝΟ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΠΕΔΙΝΟ ΝΕΑΣ ΚΟΥΤΑΛΗΣ ΛΕΣΒΟΥ, ΠΛΑΓΙΣΟΣ ΜΩΛΟΣ ΛΕΣΒΟΥ, ΠΛΑΤΥ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΠΟΛΙΟΧΝΗ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΠΟΡΤΙΑΝΟ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΣΑΡΔΑΙ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΤΣΙΜΑΝΔΡΙΑ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΨΥΛΛΟΙ ΚΟΡΝΟΥ ΛΗΜΝΟΥ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81401', Area: 'ΑΓΙΑ ΣΟΦΙΑ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΑΓΙΟΣ ΑΛΕΞΑΝΔΡΟΣ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΑΓΙΟΣ ΘΕΟΔΩΡΟΣ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΑΕΡΟΛΙΜΕΝΑΣ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΑΝΕΜΟΕΣΣΑ ΛΥΧΝΩΝ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΑΤΣΙΚΗ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΒΑΡΟΣ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΒΟΡΟΣΚΟΠΟΣ ΛΕΣΒΟΥ, ΚΑΛΛΙΟΠΗ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΚΑΜΙΝΙΑ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΚΑΡΠΑΣΙΟ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΚΟΝΤΙΑΣ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΚΟΝΤΟΠΟΥΛΙ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΚΟΡΤΙΣΩΝΑΣ ΛΕΣΒΟΥ, ΚΟΤΣΙΝΑΣ ΡΕΠΑΝΙΔΙΟΥ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΚΟΥΚΟΝΗΣΙ ΛΕΣΒΟΥ, ΛΥΧΝΑ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΜΟΥΔΡΟΣ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΠΑΝΑΓΙΑ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΠΛΑΚΑ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΠΡΟΠΟΥΛΙ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΡΕΠΑΝΙΔΙ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΡΟΥΣΣΟΠΟΥΛΙ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΡΩΜΑΝΟ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΣΕΡΓΙΤΣΙ ΛΕΣΒΟΥ, ΣΚΑΝΔΑΛΙ ΛΗΜΝΟΥ ΛΕΣΒΟΥ, ΦΙΣΙΝΗ ΛΗΜΝΟΥ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '81500', Area: 'ΑΓΙΟΙ ΑΠΟΣΤΟΛΟΙ ΛΕΣΒΟΥ, ΑΓΙΟΣ ΕΥΣΤΡΑΤΙΟΣ ΝΗΣΟΣ ΛΕΣΒΟΥ, ΡΟΥΜΠΟΣ ΛΕΣΒΟΥ', Prefecture: 'Λέσβου' },
    { PostalCode: '31082', Area: 'ΑΓΙΟΣ ΗΛΙΑΣ ΛΕΥΚΑΔΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΝΗΡΑΣ ΛΕΥΚΑΔΑΣ, ΑΓΙΟΣ ΠΕΤΡΟΣ ΛΕΥΚΑΔΑΣ, ΑΘΑΝΙΟΝ ΛΕΥΚΑΔΑΣ, ΑΛΑΤΡΟ ΛΕΥΚΑΔΑΣ, ΒΑΣΙΛΙΚΗ ΛΕΥΚΑΔΑΣ, ΒΟΥΡΝΙΚΑ ΛΕΥΚΑΔΑΣ, ΔΡΑΓΑΝΟ ΛΕΥΚΑΔΑΣ, ΕΥΓΗΡΟΣ ΛΕΥΚΑΔΑΣ, ΚΟΜΗΛΙΟ ΛΕΥΚΑΔΑΣ, ΚΟΝΤΑΡΑΙΝΑ ΛΕΥΚΑΔΑΣ, ΜΑΝΑΣΗ ΛΕΥΚΑΔΑΣ, ΜΑΡΑΝΤΟΧΩΡΙ ΛΕΥΚΑΔΑΣ, ΝΙΚΟΛΗ ΛΕΥΚΑΔΑΣ, ΠΑΝΩΧΩΡΙ ΛΕΥΚΑΔΑΣ, ΠΟΝΤΗ ΑΓΙΟΥ ΠΕΤΡΟΥ ΛΕΥΚΑΔΑΣ, ΣΥΒΟΤΑ ΛΕΥΚΑΔΑΣ, ΣΥΒΡΟΣ ΛΕΥΚΑΔΑΣ, ΦΤΕΡΝΟ ΛΕΥΚΑΔΑΣ, ΧΟΡΤΑΤΑ ΛΕΥΚΑΔΑΣ', Prefecture: 'Λευκάδας' },
    { PostalCode: '31084', Area: 'ΜΕΓΑΝΗΣΙ ΛΕΥΚΑΔΑΣ, ΝΥΔΡΙ ΛΕΥΚΑΔΑΣ', Prefecture: 'Λευκάδας' },
    { PostalCode: '31100', Area: 'ΑΓΙΟΣ ΧΡΙΣΤΟΦΟΡΟΣ ΛΕΥΚΑΔΑΣ, ΑΠΟΛΠΑΙΝΑ ΛΕΥΚΑΔΑΣ, ΒΛΥΧΟ ΛΕΥΚΑΔΑΣ, ΓΕΝΙ ΛΕΥΚΑΔΑΣ, ΔΕΣΙΜΙ ΛΕΥΚΑΔΑΣ, ΔΗΜΟΣΑΡΙ ΛΕΥΚΑΔΑΣ, ΕΠΙΣΚΟΠΟΣ ΛΕΥΚΑΔΑΣ, ΚΑΛΑΒΡΟΣ ΛΕΥΚΑΔΑΣ, ΚΑΛΛΙΓΟΝΙΟ ΛΕΥΚΑΔΑΣ, ΚΑΛΛΙΘΕΑ ΛΕΥΚΑΔΑΣ, ΚΑΡΙΩΤΕΣ ΛΕΥΚΑΔΑΣ, ΚΑΤΟΥΝΑ ΛΕΥΚΑΔΑΣ, ΚΑΤΩΧΩΡΙ ΛΕΥΚΑΔΑΣ, ΛΕΥΚΑΔΑ ΛΕΥΚΑΔΑΣ, ΛΥΓΙΑ ΛΕΥΚΑΔΑΣ, ΜΑΔΟΥΡΗ  ΝΗΣΟΣ ΛΕΥΚΑΔΑΣ, ΜΕΓΑΛΟ ΑΥΛΑΚΙ ΛΕΥΚΑΔΑΣ, ΜΙΚΡΟΣ ΓΙΑΛΟΣ ΛΕΥΚΑΔΑΣ, ΝΕΟΧΩΡΙ ΛΕΥΚΑΔΑΣ, ΝΙΚΙΑΝΑ ΛΕΥΚΑΔΑΣ, ΠΕΡΙΒΟΛΙΑ ΛΕΥΚΑΔΑΣ ΛΕΥΚΑΔΑΣ, ΠΕΡΙΓΙΑΛΙ ΛΕΥΚΑΔΑΣ, ΠΟΡΟΣ ΛΕΥΚΑΔΑΣ, ΡΑΧΗ ΛΕΥΚΑΔΑΣ, ΣΚΟΡΠΙΟΣ  ΝΗΣΟΣ ΛΕΥΚΑΔΑΣ, ΣΠΑΡΤΗ  ΝΗΣΟΣ ΛΕΥΚΑΔΑΣ, ΤΣΟΥΚΑΛΑΔΕΣ ΛΕΥΚΑΔΑΣ, ΦΟΡΤΙ ΝΗΣΟΣ ΛΕΥΚΑΔΑΣ, ΦΡΥΝΙΟ ΛΕΥΚΑΔΑΣ, ΧΑΡΑΔΙΑΤΙΚΑ ΛΕΥΚΑΔΑΣ', Prefecture: 'Λευκάδας' },
    { PostalCode: '37001', Area: 'ΑΓΙΟΙ ΣΑΡΑΝΤΑ ΜΑΓΝΗΣΙΑΣ, ΑΝΑΛΗΨΗ ΜΑΓΝΗΣΙΑΣ, ΑΝΗΛΙΟ ΜΑΓΝΗΣΙΑΣ, ΕΛΙΤΣΑ ΜΑΓΝΗΣΙΑΣ, ΖΑΓΟΡΑ ΜΑΓΝΗΣΙΑΣ, ΚΑΡΑΒΩΜΑ ΜΑΓΝΗΣΙΑΣ, ΜΑΚΡΥΡΡΑΧΗ ΜΑΓΝΗΣΙΑΣ, ΟΒΡΙΟΣ ΜΑΓΝΗΣΙΑΣ, ΠΟΥΡΙ ΜΑΓΝΗΣΙΑΣ, ΠΟΥΡΙΑΝΟΣ ΣΤΑΥΡΟΣ ΜΑΓΝΗΣΙΑΣ, ΧΟΡΕΥΤΟ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '37002', Area: 'ΑΜΠΕΛΙΑ ΜΑΓΝΗΣΙΑΣ, ΑΣΕΛΙΝΟΣ ΜΑΓΝΗΣΙΑΣ, ΑΧΛΑΔΙΑΣ ΜΑΓΝΗΣΙΑΣ, ΖΟΡΜΠΑΔΕΣ ΜΑΓΝΗΣΙΑΣ, ΚΑΛΥΒΙΑ ΜΑΓΝΗΣΙΑΣ, ΚΑΝΑΠΙΤΣΑ ΜΑΓΝΗΣΙΑΣ, ΚΑΣΤΡΟ ΜΑΓΝΗΣΙΑΣ, ΚΑΤΣΑΡΟΣ ΜΑΓΝΗΣΙΑΣ, ΚΟΛΙΟΣ ΜΑΓΝΗΣΙΑΣ, ΚΟΥΚΟΥΝΑΡΙΕΣ ΜΑΓΝΗΣΙΑΣ, ΜΑΡΑΘΑ ΜΑΓΝΗΣΙΑΣ, ΜΟΝΗ ΕΥΑΓΓΕΛΙΣΤΡΙΑΣ ΜΑΓΝΗΣΙΑΣ, ΞΑΝΕΜΟΣ ΜΑΓΝΗΣΙΑΣ, ΞΕΝΙΑ ΜΑΓΝΗΣΙΑΣ, ΠΛΑΤΑΝΙΑΣ ΜΑΓΝΗΣΙΑΣ, ΡΕΠΙΟ ΝΗΣΟΣ ΜΑΓΝΗΣΙΑΣ, ΣΚΙΑΘΟΣ ΜΑΓΝΗΣΙΑΣ, ΤΡΟΥΛΛΟΣ ΜΑΓΝΗΣΙΑΣ, ΤΣΟΥΓΚΡΙΑ  ΝΗΣΟΣ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '37003', Area: 'ΑΓΝΩΝΤΑΣ ΜΑΓΝΗΣΙΑΣ, ΚΑΛΟΓΗΡΟΣ ΜΑΓΝΗΣΙΑΣ, ΜΥΛΟΙ ΜΑΓΝΗΣΙΑΣ, ΠΑΝΟΡΜΟΣ ΜΑΓΝΗΣΙΑΣ, ΣΚΟΠΕΛΟΣ ΜΑΓΝΗΣΙΑΣ, ΣΤΑΦΥΛΟΣ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '37005', Area: 'ΑΓΙΟΣ ΠΕΤΡΟΣ  ΑΛΟΝΝΗΣΟΥ ΜΑΓΝΗΣΙΑΣ, ΑΔΕΛΦΟΙ  ΝΗΣΟΣ ΜΑΓΝΗΣΙΑΣ, ΑΛΟΝΝΗΣΟΣ ΜΑΓΝΗΣΙΑΣ, ΒΟΤΣΗ ΑΛΟΝΝΗΣΟΥ ΜΑΓΝΗΣΙΑΣ, ΓΕΡΑΚΑΣ ΑΛΟΝΝΗΣΟΥ ΜΑΓΝΗΣΙΑΣ, ΓΙΟΥΡΑ ΝΗΣΟΣ ΜΑΓΝΗΣΙΑΣ, ΙΣΙΩΜΑΤΑ ΜΑΓΝΗΣΙΑΣ, ΚΑΛΑΜΑΚΙΑ  ΑΛΟΝΝΗΣΟΥ ΜΑΓΝΗΣΙΑΣ, ΚΥΡΑ ΠΑΝΑΓΙΑ ΝΗΣΟΣ ΜΑΓΝΗΣΙΑΣ, ΜΑΡΠΟΥΝΤΑ ΑΛΟΝΝΗΣΟΥ ΜΑΓΝΗΣΙΑΣ, ΜΟΥΡΤΕΡΟ ΜΑΓΝΗΣΙΑΣ, ΠΑΤΗΤΗΡΙ ΑΛΟΝΝΗΣΟΥ ΜΑΓΝΗΣΙΑΣ, ΠΕΡΙΣΤΕΡΑ  ΝΗΣΟΣ ΜΑΓΝΗΣΙΑΣ, ΠΙΠΕΡΙ ΝΗΣΟΣ ΜΑΓΝΗΣΙΑΣ, ΣΚΑΝΤΖΟΥΡΑ  ΝΗΣΟΣ ΜΑΓΝΗΣΙΑΣ, ΣΤΕΝΗ ΒΑΛΑ ΑΛΟΝΝΗΣΟΥ ΜΑΓΝΗΣΙΑΣ, ΧΡΥΣΗ ΜΗΛΙΑ ΑΛΟΝΝΗΣΟΥ ΜΑΓΝΗΣΙΑΣ, ΨΑΘΟΥΡΑ ΝΗΣΟΣ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '37006', Area: 'ΑΓΙΟΙ ΑΠΟΣΤΟΛΟΙ ΣΗΠΙΑΔΟΣ ΜΑΓΝΗΣΙΑΣ, ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΜΑΓΝΗΣΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΠΡΟΜΥΡΙΟΥ ΜΑΓΝΗΣΙΑΣ, ΑΡΓΑΛΑΣΤΗ ΜΑΓΝΗΣΙΑΣ, ΒΟΔΙΝΙ ΜΑΓΝΗΣΙΑΣ, ΚΑΛΑΜΟΣ ΜΑΓΝΗΣΙΑΣ, ΚΑΛΛΙΘΕΑ ΜΑΓΝΗΣΙΑΣ, ΚΑΣΤΡΙ ΜΑΓΝΗΣΙΑΣ, ΚΟΥΚΟΥΛΑΙΙΚΑ ΜΑΓΝΗΣΙΑΣ, ΛΑΥΚΟΣ ΜΑΓΝΗΣΙΑΣ, ΛΕΦΟΚΑΣΤΡΟ ΜΑΓΝΗΣΙΑΣ, ΛΥΡΗ ΜΑΓΝΗΣΙΑΣ, ΜΑΡΑΘΙΑΣ ΜΑΓΝΗΣΙΑΣ, ΜΕΤΟΧΙ ΜΑΓΝΗΣΙΑΣ, ΜΙΚΡΟ ΜΑΓΝΗΣΙΑΣ, ΜΟΡΤΙΑ ΜΑΓΝΗΣΙΑΣ, ΜΟΥΣΓΕΣ ΜΑΓΝΗΣΙΑΣ, ΜΥΡΙΟΒΡΥΤΗ ΜΑΓΝΗΣΙΑΣ, ΞΙΝΟΒΡΥΣΗ ΜΑΓΝΗΣΙΑΣ, ΠΑΛΤΣΗ ΜΑΓΝΗΣΙΑΣ, ΠΑΟΥ ΜΑΓΝΗΣΙΑΣ, ΠΑΤΡΙΧΩΡΙ ΜΑΓΝΗΣΙΑΣ, ΠΗΓΕΣ ΜΑΓΝΗΣΙΑΣ, ΠΛΑΤΑΝΙΑ ΜΑΓΝΗΣΙΑΣ, ΠΟΤΙΣΤΙΚΑ ΜΑΓΝΗΣΙΑΣ, ΠΡΟΜΥΡΙΟ ΜΑΓΝΗΣΙΑΣ, ΡΟΔΙΑ ΜΑΓΝΗΣΙΑΣ, ΣΥΚΗ ΜΑΓΝΗΣΙΑΣ, ΤΡΟΧΑΛΑ ΜΑΓΝΗΣΙΑΣ, ΧΟΝΔΡΗ ΑΜΜΟΣ ΜΑΓΝΗΣΙΑΣ, ΧΟΡΤΟ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '37008', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΠΤΕΛΕΟΥ ΜΑΓΝΗΣΙΑΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΑΛΜΥΡΟΥ ΜΑΓΝΗΣΙΑΣ, ΑΜΑΛΙΑΠΟΛΗ ΜΑΓΝΗΣΙΑΣ, ΑΧΙΛΛΕΙΟ ΜΑΓΝΗΣΙΑΣ, ΓΑΒΡΙΑΝΗ ΜΑΓΝΗΣΙΑΣ, ΔΡΥΜΩΝΑΣ ΜΑΓΝΗΣΙΑΣ, ΚΑΡΑΒΟΤΣΑΚΙ ΜΑΓΝΗΣΙΑΣ, ΛΕΙΧΟΥΡΑ ΜΑΓΝΗΣΙΑΣ, ΝΗΕΣ ΜΑΓΝΗΣΙΑΣ, ΠΗΓΑΔΙ ΜΑΓΝΗΣΙΑΣ, ΣΟΥΡΠΗ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '37100', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΑΛΜΥΡΟΥ ΜΑΓΝΗΣΙΑΣ, ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΑΛΜΥΡΟΥ ΜΑΓΝΗΣΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΑΛΜΥΡΟΥ ΜΑΓΝΗΣΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΕΥΞΕΙΝΟΥΠΟΛΗΣ ΜΑΓΝΗΣΙΑΣ, ΑΙΔΙΝΙΟ ΜΑΓΝΗΣΙΑΣ, ΑΛΜΥΡΟΣ ΜΑΓΝΗΣΙΑΣ, ΑΝΘΟΤΟΠΟΣ ΜΑΓΝΗΣΙΑΣ, ΑΝΩ ΜΑΥΡΟΛΟΦΟΣ ΜΑΓΝΗΣΙΑΣ, ΑΡΓΙΛΟΧΩΡΙ ΜΑΓΝΗΣΙΑΣ, ΒΡΥΝΑΙΝΑ ΜΑΓΝΗΣΙΑΣ, ΕΥΞΕΙΝΟΥΠΟΛΗ ΜΑΓΝΗΣΙΑΣ, ΖΑΡΚΑΔΟΧΩΡΙ ΜΑΓΝΗΣΙΑΣ, ΚΑΣΤΡΑΚΙ ΜΑΓΝΗΣΙΑΣ, ΚΟΚΚΩΤΟΙ ΜΑΓΝΗΣΙΑΣ, ΚΟΝΤΑΡΟΛΑΚΚΑ ΜΑΓΝΗΣΙΑΣ, ΚΟΡΦΑΛΑΚΙ ΜΑΓΝΗΣΙΑΣ, ΚΡΟΚΙΟ ΜΑΓΝΗΣΙΑΣ, ΚΩΦΟΙ ΜΑΓΝΗΣΙΑΣ, ΜΑΥΡΟΛΟΦΟΣ ΜΑΓΝΗΣΙΑΣ, ΜΙΚΡΟΘΗΒΕΣ ΜΑΓΝΗΣΙΑΣ, ΜΟΝΗ ΚΟΙΜΗΣΕΩΣ ΘΕΟΤΟΚΟΥ ΞΕΝΙΑΣ ΑΛΜΥΡΟΥ ΜΑΓΝΗΣΙΑΣ, ΝΕΟ ΚΑΣΤΡΟ ΜΑΓΝΗΣΙΑΣ, ΝΕΟΣ ΠΛΑΤΑΝΟΣ ΜΑΓΝΗΣΙΑΣ, ΝΕΟΧΩΡΑΚΙ ΑΛΜΥΡΟΥ ΜΑΓΝΗΣΙΑΣ, ΝΕΡΑΙΔΑ ΜΑΓΝΗΣΙΑΣ, ΟΘΡΥΣ ΜΑΓΝΗΣΙΑΣ, ΠΑΡΑΛΙΑ ΑΛΜΥΡΟΥ ΜΑΓΝΗΣΙΑΣ, ΠΕΡΔΙΚΑ ΜΑΓΝΗΣΙΑΣ, ΠΛΑΤΑΝΟΣ ΜΑΓΝΗΣΙΑΣ, ΦΥΛΑΚΗ ΜΑΓΝΗΣΙΑΣ, ΧΟΡΟΣΤΑΣΙ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '37300', Area: 'ΑΓΡΙΑ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '37400', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΑΓΧΙΑΛΟΥ ΜΑΓΝΗΣΙΑΣ, ΒΕΛΑΝΙΔΙΑ ΜΑΓΝΗΣΙΑΣ, ΔΗΜΗΤΡΙΑΔΑ ΜΑΓΝΗΣΙΑΣ, ΚΡΙΘΑΡΙΑ ΜΑΓΝΗΣΙΑΣ, ΜΑΡΑΘΟΣ ΜΑΓΝΗΣΙΑΣ, ΝΕΑ ΑΓΧΙΑΛΟΣ ΜΑΓΝΗΣΙΑΣ, ΣΤΡΑΤΙΩΤΙΚΟ ΑΕΡΟΔΡΟΜΙΟ Ν.ΑΓΧΙΑΛΟΥ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '37500', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΦΕΡΩΝ ΜΑΓΝΗΣΙΑΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΠΕΡΙΒΛΕΠΤΟΥ ΜΑΓΝΗΣΙΑΣ, ΑΕΡΙΝΟ ΜΑΓΝΗΣΙΑΣ, ΒΕΛΕΣΤΙΝΟ ΜΑΓΝΗΣΙΑΣ, ΓΟΥΡΟΥΝΟΣΤΑΒΛΟΣ ΜΑΓΝΗΣΙΑΣ, ΕΛΕΥΘΕΡΟΧΩΡΙΟ ΜΑΓΝΗΣΙΑΣ, ΚΟΚΚΑΛΑΙΙΚΑ ΜΑΓΝΗΣΙΑΣ, ΚΟΚΚΙΝΑ ΜΑΓΝΗΣΙΑΣ, ΜΙΚΡΟ ΠΕΡΙΒΟΛΑΚΙ ΜΑΓΝΗΣΙΑΣ, ΠΕΡΙΒΛΕΠΤΟ ΜΑΓΝΗΣΙΑΣ, ΠΟΛΥΖΑΙΙΚΑ ΜΑΓΝΗΣΙΑΣ, ΣΤΕΦΑΝΟΒΙΚΕΙΟ ΜΑΓΝΗΣΙΑΣ, ΧΛΟΗ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '38000', Area: 'ΆΓΙΟΣ ΙΩΆΝΝΗΣ ΠΟΡΤΑΡ ΜΑΓΝΗΣΙΑΣ, ΚΑΤΩΧΏΡΙΟΝ ΜΑΓΝΗΣΙΑΣ, ΚΟΥΚΟΎΡΑΒΑ ΜΑΚΡΥΝΊΤΣ ΜΑΓΝΗΣΙΑΣ, ΜΑΚΡΙΝΊΤΣΑ ΜΑΓΝΗΣΙΑΣ, ΠΟΡΤΑΡΙΑ ΜΑΓΝΗΣΙΑΣ, ΣΑΝΑΤΌΡΙΟΝ ΠΗΛΊΟΥ ΜΑΓΝΗΣΙΑΣ, ΣΤΑΓΙΆΤΕΣ ΜΑΓΝΗΣΙΑΣ, ΧΆΝΙΑ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '38221', Area: 'ΒΟΛΟΣ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '38222', Area: 'ΒΟΛΟΣ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '38223', Area: 'ΒΟΛΟΥ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '38333', Area: 'ΒΟΛΟΣ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '38334', Area: 'ΒΟΛΟΣ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '38445', Area: 'ΝΕΑ ΙΩΝΙΑ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '38446', Area: 'ΝΕΑ ΙΩΝΙΑ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '38500', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΝΗΛΕΙΑΣ ΜΑΓΝΗΣΙΑΣ, ΑΓΙΟΣ ΑΠΟΣΤΟΛΟΣ Ο ΝΕΟΣ ΜΑΓΝΗΣΙΑΣ, ΑΓΙΟΣ ΒΛΑΣΙΟΣ ΜΑΓΝΗΣΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΝΗΛΕΙΑΣ ΜΑΓΝΗΣΙΑΣ, ΑΓΙΟΣ ΛΑΥΡΕΝΤΙΟΣ ΜΑΓΝΗΣΙΑΣ, ΑΓΙΟΣ ΜΗΝΑΣ ΜΑΓΝΗΣΙΑΣ, ΑΓΙΟΣ ΟΝΟΥΦΡΙΟΣ ΒΟΛΟΥ ΜΑΓΝΗΣΙΑΣ, ΑΛΛΗ ΜΕΡΙΑ ΜΑΓΝΗΣΙΑΣ, ΑΝΑΚΑΣΙΑ ΜΑΓΝΗΣΙΑΣ, ΑΝΕΜΟΥΤΣΑ ΜΑΓΝΗΣΙΑΣ, ΑΝΩ ΒΟΛΟΣ ΜΑΓΝΗΣΙΑΣ, ΑΝΩ ΓΑΤΖΕΑ ΜΑΓΝΗΣΙΑΣ, ΑΝΩ ΛΕΧΩΝΙΑ ΜΑΓΝΗΣΙΑΣ, ΒΕΝΕΤΟ ΜΑΓΝΗΣΙΑΣ, ΒΡΟΧΙΑ ΜΑΓΝΗΣΙΑΣ, ΓΛΑΦΥΡΑ ΜΑΓΝΗΣΙΑΣ, ΓΟΡΙΤΣΑ ΜΑΓΝΗΣΙΑΣ, ΔΙΜΗΝΙΟ ΜΑΓΝΗΣΙΑΣ, ΔΡΑΚΕΙΑ ΜΑΓΝΗΣΙΑΣ, ΔΥΟ ΡΕΥΜΑΤΑ ΜΑΓΝΗΣΙΑΣ, ΙΩΛΚΟΣ ΜΑΓΝΗΣΙΑΣ, ΚΑΚΚΑΒΟΣ ΜΑΓΝΗΣΙΑΣ, ΚΑΜΑΡΙ ΜΑΓΝΗΣΙΑΣ, ΚΑΝΑΛΙΑ ΜΑΓΝΗΣΙΑΣ, ΚΑΤΩ ΓΑΤΖΕΑ ΜΑΓΝΗΣΙΑΣ, ΚΑΤΩ ΛΕΧΩΝΙΑ ΜΑΓΝΗΣΙΑΣ, ΚΕΡΑΜΙΔΙ ΜΑΓΝΗΣΙΑΣ, ΚΕΡΑΣΕΑ ΜΑΓΝΗΣΙΑΣ, ΚΛΗΜΑ ΝΕΑΣ ΙΩΝΙΑΣ ΜΑΓΝΗΣΙΑΣ, ΜΑΛΑΚΙΟ ΜΑΓΝΗΣΙΑΣ, ΜΕΛΙΣΣΑΤΙΚΑ ΜΑΓΝΗΣΙΑΣ, ΜΟΝΗ ΜΕΤΑΜΟΡΦΩΣΕΩΣ ΣΩΤΗΡΟΣ ΦΛΑΜΟΥΡΙΟΥ ΜΑΓΝΗΣΙΑΣ, ΝΕΑ ΙΩΝΙΑ ΜΑΓΝΗΣΙΑΣ, ΠΑΛΑΙΟΚΑΣΤΡΟ ΜΑΓΝΗΣΙΑΣ, ΠΑΛΙΟΥΡΙ ΜΑΓΝΗΣΙΑΣ, ΠΛΑΤΑΝΙΔΙΑ ΜΑΓΝΗΣΙΑΣ, ΣΕΡΒΑΝΑΤΕΣ ΜΑΓΝΗΣΙΑΣ, ΣΕΣΚΛΟ ΜΑΓΝΗΣΙΑΣ, ΣΤΡΟΦΙΛΟΣ ΜΑΓΝΗΣΙΑΣ, ΦΥΤΟΚΟ ΜΑΓΝΗΣΙΑΣ, ΧΡΥΣΗ ΑΚΤΗ ΠΑΝΑΓΙΑΣ ΜΑΓΝΗΣΙΑΣ', Prefecture: 'Μαγνησίας' },
    { PostalCode: '24001', Area: 'ΑΡΑΠΟΛΑΚΚΑ ΜΕΣΣΗΝΙΑΣ, ΓΙΑΛΟΒΑ ΜΕΣΣΗΝΙΑΣ, ΓΛΥΦΑΔΑ ΜΕΣΣΗΝΙΑΣ, ΕΛΑΙΟΦΥΤΟ ΜΕΣΣΗΝΙΑΣ, ΙΚΛΑΙΝΑ ΜΕΣΣΗΝΙΑΣ, ΚΑΛΛΙΘΕΑ ΠΥΛΟΥ ΜΕΣΣΗΝΙΑΣ, ΚΟΡΥΦΑΣΙΟ ΜΕΣΣΗΝΙΑΣ, ΚΟΥΚΚΟΥΝΑΡΑ ΜΕΣΣΗΝΙΑΣ, ΚΡΕΜΜΥΔΙΑ ΜΕΣΣΗΝΙΑΣ, ΚΥΝΗΓΟΣ ΠΥΛΟΥ ΜΕΣΣΗΝΙΑΣ, ΜΕΣΟΧΩΡΙ ΜΕΣΣΗΝΙΑΣ, ΜΠΑΛΟΔΗΜΑΙΙΚΑ ΜΕΣΣΗΝΙΑΣ, ΠΑΛΑΙΟΝΕΡΟ ΜΕΣΣΗΝΙΑΣ, ΠΑΠΠΟΥΛΙΑ ΜΕΣΣΗΝΙΑΣ, ΠΕΡΙΒΟΛΑΚΙΑ ΠΥΛΟΥ ΜΕΣΣΗΝΙΑΣ, ΠΕΤΡΟΧΩΡΙ ΜΕΣΣΗΝΙΑΣ, ΠΗΔΑΣΟΣ ΜΕΣΣΗΝΙΑΣ, ΠΙΣΑΣΚΙΟ ΜΕΣΣΗΝΙΑΣ, ΠΛΑΤΑΝΟΣ ΠΥΛΟΥ ΜΕΣΣΗΝΙΑΣ, ΠΥΛΑ ΜΕΣΣΗΝΙΑΣ, ΠΥΛΟΣ ΜΕΣΣΗΝΙΑΣ, ΡΩΜΑΝΟΣ ΜΕΣΣΗΝΙΑΣ, ΣΟΥΛΗΝΑΡΙ ΜΕΣΣΗΝΙΑΣ, ΣΤΕΝΩΣΙΑ ΜΕΣΣΗΝΙΑΣ, ΣΦΑΚΤΗΡΙΑ ΝΗΣΟΣ ΜΕΣΣΗΝΙΑΣ, ΣΧΙΝΟΛΑΚΚΑ ΠΥΛΟΥ ΜΕΣΣΗΝΙΑΣ, ΤΡΑΓΑΝΑ ΜΕΣΣΗΝΙΑΣ, ΧΑΝΔΡΙΝΟΣ ΜΕΣΣΗΝΙΑΣ, ΧΩΜΑΤΑΔΑ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24002', Area: 'ΑΓΡΙΛΙΕΣ ΜΕΣΣΗΝΙΑΣ, ΑΛΛΑΓΗ ΜΕΣΣΗΝΙΑΣ, ΑΝΔΑΝΙΑ ΜΕΣΣΗΝΙΑΣ, ΑΝΘΟΥΣΑ ΜΕΣΣΗΝΙΑΣ, ΑΡΣΙΝΟΗ ΜΕΣΣΗΝΙΑΣ, ΒΑΛΥΡΑ ΜΕΣΣΗΝΙΑΣ, ΖΕΡΜΠΙΣΙΑ ΜΕΣΣΗΝΙΑΣ, ΖΕΥΓΟΛΑΤΕΙΟ ΜΕΣΣΗΝΙΑΣ, ΚΑΛΑΜΑΡΑΣ ΜΕΣΣΗΝΙΑΣ, ΚΑΛΛΙΡΡΟΗ ΜΕΣΣΗΝΙΑΣ, ΚΑΛΥΒΙΑ ΜΕΣΣΗΝΙΑΣ, ΚΑΣΤΡΟ ΜΕΣΣΗΝΙΑΣ, ΚΑΤΣΑΡΟΣ ΜΕΣΣΗΝΙΑΣ, ΚΕΦΑΛΙΝΟΣ ΜΕΣΣΗΝΙΑΣ, ΚΟΓΧΥΛΙ ΜΕΣΣΗΝΙΑΣ, ΚΡΟΝΤΗΡΕΣ ΜΕΣΣΗΝΙΑΣ, ΛΑΜΠΑΙΝΑ ΜΕΣΣΗΝΙΑΣ, ΛΟΥΤΡΟ ΜΕΣΣΗΝΙΑΣ, ΜΑΓΟΥΛΑ ΜΕΣΣΗΝΙΑΣ, ΜΑΝΤΖΑΡΙ ΜΕΣΣΗΝΙΑΣ, ΜΑΥΡΟΜΜΑΤΙ ΙΘΩΜΗΣ ΜΕΣΣΗΝΙΑΣ, ΜΕΛΙΓΑΛΑΣ ΜΕΣΣΗΝΙΑΣ, ΜΕΡΟΠΗ ΜΕΣΣΗΝΙΑΣ, ΜΙΛΑ ΜΕΣΣΗΝΙΑΣ, ΜΟΝΗ ΒΟΥΛΚΑΝΟΥ ΜΕΣΣΗΝΙΑΣ, ΜΟΥΣΤΑ ΜΕΣΣΗΝΙΑΣ, ΝΕΟΧΩΡΙ ΙΘΩΜΗΣ ΜΕΣΣΗΝΙΑΣ, ΠΕΤΡΑΛΩΝΑ ΜΕΣΣΗΝΙΑΣ, ΠΕΥΚΟ ΜΕΣΣΗΝΙΑΣ, ΡΕΥΜΑΤΙΑ ΜΕΣΣΗΝΙΑΣ, ΣΙΑΜΟ ΜΕΣΣΗΝΙΑΣ, ΣΚΑΛΑ ΜΕΣΣΗΝΙΑΣ, ΣΟΛΑΚΙ ΜΕΣΣΗΝΙΑΣ, ΣΤΑΘΜΟΣ ΣΚΑΛΑΣ ΜΕΣΣΗΝΙΑΣ, ΣΤΕΝΥΚΛΑΡΟΣ ΜΕΣΣΗΝΙΑΣ, ΤΣΟΥΚΑΛΑΙΙΚΑ ΜΕΣΣΗΝΙΑΣ, ΦΙΛΙΑ ΜΕΣΣΗΝΙΑΣ, ΧΡΥΣΟΤΟΠΟΣ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24004', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΧΑΡΟΚΟΠΕΙΟΥ ΜΕΣΣΗΝΙΑΣ, ΑΓΙΟΙ ΑΝΑΡΓΥΡΟΙ ΜΕΣΣΗΝΙΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΒΑΣΙΛΙΤΣΙΟΥ ΜΕΣΣΗΝΙΑΣ, ΑΓΙΟΣ ΙΣΙΔΩΡΟΣ ΜΕΣΣΗΝΙΑΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΧΑΡΟΚΟΠΙΟΥ ΜΕΣΣΗΝΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΧΑΡΟΚΟΠΕΙΟΥ ΜΕΣΣΗΝΙΑΣ, ΑΚΡΙΤΟΧΩΡΙ ΜΕΣΣΗΝΙΑΣ, ΒΑΣΙΛΙΤΣΙ ΜΕΣΣΗΝΙΑΣ, ΒΟΥΝΑΡΙΑ ΜΕΣΣΗΝΙΑΣ, ΕΞΟΧΙΚΟ ΠΥΛΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΖΙΖΑΝΙΟ ΜΕΣΣΗΝΙΑΣ, ΚΑΠΛΑΝΙ ΜΕΣΣΗΝΙΑΣ, ΚΟΜΠΟΙ ΜΕΣΣΗΝΙΑΣ, ΚΟΡΩΝΗ ΜΕΣΣΗΝΙΑΣ, ΛΙΒΑΔΑΚΙΑ ΜΕΣΣΗΝΙΑΣ, ΜΥΡΤΙΑ ΜΕΣΣΗΝΙΑΣ, ΜΥΣΤΡΑΚΙ ΜΕΣΣΗΝΙΑΣ, ΝΕΑ ΚΟΡΩΝΗ ΜΕΣΣΗΝΙΑΣ, ΠΕΡΟΥΛΙΑ ΜΕΣΣΗΝΙΑΣ, ΠΟΤΑΜΙΑ ΚΟΡΩΝΗΣ ΜΕΣΣΗΝΙΑΣ, ΥΑΜΕΙΑ ΜΕΣΣΗΝΙΑΣ, ΦΑΛΑΝΘΗ ΜΕΣΣΗΝΙΑΣ, ΦΑΝΕΡΩΜΕΝΗ ΜΕΣΣΗΝΙΑΣ, ΧΑΡΟΚΟΠΕΙΟ ΜΕΣΣΗΝΙΑΣ, ΧΡΥΣΟΚΕΛΛΑΡΙΑ ΜΕΣΣΗΝΙΑΣ, ΧΩΜΑΤΕΡΟ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24005', Area: 'ΑΓΙΑ ΣΩΤΗΡΑ ΜΕΣΣΗΝΙΑΣ, ΑΓΝΑΝΤΙ ΜΕΣΣΗΝΙΑΣ, ΑΧΛΑΔΟΧΩΡΙ ΜΕΣΣΗΝΙΑΣ, ΓΑΜΒΡΙΑ ΜΕΣΣΗΝΙΑΣ, ΚΑΛΑΜΑΚΙ ΑΧΛΑΔΟΧΩΡΙΟΥ ΜΕΣΣΗΝΙΑΣ, ΚΑΣΤΑΝΙΑ ΜΕΣΣΗΝΙΑΣ, ΚΟΚΚΙΝΟ ΜΕΣΣΗΝΙΑΣ, ΛΥΚΙΣΣΑ ΜΕΣΣΗΝΙΑΣ, ΜΑΘΙΑ ΜΕΣΣΗΝΙΑΣ, ΠΑΝΙΠΕΡΙ ΜΕΣΣΗΝΙΑΣ, ΠΕΤΑΛΙΔΙ ΜΕΣΣΗΝΙΑΣ, ΤΖΑΝΕΣ ΜΕΣΣΗΝΙΑΣ, ΤΡΥΠΕΣ ΜΕΣΣΗΝΙΑΣ, ΦΟΡΟΙ ΜΕΣΣΗΝΙΑΣ, ΧΕΛΩΝΑΡΙΑ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24006', Area: 'ΑΝΕΜΟΜΥΛΟΣ ΜΕΘΩΝΗΣ ΜΕΣΣΗΝΙΑΣ, ΒΑΡΑΚΕΣ ΜΕΣΣΗΝΙΑΣ, ΓΡΙΖΟΚΑΜΠΟΣ ΜΕΣΣΗΝΙΑΣ, ΔΕΝΤΡΟΥΛΙΑ ΜΕΣΣΗΝΙΑΣ, ΕΥΑΓΓΕΛΙΣΜΟΣ ΜΕΣΣΗΝΙΑΣ, ΚΑΙΝΟΥΡΓΙΟ ΧΩΡΙΟ ΜΕΣΣΗΝΙΑΣ, ΚΑΜΑΡΙΑ ΜΕΣΣΗΝΙΑΣ, ΚΟΚΚΙΝΙΑ ΜΕΣΣΗΝΙΑΣ, ΚΡΗΤΙΚΑ ΜΕΣΣΗΝΙΑΣ, ΛΑΧΑΝΑΔΑ ΜΕΣΣΗΝΙΑΣ, ΛΟΥΤΣΑ ΜΕΣΣΗΝΙΑΣ, ΜΕΘΩΝΗ ΜΕΣΣΗΝΙΑΣ, ΝΕΡΑΝΤΖΙΕΣ ΜΕΣΣΗΝΙΑΣ, ΣΑΠΙΕΝΤΖΑ ΝΗΣΟΣ ΜΕΣΣΗΝΙΑΣ, ΣΧΙΖΑ ΝΗΣΟΣ ΜΕΣΣΗΝΙΑΣ, ΤΑΠΙΑ ΜΕΣΣΗΝΙΑΣ, ΦΟΙΝΙΚΗ ΜΕΣΣΗΝΙΑΣ, ΦΟΙΝΙΚΟΥΣ ΜΕΣΣΗΝΙΑΣ, ΧΟΥΝΑΚΙΑ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24008', Area: 'ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΜΕΣΣΗΝΙΑΣ, ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΜΕΣΣΗΝΙΑΣ, ΑΓΡΙΛΟΒΟΥΝΟ ΜΕΣΣΗΝΙΑΣ, ΑΝΩ ΜΕΛΠΕΙΑ ΜΕΣΣΗΝΙΑΣ, ΒΡΑΧΟΣ ΜΕΣΣΗΝΙΑΣ, ΒΡΥΣΟΥΛΑ ΜΕΣΣΗΝΙΑΣ, ΔΑΣΟΧΩΡΙ ΜΕΣΣΗΝΙΑΣ, ΔΕΣΥΛΛΑΣ ΜΕΣΣΗΝΙΑΣ, ΔΙΑΒΟΛΙΤΣΙ ΜΕΣΣΗΝΙΑΣ, ΗΛΕΚΤΡΑ ΜΕΣΣΗΝΙΑΣ, ΚΑΡΝΑΣΙΟ ΜΕΣΣΗΝΙΑΣ, ΚΑΤΩ ΜΕΛΠΕΙΑ ΜΕΣΣΗΝΙΑΣ, ΚΕΝΤΡΙΚΟ ΜΕΣΣΗΝΙΑΣ, ΚΩΝΣΤΑΝΤΙΝΟΙ ΜΕΣΣΗΝΙΑΣ, ΜΑΛΤΑ ΜΕΣΣΗΝΙΑΣ, ΜΑΝΔΡΑ ΜΕΣΣΗΝΙΑΣ, ΜΟΝΑΣΤΗΡΑΚΙ ΜΕΣΣΗΝΙΑΣ, ΠΑΡΑΠΟΥΓΚΙ ΜΕΣΣΗΝΙΑΣ, ΠΗΓΗ ΜΕΛΠΕΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΠΛΑΤΑΝΑ ΜΕΣΣΗΝΙΑΣ, ΠΟΛΙΧΝΗ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24009', Area: 'ΘΟΥΡΙΑ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24011', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΤΡΙΦΥΛΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΑΓΙΟΣ ΠΕΤΡΟΣ ΤΡΙΦΥΛΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΑΜΦΙΘΕΑ ΤΡΙΦΥΛΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΑΝΩ ΔΩΡΙΟ ΜΕΣΣΗΝΙΑΣ, ΒΑΣΙΛΙΚΟ ΜΕΣΣΗΝΙΑΣ, ΔΩΡΙΟ ΜΕΣΣΗΝΙΑΣ, ΚΑΤΩ ΑΜΦΙΘΕΑ ΜΕΣΣΗΝΙΑΣ, ΚΑΤΩ ΜΑΛΘΗ ΜΕΣΣΗΝΙΑΣ, ΚΟΚΛΑΣ ΜΕΣΣΗΝΙΑΣ, ΜΑΛΘΗ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24016', Area: 'ΑΛΤΟΜΙΡΑ ΜΕΣΣΗΝΙΑΣ, ΑΝΑΤΟΛΙΚΟ ΜΕΣΣΗΝΙΑΣ, ΑΝΩ ΔΟΛΟΙ ΜΕΣΣΗΝΙΑΣ, ΒΟΡΕΙΟ ΜΕΣΣΗΝΙΑΣ, ΔΕΝΔΡΑ ΜΕΣΣΗΝΙΑΣ, ΚΑΛΙΑΝΑΙΙΚΑ ΜΕΣΣΗΝΙΑΣ, ΚΑΜΠΟΣ ΑΒΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΚΑΤΩ ΔΟΛΟΙ ΜΕΣΣΗΝΙΑΣ, ΚΕΝΤΡΟ ΜΕΣΣΗΝΙΑΣ, ΚΙΤΡΙΕΣ ΜΕΣΣΗΝΙΑΣ, ΚΡΥΑ ΒΡΥΣΗ ΠΗΓΑΔΙΩΝ ΜΕΣΣΗΝΙΑΣ, ΛΑΓΚΑΔΙΑ ΜΕΣΣΗΝΙΑΣ, ΜΑΛΤΑ ΣΤΑΥΡΟΠΗΓΙΟΥ ΜΕΣΣΗΝΙΑΣ, ΟΡΟΒΑΣ ΜΕΣΣΗΝΙΑΣ, ΠΗΓΑΔΙΑ ΚΑΛΑΜΩΝ ΜΕΣΣΗΝΙΑΣ, ΠΛΑΤΩΜΑ ΜΕΣΣΗΝΙΑΣ, ΡΙΖΑΝΑ ΜΕΣΣΗΝΙΑΣ, ΣΤΑΥΡΟΠΗΓΙΟ ΜΕΣΣΗΝΙΑΣ, ΤΟΥΜΠΙΑ ΜΕΣΣΗΝΙΑΣ, ΧΩΡΑ ΓΑΙΤΣΩΝ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24022', Area: 'ΑΓΙΑ ΣΟΦΙΑ ΜΕΣΣΗΝΙΑΣ, ΓΙΑΤΡΑΙΙΚΑ ΜΕΣΣΗΝΙΑΣ, ΕΞΩΧΩΡΙ ΜΕΣΣΗΝΙΑΣ, ΖΑΧΑΡΙΑ ΜΕΣΣΗΝΙΑΣ, ΚΑΛΑΜΙΤΣΙ ΜΕΣΣΗΝΙΑΣ, ΚΑΛΥΒΕΣ ΠΡΟΣΗΛΙΟΥ ΜΕΣΣΗΝΙΑΣ, ΚΑΜΠΟΣ ΚΑΡΔΑΜΥΛΗΣ ΜΕΣΣΗΝΙΑΣ, ΚΑΡΔΑΜΥΛΗ ΜΕΣΣΗΝΙΑΣ, ΚΑΤΑΦΥΓΙΟ ΜΕΣΣΗΝΙΑΣ, ΛΑΚΚΟΣ ΜΕΣΣΗΝΙΑΣ, ΝΕΟ ΠΡΟΑΣΤΙΟ ΜΕΣΣΗΝΙΑΣ, ΠΕΔΙΝΟ ΜΕΣΣΗΝΙΑΣ, ΠΕΤΡΟΒΟΥΝΙ ΜΕΣΣΗΝΙΑΣ, ΠΡΟΑΣΤΙΟ ΜΕΣΣΗΝΙΑΣ, ΠΡΟΣΗΛΙΟ ΜΕΣΣΗΝΙΑΣ, ΤΣΕΡΙΑ ΜΕΣΣΗΝΙΑΣ, ΧΩΡΑ ΕΞΩΧΩΡΙΟΥ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24100', Area: 'ΑΒΙΑ ΜΕΣΣΗΝΙΑΣ, ΑΓΙΟΣ ΦΛΩΡΟΣ ΜΕΣΣΗΝΙΑΣ, ΑΙΘΑΙΑ ΜΕΣΣΗΝΙΑΣ, ΑΙΠΕΙΑ ΜΕΣΣΗΝΙΑΣ, ΑΚΟΒΙΤΙΚΑ ΜΕΣΣΗΝΙΑΣ, ΑΚΡΟΓΙΑΛΙ ΜΕΣΣΗΝΙΑΣ, ΑΛΩΝΙΑ ΜΕΣΣΗΝΙΑΣ, ΑΝΕΜΟΜΥΛΟΣ ΜΕΣΣΗΝΙΑΣ, ΑΝΘΕΙΑ ΜΕΣΣΗΝΙΑΣ, ΑΝΤΙΚΑΛΑΜΟΣ ΜΕΣΣΗΝΙΑΣ, ΑΝΩ ΑΜΦΕΙΑ ΜΕΣΣΗΝΙΑΣ, ΑΝΩ ΒΕΡΓΑ ΜΕΣΣΗΝΙΑΣ, ΑΡΑΧΟΒΑ ΜΕΣΣΗΝΙΑΣ, ΑΡΙΟΧΩΡΙ ΜΕΣΣΗΝΙΑΣ, ΑΣΠΡΟΠΟΥΛΙΑ ΜΕΣΣΗΝΙΑΣ, ΑΣΠΡΟΧΩΜΑ ΜΕΣΣΗΝΙΑΣ, ΔΙΑΣΕΛΛΑ ΜΕΣΣΗΝΙΑΣ, ΔΡΟΣΟΠΗΓΗ ΜΕΣΣΗΝΙΑΣ, ΕΛΑΙΟΧΩΡΙ ΚΑΛΑΜΩΝ ΜΕΣΣΗΝΙΑΣ, ΚΑΛΑΜΑΤΑ ΜΕΣΣΗΝΙΑΣ, ΚΑΛΑΜΙ ΜΕΣΣΗΝΙΑΣ, ΚΑΛΛΙΘΕΑ ΚΑΛΑΜΑΤΑΣ ΜΕΣΣΗΝΙΑΣ, ΚΑΤΣΑΡΑΙΙΚΑ ΜΕΣΣΗΝΙΑΣ, ΚΑΤΣΙΚΟΒΟ ΜΕΣΣΗΝΙΑΣ, ΚΑΤΩ ΑΜΦΕΙΑ ΜΕΣΣΗΝΙΑΣ, ΚΑΤΩ ΒΕΡΓΑ ΜΕΣΣΗΝΙΑΣ, ΚΟΥΡΗΣ ΜΕΣΣΗΝΙΑΣ, ΚΟΥΤΑΛΑ ΜΕΣΣΗΝΙΑΣ, ΛΑΙΙΚΑ ΜΕΣΣΗΝΙΑΣ, ΜΕΓΑΛΗ ΜΑΝΤΙΝΕΙΑ ΜΕΣΣΗΝΙΑΣ, ΜΕΝΙΝΑ ΜΕΣΣΗΝΙΑΣ, ΜΙΚΡΑ ΜΑΝΤΙΝΕΙΑ ΜΕΣΣΗΝΙΑΣ, ΜΙΚΡΟΜΑΝΗ ΜΕΣΣΗΝΙΑΣ, ΜΟΝΗ ΒΕΛΑΝΙΔΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΜΟΝΗ ΓΑΡΔΙΚΙΟΥ ΜΕΣΣΗΝΙΑΣ, ΜΟΝΗ ΔΙΜΙΟΒΗΣ ΜΕΣΣΗΝΙΑΣ, ΜΠΟΥΡΝΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΞΕΡΟΚΑΜΠΙ ΜΕΣΣΗΝΙΑΣ, ΠΑΡΑΛΙΑ ΒΕΡΓΑΣ ΜΕΣΣΗΝΙΑΣ, ΠΕΡΙΒΟΛΑΚΙΑ ΚΑΛΑΜΩΝ ΜΕΣΣΗΝΙΑΣ, ΠΗΔΗΜΑ ΜΕΣΣΗΝΙΑΣ, ΠΛΑΤΥ ΜΕΣΣΗΝΙΑΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΣΠΕΡΧΟΓΕΙΑ ΜΕΣΣΗΝΙΑΣ, ΣΠΙΤΑΚΙΑ ΜΕΣΣΗΝΙΑΣ, ΣΩΤΗΡΙΑΝΙΚΑ ΜΕΣΣΗΝΙΑΣ, ΧΑΡΑΥΓΗ ΣΩΤΗΡΙΑΝΙΚΩΝ ΜΕΣΣΗΝΙΑΣ, ΧΡΙΣΤΟΦΙΛΑΙΙΚΑ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24131', Area: 'ΚΑΛΑΜΑΤΑΣ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24132', Area: 'ΚΑΛΑΜΑΤΑΣ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24133', Area: 'ΚΑΛΑΜΑΤΑΣ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24134', Area: 'ΚΑΛΑΜΑΤΑΣ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24200', Area: 'ΑΒΡΑΜΙΟ ΜΕΣΣΗΝΙΑΣ, ΑΓΙΟΣ ΑΥΓΟΥΣΤΙΝΟΣ ΜΕΣΣΗΝΙΑΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΜΕΣΣΗΝΗΣ ΜΕΣΣΗΝΙΑΣ, ΑΝΑΛΗΨΗ ΜΕΣΣΗΝΙΑΣ, ΒΕΛΙΚΑ ΜΕΣΣΗΝΙΑΣ, ΔΡΑΚΟΝΕΡΙ ΜΕΣΣΗΝΙΑΣ, ΚΑΡΤΕΡΟΛΙ ΜΕΣΣΗΝΙΑΣ, ΛΕΥΚΟΧΩΡΑ ΜΕΣΣΗΝΙΑΣ, ΛΥΚΟΤΡΑΦΟΣ ΜΕΣΣΗΝΙΑΣ, ΜΑΔΕΝΑ ΜΕΣΣΗΝΙΑΣ, ΜΑΥΡΟΜΜΑΤΙ ΠΑΜΙΣΟΥ ΜΕΣΣΗΝΙΑΣ, ΜΕΣΣΗΝΗ ΜΕΣΣΗΝΙΑΣ, ΜΟΣΧΟΧΩΡΙΟ ΜΕΣΣΗΝΙΑΣ, ΜΥΛΩΝΑΣ ΜΕΣΣΗΝΙΑΣ, ΜΥΡΤΟΠΟΤΑΜΙΑ ΜΕΣΣΗΝΙΑΣ, ΝΕΟΧΩΡΙ ΑΡΙΣΤΟΜΕΝΟΥΣ ΜΕΣΣΗΝΙΑΣ, ΞΙΝΟΣ ΜΕΣΣΗΝΙΑΣ, ΠΑΡΑΛΙΑ ΒΕΛΙΚΑΣ ΜΕΣΣΗΝΙΑΣ, ΠΙΛΑΛΙΣΤΡΑ ΜΕΣΣΗΝΙΑΣ, ΠΙΠΕΡΙΤΣΑ ΜΕΣΣΗΝΙΑΣ, ΣΠΙΤΑΛΙ ΜΕΣΣΗΝΙΑΣ, ΣΤΡΕΦΙΟ ΜΕΣΣΗΝΙΑΣ, ΧΡΥΣΟΦΟΡΑ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24300', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΜΕΣΣΗΝΙΑΣ, ΑΓΡΙΛΟΣ ΤΡΙΦΥΛΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΕΞΟΧΙΚΟ ΤΡΙΦΥΛΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΚΟΥΝΤΡΙ ΜΕΣΣΗΝΙΑΣ, ΛΑΓΚΟΥΒΑΡΔΟΣ ΜΕΣΣΗΝΙΑΣ, ΛΕΜΠΕΣΤΕΝΑ ΜΕΣΣΗΝΙΑΣ, ΛΙΜΕΝΑΡΙ ΜΕΣΣΗΝΙΑΣ, ΜΕΡΟΛΙΘΙ ΜΕΣΣΗΝΙΑΣ, ΠΛΑΤΗ ΜΕΣΣΗΝΙΑΣ, ΣΤΟΜΙΟ ΜΕΣΣΗΝΙΑΣ, ΦΙΛΙΑΤΡΑ ΜΕΣΣΗΝΙΑΣ, ΧΑΛΑΖΟΝΙΟ ΜΕΣΣΗΝΙΑΣ, ΧΡΙΣΤΙΑΝΟΥΠΟΛΗ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24400', Area: 'ΑΜΠΕΛΟΦΥΤΟ ΜΕΣΣΗΝΙΑΣ, ΒΑΛΤΑ ΜΕΣΣΗΝΙΑΣ, ΒΑΤΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΒΡΟΜΟΝΕΡΙ ΜΕΣΣΗΝΙΑΣ, ΓΑΡΓΑΛΙΑΝΟΙ ΜΕΣΣΗΝΙΑΣ, ΚΑΝΑΛΟΣ ΜΕΣΣΗΝΙΑΣ, ΛΕΥΚΗ ΜΕΣΣΗΝΙΑΣ, ΜΑΡΑΘΟΠΟΛΗ ΜΕΣΣΗΝΙΑΣ, ΜΟΥΖΑΚΙ ΜΕΣΣΗΝΙΑΣ, ΠΗΓΑΔΙΑ ΤΡΙΦΥΛΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΠΡΩΤΗ ΝΗΣΟΣ ΜΕΣΣΗΝΙΑΣ, ΠΥΡΓΟΣ ΤΡΙΦΥΛΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΡΙΚΙΑ ΜΕΣΣΗΝΙΑΣ, ΦΛΟΚΑ ΜΕΣΣΗΝΙΑΣ, ΧΟΧΛΑΣΤΗ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '24500', Area: 'ΑΓΙΑΝΝΑΚΗΣ ΜΕΣΣΗΝΙΑΣ, ΑΛΙΜΑΚΙ ΜΕΣΣΗΝΙΑΣ, ΑΝΥΔΡΟ ΜΕΣΣΗΝΙΑΣ, ΑΝΩ ΚΑΛΟ ΝΕΡΟ ΜΕΣΣΗΝΙΑΣ, ΑΡΜΕΝΙΟΙ ΜΕΣΣΗΝΙΑΣ, ΒΡΥΣΕΣ ΤΡΙΦΥΛΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΒΡΥΣΕΣ ΦΙΛΙΑΤΡΩΝ ΜΕΣΣΗΝΙΑΣ, ΔΑΡΑΣ ΡΟΔΙΑΣ ΜΕΣΣΗΝΙΑΣ, ΚΑΚΚΑΒΑΣ ΜΕΣΣΗΝΙΑΣ, ΚΑΛΟ ΝΕΡΟ ΜΕΣΣΗΝΙΑΣ, ΚΑΛΟΓΕΡΕΣΙΟ ΜΕΣΣΗΝΙΑΣ, ΚΑΡΒΟΥΝΙ ΜΕΣΣΗΝΙΑΣ, ΚΛΩΝΙΟ ΜΕΣΣΗΝΙΑΣ, ΚΥΠΑΡΙΣΣΙΑ ΜΕΣΣΗΝΙΑΣ, ΛΑΝΤΖΟΥΝΑΤΟ ΜΕΣΣΗΝΙΑΣ, ΛΥΚΟΥΔΕΣΙ ΜΕΣΣΗΝΙΑΣ, ΜΑΛΗ ΜΕΣΣΗΝΙΑΣ, ΜΕΜΙ ΜΕΣΣΗΝΙΑΣ, ΜΟΥΡΙΑΤΑΔΑ ΜΕΣΣΗΝΙΑΣ, ΜΠΛΕΜΕΝΙΑΝΟΙ ΜΕΣΣΗΝΙΑΣ, ΜΥΛΟΙ ΜΕΣΣΗΝΙΑΣ, ΜΥΡΟ ΜΕΣΣΗΝΙΑΣ, ΞΗΡΟΚΑΜΠΟΣ ΜΕΣΣΗΝΙΑΣ, ΠΑΛΑΙΑ ΒΡΥΣΗ ΜΕΣΣΗΝΙΑΣ, ΠΕΡΔΙΚΟΝΕΡΙ ΜΕΣΣΗΝΙΑΣ, ΡΑΠΤΟΠΟΥΛΟ ΜΕΣΣΗΝΙΑΣ, ΡΑΧΕΣ ΜΕΣΣΗΝΙΑΣ, ΡΟΔΙΑ ΜΕΣΣΗΝΙΑΣ, ΡΟΥΖΑΚΙ ΜΕΣΣΗΝΙΑΣ, ΣΕΛΛΑΣ ΜΕΣΣΗΝΙΑΣ, ΣΠΗΛΙΑ ΜΕΣΣΗΝΙΑΣ, ΣΤΑΣΙΟ ΜΕΣΣΗΝΙΑΣ, ΤΕΡΨΙΘΕΑ ΜΕΣΣΗΝΙΑΣ, ΤΡΙΠΥΛΑ ΜΕΣΣΗΝΙΑΣ, ΦΑΡΑΚΛΑΔΑ ΜΕΣΣΗΝΙΑΣ', Prefecture: 'Μεσσηνίας' },
    { PostalCode: '67061', Area: 'ΑΒΔΗΡΑ ΞΑΝΘΗΣ, ΒΕΛΟΝΗ ΞΑΝΘΗΣ, ΓΚΙΩΝΑ ΞΑΝΘΗΣ, ΔΑΦΝΗ ΞΑΝΘΗΣ, ΕΡΩΔΙΟΣ ΞΑΝΘΗΣ, ΛΕΥΚΙΠΟΣ ΞΑΝΘΗΣ, ΜΑΓΓΑΝΑ ΞΑΝΘΗΣ, ΜΑΝΔΡΑ ΞΑΝΘΗΣ, ΜΕΛΙΣΣΑ ΞΑΝΘΗΣ, ΜΥΡΩΔΑΤΟ ΞΑΝΘΗΣ, ΠΑΙΔΙΚΕΣ ΚΑΤΑΣΚΗΝΩΣΕΙΣ ΞΑΝΘΗΣ, ΠΕΖΟΥΛΑ ΞΑΝΘΗΣ, ΠΡΩΤΑΓΟΡΑΣ ΞΑΝΘΗΣ, ΣΚΑΛΑ ΑΒΔΗΡΩΝ ΞΑΝΘΗΣ', Prefecture: 'Ξάνθης' },
    { PostalCode: '67062', Area: 'ΑΝΩ ΚΑΡΥΟΦΥΤΟ ΞΑΝΘΗΣ, ΔΑΣΙΚΟ ΧΩΡΙΟ ΞΑΝΘΗΣ, ΔΑΦΝΩΝΑΣ ΞΑΝΘΗΣ, ΙΩΝΙΚΟ ΞΑΝΘΗΣ, ΚΑΛΛΙΘΕΑ ΞΑΝΘΗΣ, ΚΑΛΥΒΑ ΞΑΝΘΗΣ, ΚΑΣΤΑΝΙΤΗΣ ΞΑΝΘΗΣ, ΚΑΤΩ ΙΩΝΙΚΟ ΞΑΝΘΗΣ, ΚΑΤΩ ΚΑΡΥΟΦΥΤΟ ΞΑΝΘΗΣ, ΚΟΜΝΗΝΑ ΞΑΝΘΗΣ, ΛΕΙΒΑΔΙΤΗΣ ΞΑΝΘΗΣ, ΛΥΚΟΔΡΟΜΙΟ ΞΑΝΘΗΣ, ΜΑΡΓΑΡΙΤΙ ΞΑΝΘΗΣ, ΝΕΟΧΩΡΙ ΞΑΝΘΗΣ, ΣΙΔΗΡΟΠΕΤΡΑ ΞΑΝΘΗΣ, ΣΤΑΥΡΟΥΠΟΛΗ ΞΑΝΘΗΣ, ΣΤΑΥΡΟΧΩΡΙ ΞΑΝΘΗΣ, ΥΔΡΑΓΩΓΕΙΟ ΞΑΝΘΗΣ', Prefecture: 'Ξάνθης' },
    { PostalCode: '67064', Area: 'ΑΝΩ ΠΟΛΥΣΙΤΟ ΞΑΝΘΗΣ, ΒΑΦΑΙΙΚΑ ΞΑΝΘΗΣ, ΓΕΝΙΣΕΑ ΞΑΝΘΗΣ, ΚΟΥΤΣΟ ΞΑΝΘΗΣ, ΠΟΛΥΣΙΤΟ ΞΑΝΘΗΣ, ΣΥΔΙΝΗ ΞΑΝΘΗΣ', Prefecture: 'Ξάνθης' },
    { PostalCode: '67100', Area: 'ΑΙΩΡΑ ΞΑΝΘΗΣ, ΑΚΑΡΠΟ ΞΑΝΘΗΣ, ΑΛΙΚΟΧΩΡΙ ΞΑΝΘΗΣ, ΑΛΚΥΟΝΗ ΞΑΝΘΗΣ, ΑΛΜΑ ΞΑΝΘΗΣ, ΑΝΘΗΡΟ ΞΑΝΘΗΣ, ΑΝΩ ΚΙΡΡΑ ΞΑΝΘΗΣ, ΑΣΚΥΡΑ ΞΑΝΘΗΣ, ΑΥΞΕΝΤΙΟΥ ΞΑΝΘΗΣ, ΑΧΛΑΔΙΑ ΞΑΝΘΗΣ, ΒΑΝΙΑΝΟ ΞΑΝΘΗΣ, ΒΑΣΙΛΟΧΩΡΙ ΞΑΝΘΗΣ, ΒΕΛΟΧΩΡΙ ΞΑΝΘΗΣ, ΓΑΛΑΝΗ ΞΑΝΘΗΣ, ΓΕΡΑΚΑΣ ΞΑΝΘΗΣ, ΓΙΑΛΙΣΤΕΡΑ ΞΑΝΘΗΣ, ΓΟΡΓΟΝΑ ΞΑΝΘΗΣ, ΓΡΗΓΟΡΟ ΞΑΝΘΗΣ, ΔΙΑΦΟΡΟ ΞΑΝΘΗΣ, ΔΙΟΜΗΔΕΙΑ ΞΑΝΘΗΣ, ΔΡΟΣΕΡΟ ΞΑΝΘΗΣ, ΕΡΑΝΟΣ ΞΑΝΘΗΣ, ΕΥΜΟΙΡΟ ΞΑΝΘΗΣ, ΖΟΥΜΠΟΥΛΙ ΞΑΝΘΗΣ, ΘΕΟΤΟΚΟΣ ΞΑΝΘΗΣ, ΙΣΑΙΑ ΞΑΝΘΗΣ, ΚΑΛΛΙΘΕΑ ΕΥΜΟΙΡΟΥ ΞΑΝΘΗΣ, ΚΑΠΝΟΑΝΘΟΣ ΞΑΝΘΗΣ, ΚΕΤΙΚΙ ΞΑΝΘΗΣ, ΚΙΜΜΕΡΙΑ ΞΑΝΘΗΣ, ΚΙΡΡΑ ΞΑΝΘΗΣ, ΚΟΤΙΝΟ ΞΑΝΘΗΣ, ΚΟΥΤΣΟΜΥΤΗΣ ΞΑΝΘΗΣ, ΚΡΑΝΙΑ ΞΑΝΘΗΣ, ΚΥΚΝΟΣ ΞΑΝΘΗΣ, ΛΑΜΠΡΙΝΟ ΞΑΝΘΗΣ, ΛΕΥΚΗ ΞΑΝΘΗΣ, ΛΕΥΚΟΠΕΤΡΑ ΞΑΝΘΗΣ, ΛΙΒΑΔΙ ΞΑΝΘΗΣ, ΜΑΓΙΚΟ ΞΑΝΘΗΣ, ΜΑΝΤΑΙΝΑ ΞΑΝΘΗΣ, ΜΕΓΑ ΕΥΜΟΙΡΟ ΞΑΝΘΗΣ, ΜΕΓΑ ΤΥΜΠΑΝΟ ΞΑΝΘΗΣ, ΜΙΚΡΟ ΤΥΜΠΑΝΟ ΞΑΝΘΗΣ, ΜΟΝΗ ΤΑΞΙΑΡΧΩΝ ΞΑΝΘΗΣ, ΜΥΚΗ ΞΑΝΘΗΣ, ΝΕΑ ΜΟΡΣΙΝΗ ΞΑΝΘΗΣ, ΝΕΟΣ ΖΥΓΟΣ ΞΑΝΘΗΣ, ΞΑΝΘΗ ΞΑΝΘΗΣ, ΟΑΣΙΣ ΞΑΝΘΗΣ, ΟΡΕΣΤΙΝΗ ΞΑΝΘΗΣ, ΠΑΛΑΙΑ ΔΕΞΑΜΕΝΗ ΞΑΝΘΗΣ, ΠΑΛΑΙΑ ΜΟΡΣΙΝΗ ΞΑΝΘΗΣ, ΠΑΛΑΙΟ ΚΑΤΡΑΜΙ ΞΑΝΘΗΣ, ΠΑΛΑΙΟΣ ΖΥΓΟΣ ΞΑΝΘΗΣ, ΠΑΝΕΠΙΣΤΗΜΙΟΥΠΟΛΗ ΞΑΝΘΗΣ, ΠΑΝΕΡΙ ΞΑΝΘΗΣ, ΠΕΛΕΚΗΤΟ ΞΑΝΘΗΣ, ΠΕΤΕΙΝΟΣ ΞΑΝΘΗΣ, ΠΕΤΡΟΧΩΡΙ ΞΑΝΘΗΣ, ΠΗΓΑΔΙΑ ΞΑΝΘΗΣ, ΠΙΛΗΜΑ ΞΑΝΘΗΣ, ΠΟΡΤΑ ΞΑΝΘΗΣ, ΠΡΙΟΝΙΟ ΞΑΝΘΗΣ, ΠΡΟΣΗΛΙΟ ΞΑΝΘΗΣ, ΠΥΡΓΟΣ ΞΑΝΘΗΣ, ΡΑΧΗ ΞΑΝΘΗΣ, ΡΕΥΜΑ ΞΑΝΘΗΣ, ΡΥΜΗ ΞΑΝΘΗΣ, ΣΕΛΕΡΟ ΞΑΝΘΗΣ, ΣΕΜΕΛΗ ΞΑΝΘΗΣ, ΣΗΜΑΝΤΡΑ ΞΑΝΘΗΣ, ΣΙΡΟΚΟ ΞΑΝΘΗΣ, ΣΜΙΝΘΗ ΞΑΝΘΗΣ, ΣΟΥΛΑ ΞΑΝΘΗΣ, ΣΟΥΝΙΟ ΞΑΝΘΗΣ, ΣΤΑΜΑΤΙ ΞΑΝΘΗΣ, ΣΤΗΡΙΓΜΑ ΞΑΝΘΗΣ, ΤΕΚΤΩΝ ΞΑΝΘΗΣ, ΤΟΞΟΤΕΣ ΞΑΝΘΗΣ, ΤΡΙΓΩΝΟ ΞΑΝΘΗΣ, ΥΔΡΟΧΩΡΙΟ ΞΑΝΘΗΣ, ΦΕΛΩΝΗ ΞΑΝΘΗΣ, ΦΙΛΙΑ ΞΑΝΘΗΣ, ΧΡΥΣΑ ΞΑΝΘΗΣ, ΧΡΥΣΟ ΞΑΝΘΗΣ, ΩΡΑΙΟ ΞΑΝΘΗΣ', Prefecture: 'Ξάνθης' },
    { PostalCode: '67200', Area: 'ΑΒΑΤΟ ΞΑΝΘΗΣ, ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΞΑΝΘΗΣ, ΓΚΙΖΕΛΑ ΞΑΝΘΗΣ, ΔΑΣΟΧΩΡΙ ΞΑΝΘΗΣ, ΔΕΚΑΡΧΟ ΞΑΝΘΗΣ, ΕΞΟΧΗ ΞΑΝΘΗΣ, ΕΥΛΑΛΟ ΞΑΝΘΗΣ, ΗΛΙΟΚΕΝΤΗΜΑ ΞΑΝΘΗΣ, ΗΛΙΟΠΕΤΡΑ ΞΑΝΘΗΣ, ΘΑΛΑΣΣΙΑ ΞΑΝΘΗΣ, ΚΕΝΤΗΤΗ ΞΑΝΘΗΣ, ΚΟΣΜΗΤΗ ΞΑΝΘΗΣ, ΚΟΣΣΟΣ ΞΑΝΘΗΣ, ΚΡΕΜΑΣΤΗ ΞΑΝΘΗΣ, ΚΥΡΝΟΣ ΞΑΝΘΗΣ, ΚΥΨΕΛΗ ΞΑΝΘΗΣ, ΜΙΚΡΟΧΩΡΙ ΞΑΝΘΗΣ, ΝΕΑ ΑΜΙΣΟΣ ΞΑΝΘΗΣ, ΝΕΟ ΕΡΑΣΜΙΟ ΞΑΝΘΗΣ, ΟΛΒΙΟ ΞΑΝΘΗΣ, ΟΡΦΑΝΟ ΞΑΝΘΗΣ, ΠΑΛΑΙΟ ΕΡΑΣΜΙΟ ΞΑΝΘΗΣ, ΠΑΛΑΙΟ ΟΛΒΙΟ ΞΑΝΘΗΣ, ΠΟΙΜΝΗ ΞΑΝΘΗΣ, ΡΑΔΙΟΣΤΑΘΜΟΣ ΞΑΝΘΗΣ', Prefecture: 'Ξάνθης' },
    { PostalCode: '67300', Area: 'ΑΙΜΟΝΙΟ ΞΑΝΘΗΣ, ΑΚΡΑΙΟΣ ΞΑΝΘΗΣ, ΑΝΩ ΘΕΡΜΕΣ ΞΑΝΘΗΣ, ΓΙΔΟΤΟΠΟΣ ΞΑΝΘΗΣ, ΓΛΑΥΚΗ ΞΑΝΘΗΣ, ΔΗΜΑΡΙΟ ΞΑΝΘΗΣ, ΔΙΑΣΠΑΡΤΟ ΞΑΝΘΗΣ, ΔΟΥΡΓΟΥΤΙ ΞΑΝΘΗΣ, ΕΧΙΝΟΣ ΞΑΝΘΗΣ, ΘΕΡΜΕΣ ΞΑΝΘΗΣ, ΙΑΜΑΤΙΚΕΣ ΠΗΓΕΣ ΞΑΝΘΗΣ, ΚΑΛΟΤΥΧΟ ΞΑΝΘΗΣ, ΚΕΝΤΑΥΡΟΣ ΞΑΝΘΗΣ, ΚΙΔΑΡΙΣ ΞΑΝΘΗΣ, ΚΟΡΥΦΗ ΞΑΝΘΗΣ, ΚΟΤΤΑΝΗ ΞΑΝΘΗΣ, ΚΟΤΥΛΗ ΞΑΝΘΗΣ, ΚΟΥΝΔΟΥΡΟΣ ΞΑΝΘΗΣ, ΛΥΚΟΤΟΠΟΣ ΞΑΝΘΗΣ, ΜΕΔΟΥΣΑ ΞΑΝΘΗΣ, ΜΕΛΙΒΟΙΑ ΞΑΝΘΗΣ, ΜΕΣΕΣ ΘΕΡΜΕΣ ΞΑΝΘΗΣ, ΠΑΧΝΗ ΞΑΝΘΗΣ, ΠΟΛΥΣΚΙΟ ΞΑΝΘΗΣ, ΠΟΤΑΜΟΧΩΡΙ ΞΑΝΘΗΣ, ΡΕΜΑΤΙΑ ΞΑΝΘΗΣ, ΣΑΤΡΕΣ ΞΑΝΘΗΣ, ΤΕΜΕΝΟΣ ΞΑΝΘΗΣ, ΤΣΑΛΑΠΕΤΕΙΝΟΣ ΞΑΝΘΗΣ', Prefecture: 'Ξάνθης' },
    { PostalCode: '58002', Area: 'ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΠΕΛΛΗΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΠΕΛΛΗΣ, ΑΝΩ ΓΡΑΜΜΑΤΙΚΟ ΠΕΛΛΗΣ, ΑΡΝΙΣΣΑ ΠΕΛΛΗΣ, ΔΡΟΣΙΑ ΠΕΛΛΗΣ, ΖΕΡΒΗ ΠΕΛΛΗΣ, ΚΑΤΩ ΓΡΑΜΜΑΤΙΚΟ ΠΕΛΛΗΣ, ΝΕΑ ΞΑΝΘΟΓΙΑ ΠΕΛΛΗΣ, ΝΕΟΣ ΑΓΙΟΣ ΑΘΑΝΑΝΑΣΙΟΣ ΠΕΛΛΗΣ, ΞΑΝΘΟΓΙΑ ΠΕΛΛΗΣ, ΠΑΝΑΓΙΤΣΑ ΠΕΛΛΗΣ, ΠΕΡΑΙΑ ΠΕΛΛΗΣ', Prefecture: 'Πέλλας' },
    { PostalCode: '58005', Area: 'ΝΕΑ ΠΕΛΛΑ ΠΕΛΛΗΣ, ΠΕΛΛΑ ΠΕΛΛΗΣ', Prefecture: 'Πέλλας' },
    { PostalCode: '58100', Area: 'ΑΜΠΕΛΙΕΣ ΠΕΛΛΗΣ, ΑΞΟΣ ΠΕΛΛΗΣ, ΑΡΑΒΗΣΣΟΣ ΠΕΛΛΗΣ, ΑΡΧΟΝΤΙΚΟ ΠΕΛΛΗΣ, ΑΣΒΕΣΤΑΡΕΙΟ ΠΕΛΛΗΣ, ΑΧΛΑΔΟΧΩΡΙ ΠΕΛΛΗΣ, ΓΙΑΝΝΙΤΣΑ ΠΕΛΛΗΣ, ΓΥΨΟΧΩΡΙ ΠΕΛΛΗΣ, ΔΑΜΙΑΝΟ ΠΕΛΛΗΣ, ΔΡΟΣΕΡΟ ΠΕΛΛΗΣ, ΕΛΕΥΘΕΡΟΧΩΡΙ ΠΕΛΛΗΣ, ΚΡΩΜΝΗ ΠΕΛΛΗΣ, ΛΕΠΤΟΚΑΡΥΑ ΠΕΛΛΗΣ, ΜΕΛΙΣΣΙ ΠΕΛΛΗΣ, ΜΕΣΙΑΝΟ ΠΕΛΛΗΣ, ΝΕΟΣ ΜΥΛΟΤΟΠΟΣ ΠΕΛΛΗΣ, ΠΑΛΑΙΦΥΤΟ ΠΕΛΛΗΣ, ΠΑΛΙΟΣ ΜΥΛΟΤΟΠΟΣ ΠΕΛΛΗΣ, ΠΑΡΑΛΙΜΝΗ ΠΕΛΛΗΣ, ΠΕΝΤΑΠΛΑΤΑΝΟ ΠΕΛΛΗΣ, ΠΛΑΓΙΑΡΙ ΠΕΛΛΗΣ, ΠΟΝΤΟΧΩΡΙ ΠΕΛΛΗΣ, ΤΡΙΦΥΛΛΙ ΠΕΛΛΗΣ', Prefecture: 'Πέλλας' },
    { PostalCode: '58200', Area: 'ΑΓΙΑ ΦΩΤΕΙΝΗ ΠΕΛΛΗΣ, ΑΓΡΑΣ ΠΕΛΛΗΣ, ΒΡΥΤΑ ΠΕΛΛΗΣ, ΕΔΕΣΣΑ ΠΕΛΛΗΣ, ΕΚΚΛΗΣΙΟΧΩΡΙ ΠΕΛΛΗΣ, ΚΑΙΣΑΡΙΑΝΑ ΠΕΛΛΗΣ, ΚΑΡΥΔΙΑ ΠΕΛΛΗΣ, ΚΕΡΑΣΙΕΣ ΠΕΛΛΗΣ, ΛΥΚΟΙ ΠΕΛΛΗΣ, ΜΑΡΓΑΡΙΤΑ ΠΕΛΛΗΣ, ΜΕΣΗΜΕΡΙ ΠΕΛΛΗΣ, ΝΗΣΙ ΠΕΛΛΗΣ, ΠΑΛΑΙΑ ΣΩΤΗΡΑ ΠΕΛΛΗΣ, ΠΛΑΤΑΝΗ ΠΕΛΛΗΣ, ΠΡΟΑΣΤΙΟ ΠΕΛΛΗΣ, ΡΙΖΑΡΙΟ ΠΕΛΛΗΣ, ΣΑΜΑΡΙΟ ΠΕΛΛΗΣ, ΣΩΤΗΡΑ ΠΕΛΛΗΣ, ΥΔΡΟΗΛΕΚΤΡΙΚΟΣ ΣΤΑΘΜΟΣ ΑΓΡΑ ΠΕΛΛΗΣ, ΦΛΑΜΟΥΡΙΑ ΠΕΛΛΗΣ', Prefecture: 'Πέλλας' },
    { PostalCode: '58300', Area: 'ΑΓΙΟΣ ΛΟΥΚΑΣ ΠΕΛΛΗΣ, ΑΚΡΟΛΙΜΝΗ ΠΕΛΛΗΣ, ΓΑΛΑΤΑΔΕΣ ΠΕΛΛΗΣ, ΕΣΩΒΑΛΤΑ ΠΕΛΛΗΣ, ΚΡΥΑ ΒΡΥΣΗ ΠΕΛΛΗΣ, ΣΤΑΥΡΟΔΡΟΜΙ ΠΕΛΛΗΣ', Prefecture: 'Πέλλας' },
    { PostalCode: '58400', Area: 'ΑΓΑΘΗ ΠΕΛΛΗΣ, ΑΛΩΡΟΣ ΠΕΛΛΗΣ, ΑΝΩ ΓΑΡΕΦΙ ΠΕΛΛΗΣ, ΑΝΩ ΡΟΔΩΝΙΑ ΠΕΛΛΗΣ, ΑΡΙΔΑΙΑ ΠΕΛΛΗΣ, ΑΨΑΛΟΣ ΠΕΛΛΗΣ, ΒΟΡΕΙΝΟ ΠΕΛΛΗΣ, ΓΑΡΕΦΕΙΟΝ ΠΕΛΛΗΣ, ΔΟΡΩΘΕΑ ΠΕΛΛΗΣ, ΘΕΟΔΩΡΑΚΕΙΟ ΠΕΛΛΗΣ, ΙΔΑ ΠΕΛΛΗΣ, ΚΑΤΩ ΓΑΡΕΦΙ ΠΕΛΛΗΣ, ΚΑΤΩ ΚΟΡΥΦΗ ΠΕΛΛΗΣ, ΚΑΤΩ ΡΟΔΩΝΙΑ ΠΕΛΛΗΣ, ΚΡΑΝΕΑ ΠΕΛΛΗΣ, ΚΩΝΣΤΑΝΤΙΑ ΠΕΛΛΗΣ, ΛΟΥΤΡΑ ΛΟΥΤΡΑΚΙΟΥ ΠΕΛΛΗΣ, ΛΟΥΤΡΑΚΙ ΠΕΛΛΗΣ, ΛΥΚΟΣΤΟΜΟ ΠΕΛΛΗΣ, ΜΕΓΑΠΛΑΤΑΝΟΣ ΠΕΛΛΗΣ, ΜΗΛΙΑ ΠΕΛΛΗΣ, ΜΟΝΑΣΤΗΡΑΚΙ ΠΕΛΛΗΣ, ΝΕΟΧΩΡΙ ΠΕΛΛΗΣ, ΞΙΦΙΑΝΗ ΠΕΛΛΗΣ, ΟΡΜΑ ΠΕΛΛΗΣ, ΠΕΥΚΩΤΟ ΠΕΛΛΗΣ, ΠΙΠΕΡΙΕΣ ΠΕΛΛΗΣ, ΠΟΛΥΚΑΡΠΙΟ ΠΕΛΛΗΣ, ΠΡΟΜΑΧΟΙ ΠΕΛΛΗΣ, ΡΙΖΟΧΩΡΙ ΠΕΛΛΗΣ, ΣΑΡΑΚΗΝΟΙ ΠΕΛΛΗΣ, ΣΩΣΑΝΔΡΑ ΠΕΛΛΗΣ, ΤΣΑΚΟΙ ΠΕΛΛΗΣ, ΥΔΡΑΙΑ ΠΕΛΛΗΣ, ΧΡΥΣΑ ΠΕΛΛΗΣ, ΧΡΥΣΗ ΠΕΛΛΗΣ', Prefecture: 'Πέλλας' },
    { PostalCode: '58500', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΠΕΛΛΗΣ, ΑΝΥΔΡΟ ΠΕΛΛΗΣ, ΑΡΣΕΝΙ ΠΕΛΛΗΣ, ΑΣΠΡΟ ΠΕΛΛΗΣ, ΔΑΦΝΗ ΠΕΛΛΗΣ, ΚΑΛΗ ΠΕΛΛΗΣ, ΚΑΛΛΙΠΟΛΗ ΠΕΛΛΗΣ, ΚΑΛΥΒΙΑ ΠΕΛΛΗΣ, ΛΑΚΚΑ ΠΕΛΛΗΣ, ΛΙΘΑΡΙΑ ΠΕΛΛΗΣ, ΛΙΠΑΡΟ ΠΕΛΛΗΣ, ΛΙΠΟΧΩΡΙ ΠΕΛΛΗΣ, ΛΟΥΤΡΟΧΩΡΙ ΠΕΛΛΗΣ, ΜΑΝΔΑΛΟ ΠΕΛΛΗΣ, ΜΑΥΡΟ ΠΕΛΛΗΣ, ΜΑΥΡΟΒΟΥΝΙ ΠΕΛΛΗΣ, ΝΕΑ ΖΩΗ ΠΕΛΛΗΣ, ΠΕΤΡΑΙΑ ΠΕΛΛΗΣ, ΠΛΕΥΡΩΜΑ ΠΕΛΛΗΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΠΕΛΛΗΣ, ΡΙΖΟ ΠΕΛΛΗΣ, ΣΑΝΔΑΛΙ ΠΕΛΛΗΣ, ΣΕΒΑΣΤΙΑΝΑ ΠΕΛΛΗΣ, ΣΚΥΔΡΑ ΠΕΛΛΗΣ', Prefecture: 'Πέλλας' },
    { PostalCode: '60062', Area: 'ΚΟΡΙΝΟΣ ΠΙΕΡΙΑΣ, ΠΑΡΑΛΙΑ ΚΟΡΙΝΟΥ ΠΙΕΡΙΑΣ', Prefecture: 'Πιερίας' },
    { PostalCode: '60063', Area: 'ΑΝΩ ΣΚΟΤΙΝΑ ΠΙΕΡΙΑΣ, ΚΑΛΥΒΙΑ ΒΑΡΙΚΟΥ ΠΙΕΡΙΑΣ, ΛΕΠΤΟΚΑΡΥΑ ΠΙΕΡΙΑΣ, ΛΙΜΑΝΙ ΛΙΤΟΧΩΡΟΥ ΠΙΕΡΙΑΣ, ΠΑΝΤΕΛΕΗΜΟΝΑΣ ΠΙΕΡΙΑΣ, ΠΑΡΑΛΙΑ ΣΚΟΤΙΝΑΣ ΠΙΕΡΙΑΣ, ΠΛΑΚΑ ΠΙΕΡΙΑΣ, ΠΟΡΟΙ ΠΙΕΡΙΑΣ, ΣΚΟΤΙΝΑ ΠΙΕΡΙΑΣ', Prefecture: 'Πιερίας' },
    { PostalCode: '60065', Area: 'ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΠΟΡΩΝ ΠΙΕΡΙΑΣ, ΝΕΟΙ ΠΟΡΟΙ ΠΙΕΡΙΑΣ, ΝΕΟΣ ΠΑΝΤΕΛΕΗΜΟΝΑΣ ΠΙΕΡΙΑΣ, ΠΑΡΑΛΙΑ ΠΑΝΤΕΛΕΗΜΟΝΑ ΠΙΕΡΙΑΣ, ΠΛΑΤΑΜΩΝΑΣ ΠΙΕΡΙΑΣ', Prefecture: 'Πιερίας' },
    { PostalCode: '60100', Area: 'ΑΓΙΑ ΒΑΡΒΑΡΑ ΠΙΕΡΙΑΣ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΠΕΤΡΑΣ ΠΙΕΡΙΑΣ, ΑΓΙΟΣ ΣΠΥΡΙΔΩΝΑΣ ΠΙΕΡΙΑΣ, ΑΝΔΡΟΜΑΧΗ ΠΙΕΡΙΑΣ, ΑΝΩ ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΠΙΕΡΙΑΣ, ΑΝΩ ΜΗΛΕΑ ΠΙΕΡΙΑΣ, ΑΡΩΝΑΣ ΠΙΕΡΙΑΣ, ΒΡΙΑ ΠΙΕΡΙΑΣ, ΒΡΟΝΤΟΥ ΠΙΕΡΙΑΣ, ΓΑΝΟΧΩΡΑ ΠΙΕΡΙΑΣ, ΔΙΟΝ ΠΙΕΡΙΑΣ, ΕΛΑΤΟΧΩΡΙ ΠΙΕΡΙΑΣ, ΕΛΑΦΟΣ ΠΙΕΡΙΑΣ, ΕΞΟΧΗ ΠΙΕΡΙΑΣ, ΚΑΛΛΙΘΕΑ ΠΙΕΡΙΑΣ, ΚΑΡΙΤΣΑ ΠΙΕΡΙΑΣ, ΚΑΡΥΕΣ ΠΙΕΡΙΑΣ, ΚΑΤΑΛΩΝΙΑ ΠΙΕΡΙΑΣ, ΚΑΤΕΡΙΝΗ ΠΙΕΡΙΑΣ, ΚΑΤΩ ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΠΙΕΡΙΑΣ, ΚΑΤΩ ΜΗΛΕΑ ΠΙΕΡΙΑΣ, ΚΟΝΤΑΡΙΩΤΙΣΣΑ ΠΙΕΡΙΑΣ, ΚΟΥΚΚΟΣ ΠΙΕΡΙΑΣ, ΛΑΓΟΡΡΑΧΗ ΠΙΕΡΙΑΣ, ΛΟΦΟΣ ΠΙΕΡΙΑΣ, ΜΕΛΙΑΔΙΟ ΠΙΕΡΙΑΣ, ΜΗΛΙΑ ΜΕΣΑΙΑ ΠΙΕΡΙΑΣ, ΜΗΛΙΑ ΠΙΕΡΙΑΣ, ΜΟΣΧΟΠΟΤΑΜΟΣ ΠΙΕΡΙΑΣ, ΜΟΣΧΟΧΩΡΙ ΠΙΕΡΙΑΣ, ΝΕΑ ΕΦΕΣΟΣ ΠΙΕΡΙΑΣ, ΝΕΑ ΤΡΑΠΕΖΟΥΝΤΑ ΠΙΕΡΙΑΣ, ΝΕΑ ΧΡΑΝΗ ΠΙΕΡΙΑΣ, ΝΕΟ ΚΕΡΑΜΙΔΙ ΠΙΕΡΙΑΣ, ΝΕΟΚΑΙΣΑΡΕΙΑ ΠΙΕΡΙΑΣ, ΝΕΟΣ ΑΝΩ ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΠΙΕΡΙΑΣ, ΟΛΥΜΠΙΑΚΗ ΑΚΤΗ ΠΙΕΡΙΑΣ, ΠΑΛΑΙΟ ΕΛΑΤΟΧΩΡΙ ΠΙΕΡΙΑΣ, ΠΑΛΑΙΟ ΚΕΡΑΜΙΔΙ ΠΙΕΡΙΑΣ, ΠΑΡΑΛΙΑ ΠΙΕΡΙΑΣ, ΠΕΡΙΣΤΑΣΗ ΠΙΕΡΙΑΣ, ΠΕΤΡΑ ΠΙΕΡΙΑΣ, ΠΛΑΤΑΝΑΚΙΑ ΠΙΕΡΙΑΣ, ΠΡΟΣΗΛΙΟ ΠΙΕΡΙΑΣ, ΡΑΧΗ ΠΙΕΡΙΑΣ, ΡΗΤΙΝΗ ΠΙΕΡΙΑΣ, ΡΥΑΚΙΑ ΠΙΕΡΙΑΣ, ΣΒΟΡΩΝΟΣ ΠΙΕΡΙΑΣ, ΣΕΒΑΣΤΗ ΠΙΕΡΙΑΣ, ΣΚΟΤΕΙΝΑ ΠΙΕΡΙΑΣ, ΤΟΞΟ ΠΙΕΡΙΑΣ, ΤΡΙΛΟΦΟΣ ΠΙΕΡΙΑΣ, ΦΤΕΡΗ ΠΙΕΡΙΑΣ, ΦΩΤΕΙΝΑ ΠΙΕΡΙΑΣ, ΨΥΧΙΑΤΡΙΚΟ ΝΟΣ/ΜΕΙΟ ΠΕΤΡΑΣ ΟΛΥΜΠΟΥ ΠΙΕΡΙΑΣ', Prefecture: 'Πιερίας' },
    { PostalCode: '60200', Area: 'ΛΙΤΟΧΩΡΟ ΠΙΕΡΙΑΣ, ΜΟΝΗ ΑΓΙΟΥ ΔΙΟΝΥΣΙΟΥ ΠΙΕΡΙΑΣ', Prefecture: 'Πιερίας' },
    { PostalCode: '60300', Area: 'ΑΙΓΙΝΙΟ ΠΙΕΡΙΑΣ', Prefecture: 'Πιερίας' },
    { PostalCode: '48060', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΠΡΕΒΕΖΑΣ, ΑΓΙΑ ΠΑΡΓΑΣ ΠΡΕΒΕΖΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΝΙΚΟΠΟΛΕΩΣ ΑΡΤΑΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΠΑΡΓΑΣ ΠΡΕΒΕΖΑΣ, ΑΝΘΟΥΣΑ ΠΡΕΒΕΖΑΣ, ΒΡΥΣΕΣ ΠΡΕΒΕΖΑΣ, ΛΙΒΑΔΑΡΙ ΠΡΕΒΕΖΑΣ, ΜΑΡΑΣ ΠΡΕΒΕΖΑΣ, ΜΟΡΦΙΟ ΘΕΣΠΡΩΤΙΑΣ, ΠΑΝΑΓΙΑ ΝΗΣΟΣ ΠΡΕΒΕΖΑΣ, ΠΑΡΓΑ ΠΡΕΒΕΖΑΣ, ΣΑΡΑΚΙΝΙΚΟ ΠΡΕΒΕΖΑΣ, ΣΠΑΘΑΡΑΙΟΙ ΘΕΣΠΡΩΤΙΑΣ, ΤΖΑΡΑ ΠΡΕΒΕΖΑΣ, ΤΡΙΚΟΡΦΟ ΠΡΕΒΕΖΑΣ, ΧΡΥΣΟΓΙΑΛΙ ΠΡΕΒΕΖΑΣ', Prefecture: 'Πρέβεζας' },
    { PostalCode: '48061', Area: 'ΑΛΩΝΙ ΠΡΕΒΕΖΑΣ, ΑΝΩ ΚΟΤΣΑΝΟΠΟΥΛΟ ΠΡΕΒΕΖΑΣ, ΑΝΩ ΡΑΧΗ ΠΡΕΒΕΖΑΣ, ΒΡΥΣΟΥΛΑ ΠΡΕΒΕΖΑΣ, ΗΛΙΟΒΟΥΝΙ ΑΡΤΑΣ, ΚΑΤΩ ΚΟΤΣΑΝΟΠΟΥΛΟ ΠΡΕΒΕΖΑΣ, ΚΑΤΩ ΡΕΥΜΑΤΙΑ ΠΡΕΒΕΖΑΣ, ΛΟΥΡΟΣ ΠΡΕΒΕΖΑΣ, ΝΕΟ ΣΦΗΝΩΤΟ ΠΡΕΒΕΖΑΣ, ΝΕΟΣ ΩΡΩΠΟΣ ΠΡΕΒΕΖΑΣ, ΡΕΥΜΑΤΙΑ ΠΡΕΒΕΖΑΣ, ΣΕΡΙΖΙΑΝΑ ΙΩΑΝΝΙΝΩΝ, ΣΚΙΑΔΑΣ ΠΡΕΒΕΖΑΣ, ΣΤΕΦΑΝΗ ΠΡΕΒΕΖΑΣ, ΣΥΚΙΕΣ ΣΕΡΙΖΙΑΝΩΝ ΙΩΑΝΝΙΝΩΝ, ΤΡΙΚΑΣΤΡΟ ΠΡΕΒΕΖΑΣ', Prefecture: 'Πρέβεζας' },
    { PostalCode: '48062', Area: 'ΑΗΔΟΝΙ ΑΧΕΡΟΥΣΙΑΣ ΠΡΕΒΕΖΑΣ, ΑΗΔΟΝΙΑ ΠΡΕΒΕΖΑΣ, ΑΜΜΟΥΔΙΑ ΠΡΕΒΕΖΑΣ, ΑΝΩ ΣΚΑΦΙΔΩΤΗ ΠΡΕΒΕΖΑΣ, ΑΧΕΡΟΥΣΙΑ ΠΡΕΒΕΖΑΣ, ΒΑΛΑΝΙΔΟΡΑΧΗ ΠΡΕΒΕΖΑΣ, ΒΑΛΑΝΙΔΟΥΣΣΑ ΠΡΕΒΕΖΑΣ, ΒΟΥΒΟΠΟΤΑΜΟΣ ΠΡΕΒΕΖΑΣ, ΒΡΑΧΟΣ ΠΡΕΒΕΖΑΣ, ΔΕΣΠΟΤΙΚΟ ΠΡΕΒΕΖΑΣ, ΔΙΚΟΡΦΟ ΠΡΕΒΕΖΑΣ, ΕΚΚΛΗΣΙΕΣ ΠΡΕΒΕΖΑΣ, ΘΕΜΕΛΟ ΠΡΕΒΕΖΑΣ, ΚΑΝΑΛΛΑΚΙ ΠΡΕΒΕΖΑΣ, ΚΑΣΤΡΙ ΓΟΡΓΟΜΥΛΟΥ ΑΡΤΑΣ, ΚΑΣΤΡΙ ΠΡΕΒΕΖΑΣ, ΚΑΤΩ ΔΕΣΠΟΤΙΚΟ ΠΡΕΒΕΖΑΣ, ΚΑΤΩ ΣΚΑΦΙΔΩΤΗ ΠΡΕΒΕΖΑΣ, ΚΟΡΥΦΟΥΛΑ ΠΡΕΒΕΖΑΣ, ΚΟΡΩΝΗ ΠΡΕΒΕΖΑΣ, ΚΟΡΩΝΟΠΟΥΛΟ ΠΡΕΒΕΖΑΣ, ΚΟΥΚΚΟΥΛΙ ΠΡΕΒΕΖΑΣ, ΚΥΨΕΛΗ ΠΡΕΒΕΖΑΣ, ΛΟΥΤΣΑ ΠΡΕΒΕΖΑΣ, ΛΥΓΙΑ ΠΡΕΒΕΖΑΣ, ΜΕΣΟΠΟΤΑΜΟ ΠΡΕΒΕΖΑΣ, ΜΟΥΖΑΚΑΙΙΚΑ ΠΡΕΒΕΖΑΣ, ΝΑΡΚΙΣΣΟΣ ΠΡΕΒΕΖΑΣ, ΞΗΡΟΛΟΦΟΣ ΠΡΕΒΕΖΑΣ, ΠΑΡΑΛΙΑ ΒΡΑΧΟΥ ΠΡΕΒΕΖΑΣ, ΠΑΡΑΛΙΑ ΛΟΥΤΣΑΣ ΠΡΕΒΕΖΑΣ, ΣΚΕΠΑΣΤΟ ΠΡΕΒΕΖΑΣ, ΣΤΑΥΡΟΧΩΡΙ ΠΡΕΒΕΖΑΣ, ΤΣΕΚΟΥΡΙ ΠΡΕΒΕΖΑΣ, ΤΣΟΥΚΝΙΔΑ ΠΡΕΒΕΖΑΣ, ΧΕΙΜΑΔΙ ΠΡΕΒΕΖΑΣ, ΧΟΧΛΑ ΠΡΕΒΕΖΑΣ', Prefecture: 'Πρέβεζας' },
    { PostalCode: '48100', Area: 'ΑΓΙΟΙ ΑΠΟΣΤΟΛΟΙ ΠΡΕΒΕΖΑΣ, ΑΓΙΟΣ ΘΩΜΑΣ ΠΡΕΒΕΖΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΜΙΧΑΛΙΤΣΙΟΥ ΠΡΕΒΕΖΑΣ, ΑΡΧΑΓΓΕΛΟΣ ΠΡΕΒΕΖΑΣ, ΚΑΛΑΜΙΤΣΙ ΠΡΕΒΕΖΑΣ, ΚΑΜΑΡΙΝΑ ΠΡΕΒΕΖΑΣ, ΚΑΝΑΛΙ ΠΡΕΒΕΖΑΣ, ΚΑΣΤΡΟΣΥΚΙΑ ΠΡΕΒΕΖΑΣ, ΚΑΤΩ ΜΥΡΣΙΝΗ ΠΡΕΒΕΖΑΣ, ΚΑΤΩ ΡΙΖΑ ΠΡΕΒΕΖΑΣ, ΚΡΥΟΠΗΓΗ ΠΡΕΒΕΖΑΣ, ΜΑΖΙ ΠΡΕΒΕΖΑΣ, ΜΑΖΩΜΑ ΠΡΕΒΕΖΑΣ, ΜΕΓΑΔΕΝΔΡΟ ΠΡΕΒΕΖΑΣ, ΜΙΧΑΛΙΤΣΙ ΠΡΕΒΕΖΑΣ, ΜΥΡΣΙΝΗ ΠΡΕΒΕΖΑΣ, ΜΥΤΙΚΑΣ ΠΡΕΒΕΖΑΣ, ΝΕΑ ΘΕΣΗ ΠΡΕΒΕΖΑΣ, ΝΕΑ ΣΑΜΨΟΥΝΤΑ ΠΡΕΒΕΖΑΣ, ΝΕΑ ΣΙΝΩΠΗ ΠΡΕΒΕΖΑΣ, ΝΕΟΧΩΡΙ ΠΡΕΒΕΖΑΣ, ΝΙΚΟΠΟΛΗ ΠΡΕΒΕΖΑΣ, ΠΑΝΤΟΚΡΑΤΩΡΑΣ ΠΡΕΒΕΖΑΣ, ΠΗΔΗΜΑ ΚΥΡΑΣ ΠΡΕΒΕΖΑΣ, ΠΡΕΒΕΖΑ ΠΡΕΒΕΖΑΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΠΡΕΒΕΖΑΣ, ΡΙΖΑ ΠΡΕΒΕΖΑΣ, ΦΛΑΜΠΟΥΡΑ ΠΡΕΒΕΖΑΣ, ΨΑΘΑΚΙ ΠΡΕΒΕΖΑΣ', Prefecture: 'Πρέβεζας' },
    { PostalCode: '48200', Area: 'ΑΓΙΑ ΦΑΝΕΡΩΜΕΝΗ ΑΡΤΑΣ, ΑΜΜΟΤΟΠΟΣ ΑΡΤΑΣ, ΑΜΠΕΛΙΑ ΑΜΜΟΤΟΠΟΥ ΑΡΤΑΣ, ΑΝΩ ΔΡΥΜΩΝΑΣ ΑΡΤΑΣ, ΑΝΩΓΕΙΑΤΑ ΑΡΤΑΣ, ΑΝΩΓΕΙΟ ΑΡΤΑΣ, ΒΑΘΥ ΑΡΤΑΣ, ΒΟΥΛΙΣΤΑ ΑΡΤΑΣ, ΓΕΡΟΠΛΑΤΑΝΟΣ ΑΡΤΑΣ, ΓΚΟΥΡΑ ΑΡΤΑΣ, ΓΟΡΓΟΜΥΛΟΣ ΑΡΤΑΣ, ΓΥΜΝΟΤΟΠΟΣ ΑΡΤΑΣ, ΔΡΥΜΩΝΑΣ ΑΡΤΑΣ, ΔΡΥΟΦΥΤΟ ΑΡΤΑΣ, ΚΑΜΠΗ ΑΡΤΑΣ, ΚΕΡΑΣΩΝΑ ΑΡΤΑΣ, ΚΛΕΙΣΟΥΡΑ ΜΟΥΖΑΚΑΙΙΚΩΝ ΑΡΤΑΣ, ΚΛΕΙΣΟΥΡΑ ΦΙΛΙΠΠΙΑΔΟΣ ΑΡΤΑΣ, ΚΟΥΚΛΕΣΙ ΙΩΑΝΝΙΝΩΝ, ΜΑΡΚΑΤΕΣ ΑΡΤΑΣ, ΝΕΑ ΚΕΡΑΣΟΥΝΤΑ ΑΡΤΑΣ, ΝΕΟΣ ΓΟΡΓΟΜΥΛΟΣ ΑΡΤΑΣ, ΠΑΙΔΟΠΟΛΗ ΖΗΡΟΥ ΑΡΤΑΣ, ΠΑΝΑΓΙΑ ΑΡΤΑΣ, ΠΑΝΤΑΝΑΣΣΑ ΑΡΤΑΣ, ΠΕΝΤΕ ΠΗΓΑΔΙΑ ΑΡΤΑΣ, ΠΕΤΡΑ ΦΙΛΙΠΠΙΑΔΟΣ ΑΡΤΑΣ, ΠΟΤΑΜΙΑ ΚΟΥΚΛΕΣΙΟΥ ΙΩΑΝΝΙΝΩΝ, ΡΩΜΙΑ ΑΡΤΑΣ, ΣΤΡΟΓΓΥΛΗ ΑΡΤΑΣ, ΤΣΑΓΚΑΡΟΠΟΥΛΟ ΑΡΤΑΣ, ΥΔΡΟΗΛΕΚΤΡΙΚΟΣ ΣΤΑΘΜΟΣ ΛΟΥΡΟΥ ΑΡΤΑΣ, ΦΙΛΙΠΠΙΑΔΑ ΑΡΤΑΣ, ΧΑΛΙΚΙΑ ΑΡΤΑΣ, ΧΑΝΟΠΟΥΛΟ ΑΡΤΑΣ', Prefecture: 'Πρέβεζας' },
    { PostalCode: '48300', Area: 'ΑΓΙΑ ΤΡΙΑΔΑ ΠΟΛΥΣΤΑΦΥΛΟΥ ΠΡΕΒΕΖΑΣ, ΑΓΙΟΙ ΑΠΟΣΤΟΛΟΙ ΠΑΠΠΑΔΑΤΩΝ ΠΡΕΒΕΖΑΣ, ΑΓΙΟΣ ΣΑΒΒΑΣ ΓΑΛΑΤΑ ΠΡΕΒΕΖΑΣ, ΑΣΣΟΣ ΠΡΕΒΕΖΑΣ, ΓΑΛΑΤΑΣ ΠΡΕΒΕΖΑΣ, ΓΑΛΗΝΗ ΑΡΤΑΣ, ΕΛΑΙΑ ΠΡΕΒΕΖΑΣ, ΖΕΡΒΟ ΠΡΕΒΕΖΑΣ, ΖΗΡΟΠΟΛΗ ΑΡΤΑΣ, ΘΕΣΠΡΩΤΙΚΟ ΠΡΕΒΕΖΑΣ, ΚΕΡΑΣΟΒΟ ΑΡΤΑΣ, ΚΡΑΝΕΑ ΠΡΕΒΕΖΑΣ, ΜΕΛΙΑΝΑ ΠΡΕΒΕΖΑΣ, ΝΙΚΟΛΙΤΣΙ ΠΡΕΒΕΖΑΣ, ΠΑΠΠΑΔΑΤΕΣ ΠΡΕΒΕΖΑΣ, ΠΛΑΤΑΝΙΑ ΠΡΕΒΕΖΑΣ, ΠΟΛΥΣΤΑΦΥΛΟ ΠΡΕΒΕΖΑΣ, ΡΙΖΟΒΟΥΝΙ ΠΡΕΒΕΖΑΣ, ΤΥΡΓΙΑ ΠΡΕΒΕΖΑΣ', Prefecture: 'Πρέβεζας' },
    { PostalCode: '74051', Area: 'ΑΗΔΟΝΟΧΩΡΙ ΗΡΑΚΛΕΙΟΥ, ΑΝΩΓΕΙΑ ΜΥΛΟΠΟΤΑΜΟΥ ΡΕΘΥΜΝΟΥ, ΑΞΟΣ ΡΕΘΥΜΝΟΥ, ΑΣΤΥΡΑΚΙ ΗΡΑΚΛΕΙΟΥ, ΒΕΝΙ ΡΕΘΥΜΝΟΥ, ΓΩΝΙΕΣ ΜΑΛΕΒΙΖΙΟΥ ΗΡΑΚΛΕΙΟΥ, ΖΩΝΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΚΑΛΥΒΟΣ ΡΕΘΥΜΝΟΥ, ΚΑΜΑΡΑΚΙ ΗΡΑΚΛΕΙΟΥ, ΚΑΜΑΡΙΩΤΗΣ ΗΡΑΚΛΕΙΟΥ, ΚΑΤΕΡΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΚΟΥΡΟΥΤΕΣ ΡΕΘΥΜΝΟΥ, ΛΙΒΑΔΑ ΡΕΘΥΜΝΟΥ, ΛΙΒΑΔΙΑ ΡΕΘΥΜΝΟΥ, ΜΑΡΙΝΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΣΙΣΑΡΧΑ ΡΕΘΥΜΝΟΥ', Prefecture: 'Ρεθύμνης' },
    { PostalCode: '74052', Area: 'ΑΓΓΕΛΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΕΡΦΩΝ ΡΕΘΥΜΝΟΥ, ΑΛΦΑ ΡΕΘΥΜΝΟΥ, ΑΝΩ ΒΙΡΑΝΕΠΙΣΚΟΠΗ ΡΕΘΥΜΝΟΥ, ΑΝΩ ΤΡΙΠΟΔΟ ΡΕΘΥΜΝΟΥ, ΑΡΧΑΙΑ ΕΛΕΥΘΕΡΝΑ ΡΕΘΥΜΝΟΥ, ΒΕΡΓΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΒΙΡΑΝ ΕΠΙΣΚΟΠΗ ΡΕΘΥΜΝΟΥ, ΓΑΡΙΠΑΣ ΡΕΘΥΜΝΟΥ, ΔΑΦΝΗ ΡΕΘΥΜΝΟΥ, ΕΛΕΥΘΕΡΝΑ ΡΕΘΥΜΝΟΥ, ΕΡΦΟΙ ΡΕΘΥΜΝΟΥ, ΚΑΛΑΜΑΣ ΡΕΘΥΜΝΟΥ, ΚΑΛΑΝΔΑΡΕ ΡΕΘΥΜΝΟΥ, ΚΑΛΛΕΡΓΟΣ ΡΕΘΥΜΝΟΥ, ΚΕΡΑΜΩΤΑ ΡΕΘΥΜΝΟΥ, ΚΟΥΦΗ ΡΕΘΥΜΝΟΥ, ΚΥΝΗΓΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΛΑΓΚΑ ΡΕΘΥΜΝΟΥ, ΛΑΤΖΙΜΑΣ ΡΕΘΥΜΝΟΥ, ΜΑΓΝΗΣΙΑ ΡΕΘΥΜΝΟΥ, ΜΑΡΓΑΡΙΤΕΣ ΡΕΘΥΜΝΟΥ, ΜΕΛΙΔΟΝΙ ΡΕΘΥΜΝΟΥ, ΜΕΛΙΣΣΟΥΡΓΑΚΙ ΡΕΘΥΜΝΟΥ, ΟΡΘΕΣ ΡΕΘΥΜΝΟΥ, ΠΑΣΑΛΙΤΕΣ ΡΕΘΥΜΝΟΥ, ΠΕΡΑΜΑ ΡΕΘΥΜΝΟΥ, ΠΙΓΟΥΝΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΠΛΕΥΡΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΠΡΙΝΟΣ ΡΕΘΥΜΝΟΥ, ΡΟΥΠΕΣ ΡΕΘΥΜΝΟΥ, ΣΚΟΡΔΙΛΟ ΡΕΘΥΜΝΟΥ, ΣΚΟΥΛΟΥΦΙΑ ΡΕΘΥΜΝΟΥ, ΣΤΑΥΡΩΜΕΝΟΣ ΜΥΛΟΠΟΤΑΜΟΥ ΡΕΘΥΜΝΟΥ, ΤΖΑΝΝΑΚΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΧΑΝΙ ΑΛΕΞΑΝΔΡΟΥ ΡΕΘΥΜΝΟΥ, ΧΑΝΟΘΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΧΟΥΜΕΡΙ ΡΕΘΥΜΝΟΥ', Prefecture: 'Ρεθύμνης' },
    { PostalCode: '74053', Area: 'ΑΓΑΛΙΑΝΟΣ ΡΕΘΥΜΝΟΥ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΑΡΔΑΚΤΟΥ ΡΕΘΥΜΝΟΥ, ΑΓΙΑ ΠΕΛΑΓΙΑ ΡΕΘΥΜΝΟΥ, ΑΓΙΑ ΦΩΤΕΙΝΗ ΚΕΡΑΜΕ ΡΕΘΥΜΝΟΥ, ΑΓΙΟΣ ΒΑΣΙΛΕΙΟΣ ΡΕΘΥΜΝΟΥ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΜΕΛΑΜΠΩΝ ΡΕΘΥΜΝΟΥ, ΑΓΙΟΣ ΠΑΥΛΟΣ ΣΑΚΤΟΥΡΙΩΝ ΡΕΘΥΜΝΟΥ, ΑΓΚΟΥΣΕΛΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΑΚΟΥΜΙΑ ΡΕΘΥΜΝΟΥ, ΑΚΤΟΥΝΤΑ ΡΕΘΥΜΝΟΥ, ΑΝΩ ΜΥΞΟΡΡΟΥΜΑ ΡΕΘΥΜΝΟΥ, ΑΡΔΑΚΤΟΣ ΑΓΙΟΥ ΒΑΣΙΛΕΙΟΥ ΡΕΘΥΜΝΟΥ, ΑΤΣΙΠΑΔΕΣ ΡΕΘΥΜΝΟΥ, ΒΑΤΟΣ ΡΕΘΥΜΝΟΥ, ΒΡΥΣΕΣ ΑΓΙΟΥ ΒΑΣΙΛΕΙΟΥ ΡΕΘΥΜΝΟΥ, ΔΑΡΙΒΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΔΡΙΜΙΣΚΟΣ ΡΕΘΥΜΝΟΥ, ΚΑΡΙΝΕΣ ΡΕΘΥΜΝΟΥ, ΚΑΤΣΟΓΡΙΔΑ ΡΕΘΥΜΝΟΥ, ΚΑΤΩ ΣΑΚΤΟΥΡΙΑ ΡΕΘΥΜΝΟΥ, ΚΕΝΤΡΟΧΩΡΙ ΡΕΘΥΜΝΟΥ, ΚΕΡΑΜΕΣ ΡΕΘΥΜΝΟΥ, ΚΙΣΣΟΣ ΡΕΘΥΜΝΟΥ, ΚΙΣΣΟΥ ΚΑΜΠΟΣ ΡΕΘΥΜΝΟΥ, ΚΟΚΚΙΝΑ ΧΩΡΑΦΙΑ ΡΕΘΥΜΝΟΥ, ΚΡΑΝΑ ΡΕΘΥΜΝΟΥ, ΚΡΥΑ ΒΡΥΣΗ ΛΑΜΠΗΣ ΡΕΘΥΜΝΟΥ, ΛΑΜΠΙΝΗ ΡΕΘΥΜΝΟΥ, ΜΕΛΑΜΠΕΣ ΡΕΘΥΜΝΟΥ, ΜΟΥΡΝΕ ΡΕΘΥΜΝΟΥ, ΜΥΞΟΡΡΟΥΜΑ ΡΕΘΥΜΝΟΥ, ΝΕΑ ΚΡΥΑ ΒΡΥΣΗ ΡΕΘΥΜΝΟΥ, ΞΗΡΟΚΑΜΠΟΣ ΡΕΘΥΜΝΟΥ, ΟΡΝΕ ΡΕΘΥΜΝΟΥ, ΠΑΛΑΙΟΛΟΥΤΡΑ ΡΕΘΥΜΝΟΥ, ΠΑΛΕ ΡΕΘΥΜΝΟΥ, ΠΑΞΙΜΑΔΙΑ ΔΥΟ ΡΕΘΥΜΝΟΥ, ΠΑΞΙΜΑΔΙΑ ΕΝΑ ΡΕΘΥΜΝΟΥ, ΠΛΑΤΑΝΕΣ ΡΕΘΥΜΝΟΥ, ΣΑΚΤΟΥΡΙΑ ΡΕΘΥΜΝΟΥ, ΣΠΗΛΙ ΡΕΘΥΜΝΟΥ, ΤΡΙΟΠΕΤΡΑ ΡΕΘΥΜΝΟΥ, ΦΡΑΤΙ ΡΕΘΥΜΝΟΥ', Prefecture: 'Ρεθύμνης' },
    { PostalCode: '74055', Area: 'ΑΡΓΥΡΟΥΠΟΛΗ ΡΕΘΥΜΝΟΥ, ΑΡΟΛΙΘΙ ΡΕΘΥΜΝΟΥ, ΑΡΧΟΝΤΙΚΗ ΡΕΘΥΜΝΟΥ, ΑΣΗ ΓΩΝΙΑ ΑΠΟΚΟΡΩΝΟΥ ΧΑΝΙΩΝ, ΕΠΙΣΚΟΠΗ ΡΕΘΥΜΝΟΥ ΡΕΘΥΜΝΟΥ, ΚΑΡΩΤΗ ΡΕΘΥΜΝΟΥ, ΚΑΤΩ ΠΟΡΟΣ ΡΕΘΥΜΝΟΥ, ΚΟΥΜΗ ΡΕΘΥΜΝΟΥ, ΜΑΡΟΥΛΟΥ ΡΕΘΥΜΝΟΥ, ΜΥΡΙΟΚΕΦΑΛΑ ΡΕΘΥΜΝΟΥ, ΠΥΡΓΟΣ ΡΕΘΥΜΝΟΥ', Prefecture: 'Ρεθύμνης' },
    { PostalCode: '74060', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΑΓΙΟΥ ΒΑΣΙΛΕΙΟΥ ΡΕΘΥΜΝΟΥ, ΑΜΜΟΥΔΙ ΡΕΘΥΜΝΟΥ, ΑΝΩ ΡΟΔΑΚΙΝΟ ΡΕΘΥΜΝΟΥ, ΑΣΩΜΑΤΟΣ ΡΕΘΥΜΝΟΥ, ΔΑΜΝΟΝΙ ΡΕΘΥΜΝΟΥ, ΚΑΛΗ ΣΥΚΕΑ ΡΕΘΥΜΝΟΥ, ΚΑΛΥΨΩ ΡΕΘΥΜΝΟΥ, ΚΑΜΠΟΣ ΦΟΙΝΙΚΑ ΡΕΘΥΜΝΟΥ, ΚΑΝΕΒΟΣ ΡΕΘΥΜΝΟΥ, ΚΑΤΩ ΜΟΝΗ ΠΡΕΒΕΛΗΣ ΡΕΘΥΜΝΟΥ, ΚΑΤΩ ΡΟΔΑΚΙΝΟ ΡΕΘΥΜΝΟΥ, ΛΕΥΚΟΓΕΙΑ ΡΕΘΥΜΝΟΥ, ΜΑΡΙΟΥ ΡΕΘΥΜΝΟΥ, ΜΥΡΘΙΑΝΟΣ ΠΛΑΚΙΑΣ ΡΕΘΥΜΝΟΥ, ΜΥΡΘΙΟΣ ΦΟΙΝΙΚΑ ΡΕΘΥΜΝΟΥ, ΠΑΛΑΙΑ ΤΑΒΕΡΝΑ ΡΕΘΥΜΝΟΥ, ΠΙΣΩ ΜΟΝΗ ΠΡΕΒΕΛΗ ΡΕΘΥΜΝΟΥ, ΠΛΑΚΙΑΣ ΡΕΘΥΜΝΟΥ, ΠΟΛΥΡΙΖΟΣ ΡΕΘΥΜΝΟΥ, ΣΕΛΛΙΑ ΡΕΘΥΜΝΟΥ, ΣΟΥΔΑ ΡΕΘΥΜΝΟΥ, ΣΧΟΙΝΑΡΙΑ ΡΕΘΥΜΝΟΥ, ΦΟΙΝΙΚΑΣ ΡΕΘΥΜΝΟΥ', Prefecture: 'Ρεθύμνης' },
    { PostalCode: '74061', Area: 'ΑΓΙΑ ΦΩΤΕΙΝΗ ΑΜΑΡΙΟΥ ΡΕΘΥΜΝΟΥ, ΑΜΑΡΙ ΡΕΘΥΜΝΟΥ, ΑΝΩ ΜΕΡΟΣ ΡΕΘΥΜΝΟΥ, ΑΠΟΣΤΟΛΟΙ ΡΕΘΥΜΝΟΥ, ΑΡΔΑΚΤΟΣ ΑΜΑΡΙΟΥ ΡΕΘΥΜΝΟΥ, ΒΙΣΤΑΓΗ ΡΕΘΥΜΝΟΥ, ΒΡΥΣΕΣ ΑΜΑΡΙΟΥ ΡΕΘΥΜΝΟΥ, ΒΩΛΕΩΝΕΣ ΡΕΘΥΜΝΟΥ, ΓΕΝΝΑ ΡΕΘΥΜΝΟΥ, ΓΕΡΑΚΑΡΙ ΡΕΘΥΜΝΟΥ, ΓΟΥΡΓΟΥΘΟΙ ΡΕΘΥΜΝΟΥ, ΔΡΥΓΙΕΣ ΡΕΘΥΜΝΟΥ, ΕΛΕΝΕΣ ΡΕΘΥΜΝΟΥ, ΘΡΟΝΟΣ ΡΕΘΥΜΝΟΥ, ΚΑΛΟΓΕΡΟΣ ΡΕΘΥΜΝΟΥ, ΚΑΡΔΑΚΙ ΡΕΘΥΜΝΟΥ, ΚΛΗΣΙΔΙ ΡΕΘΥΜΝΟΥ, ΜΕΡΩΝΑΣ ΡΕΘΥΜΝΟΥ, ΜΕΣΟΝΗΣΙΑ ΡΕΘΥΜΝΟΥ, ΜΟΝΑΣΤΗΡΑΚΙ ΡΕΘΥΜΝΟΥ, ΜΟΝΗ ΑΣΩΜΑΤΩΝ ΡΕΘΥΜΝΟΥ, ΟΨΙΓΙΑΣ ΡΕΘΥΜΝΟΥ, ΠΑΝΤΑΝΑΣΣΑ ΡΕΘΥΜΝΟΥ, ΠΑΤΣΟΣ ΡΕΘΥΜΝΟΥ, ΧΩΡΔΑΚΙΟ ΡΕΘΥΜΝΟΥ', Prefecture: 'Ρεθύμνης' },
    { PostalCode: '74100', Area: 'ΑΓΙΑ ΕΙΡΗΝΗ ΡΕΘΥΜΝΟΥ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΑΔΕΛΕ ΡΕΘΥΜΝΟΥ, ΑΓΙΑ ΤΡΙΑΔΑ ΡΕΘΥΜΝΟΥ, ΑΓΙΟΣ ΑΝΔΡΕΑΣ ΡΕΘΥΜΝΟΥ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΑΡΜΕΝΩΝ ΡΕΘΥΜΝΟΥ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΡΕΘΥΜΝΟΥ, ΑΓΙΟΣ ΜΑΡΚΟΣ ΡΕΘΥΜΝΟΥ, ΑΓΝΑ ΡΕΘΥΜΝΟΥ, ΑΔΕΛΕ ΡΕΘΥΜΝΟΥ, ΑΔΕΛΙΑΝΟΣ ΚΑΜΠΟΣ ΡΕΘΥΜΝΟΥ, ΑΜΝΑΤΟΣ ΡΕΘΥΜΝΟΥ, ΑΜΠΕΛΑΚΙ ΡΕΘΥΜΝΟΥ, ΑΝΩ ΒΑΛΣΑΜΟΝΕΡΟ ΡΕΘΥΜΝΟΥ, ΑΝΩ ΜΑΛΑΚΙΟ ΡΕΘΥΜΝΟΥ, ΑΡΜΕΝΟΙ ΡΕΘΥΜΝΟΥ, ΑΣΤΕΡΙ ΡΕΘΥΜΝΟΥ, ΑΤΣΙΠΟΠΟΥΛΟ ΡΕΘΥΜΝΟΥ, ΒΕΔΕΡΟΙ ΡΕΘΥΜΝΟΥ, ΒΙΟΛΙ ΧΑΡΑΚΙ ΡΕΘΥΜΝΟΥ, ΓΑΛΛΟΣ ΡΕΘΥΜΝΟΥ, ΓΕΝΗ ΡΕΘΥΜΝΟΥ, ΓΕΡΑΝΙΟ ΡΕΘΥΜΝΟΥ, ΓΙΑΝΝΟΥΔΙ ΡΕΘΥΜΝΟΥ, ΓΟΥΛΕΔΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΓΩΝΙΑ ΡΕΘΥΜΝΟΥ, ΔΙΛΟΦΟ ΡΕΘΥΜΝΟΥ, ΚΑΒΟΥΣΙ ΡΕΘΥΜΝΟΥ, ΚΑΠΕΔΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΚΑΡΕ ΡΕΘΥΜΝΟΥ, ΚΑΡΝΑΤΖΕΣ ΡΕΘΥΜΝΟΥ, ΚΑΣΤΕΛΛΟΣ ΡΕΘΥΜΝΟΥ, ΚΑΤΩ ΒΑΛΣΑΜΟΝΕΡΟ ΡΕΘΥΜΝΟΥ, ΚΑΤΩ ΜΑΛΑΚΙΟ ΡΕΘΥΜΝΟΥ, ΚΑΨΑΛΙΑΝΑ ΡΕΘΥΜΝΟΥ, ΚΟΞΑΡΕ ΡΕΘΥΜΝΟΥ, ΚΥΡΙΑΝΝΑ ΡΕΘΥΜΝΟΥ, ΛΟΥΤΡΑ ΡΕΘΥΜΝΟΥ, ΜΑΡΟΥΛΑΣ ΡΕΘΥΜΝΟΥ, ΜΕΓΑΛΟ ΜΕΤΟΧΙ ΡΕΘΥΜΝΟΥ, ΜΕΣΗ ΡΕΘΥΜΝΟΥ, ΜΙΚΡΑ ΑΝΩΓΕΙΑ (ή ΑΝΩΓΕΙΑ ΡΕΘΥΜΝΟΥ) ΡΕΘΥΜΝΟΥ, ΜΙΚΡΟ ΜΕΤΟΧΙ ΡΕΘΥΜΝΟΥ, ΜΙΣΣΙΡΙΑ ΡΕΘΥΜΝΟΥ, ΜΟΝΗ ΑΡΚΑΔΙΟΥ ΡΕΘΥΜΝΟΥ, ΜΟΝΟΠΑΡΙ ΡΕΘΥΜΝΟΥ, ΜΥΛΟΙ ΡΕΘΥΜΝΟΥ, ΜΥΡΘΙΟΣ ΣΕΛΛΙΟΥ ΡΕΘΥΜΝΟΥ, ΞΗΡΟ ΧΩΡΙΟ ΡΕΘΥΜΝΟΥ, ΟΡΟΣ ΡΕΘΥΜΝΟΥ, ΠΑΓΚΑΛΟΧΩΡΙ ΡΕΘΥΜΝΟΥ, ΠΑΝΟΡΑΜΑ ΡΕΘΥΜΝΟΥ, ΠΕΡΙΒΟΛΙΑ ΡΕΘΥΜΝΟΥ, ΠΕΤΡΕΣ ΡΕΘΥΜΝΟΥ, ΠΗΓΗ ΡΕΘΥΜΝΟΥ, ΠΗΓΙΑΝΟΣ ΚΑΜΠΟΣ ΡΕΘΥΜΝΟΥ, ΠΙΚΡΗΣ ΡΕΘΥΜΝΟΥ, ΠΛΑΤΑΝΙΑΣ ΡΕΘΥΜΝΟΥ ΡΕΘΥΜΝΟΥ, ΠΡΑΣΙΕΣ ΡΕΘΥΜΝΟΥ, ΠΡΙΝΕΔΕΣ ΡΕΘΥΜΝΟΥ, ΠΡΙΝΕΣ ΡΕΘΥΜΝΟΥ, ΡΕΘΥΜΝΟ ΡΕΘΥΜΝΟΥ, ΡΟΥΣΣΟΣΠΙΤΙ ΡΕΘΥΜΝΟΥ, ΣΕΛΛΙΟ ΡΕΘΥΜΝΟΥ, ΣΚΑΛΕΤΑ ΡΕΘΥΜΝΟΥ, ΣΤΑΥΡΩΜΕΝΟΣ ΑΡΚΑΔΙΟΥ ΡΕΘΥΜΝΟΥ, ΣΦΑΚΑΚΙ ΡΕΘΥΜΝΟΥ, ΣΩΜΑΤΑΣ ΡΕΘΥΜΝΟΥ, ΤΡΙΑ ΜΟΝΑΣΤΗΡΙΑ ΡΕΘΥΜΝΟΥ, ΤΣΕΣΜΕΣ ΡΕΘΥΜΝΟΥ, ΦΡΑΝΤΖΕΣΚΙΑΝΑ ΜΕΤΟΧΙΑ ΡΕΘΥΜΝΟΥ, ΦΩΤΕΙΝΟΣ ΡΕΘΥΜΝΟΥ, ΧΑΜΑΛΕΥΡΙ ΡΕΘΥΜΝΟΥ, ΧΑΡΚΙΑ ΡΕΘΥΜΝΟΥ, ΧΡΟΜΟΝΑΣΤΗΡΙ ΡΕΘΥΜΝΟΥ', Prefecture: 'Ρεθύμνης' },
    { PostalCode: '69100', Area: 'ΑΓΙΑΣΜΑ ΡΟΔΟΠΗΣ, ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΡΟΔΟΠΗΣ, ΑΓΡΟΤΙΚΟ ΟΡΦΑΝΟΤΡΟΦΕΙΟ ΡΟΔΟΠΗΣ, ΑΔΡΙΑΝΗ ΡΟΔΟΠΗΣ, ΑΙΓΕΙΡΟΣ ΡΟΔΟΠΗΣ, ΑΜΑΡΑΝΤΑ ΡΟΔΟΠΗΣ, ΑΜΒΡΟΣΙΑ ΡΟΔΟΠΗΣ, ΑΝΘΟΧΩΡΙ ΡΟΔΟΠΗΣ, ΑΝΩ ΔΡΟΣΙΝΗ ΡΟΔΟΠΗΣ, ΑΡΑΤΟΣ ΡΟΔΟΠΗΣ, ΑΡΔΕΙΑ ΡΟΔΟΠΗΣ, ΑΡΧΟΝΤΙΚΑ ΡΟΔΟΠΗΣ, ΑΣΩΜΑΤΟΙ ΡΟΔΟΠΗΣ, ΒΑΚΟΣ ΡΟΔΟΠΗΣ, ΒΡΑΓΙΑ ΡΟΔΟΠΗΣ, ΓΡΑΤΙΝΗ ΡΟΔΟΠΗΣ, ΔΡΥΜΗ ΡΟΔΟΠΗΣ, ΔΥΜΗ ΡΟΔΟΠΗΣ, ΗΦΑΙΣΤΟΣ ΡΟΔΟΠΗΣ, ΘΑΜΝΑ ΡΟΔΟΠΗΣ, ΘΡΥΛΟΡΙΟ ΡΟΔΟΠΗΣ, ΙΑΜΠΟΛΗ ΡΟΔΟΠΗΣ, ΙΣΑΛΟ ΡΟΔΟΠΗΣ, ΙΤΕΑ ΡΟΔΟΠΗΣ, ΚΑΛΑΜΟΚΑΣΤΡΟ ΡΟΔΟΠΗΣ, ΚΑΛΛΙΘΕΑ ΡΟΔΟΠΗΣ, ΚΑΛΛΙΣΤΗ ΡΟΔΟΠΗΣ, ΚΑΛΧΑΣ ΡΟΔΟΠΗΣ, ΚΑΡΥΔΙΑ ΡΟΔΟΠΗΣ, ΚΑΤΩ ΔΡΟΣΙΝΗ ΡΟΔΟΠΗΣ, ΚΗΚΙΔΙΟ ΡΟΔΟΠΗΣ, ΚΟΜΟΤΗΝΗ ΡΟΔΟΠΗΣ, ΚΟΣΜΙΟ ΡΟΔΟΠΗΣ, ΚΡΥΟΝΕΡΙ ΡΟΔΟΠΗΣ, ΛΑΜΠΡΟ ΡΟΔΟΠΗΣ, ΜΑΥΡΟΜΑΤΙ ΡΟΔΟΠΗΣ, ΜΕΓΑ ΔΟΥΚΑΤΟ ΡΟΔΟΠΗΣ, ΜΕΓΑ ΚΡΑΝΟΒΟΥΝΙ ΡΟΔΟΠΗΣ, ΜΕΓΑΛΗ ΑΔΑ ΡΟΔΟΠΗΣ, ΜΕΛΕΤΗ ΡΟΔΟΠΗΣ, ΜΕΣΟΧΩΡΙ ΡΟΔΟΠΗΣ, ΜΕΣΣΟΥΝΗ ΡΟΔΟΠΗΣ, ΜΙΚΡΟ ΔΟΥΚΑΤΟ ΡΟΔΟΠΗΣ, ΜΙΚΡΟ ΚΡΑΝΟΒΟΥΝΙ ΡΟΔΟΠΗΣ, ΜΙΚΡΟ ΠΑΛΛΑΔΙΟ ΡΟΔΟΠΗΣ, ΜΥΤΙΚΑΣ ΡΟΔΟΠΗΣ, ΝΕΑ ΚΑΛΛΙΣΤΗ ΡΟΔΟΠΗΣ, ΝΕΟ ΚΑΛΛΥΝΤΗΡΙ ΡΟΔΟΠΗΣ, ΝΈΟ ΣΙΔΗΡΟΧΩΡΙ ΡΟΔΟΠΗΣ, ΝΥΜΦΑΙΑ ΡΟΔΟΠΗΣ, ΟΜΗΡΙΚΟ ΡΟΔΟΠΗΣ, ΠΑΓΟΥΡΙΑ ΡΟΔΟΠΗΣ, ΠΑΛΛΑΔΙΟ ΡΟΔΟΠΗΣ, ΠΑΜΦΟΡΟ ΡΟΔΟΠΗΣ, ΠΑΝΔΡΟΣΟΣ ΡΟΔΟΠΗΣ, ΠΑΡΑΔΗΜΗ ΡΟΔΟΠΗΣ, ΠΑΤΕΡΜΑ ΡΟΔΟΠΗΣ, ΠΟΡΠΗ ΡΟΔΟΠΗΣ, ΡΙΖΩΜΑ ΡΟΔΟΠΗΣ, ΡΟΔΙΤΗΣ ΡΟΔΟΠΗΣ, ΣΑΛΠΗ ΡΟΔΟΠΗΣ, ΣΑΡΑΚΗΝΗ ΡΟΔΟΠΗΣ, ΣΙΔΗΡΑΔΕΣ ΡΟΔΟΠΗΣ, ΣΤΥΛΑΡΙ ΡΟΔΟΠΗΣ, ΣΥΜΒΟΛΑ ΡΟΔΟΠΗΣ, ΣΧΟΛΗ ΑΣΤΥΝΟΜΙΑΣ ΡΟΔΟΠΗΣ, ΤΥΧΗΡΟ ΡΟΔΟΠΗΣ, ΥΦΑΝΤΕΣ ΡΟΔΟΠΗΣ, ΦΥΛΑΚΑΣ ΡΟΔΟΠΗΣ, ΦΩΛΕΑ ΡΟΔΟΠΗΣ', Prefecture: 'Ροδόπης' },
    { PostalCode: '69200', Area: 'ΑΜΑΞΑΔΕΣ ΡΟΔΟΠΗΣ, ΑΝΩ ΑΜΑΞΑΔΕΣ ΡΟΔΟΠΗΣ, ΑΣΤΡΑΙΑ ΡΟΔΟΠΗΣ, ΓΑΛΗΝΗ ΡΟΔΟΠΗΣ, ΔΙΑΛΑΜΠΗ ΡΟΔΟΠΗΣ, ΔΙΧΑΛΑ ΡΟΔΟΠΗΣ, ΕΥΘΥΜΟ ΡΟΔΟΠΗΣ, ΙΑΣΜΟΣ ΡΟΔΟΠΗΣ, ΙΠΠΙΚΟ ΡΟΔΟΠΗΣ, ΚΑΒΟΣ ΡΟΔΟΠΗΣ, ΚΟΠΤΕΡΟ ΡΟΔΟΠΗΣ, ΚΡΥΣΤΑΛΗ ΡΟΔΟΠΗΣ, ΛΗΝΟΣ ΡΟΔΟΠΗΣ, ΜΕΓΑ ΠΙΣΤΟ ΡΟΔΟΠΗΣ, ΜΕΛΛΙΤΑΙΝΑ ΡΟΔΟΠΗΣ, ΜΙΣΧΟΣ ΡΟΔΟΠΗΣ, ΜΟΝΑΧΟΙ ΡΟΔΟΠΗΣ, ΜΩΣΑΙΚΟ ΡΟΔΟΠΗΣ, ΠΑΝΕΠΙΣΤΗΜΙΟΥΠΟΛΗ ΡΟΔΟΠΗΣ, ΠΟΛΥΑΝΘΟΣ ΡΟΔΟΠΗΣ, ΠΟΛΥΑΡΝΟ ΡΟΔΟΠΗΣ, ΣΗΜΑ ΡΟΔΟΠΗΣ, ΣΩΣΤΗΣ ΡΟΔΟΠΗΣ, ΤΑΓΓΑΙΟ ΡΟΔΟΠΗΣ, ΤΑΛΗΣ ΡΟΔΟΠΗΣ, ΤΡΙΚΟΡΦΟ ΡΟΔΟΠΗΣ', Prefecture: 'Ροδόπης' },
    { PostalCode: '69300', Area: 'ΑΓΙΟΧΩΡΙ ΡΟΔΟΠΗΣ, ΑΓΡΑ ΡΟΔΟΠΗΣ, ΑΕΤΟΚΟΡΦΗ ΡΟΔΟΠΗΣ, ΑΕΤΟΛΟΦΟΣ ΡΟΔΟΠΗΣ, ΑΜΦΙΑ ΡΟΔΟΠΗΣ, ΑΝΩ ΑΣΚΗΤΕΣ ΡΟΔΟΠΗΣ, ΑΝΩ ΚΑΜΠΗ ΡΟΔΟΠΗΣ, ΑΡΙΣΒΗ ΡΟΔΟΠΗΣ, ΑΡΡΙΑΝΑ ΡΟΔΟΠΗΣ, ΑΡΣΑΚΕΙΟ ΡΟΔΟΠΗΣ, ΑΣΚΗΤΕΣ ΡΟΔΟΠΗΣ, ΑΤΑΡΝΗ ΕΒΡΟΥ, ΑΥΡΑ ΕΒΡΟΥ, ΒΕΛΚΙΟ ΡΟΔΟΠΗΣ, ΒΟΥΡΛΑ ΡΟΔΟΠΗΣ, ΔΑΡΜΕΝΗ ΡΟΔΟΠΗΣ, ΔΕΙΛΙΝΑ ΡΟΔΟΠΗΣ, ΔΙΩΝΗ ΡΟΔΟΠΗΣ, ΔΟΚΟΣ ΡΟΔΟΠΗΣ, ΔΡΟΣΙΑ ΡΟΔΟΠΗΣ, ΕΒΡΙΝΟΣ ΡΟΔΟΠΗΣ, ΕΣΟΧΗ ΡΟΔΟΠΗΣ, ΗΠΙΟ ΡΟΔΟΠΗΣ, ΙΑΣΙΟ ΡΟΔΟΠΗΣ, ΚΑΜΠΟΣ ΡΟΔΟΠΗΣ, ΚΑΣΣΙΤΕΡΑ ΡΟΔΟΠΗΣ, ΚΑΤΩ ΚΑΜΠΗ ΡΟΔΟΠΗΣ, ΚΕΡΑΣΙΑ ΚΕΧΡΟΥ ΡΟΔΟΠΗΣ, ΚΕΡΑΣΙΑ ΣΩΣΤΟΥ ΡΟΔΟΠΗΣ, ΚΕΧΡΟΣ ΡΟΔΟΠΗΣ, ΚΙΖΑΡΙΟ ΡΟΔΟΠΗΣ, ΚΙΝΥΡΑ ΡΟΔΟΠΗΣ, ΚΙΡΚΗ ΕΒΡΟΥ, ΚΟΜΑΡΟΣ ΕΒΡΟΥ, ΚΡΩΒΥΛΗ ΡΟΔΟΠΗΣ, ΛΟΦΑΡΙΟ ΡΟΔΟΠΗΣ, ΛΥΚΕΙΟ ΡΟΔΟΠΗΣ, ΜΕΣΤΗ ΕΒΡΟΥ, ΜΙΚΡΟ ΠΙΣΤΟ ΡΟΔΟΠΗΣ, ΜΙΚΡΟΣ ΚΕΧΡΟΣ ΡΟΔΟΠΗΣ, ΜΟΝΑΣΤΗΡΙ ΡΟΔΟΠΗΣ, ΜΥΣΤΑΚΑΣ ΡΟΔΟΠΗΣ, ΝΕΑ ΣΑΝΤΑ ΡΟΔΟΠΗΣ, ΝΕΔΑ ΡΟΔΟΠΗΣ, ΝΕΥΡΑ ΡΟΔΟΠΗΣ, ΝΙΚΗΤΕΣ ΡΟΔΟΠΗΣ, ΠΑΛΑΙΑ ΚΡΩΒΥΛΗ ΡΟΔΟΠΗΣ, ΠΑΡΑΛΙΑ ΚΡΩΒΥΛΗ ΡΟΔΟΠΗΣ, ΠΑΣΣΟΣ ΡΟΔΟΠΗΣ, ΠΕΡΑΜΑ ΕΒΡΟΥ, ΠΕΤΡΩΤΑ ΡΟΔΟΠΗΣ, ΠΛΑΓΙΑ ΡΟΔΟΠΗΣ, ΠΡΩΤΑΤΟ ΡΟΔΟΠΗΣ, ΡΑΓΑΔΑ ΡΟΔΟΠΗΣ, ΣΑΠΕΣ ΡΟΔΟΠΗΣ, ΣΚΑΛΩΜΑ ΡΟΔΟΠΗΣ, ΣΚΙΑΔΑ ΡΟΔΟΠΗΣ, ΣΤΑΘΜOΣ ΑΛΕΞΑΝΔΡΟΥΠΟΛΗΣ ΕΒΡΟΥ, ΣΤΡΟΦΗ ΡΟΔΟΠΗΣ, ΣΤΡΥΜΗ ΡΟΔΟΠΗΣ, ΣΥΚΟΡΑΧΗ ΕΒΡΟΥ, ΤΣΙΦΛΙΚΙ ΡΟΔΟΠΗΣ, ΤΣΟΥΚΑ ΡΟΔΟΠΗΣ, ΦΙΛΛΥΡΑ ΡΟΔΟΠΗΣ, ΧΑΜΗΛΟ ΚΕΧΡΟΥ ΡΟΔΟΠΗΣ, ΧΑΜΗΛΟ ΣΑΠΩΝ ΡΟΔΟΠΗΣ, ΧΑΡΑΔΡΑ ΡΟΔΟΠΗΣ, ΧΛΟΗ ΡΟΔΟΠΗΣ', Prefecture: 'Ροδόπης' },
    { PostalCode: '69400', Area: 'ΑΓΙΟΣ ΧΑΡΑΛΑΜΠΟΣ ΡΟΔΟΠΗΣ, ΑΛΚΥΩΝ ΡΟΔΟΠΗΣ, ΑΛΜΥΡΟΣ ΡΟΔΟΠΗΣ, ΑΜΠΕΛΑΚΙΑ ΡΟΔΟΠΗΣ, ΒΕΝΝΑ ΡΟΔΟΠΗΣ, ΕΡΓΑΝΗ ΡΟΔΟΠΗΣ, ΙΜΕΡΟΣ ΡΟΔΟΠΗΣ, ΛΕΥΚΕΣ ΡΟΔΟΠΗΣ, ΜΑΡΩΝΕΙΑ ΡΟΔΟΠΗΣ, ΜΙΡΑΝΑ ΡΟΔΟΠΗΣ, ΝΕΑ ΠΕΤΡΑ ΡΟΔΟΠΗΣ, ΞΥΛΑΓΑΝΗ ΡΟΔΟΠΗΣ, ΠΕΛΑΓΙΑ ΡΟΔΟΠΗΣ, ΠΛΑΤΑΝΙΤΗΣ ΡΟΔΟΠΗΣ, ΠΡΟΣΚΥΝΗΤΕΣ ΡΟΔΟΠΗΣ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΡΟΔΟΠΗΣ, ΣΑΛΜΩΝΗ ΡΟΔΟΠΗΣ, ΣΤΑΘΜΟΣ ΒΕΝΝΑΣ ΡΟΔΟΠΗΣ', Prefecture: 'Ροδόπης' },
    { PostalCode: '83100', Area: 'ΑΓΙΑ ΖΩΝΗ ΣΑΜΟΥ, ΑΓΙΑ ΜΑΡΚΕΛΛΑ ΣΑΜΟΥ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΣΑΜΟΥ, ΑΓΙΑ ΤΡΙΑΔΑ ΣΑΜΟΥ, ΑΗ ΘΑΝΑΣΗΣ ΣΑΜΟΥ, ΑΡΓΥΡΟΣ ΣΑΜΟΥ, ΑΥΛΑΚΙΑ ΒΟΥΡΛΙΩΤΩΝ ΣΑΜΟΥ, ΒΑΘΥ ΣΑΜΟΥ, ΒΑΡΕΛΛΑ ΣΑΜΟΥ, ΒΟΥΡΛΙΩΤΕΣ ΣΑΜΟΥ, ΔΙΑΠΟΡΤΙ ΣΑΜΟΥ, ΔΡΟΣΙΑ ΣΑΜΟΥ, ΖΕΡΒΟΥ ΣΑΜΟΥ, ΖΩΟΔΟΧΟΣ ΠΗΓΗ ΣΑΜΟΥ, ΚΑΜΑΡΑ (ΒΑΘΥ) ΣΑΜΟΥ, ΚΑΜΠΟΣ ΒΟΥΡΛΙΩΤΩΝ ΣΑΜΟΥ, ΚΑΣΟΝΗΣΙ ΣΑΜΟΥ, ΚΕΔΡΟ ΣΑΜΟΥ, ΚΛΗΜΑ ΣΑΜΟΥ, ΚΟΚΚΑΡΙ ΣΑΜΟΥ, ΚΟΥΜΑΡΙΩΝΑΣ ΣΑΜΟΥ, ΜΑΚΡΟΝΗΣΟ ΣΑΜΟΥ, ΜΑΡΓΑΡΙΤΕΣ ΣΑΜΟΥ, ΜΕΣΟΚΑΜΠΟΣ ΣΑΜΟΥ, ΜΟΝΗ ΒΡΟΝΤΑ ΣΑΜΟΥ, ΜΩΡΑΙΤΟΧΩΡΙ ΣΑΜΟΥ, ΝΙΚΟΛΑ ΣΑΜΟΥ, ΠΑΛΑΙΟΚΑΣΤΡΟ ΣΑΜΟΥ, ΠΑΝΑΙΤΣΑ ΣΑΜΟΥ, ΠΕΤΑΛΙΔΕΣ ΣΑΜΟΥ, ΠΟΣΕΙΔΩΝΙΟ ΣΑΜΟΥ, ΠΡΑΣΟΝΗΣΙ ΣΑΜΟΥ, ΣΑΜΟΣ ΣΑΜΟΥ, ΣΤΡΟΓΓΥΛΟ ΒΑΘΕΩΣ ΣΑΜΟΥ, ΤΟΥΡΚΟΜΥΛΩΝΑΣ ΣΑΜΟΥ, ΦΛΟΚΑ ΣΑΜΟΥ, ΧΑΡΑΥΓΗ ΣΑΜΟΥ, ΨΙΛΗ ΑΜΜΟΣ ΣΑΜΟΥ', Prefecture: 'Σάμου' },
    { PostalCode: '83102', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΣΑΜΟΥ, ΒΕΛΑΝΙΔΙΑ ΜΑΡΑΘΟΚΑΜΠΟΥ ΣΑΜΟΥ, ΔΡΑΚΑΙΟΙ ΣΑΜΟΥ, ΙΣΩΜΑΤΑ ΣΑΜΟΥ, ΚΑΛΛΙΘΕΑ ΣΑΜΟΥ, ΚΑΜΠΟΣ ΣΑΜΟΥ ΣΑΜΟΥ, ΚΑΜΠΟΣ ΣΚΟΥΡΑΙΚΩΝ ΣΑΜΟΥ, ΛΙΜΝΙΩΝΑΣ ΣΑΜΟΥ, ΜΑΡΑΘΟΚΑΜΠΟΣ ΣΑΜΟΥ, ΟΡΜΟΣ ΑΓΙΟΥ ΙΣΙΔΩΡΟΥ ΣΑΜΟΥ, ΟΡΜΟΣ ΜΑΡΑΘΟΚΑΜΠΟΥ ΣΑΜΟΥ, ΠΑΛΑΙΟΧΩΡΙ ΣΑΜΟΥ, ΣΕΒΑΣΤΑΙΙΚΑ ΣΑΜΟΥ', Prefecture: 'Σάμου' },
    { PostalCode: '83103', Area: 'ΑΒΑΝΤΙ ΣΑΜΟΥ, ΒΕΡΓΗ ΣΑΜΟΥ, ΓΙΩΝΙΔΕΣ ΣΑΜΟΥ, ΗΡΑΙΟ ΣΑΜΟΥ, ΚΑΡΠΟΒΟΛΟΣ ΣΑΜΟΥ, ΚΟΛΟΝΑ ΣΑΜΟΥ, ΚΥΡΓΙΑΝΝΗ ΣΑΜΟΥ, ΜΑΥΡΑΤΖΑΙΟΙ ΣΑΜΟΥ, ΜΟΝΗ ΜΕΓΑΛΗΣ ΠΑΝΑΓΙΑΣ ΣΑΜΟΥ, ΜΟΝΗ ΤΙΜΙΟΥ ΣΤΑΥΡΟΥ ΣΑΜΟΥ, ΜΥΛΟΙ ΣΑΜΟΥ, ΝΕΑ ΠΟΛΗ ΣΑΜΟΥ, ΠΑΓΩΝΔΑΣ ΣΑΜΟΥ, ΠΟΤΟΚΑΚΙ ΣΑΜΟΥ, ΠΟΥΝΤΕΣ ΣΑΜΟΥ, ΠΥΘΑΓΟΡΕΙΟ ΣΑΜΟΥ, ΡΙΖΟΒΡΑΧΟΣ ΣΑΜΟΥ, ΣΥΚΙΑ ΣΑΜΟΥ, ΧΩΡΑ ΣΑΜΟΥ', Prefecture: 'Σάμου' },
    { PostalCode: '83104', Area: 'ΑΠΟΣΤΟΛΟΣ ΠΑΥΛΟΣ ΣΑΜΟΥ, ΒΕΛΑΝΙΔΙΑ ΚΟΥΜΑΙΙΚΩΝ ΣΑΜΟΥ, ΚΑΛΟΓΕΡΙΚΟ ΣΑΜΟΥ, ΚΟΥΜΑΙΙΚΑ ΣΑΜΟΥ, ΚΟΥΜΑΡΑΔΑΙΟΙ ΣΑΜΟΥ, ΛΙΜΝΟΝΑΚΙ ΣΑΜΟΥ, ΜΕΣΟΓΕΙΟ ΣΑΜΟΥ, ΜΕΤΟΧΙ ΣΑΜΟΥ, ΝΕΟΧΩΡΙ ΣΑΜΟΥ, ΟΡΜΟΣ ΚΟΥΜΑΙΙΚΩΝ ΣΑΜΟΥ, ΠΑΝΔΡΟΣΟ ΣΑΜΟΥ, ΠΕΡΡΗ ΣΑΜΟΥ, ΠΕΥΚΟΣ ΣΑΜΟΥ, ΠΥΡΓΟΣ ΣΑΜΟΥ, ΣΑΜΙΟΠΟΥΛΑ ΝΗΣΟΣ ΣΑΜΟΥ, ΣΚΟΥΡΑΙΙΚΑ ΣΑΜΟΥ, ΣΠΑΘΑΡΑΙΟΙ ΣΑΜΟΥ', Prefecture: 'Σάμου' },
    { PostalCode: '83200', Area: 'ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΣΑΜΟΥ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΣΑΜΟΥ, ΑΓΙΟΣ ΗΛΙΑΣ ΣΑΜΟΥ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΣΑΜΟΥ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΚΑΡΛΟΒΑΣΙΟΥ ΣΑΜΟΥ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΝΗΣΟΣ ΣΑΜΟΥ, ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΣΑΜΟΥ ΣΑΜΟΥ, ΑΜΠΕΛΟΣ ΣΑΜΟΥ, ΑΣΠΡΟΧΟΡΤΙ ΣΑΜΟΥ, ΒΑΛΕΟΝΤΑΔΕΣ ΣΑΜΟΥ, ΒΡΥΣΕΣ ΚΟΝΤΑΚΑΙΚΩΝ ΣΑΜΟΥ, ΓΑΛΑΖΙΟ ΣΑΜΟΥ, ΚΑΡΛΟΒΑΣΙ ΣΑΜΟΥ, ΚΑΣΤΑΝΕΑ ΣΑΜΟΥ, ΚΟΝΤΑΙΙΚΑ ΣΑΜΟΥ, ΚΟΝΤΑΚΑΙΙΚΑ ΣΑΜΟΥ, ΚΟΣΜΑΔΑΙΟΙ ΣΑΜΟΥ, ΛΕΚΑ ΣΑΜΟΥ, ΛΙΒΑΔΑΚΙ ΣΑΜΟΥ, ΜΑΝΟΛΑΤΕΣ ΣΑΜΟΥ, ΜΟΝΗ ΠΡΟΦΗΤΗ ΗΛΙΑ ΣΑΜΟΥ, ΝΕΟ ΚΑΡΛΟΒΑΣΙ ΣΑΜΟΥ, ΝΙΚΟΛΟΥΔΕΣ ΣΑΜΟΥ, ΠΛΑΤΑΝΟΣ (ΒΑΘΥ) ΣΑΜΟΥ, ΠΛΑΤΑΝΟΣ ΚΑΡΛΟΒΑΣΙΟΥ ΣΑΜΟΥ, ΠΟΤΑΜΙ ΣΑΜΟΥ, ΣΑΚΚΟΥΛΑΙΙΚΑ ΣΑΜΟΥ, ΣΟΥΡΗΔΕΣ ΣΑΜΟΥ, ΣΤΑΥΡΙΝΗΔΕΣ ΣΑΜΟΥ, ΥΔΡΟΥΣΣΑ ΣΑΜΟΥ, ΧΑΤΖΗΣΤΑΜΟΥΛΗΔΕΣ ΣΑΜΟΥ', Prefecture: 'Σάμου' },
    { PostalCode: '83300', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΠΕΡΔΙΚΙΟΥ ΣΑΜΟΥ, ΑΓΙΟΣ ΚΗΡΥΚΟΣ ΣΑΜΟΥ, ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΙΚΑΡΙΑΣ ΣΑΜΟΥ, ΒΑΡΔΑΡΑΔΕΣ ΣΑΜΟΥ, ΒΑΩΝΗ ΣΑΜΟΥ, ΕΞΩ ΦΑΡΟΣ ΣΑΜΟΥ, ΘΕΡΜΑ ΛΕΥΚΑΔΑΣ ΙΚΑΡΙΑΣ ΣΑΜΟΥ, ΘΕΡΜΑ ΣΑΜΟΥ, ΚΑΤΑΦΥΓΙΟ ΣΑΜΟΥ, ΚΙΟΝΙΟ ΣΑΜΟΥ, ΛΑΡΔΑΔΕΣ ΣΑΜΟΥ, ΛΙΒΑΔΙ ΣΑΜΟΥ, ΜΑΥΡΑΤΟ ΣΑΜΟΥ, ΜΑΥΡΙΚΑΤΟ ΣΑΜΟΥ, ΜΗΛΕΩΠΟ ΣΑΜΟΥ, ΜΟΝΗ ΛΕΥΚΑΔΑΣ ΕΥΑΓΓΕΛΙΣΜΟΣ ΣΑΜΟΥ, ΜΟΝΟΚΑΜΠΙΟ ΣΑΜΟΥ, ΞΥΛΟΣΥΡΤΗΣ ΣΑΜΟΥ, ΟΞΕΑ ΣΑΜΟΥ, ΠΕΡΔΙΚΙ ΣΑΜΟΥ, ΠΛΑΓΙΑ ΑΓ.ΚΗΡΥΚΟΥ ΣΑΜΟΥ, ΠΛΟΥΜΑΡΙ ΣΑΜΟΥ, ΤΣΟΥΡΕΔΕΣ ΣΑΜΟΥ, ΦΑΝΑΡΙ ΣΑΜΟΥ, ΧΡΥΣΟΣΤΟΜΟΣ ΣΑΜΟΥ', Prefecture: 'Σάμου' },
    { PostalCode: '83301', Area: 'ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΙΚΑΡΙΑΣ ΣΑΜΟΥ, ΑΓΙΟΣ ΠΟΛΥΚΑΡΠΟΣ ΣΑΜΟΥ, ΑΜΑΛΟ ΣΑΜΟΥ, ΑΡΜΕΝΙΣΤΗΣ ΡΑΧΩΝ ΣΑΜΟΥ, ΒΡΑΚΑΔΕΣ ΡΑΧΩΝ ΣΑΜΟΥ, ΓΙΑΛΙΣΚΑΡΙ ΡΑΧΩΝ ΣΑΜΟΥ, ΚΑΛΑΜΟΣ ΣΑΜΟΥ, ΚΑΡΕΣ ΡΑΧΩΝ ΣΑΜΟΥ, ΚΑΡΚΙΝΑΓΡΙ ΣΑΜΟΥ, ΚΑΣΤΑΝΙΕΣ ΡΑΧΩΝ ΣΑΜΟΥ, ΚΑΤΩ ΡΑΧΕΣ ΣΑΜΟΥ, ΚΟΥΝΙΑΔΟΙ ΡΑΧΩΝ ΣΑΜΟΥ, ΛΑΓΚΑΔΑ ΡΑΧΩΝ ΣΑΜΟΥ, ΛΑΨΑΧΑΔΕΣ ΡΑΧΩΝ ΣΑΜΟΥ, ΛΟΜΒΑΡΔΑΔΕΣ ΣΑΜΟΥ, ΜΑΓΓΑΝΙΤΗΣ ΣΑΜΟΥ, ΜΑΝΔΡΙΑ ΡΑΧΩΝ ΣΑΜΟΥ, ΜΑΥΡΙΑΝΝΟΣ ΡΑΧΩΝ ΣΑΜΟΥ, ΜΟΝΗ ΜΟΥΝΤΕ ΣΑΜΟΥ, ΝΑΝΟΥΡΑΣ ΣΑΜΟΥ, ΞΗΝΤΑ ΡΑΧΩΝ ΣΑΜΟΥ, ΠΕΖΙΟ ΡΑΧΩΝ ΣΑΜΟΥ, ΠΡΟΕΣΠΕΡΑ ΡΑΧΩΝ ΣΑΜΟΥ, ΠΡΟΦΗΤΗΣ ΗΛΙΑΣ ΡΑΧΩΝ ΣΑΜΟΥ, ΤΡΑΠΑΛΟ ΣΑΜΟΥ, ΤΣΑΚΑΔΕΣ ΡΑΧΩΝ ΣΑΜΟΥ, ΧΡΙΣΤΟΣ ΡΑΧΩΝ ΣΑΜΟΥ', Prefecture: 'Σάμου' },
    { PostalCode: '83302', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΕΥΔΗΛΟΥ ΣΑΜΟΥ, ΑΚΑΜΑΤΡΑ ΣΑΜΟΥ, ΑΡΕΘΟΥΣΑ ΣΑΜΟΥ, ΑΥΛΑΚΙ ΡΑΧΩΝ ΣΑΜΟΥ, ΔΑΦΝΗ ΣΑΜΟΥ, ΔΕΚΑΚΙΑ ΣΑΜΟΥ, ΔΡΟΥΤΣΟΥΛΑΣ ΣΑΜΟΥ, ΕΥΔΗΛΟΣ ΣΑΜΟΥ, ΚΑΛΑΜΟΝΑΡΙ ΣΑΜΟΥ, ΚΑΛΑΜΟΥΡΙΔΑ ΣΑΜΟΥ, ΚΑΜΠΟΣ ΙΚΑΡΙΑΣ ΣΑΜΟΥ, ΚΑΡΑΒΟΣΤΑΜΟ ΣΑΜΟΥ, ΚΕΡΑΜΕΙΟ ΣΑΜΟΥ, ΚΟΣΟΙΚΙΑ ΣΑΜΟΥ, ΚΡΕΜΑΣΤΗ ΣΑΜΟΥ, ΚΥΠΑΡΙΣΣΙ ΑΡΕΘΟΥΣΑΣ ΣΑΜΟΥ, ΚΥΠΑΡΙΣΣΙ ΣΑΜΟΥ, ΜΑΡΑΘΟ ΣΑΜΟΥ, ΞΑΝΘΗ ΙΚΑΡΙΑΣ ΣΑΜΟΥ, ΠΕΡΑ ΑΡΕΘΟΥΣΑ ΣΑΜΟΥ, ΠΗΓΗ ΣΑΜΟΥ, ΠΛΑΓΙΑ ΔΑΦΝΗΣ ΣΑΜΟΥ, ΣΤΑΒΛΟΣ ΣΑΜΟΥ, ΣΤΕΛΙ ΣΑΜΟΥ, ΦΟΙΝΙΚΑΣ ΣΑΜΟΥ, ΦΡΑΝΤΑΤΟ ΣΑΜΟΥ, ΦΥΤΕΜΑ ΣΑΜΟΥ', Prefecture: 'Σάμου' },
    { PostalCode: '83400', Area: 'ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΘΕΡΜΑΣΤΗΣ ΣΑΜΟΥ, ΑΓΙΟΣ ΜΗΝΑΣ ΝΗΣΟΣ ΣΑΜΟΥ, ΑΛΑΤΟΝΗΣΙ ΣΑΜΟΥ, ΑΝΘΡΩΠΟΦΑΣ ΣΑΜΟΥ, ΔΑΦΝΟΛΙΕΣ ΦΟΥΡΝΩΝ ΣΑΜΟΥ, ΘΥΜΑΙΝΑ ΝΗΣΟΣ ΣΑΜΟΥ, ΘΥΜΑΙΝΑΚΙ ΦΟΥΡΝΩΝ ΣΑΜΟΥ, ΚΑΜΑΡΙ ΦΟΥΡΝΩΝ ΣΑΜΟΥ, ΚΑΜΠΙ ΦΟΥΡΝΩΝ ΣΑΜΟΥ, ΚΑΜΠΙ ΧΡΥΣΟΜΗΛΕΑΣ ΦΟΥΡΝΩΝ ΣΑΜΟΥ, ΚΕΡΑΜΕΙΔΟΥ ΦΟΥΡΝΩΝ ΣΑΜΟΥ, ΚΙΣΗΡΙΑ ΣΑΜΟΥ, ΜΑΚΡΟΝΗΣΙ ΣΑΜΟΥ, ΜΙΚΡΟΣ ΑΝΘΡΩΠΟΦΑΓΟΣ ΣΑΜΟΥ, ΠΛΑΓΙΑ ΦΟΥΡΝΩΝ ΣΑΜΟΥ, ΠΛΑΚΑ ΣΑΜΟΥ, ΠΛΑΚΑΚΙ ΣΑΜΟΥ, ΣΤΡΟΓΓΥΛΟ ΦΟΥΡΝΩΝ ΣΑΜΟΥ, ΦΟΥΡΝΟΙ ΝΗΣΟΣ ΣΑΜΟΥ, ΧΡΥΣΟΜΗΛΕΑ ΦΟΥΡΝΩΝ ΣΑΜΟΥ', Prefecture: 'Σάμου' },
    { PostalCode: '62041', Area: 'ΔΟΜΙΡΟΣ ΣΕΡΡΩΝ, ΜΙΚΡΟ ΣΟΥΛΙ ΣΕΡΡΩΝ, ΝΕΑ ΦΥΛΗ ΣΕΡΡΩΝ, ΠΑΛΑΙΟΚΩΜΗ ΣΕΡΡΩΝ, ΡΟΔΟΛΙΒΟΣ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '62042', Area: 'ΑΓΡΙΑΝΗ ΣΕΡΡΩΝ, ΔΗΜΗΤΡΑ ΣΕΡΡΩΝ, ΜΕΣΟΡΡΑΧΗ ΣΕΡΡΩΝ, ΝΕΑ ΖΙΧΝΗ ΣΕΡΡΩΝ, ΣΚΟΠΙΑ ΣΕΡΡΩΝ, ΣΦΕΛΙΝΟΣ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '62047', Area: 'ΑΓΓΙΣΤΑ ΣΕΡΡΩΝ, ΑΝΩ ΣΥΜΒΟΛΗ ΣΕΡΡΩΝ, ΗΛΙΟΚΩΜΗ ΣΕΡΡΩΝ, ΚΟΡΜΙΣΤΑ ΣΕΡΡΩΝ, ΚΡΗΝΙΔΑ ΣΕΡΡΩΝ, ΜΟΝΗ ΕΙΚΟΣΙΦΟΙΝΙΣΣΗΣ ΣΕΡΡΩΝ, ΝΕΑ ΜΠΑΦΡΑ ΣΕΡΡΩΝ, ΠΡΩΤΗ ΣΕΡΡΩΝ, ΣΥΜΒΟΛΗ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '62049', Area: 'ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΣΕΡΡΩΝ, ΑΗΔΟΝΟΧΩΡΙ ΣΕΡΡΩΝ, ΕΥΚΑΡΠΙΑ ΣΕΡΡΩΝ, ΙΒΗΡΑ ΣΕΡΡΩΝ, ΜΑΥΡΟΘΑΛΑΣΣΑ ΣΕΡΡΩΝ, ΤΡΑΓΙΛΟΣ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '62055', Area: 'ΑΝΩ ΠΟΡΟΙΑ ΣΕΡΡΩΝ, ΚΑΛΟΧΩΡΙ ΣΕΡΡΩΝ, ΚΑΣΤΑΝΟΥΣΣΑ ΣΕΡΡΩΝ, ΚΑΤΩ ΠΟΡΟΙΑ ΣΕΡΡΩΝ, ΚΕΡΚΙΝΗ ΣΕΡΡΩΝ, ΛΙΒΑΔΙΑ ΣΕΡΡΩΝ, ΜΑΚΡΙΝΙΤΣΑ ΣΕΡΡΩΝ, ΜΟΝΑΣΤΗΡΑΚΙ ΣΕΡΡΩΝ, ΝΕΟΧΩΡΙ ΣΙΝΤΙΚΗΣ ΣΕΡΡΩΝ, ΠΑΝΑΓΙΑ ΜΑΚΡΙΝΙΤΣΑΣ ΣΕΡΡΩΝ, ΠΛΑΤΑΝΑΚΙΑ ΣΕΡΡΩΝ, ΣΙΔΗΡΟΧΩΡΙ ΣΕΡΡΩΝ, ΣΤΑΥΡΟΔΡΟΜΙ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '62100', Area: 'ΑΓΙΑ ΕΛΕΝΗ ΣΕΡΡΩΝ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΣΕΡΡΩΝ, ΑΔΕΛΦΙΚΟ ΣΕΡΡΩΝ, ΑΝΩ ΒΡΟΝΤΟΥ ΣΕΡΡΩΝ, ΑΝΩ ΚΑΜΗΛΑ ΣΕΡΡΩΝ, ΑΝΩ ΟΡΕΙΝΗ ΣΕΡΡΩΝ, ΒΑΛΤΟΤΟΠΙ ΣΕΡΡΩΝ, ΒΑΜΒΑΚΟΥΣΣΑ ΣΕΡΡΩΝ, ΕΛΑΙΩΝΑΣ ΣΕΡΡΩΝ, ΕΠΤΑΜΥΛΟΙ ΣΕΡΡΩΝ, ΚΑΛΑ ΔΕΝΔΡΑ ΣΕΡΡΩΝ, ΚΑΤΩ ΚΑΜΗΛΑ ΣΕΡΡΩΝ, ΚΑΤΩ ΜΕΤΟΧΙ ΣΕΡΡΩΝ, ΚΑΤΩ ΜΗΤΡΟΥΣΙ ΣΕΡΡΩΝ, ΚΑΤΩ ΧΡΙΣΤΟΣ ΣΕΡΡΩΝ, ΚΟΥΒΟΥΚΛΙΟ ΣΕΡΡΩΝ, ΚΟΥΜΑΡΙΑ ΣΕΡΡΩΝ, ΚΡΙΝΟΣ ΣΕΡΡΩΝ, ΚΩΝΣΤΑΝΤΙΝΑΤΟ ΣΕΡΡΩΝ, ΛΕΥΚΩΝΑΣ ΣΕΡΡΩΝ, ΜΑΡΜΑΡΑΣ ΣΕΡΡΩΝ, ΜΕΣΟΚΩΜΗ ΣΕΡΡΩΝ, ΜΗΤΡΟΥΣΙ ΣΕΡΡΩΝ, ΜΟΝΗ ΤΙΜΙΟΥ ΠΡΟΔΡΟΜΟΥ ΣΕΡΡΩΝ, ΜΟΝΟΒΡΥΣΗ ΣΕΡΡΩΝ, ΜΟΝΟΚΚΛΗΣΙΑ ΣΕΡΡΩΝ, ΝΕΑ ΤΥΡΟΛΟΗ ΣΕΡΡΩΝ, ΝΕΟ ΣΟΥΛΙ ΣΕΡΡΩΝ, ΝΕΟΧΩΡΙ ΣΕΡΡΩΝ, ΞΗΡΟΤΟΠΟΣ ΣΕΡΡΩΝ, ΟΙΝΟΥΣΣΑ ΣΕΡΡΩΝ, ΟΡΕΙΝΗ ΣΕΡΡΩΝ, ΠΑΡΑΛΙΜΝΙΟ ΣΕΡΡΩΝ, ΠΕΠΟΝΙΑ ΣΕΡΡΩΝ, ΠΡΟΒΑΤΑΣ ΣΕΡΡΩΝ, ΣΕΡΡΕΣ ΣΕΡΡΩΝ, ΣΚΟΤΟΥΣΣΑ ΣΕΡΡΩΝ, ΣΚΟΥΤΑΡΙ ΣΕΡΡΩΝ, ΧΙΟΝΟΧΩΡΙ ΣΕΡΡΩΝ, ΧΡΥΣΟΠΗΓΗ ΣΕΡΡΩΝ, ΨΥΧΙΚΟ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '62121', Area: 'ΣΕΡΡΕΣ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '62122', Area: 'ΣΕΡΡΕΣ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '62123', Area: 'ΣΕΡΡΕΣ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '62124', Area: 'ΣΕΡΡΕΣ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '62125', Area: 'ΣΕΡΡΕΣ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '62200', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΣΕΡΡΩΝ, ΑΝΘΗ ΣΕΡΡΩΝ, ΑΧΙΝΟΣ ΣΕΡΡΩΝ, ΒΕΡΓΗ ΣΕΡΡΩΝ, ΔΑΦΝΗ ΣΕΡΡΩΝ, ΔΗΜΗΤΡΙΤΣΙ ΣΕΡΡΩΝ, ΖΕΡΒΟΧΩΡΙ ΣΕΡΡΩΝ, ΘΕΡΜΑ ΣΕΡΡΩΝ, ΚΑΣΤΑΝΟΧΩΡΙ ΣΕΡΡΩΝ, ΛΑΓΚΑΔΙ ΣΕΡΡΩΝ, ΛΕΥΚΟΤΟΠΟΣ ΣΕΡΡΩΝ, ΛΥΓΑΡΙΑ ΣΕΡΡΩΝ, ΝΙΓΡΙΤΑ ΣΕΡΡΩΝ, ΝΙΚΟΚΛΕΙΑ ΣΕΡΡΩΝ, ΟΡΕΣΚΕΙΑ ΣΕΡΡΩΝ, ΠΑΤΡΙΚΙΟ ΣΕΡΡΩΝ, ΣΗΣΑΜΙΑ ΣΕΡΡΩΝ, ΣΙΤΟΧΩΡΙ ΣΕΡΡΩΝ, ΤΕΡΠΝΗ ΣΕΡΡΩΝ, ΦΛΑΜΠΟΥΡΟ ΣΕΡΡΩΝ, ΧΟΥΜΝΙΚΟ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '62300', Area: 'ΑΓΚΙΣΤΡΟ ΣΕΡΡΩΝ, ΑΧΛΑΔΟΧΩΡΙ ΣΕΡΡΩΝ, ΒΑΜΒΑΚΟΦΥΤΟ ΣΕΡΡΩΝ, ΓΕΦΥΡΟΥΔΙ ΣΕΡΡΩΝ, ΘΕΡΜΟΠΗΓΗ ΣΕΡΡΩΝ, ΚΑΜΑΡΩΤΟ ΣΕΡΡΩΝ, ΚΑΠΝΟΦΥΤΟ ΣΕΡΡΩΝ, ΚΑΡΥΔΟΧΩΡΙ ΣΕΡΡΩΝ, ΚΑΤΩ ΑΜΠΕΛΙΑ ΣΕΡΡΩΝ, ΛΟΥΤΡΑ ΣΙΔΗΡΟΚΑΣΤΡΟΥ ΣΕΡΡΩΝ, ΜΕΛΕΝΙΚΙΤΣΙ ΣΕΡΡΩΝ, ΠΑΛΑΙΟΚΑΣΤΡΟ ΣΕΡΡΩΝ, ΠΡΟΜΑΧΩΝΑΣ ΣΕΡΡΩΝ, ΣΙΔΗΡΟΚΑΣΤΡΟ ΣΕΡΡΩΝ, ΣΤΑΘΜΟΣ ΣΙΔΗΡΟΚΑΣΤΡΟΥ ΣΕΡΡΩΝ, ΣΤΡΥΜΟΝΟΧΩΡΙ ΣΕΡΡΩΝ, ΣΧΙΣΤΟΛΙΘΟΣ ΣΕΡΡΩΝ, ΦΑΙΑ ΠΕΤΡΑ ΣΕΡΡΩΝ, ΧΑΡΟΠΟ ΣΕΡΡΩΝ, ΧΟΡΤΕΡΟ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '62400', Area: 'ΑΜΜΟΥΔΙΑ ΣΕΡΡΩΝ, ΑΝΑΓΕΝΝΗΣΗ ΣΕΡΡΩΝ, ΒΑΛΤΕΡΟ ΣΕΡΡΩΝ, ΒΑΜΒΑΚΙΑ ΣΕΡΡΩΝ, ΔΑΣΟΧΩΡΙ ΣΕΡΡΩΝ, ΗΡΑΚΛΕΙΑ ΣΕΡΡΩΝ, ΚΑΡΠΕΡΗ ΣΕΡΡΩΝ, ΚΟΙΜΗΣΗ ΣΕΡΡΩΝ, ΛΙΘΟΤΟΠΟΣ ΣΕΡΡΩΝ, ΛΙΜΝΟΧΩΡΙ ΣΕΡΡΩΝ, ΠΟΝΤΙΣΜΕΝΟ ΣΕΡΡΩΝ, ΣΑΡΑΚΑΤΣΑΝΑΙΙΚΟ ΣΕΡΡΩΝ, ΣΙΜΩΝΑΣ ΣΕΡΡΩΝ, ΧΕΙΜΑΡΡΟΣ ΣΕΡΡΩΝ, ΧΡΥΣΟΧΩΡΑΦΑ ΣΕΡΡΩΝ, ΨΩΜΟΤΟΠΙ ΣΕΡΡΩΝ', Prefecture: 'Σερρών' },
    { PostalCode: '42030', Area: 'ΜΕΓΑΛΑ ΚΑΛΥΒΙΑ ΤΡΙΚΑΛΩΝ', Prefecture: 'Τρικάλων' },
    { PostalCode: '42031', Area: 'ΓΡΙΖΑΝΟ ΤΡΙΚΑΛΩΝ, ΖΑΡΚΟΣ ΤΡΙΚΑΛΩΝ, ΚΕΡΑΜΙΔΙ ΤΡΙΚΑΛΩΝ, ΚΛΟΚΟΤΟΣ ΤΡΙΚΑΛΩΝ, ΠΑΝΑΓΙΤΣΑ ΤΡΙΚΑΛΩΝ, ΠΗΝΕΙΑΣ ΤΡΙΚΑΛΩΝ, ΦΑΡΚΑΔΩΝΑ ΤΡΙΚΑΛΩΝ', Prefecture: 'Τρικάλων' },
    { PostalCode: '42032', Area: 'ΑΓΙΟΣ ΒΗΣΣΑΡΙΩΝ ΤΡΙΚΑΛΩΝ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΕΛΑΤΗΣ ΤΡΙΚΑΛΩΝ, ΑΓΙΟΣ ΔΗΜΗΤΡΙΟΣ ΡΟΠΟΤΟΥ ΤΡΙΚΑΛΩΝ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΡΟΠΟΤΟΥ ΤΡΙΚΑΛΩΝ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΤΡΙΚΑΛΩΝ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΤΡΙΚΑΛΩΝ, ΑΓΙΟΣ ΠΡΟΚΟΠΙΟΣ ΤΡΙΚΑΛΩΝ, ΑΝΩ ΠΑΛΑΙΟΚΑΡΥΑ ΤΡΙΚΑΛΩΝ, ΒΑΚΑΡΙ ΔΕΣΗΣ ΤΡΙΚΑΛΩΝ, ΒΛΑΤΑΝΕΟΙ ΤΡΙΚΑΛΩΝ, ΒΛΑΧΑ ΤΡΙΚΑΛΩΝ, ΒΡΟΝΤΕΡΟ ΤΡΙΚΑΛΩΝ, ΔΕΣΗ ΤΡΙΚΑΛΩΝ, ΔΡΟΣΟΧΩΡΙ ΤΡΙΚΑΛΩΝ, ΕΛΑΤΗ ΤΡΙΚΑΛΩΝ, ΖΩΓΡΑΦΑΙΙΚΑ ΤΡΙΚΑΛΩΝ, ΙΣΙΩΜΑΤΑ ΤΡΙΚΑΛΩΝ, ΚΑΛΛΙΘΕΑ ΠΥΝΔΑΙΩΝ ΤΡΙΚΑΛΩΝ, ΚΑΛΟΓΗΡΟΙ ΤΡΙΚΑΛΩΝ, ΚΑΡΥΕΣ ΣΤΟΥΡΝΑΡΑΙΚΩΝ ΤΡΙΚΑΛΩΝ, ΚΑΣΤΑΝΕΑ ΣΤΟΥΡΝΑΡΑΙΙΚΩΝ ΤΡΙΚΑΛΩΝ, ΚΑΤΩ ΠΑΛΑΙΟΚΑΡΥΑ ΤΡΙΚΑΛΩΝ, ΚΟΤΡΩΝΙΟ ΤΡΙΚΑΛΩΝ, ΛΟΓΓΙΕΣ ΚΟΤΡΩΝΙΟΥ ΤΡΙΚΑΛΩΝ, ΛΟΓΓΙΕΣ ΡΟΠΟΤΟΥ ΤΡΙΚΑΛΩΝ, ΜΕΣΗ ΠΑΛΑΙΟΚΑΡΥΑ ΤΡΙΚΑΛΩΝ, ΜΟΝΗ ΔΟΥΣΙΚΟΥ ΤΡΙΚΑΛΩΝ, ΜΟΝΗ ΚΟΙΜΗΣΕΩΣ ΘΕΟΤΟΚΟΥ ΓΚΟΥΡΑΣ ΤΡΙΚΑΛΩΝ, ΝΕΡΑΙΔΟΧΩΡΙ ΤΡΙΚΑΛΩΝ, ΞΥΛΟΧΩΡΙ ΤΡΙΚΑΛΩΝ, ΠΑΛΑΙΟΧΩΡΙ ΠΥΝΔΑΙΩΝ ΤΡΙΚΑΛΩΝ, ΠΑΝΑΓΙΑ ΠΥΝΔΑΙΩΝ ΤΡΙΚΑΛΩΝ, ΠΑΝΑΓΙΑ ΡΟΠΟΤΟΥ ΤΡΙΚΑΛΩΝ, ΠΑΝΑΓΙΩΤΑΙΙΚΑ ΤΡΙΚΑΛΩΝ, ΠΕΡΤΟΥΛΙ ΤΡΙΚΑΛΩΝ, ΠΕΤΡΟΧΩΡΙ ΤΡΙΚΑΛΩΝ, ΠΟΛΥΘΕΑ ΡΟΠΟΤΟΥ ΤΡΙΚΑΛΩΝ, ΠΥΛΗ ΤΡΙΚΑΛΩΝ, ΠΥΡΡΑ ΤΡΙΚΑΛΩΝ, ΡΟΠΟΤΟ ΤΡΙΚΑΛΩΝ, ΣΤΟΥΡΝΑΡΑΙΙΚΑ ΤΡΙΚΑΛΩΝ, ΤΣΕΚΟΥΡΑ ΤΡΙΚΑΛΩΝ, ΦΟΡΤΩΣΙ ΤΡΙΚΑΛΩΝ, ΨΑΡΡΟ ΤΡΙΚΑΛΩΝ', Prefecture: 'Τρικάλων' },
    { PostalCode: '42100', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΤΡΙΚΑΛΩΝ, ΑΓΡΕΛΙΑ ΤΡΙΚΑΛΩΝ, ΑΜΜΟΥΔΙΑ ΤΡΙΚΑΛΩΝ, ΑΝΤΑΛΛΑΞΙΜΑ ΤΡΙΚΑΛΩΝ, ΑΠΟΣΤΟΛΟΙ ΤΡΙΚΑΛΩΝ, ΑΡΔΑΝΙΟ ΤΡΙΚΑΛΩΝ, ΒΑΛΑΜΑΝΔΡΙ ΤΡΙΚΑΛΩΝ, ΒΑΛΤΙΝΟ ΤΡΙΚΑΛΩΝ, ΓΕΝΕΣΙΟ ΤΡΙΚΑΛΩΝ, ΓΛΙΝΟΣ ΤΡΙΚΑΛΩΝ, ΓΟΜΦΟΙ ΤΡΙΚΑΛΩΝ, ΓΟΡΓΟΓΥΡΙ ΤΡΙΚΑΛΩΝ, ΔΕΝΔΡΟΧΩΡΙΟ ΤΡΙΚΑΛΩΝ, ΔΙΑΛΕΚΤΟ ΤΡΙΚΑΛΩΝ, ΔΙΛΟΦΟ ΓΟΡΓΟΓΥΡΙΟΥ ΤΡΙΚΑΛΩΝ, ΔΙΠΟΤΑΜΟΣ ΤΡΙΚΑΛΩΝ, ΔΡΟΣΕΡΟ ΤΡΙΚΑΛΩΝ, ΔΡΟΣΟΠΗΓΗ ΤΡΙΚΑΛΩΝ, ΕΛΕΥΘΕΡΟΧΩΡΙ ΤΡΙΚΑΛΩΝ, ΕΛΛΗΝΟΚΑΣΤΡΟ ΤΡΙΚΑΛΩΝ, ΕΞΑΛΟΦΟΣ ΤΡΙΚΑΛΩΝ, ΖΗΛΕΥΤΗ ΤΡΙΚΑΛΩΝ, ΚΑΛΟΝΕΡΙ ΤΡΙΚΑΛΩΝ, ΚΑΡΥΑΙ ΤΡΙΚΑΛΩΝ, ΚΑΤΩ ΕΛΑΤΗ ΤΡΙΚΑΛΩΝ, ΚΕΦΑΛΟΒΡΥΣΟ ΤΡΙΚΑΛΩΝ, ΚΗΠΑΚΙ ΤΡΙΚΑΛΩΝ, ΚΟΚΚΟΝΑ ΤΡΙΚΑΛΩΝ, ΚΟΡΗ ΤΡΙΚΑΛΩΝ, ΚΟΥΜΑΡΙΑ ΤΡΙΚΑΛΩΝ, ΚΡΗΝΙΤΣΑ ΤΡΙΚΑΛΩΝ, ΛΑΓΚΑΔΙΑ ΤΡΙΚΑΛΩΝ, ΛΕΠΤΟΚΑΡΥΑ ΤΡΙΚΑΛΩΝ ΤΡΙΚΑΛΩΝ, ΛΕΦΑΙΙΚΑ ΤΡΙΚΑΛΩΝ, ΛΙΛΟΠΡΑΣΟ ΤΡΙΚΑΛΩΝ, ΛΙΠΙΟΤΑ ΤΡΙΚΑΛΩΝ, ΛΟΓΓΑΚΙ ΤΡΙΚΑΛΩΝ, ΛΟΓΓΟΣ ΤΡΙΚΑΛΩΝ, ΛΥΓΑΡΙΑ ΤΡΙΚΑΛΩΝ, ΜΑΤΣΟΥΚΑΙΙΚΑ ΤΡΙΚΑΛΩΝ, ΜΕΓΑΛΟ ΚΕΦΑΛΟΒΡΥΣΟ ΤΡΙΚΑΛΩΝ, ΜΕΓΑΛΟΧΩΡΙΟ ΤΡΙΚΑΛΩΝ, ΜΕΓΑΡΧΗ ΤΡΙΚΑΛΩΝ, ΜΕΛΙΓΟΣ ΤΡΙΚΑΛΩΝ, ΜΕΣΙΑΚΑ ΤΡΙΚΑΛΩΝ, ΜΟΥΡΙΑ ΤΡΙΚΑΛΩΝ, ΝΟΜΗ ΤΡΙΚΑΛΩΝ, ΞΥΛΟΠΑΡΟΙΚΟ ΤΡΙΚΑΛΩΝ, ΟΥΡΑΝΟΣ ΤΡΙΚΑΛΩΝ, ΠΑΛΑΙΟΜΟΝΑΣΤΗΡΟ ΤΡΙΚΑΛΩΝ, ΠΑΛΑΙΟΠΥΡΓΟΣ ΤΡΙΚΑΛΩΝ, ΠΑΡΑΠΟΤΑΜΟΣ ΤΡΙΚΑΛΩΝ, ΠΑΤΟΥΛΙΑ ΤΡΙΚΑΛΩΝ, ΠΕΡΔΙΚΟΡΡΑΧΗ ΤΡΙΚΑΛΩΝ, ΠΕΤΡΟΠΟΡΟΣ ΤΡΙΚΑΛΩΝ, ΠΗΓΗ ΤΡΙΚΑΛΩΝ, ΠΙΑΛΕΙΑ ΤΡΙΚΑΛΩΝ, ΠΛΑΤΑΝΟΣ ΤΡΙΚΑΛΩΝ, ΠΡΙΝΟΣ ΤΡΙΚΑΛΩΝ, ΠΡΟΔΡΟΜΟΣ ΤΡΙΚΑΛΩΝ, ΠΥΡΓΕΤΟΣ ΤΡΙΚΑΛΩΝ, ΡΑΞΑ ΤΡΙΚΑΛΩΝ, ΡΙΖΑΡΕΙΟ ΤΡΙΚΑΛΩΝ, ΡΙΖΩΜΑ ΤΡΙΚΑΛΩΝ, ΡΟΓΚΙΑ ΤΡΙΚΑΛΩΝ, ΣΚΑΛΑ ΤΡΙΚΑΛΩΝ, ΣΥΚΕΑ ΤΡΙΚΑΛΩΝ, ΣΩΤΗΡΑ ΤΡΙΚΑΛΩΝ, ΤΑΞΙΑΡΧΕΣ ΤΡΙΚΑΛΩΝ, ΤΡΙΚΑΛΑ ΤΡΙΚΑΛΩΝ, ΦΑΝΕΡΩΜΕΝΗ ΤΡΙΚΑΛΩΝ, ΦΗΚΗ ΤΡΙΚΑΛΩΝ, ΦΙΛΥΡΑ ΤΡΙΚΑΛΩΝ, ΦΛΑΜΟΥΛΙΟ ΤΡΙΚΑΛΩΝ, ΦΩΤΑΔΑ ΤΡΙΚΑΛΩΝ, ΧΑΙΔΕΜΕΝΗ ΤΡΙΚΑΛΩΝ, ΧΡΥΣΑΥΓΗ ΤΡΙΚΑΛΩΝ', Prefecture: 'Τρικάλων' },
    { PostalCode: '42200', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΚΑΛΑΜΠΑΚΑΣ ΤΡΙΚΑΛΩΝ, ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΒΑΣΙΛΙΚΗΣ ΤΡΙΚΑΛΩΝ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΣΠΑΘΑΔΩΝ ΤΡΙΚΑΛΩΝ, ΑΓΝΑΝΤΙΑ ΤΡΙΚΑΛΩΝ, ΑΗΔΩΝΑ ΤΡΙΚΑΛΩΝ, ΑΜΠΕΛΙΑ ΚΛΕΙΝΟΥ ΤΡΙΚΑΛΩΝ, ΑΝΑΛΗΨΗ ΤΡΙΚΑΛΩΝ, ΑΥΡΑ ΤΡΙΚΑΛΩΝ, ΒΑΣΙΛΙΚΗ ΤΡΙΚΑΛΩΝ, ΒΙΤΟΥΜΑΣ ΤΡΙΚΑΛΩΝ, ΒΛΑΧΑΒΑ ΤΡΙΚΑΛΩΝ, ΓΛΥΚΟΜΗΛΕΑ ΤΡΙΚΑΛΩΝ, ΔΙΑΒΑ ΤΡΙΚΑΛΩΝ, ΘΕΟΠΕΤΡΑ ΤΡΙΚΑΛΩΝ, ΚΑΚΟΠΛΕΥΡΙ ΤΡΙΚΑΛΩΝ, ΚΑΛΑΜΠΑΚΑ ΤΡΙΚΑΛΩΝ, ΚΑΛΟΓΡΙΑΝΗ ΤΡΙΚΑΛΩΝ, ΚΑΣΤΡΑΚΙ ΤΡΙΚΑΛΩΝ, ΚΛΕΙΝΟΣ ΤΡΙΚΑΛΩΝ, ΚΟΝΑΚΙΑ ΤΡΙΚΑΛΩΝ, ΚΟΡΟΜΗΛΙΑ ΤΡΙΚΑΛΩΝ, ΚΟΡΥΔΑΛΛΟΣ ΤΡΙΚΑΛΩΝ, ΚΟΥΤΣΟΥΦΛΙΑΝΗ ΤΡΙΚΑΛΩΝ, ΚΡΥΑ ΒΡΥΣΗ ΤΡΙΚΑΛΩΝ, ΜΑΛΑΚΑΣΙ ΤΡΙΚΑΛΩΝ, ΜΕΓΑΛΗ ΚΕΡΑΣΕΑ ΤΡΙΚΑΛΩΝ, ΜΟΝΗ ΑΓΙΑΣ ΤΡΙΑΔΟΣ ΜΕΤΕΩΡΩΝ ΤΡΙΚΑΛΩΝ, ΜΟΝΗ ΑΓΙΟΥ ΣΤΕΦΑΝΟΥ ΜΕΤΕΩΡΩΝ ΤΡΙΚΑΛΩΝ, ΜΟΝΗ ΑΓΙΩΝ ΠΑΝΤΩΝ ΒΑΡΛΑΑΜ ΜΕΤΕΩΡΩΝ ΤΡΙΚΑΛΩΝ, ΜΟΝΗ ΒΙΤΟΥΜΑ ΜΕΤΕΩΡΩΝ ΤΡΙΚΑΛΩΝ, ΜΟΝΗ ΚΟΙΜΗΣΕΩΣ ΘΕΟΤΟΚΟΥ ΣΤΑΓΙΑΔΩΝ ΤΡΙΚΑΛΩΝ, ΜΟΝΗ ΜΕΤΑΜΟΡΦΩΣΕΩΣ ΣΩΤΗΡΑ ΜΕΤΕΩΡΩΝ ΤΡΙΚΑΛΩΝ, ΜΟΥΡΓΚΑΝΗ ΤΡΙΚΑΛΩΝ, ΜΠΑΣΙΑ ΚΛΕΙΝΟΥ ΤΡΙΚΑΛΩΝ, ΜΥΚΑΝΗ ΤΡΙΚΑΛΩΝ, ΝΕΑ ΖΩΗ ΑΥΡΑΣ ΤΡΙΚΑΛΩΝ, ΞΗΡΟΚΑΜΠΟΣ ΤΡΙΚΑΛΩΝ, ΟΞΥΝΕΙΑ ΤΡΙΚΑΛΩΝ, ΟΡΘΟΒΟΥΝΙ ΤΡΙΚΑΛΩΝ, ΠΑΛΑΙΟΧΩΡΙ ΚΑΛΑΜΠΑΚΑΣ ΤΡΙΚΑΛΩΝ, ΠΑΝΑΓΙΑ ΜΑΛΑΚΑΣΙΟΥ ΤΡΙΚΑΛΩΝ, ΠΕΡΙΣΤΕΡΑ ΤΡΙΚΑΛΩΝ, ΠΕΥΚΗ ΤΡΙΚΑΛΩΝ, ΠΛΑΤΑΝΙΣΤΟΣ ΤΡΙΚΑΛΩΝ, ΣΑΡΑΚΗΝΑ ΤΡΙΚΑΛΩΝ, ΣΠΑΘΑΔΕΣ ΤΡΙΚΑΛΩΝ, ΣΤΑΓΙΑΔΕΣ ΤΡΙΚΑΛΩΝ, ΤΡΙΦΥΛΛΙΑ ΤΡΙΚΑΛΩΝ, ΤΡΥΓΩΝΑ ΤΡΙΚΑΛΩΝ, ΧΡΥΣΙΝΟ ΤΡΙΚΑΛΩΝ, ΧΡΥΣΟΜΗΛΕΑ ΤΡΙΚΑΛΩΝ', Prefecture: 'Τρικάλων' },
    { PostalCode: '35001', Area: 'ΛΕΚΟΥΝΑ ΦΘΙΩΤΙΔΟΣ, ΜΑΛΕΣΙΝΑ ΦΘΙΩΤΙΔΟΣ, ΜΟΝΗ ΑΓΙΟΥ ΓΕΩΡΓΙΟΥ ΦΘΙΩΤΙΔΟΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35005', Area: 'ΘΕΟΛΟΓΟΣ ΦΘΙΩΤΙΔΟΣ, ΛΑΓΟΝΗΣΙ ΦΘΙΩΤΙΔΟΣ, ΜΑΖΙ ΦΘΙΩΤΙΔΟΣ, ΜΑΡΤΙΝΟ ΦΘΙΩΤΙΔΟΣ, ΜΕΤΑΛΛΕΙΑ ΛΑΡΥΜΝΑΣ ΦΘΙΩΤΙΔΟΣ, ΜΕΤΑΛΛΕΙΟ ΤΣΟΥΚΚΑΣ ΦΘΙΩΤΙΔΟΣ, ΜΙΚΡΟΒΙΒΟΣ ΦΘΙΩΤΙΔΟΣ, ΠΡΟΣΚΥΝΑΣ ΦΘΙΩΤΙΔΟΣ, ΤΡΑΓΑΝΑ ΦΘΙΩΤΙΔΟΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35006', Area: 'ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΦΘΙΩΤΙΔΟΣ, ΑΚΤΗ ΦΘΙΩΤΙΔΟΣ, ΑΣΠΡΟΝΕΡΙ ΦΘΙΩΤΙΔΟΣ, ΛΟΓΓΟΣ ΦΘΙΩΤΙΔΟΣ, ΝΕΟΧΩΡΙ ΑΓΙΟΥ ΚΩΝΣΤΑΝΤΙΝΟΥ ΦΘΙΩΤΙΔΟΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35008', Area: 'ΚΑΜΕΝΑ ΒΟΥΡΛΑ ΦΘΙΩΤΙΔΟΣ, ΝΕΟ ΘΡΟΝΙΟ ΦΘΙΩΤΙΔΟΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35009', Area: 'ΑΓΙΑ ΑΙΚΑΤΕΡΙΝΗ ΚΑΙΝΟΥΡΓΙΟΥ ΦΘΙΩΤΙΔΟΣ, ΑΓΙΑ ΤΡΙΑΔΑ ΛΟΚΡΙΔΟΣ ΦΘΙΩΤΙΔΟΣ, ΑΓΙΟΣ ΣΕΡΑΦΕΙΜ ΛΟΚΡΙΔΟΣ ΦΘΙΩΤΙΔΟΣ, ΑΓΙΟΣ ΧΑΡΑΛΑΜΠΟΣ ΛΟΚΡΙΔΟΣ ΦΘΙΩΤΙΔΟΣ, ΘΕΡΜΟΠΥΛΕΣ ΦΘΙΩΤΙΔΟΣ, ΚΑΙΝΟΥΡΓΙΟ ΦΘΙΩΤΙΔΟΣ, ΚΑΛΛΙΔΡΟΜΟ ΦΘΙΩΤΙΔΟΣ, ΚΑΡΑΒΙΔΙΑ ΦΘΙΩΤΙΔΟΣ, ΚΑΡΥΑ ΛΟΚΡΙΔΟΣ ΦΘΙΩΤΙΔΟΣ, ΚΑΡΥΑ ΡΟΔΩΝΙΑΣ ΦΘΙΩΤΙΔΟΣ, ΚΟΜΝΙΝΑ ΦΘΙΩΤΙΔΟΣ, ΛΟΥΤΡΑ ΘΕΡΜΟΠΥΛΩΝ ΦΘΙΩΤΙΔΟΣ, ΜΕΝΔΕΝΙΤΣΑ ΦΘΙΩΤΙΔΟΣ, ΜΩΛΟΣ ΦΘΙΩΤΙΔΟΣ, ΡΕΓΚΙΝΙΟ ΦΘΙΩΤΙΔΟΣ, ΣΚΑΡΦΕΙΑ ΦΘΙΩΤΙΔΟΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35010', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΔΟΜΟΚΟΥ ΦΘΙΩΤΙΔΟΣ, ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΔΟΜΟΚΟΥ ΦΘΙΩΤΙΔΟΣ, ΑΓΡΑΠΙΔΙΑ ΦΘΙΩΤΙΔΟΣ, ΑΝΑΒΡΑ ΜΑΓΝΗΣΙΑΣ, ΑΝΩ ΑΓΟΡΙΑΝΗ ΒΟΙΩΤΙΑΣ, ΑΧΛΑΔΙΑ ΦΘΙΩΤΙΔΟΣ, ΒΑΡΔΑΛΗ ΦΘΙΩΤΙΔΟΣ, ΒΕΛΕΣΙΩΤΕΣ ΦΘΙΩΤΙΔΟΣ, ΒΟΥΖΙΟ ΦΘΙΩΤΙΔΟΣ, ΓΑΒΡΑΚΙΑ ΦΘΙΩΤΙΔΟΣ, ΓΕΡΑΚΛΙΟ ΦΘΙΩΤΙΔΟΣ, ΔΟΜΟΚΟΣ ΦΘΙΩΤΙΔΟΣ, ΕΚΚΑΡΑ ΦΘΙΩΤΙΔΟΣ, ΕΛΕΟΥΣΑ ΦΘΙΩΤΙΔΟΣ, ΘΑΥΜΑΚΟ ΦΘΙΩΤΙΔΟΣ, ΚΑΡΥΕΣ ΦΘΙΩΤΙΔΟΣ, ΚΟΡΟΜΗΛΕΑ ΦΘΙΩΤΙΔΟΣ, ΛΕΥΚΑ ΦΘΙΩΤΙΔΟΣ, ΛΟΥΤΡΑ ΚΑΙΤΣΗΣ ΦΘΙΩΤΙΔΟΣ, ΜΑΚΡΟΛΙΒΑΔΟ ΦΘΙΩΤΙΔΟΣ, ΜΑΚΡΥΡΡΑΧΗ ΦΘΙΩΤΙΔΟΣ, ΜΑΝΤΑΣΙΑ ΦΘΙΩΤΙΔΟΣ, ΜΕΛΙΤΑΙΑ ΦΘΙΩΤΙΔΟΣ, ΜΕΤΑΛΛΕΙΟ ΟΜΒΡΙΑΚΗΣ ΦΘΙΩΤΙΔΟΣ, ΝΕΑ ΜΑΚΡΙΣΗ ΦΘΙΩΤΙΔΟΣ, ΝΕΟ ΜΟΝΑΣΤΗΡΙ ΦΘΙΩΤΙΔΟΣ, ΝΕΟΣ ΠΑΛΑΜΑΣ ΦΘΙΩΤΙΔΟΣ, ΝΕΟΧΩΡΙ ΔΟΜΟΚΟΥ ΦΘΙΩΤΙΔΟΣ, ΞΥΝΙΑΣ ΦΘΙΩΤΙΔΟΣ, ΟΜΒΡΙΑΚΗ ΦΘΙΩΤΙΔΟΣ, ΠΑΛΑΜΑΣ ΦΘΙΩΤΙΔΟΣ, ΠΑΝΑΓΙΑ ΦΘΙΩΤΙΔΟΣ, ΠΕΡΙΒΟΛΙ ΔΟΜΟΚΟΥ ΦΘΙΩΤΙΔΟΣ, ΠΕΤΡΙΛΙΑ ΦΘΙΩΤΙΔΟΣ, ΠΕΤΡΩΤΟ ΦΘΙΩΤΙΔΟΣ, ΠΟΛΥΔΕΝΔΡΙ ΦΘΙΩΤΙΔΟΣ, ΠΟΥΡΝΑΡΙ ΦΘΙΩΤΙΔΟΣ, ΣΚΟΠΙΑ ΦΑΡΣΑΛΩΝ ΛΑΡΙΣΗΣ, ΣΟΦΙΑΔΑ ΦΘΙΩΤΙΔΟΣ, ΣΤΑΘΜΟΣ ΔΟΜΟΚΟΥ ΦΘΙΩΤΙΔΟΣ, ΦΥΛΙΑΔΩΝ ΦΘΙΩΤΙΔΟΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35011', Area: 'ΑΡΧΑΝΙΟ ΦΘΙΩΤΙΔΟΣ, ΑΣΒΕΣΤΙΟ ΦΘΙΩΤΙΔΟΣ, ΒΙΤΟΛΗ ΦΘΙΩΤΙΔΟΣ, ΓΙΑΝΝΙΤΣΟΥ ΦΘΙΩΤΙΔΟΣ, ΓΡΑΜΜΕΝΗ ΦΘΙΩΤΙΔΟΣ, ΚΑΣΤΡΙ ΦΘΙΩΤΙΔΟΣ, ΛΙΤΟΣΕΛΟ ΦΘΙΩΤΙΔΟΣ, ΛΟΥΤΡΑ ΠΛΑΤΥΣΤΟΜΟΥ ΦΘΙΩΤΙΔΟΣ, ΜΑΚΡΑΚΩΜΗ ΦΘΙΩΤΙΔΟΣ, ΜΑΚΡΗ ΦΘΙΩΤΙΔΟΣ, ΠΑΛΑΙΑ ΓΙΑΝΝΙΤΣΟΥ ΦΘΙΩΤΙΔΟΣ, ΠΑΛΙΟΥΡΙ ΦΘΙΩΤΙΔΟΣ, ΠΑΠΠΑΣ (ΜΕΣΟΧΩΡΙ) ΦΘΙΩΤΙΔΟΣ, ΠΛΑΤΥΣΤΟΜΟ ΦΘΙΩΤΙΔΟΣ, ΠΤΕΛΕΑ ΦΘΙΩΤΙΔΟΣ, ΡΟΒΟΛΙΑΡΙ ΦΘΙΩΤΙΔΟΣ, ΤΡΙΛΟΦΟ ΦΘΙΩΤΙΔΟΣ, ΤΣΟΥΚΚΑ ΦΘΙΩΤΙΔΟΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35012', Area: 'ΛΑΡΥΜΝΑ ΦΘΙΩΤΙΔΟΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35014', Area: 'ΑΝΘΗΛΗ ΦΘΙΩΤΙΔΟΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35015', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΛΟΚΡΙΔΟΣ ΒΟΙΩΤΙΑΣ, ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΤΙΘΟΡΕΑΣ ΒΟΙΩΤΙΑΣ, ΑΝΘΟΧΩΡΙ ΒΟΙΩΤΙΑΣ, ΒΑΣΙΛΙΚΑ ΒΟΙΩΤΙΑΣ, ΚΑΤΩ ΤΙΘΟΡΕΑ ΒΟΙΩΤΙΑΣ, ΜΟΔΙ ΒΟΙΩΤΙΑΣ, ΠΑΡΟΡΙ ΒΟΙΩΤΙΑΣ, ΤΙΘΟΡΕΑ ΒΟΙΩΤΙΑΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35016', Area: 'ΑΛΩΝΙΑ ΦΘΙΩΤΙΔΟΣ, ΑΜΑΛΩΤΑ ΦΘΙΩΤΙΔΟΣ, ΑΡΓΥΡΟΧΩΡΙΟ ΦΘΙΩΤΙΔΟΣ, ΒΑΡΚΑ ΦΘΙΩΤΙΔΟΣ, ΒΑΣΙΛΙΚΑ ΦΘΙΩΤΙΔΟΣ, ΙΕΡΑ ΜΟΝΗ ΑΓΑΘΩΝΟΣ ΛΥΧΝΟΥ ΦΘΙΩΤΙΔΟΣ, ΚΑΠΝΟΧΩΡΙ ΦΘΙΩΤΙΔΟΣ, ΚΑΣΤΑΝΕΑ ΦΘΙΩΤΙΔΟΣ, ΛΑΔΙΚΟΥ ΦΘΙΩΤΙΔΟΣ, ΛΟΥΤΡΑ ΥΠΑΤΗΣ ΦΘΙΩΤΙΔΟΣ, ΛΥΧΝΟ ΦΘΙΩΤΙΔΟΣ, ΜΑΓΟΥΛΑ ΦΘΙΩΤΙΔΟΣ, ΜΕΞΙΑΤΕΣ ΦΘΙΩΤΙΔΟΣ, ΜΕΣΟΧΩΡΙ ΦΘΙΩΤΙΔΟΣ, ΝΕΑ ΥΠΑΤΗ ΦΘΙΩΤΙΔΟΣ, ΝΕΟΧΩΡΙ ΥΠΑΤΗΣ ΦΘΙΩΤΙΔΟΣ, ΠΕΡΙΒΟΛΙ ΣΠΕΡΧΕΙΑΔΟΣ ΦΘΙΩΤΙΔΟΣ, ΠΕΡΙΣΤΕΡΙ ΦΘΙΩΤΙΔΟΣ, ΠΥΡΓΟΣ ΥΠΑΤΗΣ ΦΘΙΩΤΙΔΟΣ, ΡΟΔΩΝΙΑ ΦΘΙΩΤΙΔΟΣ, ΣΥΚΑΣ ΦΘΙΩΤΙΔΟΣ, ΥΠΑΤΗ ΦΘΙΩΤΙΔΟΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35100', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΦΘΙΩΤΙΔΟΣ ΦΘΙΩΤΙΔΟΣ, ΑΓΡΑΔΟΥΛΑ ΦΘΙΩΤΙΔΟΣ, ΑΓΡΙΛΙΑ ΦΘΙΩΤΙΔΟΣ, ΑΜΟΥΡΙΟ ΦΘΙΩΤΙΔΟΣ, ΑΝΩ ΒΑΡΔΑΤΕΣ ΦΘΙΩΤΙΔΟΣ, ΑΝΩ ΔΑΜΑΣΤΑ ΦΘΙΩΤΙΔΟΣ, ΑΥΛΑΚΙΟ ΦΘΙΩΤΙΔΟΣ, ΓΟΡΓΟΠΟΤΑΜΟΣ ΦΘΙΩΤΙΔΟΣ, ΔΕΛΦΙΝΟ ΦΘΙΩΤΙΔΟΣ, ΔΙΒΡΗ ΦΘΙΩΤΙΔΟΣ, ΔΥΟ ΒΟΥΝΑ ΦΘΙΩΤΙΔΟΣ, ΕΛΕΥΘΕΡΟΧΩΡΙ ΦΘΙΩΤΙΔΟΣ, ΖΑΚΑΙΙΚΑ ΦΘΙΩΤΙΔΟΣ, ΖΗΛΕΥΤΟ ΦΘΙΩΤΙΔΟΣ, ΗΡΑΚΛΕΙΑ ΦΘΙΩΤΙΔΟΣ, ΚΑΛΑΜΑΚΙ ΦΘΙΩΤΙΔΟΣ, ΚΑΤΩ ΔΑΜΑΣΤΑ ΦΘΙΩΤΙΔΟΣ, ΚΟΜΜΑ ΦΘΙΩΤΙΔΟΣ, ΚΟΜΠΟΤΑΔΕΣ ΦΘΙΩΤΙΔΟΣ, ΚΟΥΜΑΡΙΤΣΙ ΦΘΙΩΤΙΔΟΣ, ΚΩΣΤΑΛΕΞΗΣ ΦΘΙΩΤΙΔΟΣ, ΛΑΜΙΑ ΦΘΙΩΤΙΔΟΣ, ΛΕΙΑΝΟΚΛΑΔΙ ΦΘΙΩΤΙΔΟΣ, ΛΙΜΟΓΑΡΔΙΟ ΦΘΙΩΤΙΔΟΣ, ΛΟΓΓΙΤΣΙΟ ΦΘΙΩΤΙΔΟΣ, ΛΥΓΑΡΙΑ ΦΘΙΩΤΙΔΟΣ, ΜΕΓΑΛΗ ΒΡΥΣΗ ΦΘΙΩΤΙΔΟΣ, ΜΟΝΗ ΑΝΤΙΝΙΤΣΗΣ ΚΑΛΑΜΑΚΙΟΥ ΦΘΙΩΤΙΔΟΣ, ΜΟΝΗ ΓΕΝΗΣΙΟΥ ΘΕΟΤΟΚΟΥ ΔΑΜΑΣΤΑΣ ΦΘΙΩΤΙΔΟΣ, ΜΟΝΗ ΓΟΡΓΟΕΠΗΚΟΟΥ ΦΘΙΩΤΙΔΟΣ, ΜΟΣΧΟΚΑΡΥΑ ΦΘΙΩΤΙΔΟΣ, ΜΟΣΧΟΧΩΡΙ ΦΘΙΩΤΙΔΟΣ, ΝΕΑ ΠΑΥΛΙΑΝΗ ΦΘΙΩΤΙΔΟΣ, ΝΕΟ ΚΡΙΚΕΛΛΟ ΦΘΙΩΤΙΔΟΣ, ΟΙΤΗ ΦΘΙΩΤΙΔΟΣ, ΠΑΛΑΙΟΧΩΡΙ ΛΙΜΟΓΑΡΔΙΟΥ ΦΘΙΩΤΙΔΟΣ, ΠΑΥΛΙΑΝΗ ΦΘΙΩΤΙΔΟΣ, ΡΟΔΙΤΣΑ ΦΘΙΩΤΙΔΟΣ, ΣΚΑΜΝΟΣ ΦΘΙΩΤΙΔΟΣ, ΣΤΑΥΡΟΣ ΦΘΙΩΤΙΔΟΣ, ΣΤΙΡΦΑΚΑ ΦΘΙΩΤΙΔΟΣ, ΥΔΡΟΜΥΛΟΣ ΦΘΙΩΤΙΔΟΣ, ΦΡΑΝΤΖΗΣ ΦΘΙΩΤΙΔΟΣ, ΧΑΛΒΑΝΤΖΑΙΙΚΑ ΦΘΙΩΤΙΔΟΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35131', Area: 'ΛΑΜΙΕΩΝ ΦΘΙΩΤΙΔΑΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35132', Area: 'ΛΑΜΙΕΩΝ ΦΘΙΩΤΙΔΑΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35133', Area: 'ΛΑΜΙΕΩΝ ΦΘΙΩΤΙΔΑΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35200', Area: 'ΑΓΙΑ ΑΙΚΑΤΕΡΙΝΗ ΛΟΚΡΙΔΟΣ ΦΘΙΩΤΙΔΟΣ, ΑΓΙΟΣ ΒΛΑΣΙΟΣ ΑΤΑΛΑΝΤΗΣ ΦΘΙΩΤΙΔΟΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΛΟΚΡΙΔΟΣ ΦΘΙΩΤΙΔΟΣ, ΑΓΝΑΝΤΗ ΦΘΙΩΤΙΔΟΣ, ΑΝΑΒΡΑ ΦΘΙΩΤΙΔΟΣ, ΑΡΚΙΤΣΑ ΦΘΙΩΤΙΔΟΣ, ΑΤΑΛΑΝΤΗ ΦΘΙΩΤΙΔΟΣ, ΑΤΑΛΑΝΤΟΝΗΣΙ ΦΘΙΩΤΙΔΟΣ, ΓΟΥΛΕΜΙΟ ΦΘΙΩΤΙΔΟΣ, ΕΞΑΡΧΟΣ ΦΘΙΩΤΙΔΟΣ, ΕΥΚΑΛΥΠΤΟΣ ΦΘΙΩΤΙΔΟΣ, ΖΕΛΙΟ ΦΘΙΩΤΙΔΟΣ, ΚΑΛΑΠΟΔΙ ΦΘΙΩΤΙΔΟΣ, ΚΑΛΥΨΩ ΦΘΙΩΤΙΔΟΣ, ΚΟΛΑΚΑ (ή ΚΥΡΤΩΝΗ) ΦΘΙΩΤΙΔΟΣ, ΚΥΠΑΡΙΣΣΙ ΦΘΙΩΤΙΔΟΣ, ΚΥΡΤΩΝΗ ΦΘΙΩΤΙΔΟΣ, ΜΕΓΑΠΛΑΤΑΝΟΣ ΦΘΙΩΤΙΔΟΣ, ΜΕΛΙΔΟΝΙ ΦΘΙΩΤΙΔΟΣ, ΜΟΝΗ ΑΓΙΩΝ ΑΝΑΡΓΥΡΩΝ ΑΤΑΛΑΝΤΗΣ ΦΘΙΩΤΙΔΟΣ, ΠΑΛΙΡΡΟΙΑ ΦΘΙΩΤΙΔΟΣ, ΣΚΑΛΑ ΦΘΙΩΤΙΔΟΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '35300', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΦΘΙΩΤΙΔΟΣ ΦΘΙΩΤΙΔΟΣ, ΑΝΥΔΡΟ ΦΘΙΩΤΙΔΟΣ, ΑΧΙΝΟΣ ΦΘΙΩΤΙΔΟΣ, ΒΑΣΙΛΙΚΗ ΦΘΙΩΤΙΔΟΣ, ΔΡΕΠΑΝΟ ΦΘΙΩΤΙΔΟΣ, ΔΡΟΣΙΑ ΦΘΙΩΤΙΔΟΣ, ΚΑΡΑΒΟΜΥΛΟΣ ΦΘΙΩΤΙΔΟΣ, ΚΟΥΒΕΛΑ ΦΘΙΩΤΙΔΟΣ, ΚΟΥΤΣΟΥΡΟ ΦΘΙΩΤΙΔΟΣ, ΜΕΛΙΣΣΙΑ ΦΘΙΩΤΙΔΟΣ, ΝΕΡΑΙΔΑ ΦΘΙΩΤΙΔΟΣ, ΠΑΛΑΙΟΚΕΡΑΣΕΑ ΦΘΙΩΤΙΔΟΣ, ΠΑΝΟΡΑΜΑ ΦΘΙΩΤΙΔΟΣ, ΠΑΡΑΛΙΑ ΑΧΙΝΟΥ ΦΘΙΩΤΙΔΟΣ, ΠΑΡΑΛΙΑ ΡΑΧΩΝ ΦΘΙΩΤΙΔΟΣ, ΠΕΤΑΡΑΔΕΣ ΦΘΙΩΤΙΔΟΣ, ΠΛΑΚΕΣ ΦΘΙΩΤΙΔΟΣ, ΠΛΑΤΑΝΙΑΣ ΦΘΙΩΤΙΔΟΣ, ΡΑΧΕΣ ΦΘΙΩΤΙΔΟΣ, ΣΚΑΣΜΑΔΑ ΦΘΙΩΤΙΔΟΣ, ΣΤΥΛΙΔΑ ΦΘΙΩΤΙΔΟΣ, ΦΟΥΡΝΟΙ ΦΘΙΩΤΙΔΟΣ, ΦΤΙΛΙΑ ΦΘΙΩΤΙΔΟΣ', Prefecture: 'Φθιώτιδας' },
    { PostalCode: '53070', Area: 'ΑΝΤΙΓΟΝΟ ΦΛΩΡΙΝΑΣ, ΜΑΝΙΑΚΙ ΦΛΩΡΙΝΑΣ, ΠΕΛΑΡΓΟΣ ΦΛΩΡΙΝΑΣ, ΦΑΡΑΓΓΙ ΦΛΩΡΙΝΑΣ, ΦΙΛΩΤΑΣ ΦΛΩΡΙΝΑΣ', Prefecture: 'Φλώρινας' },
    { PostalCode: '53071', Area: 'ΑΝΩ ΑΧΛΑΔΑ ΦΛΩΡΙΝΑΣ, ΑΧΛΑΔΑ ΦΛΩΡΙΝΑΣ, ΓΙΟΥΡΟΥΚΙ ΦΛΩΡΙΝΑΣ, ΜΕΛΙΤΗ ΦΛΩΡΙΝΑΣ, ΣΚΟΠΟΣ ΦΛΩΡΙΝΑΣ', Prefecture: 'Φλώρινας' },
    { PostalCode: '53073', Area: 'ΛΕΧΟΒΟ ΦΛΩΡΙΝΑΣ', Prefecture: 'Φλώρινας' },
    { PostalCode: '53077', Area: 'ΑΓΙΟΣ ΑΧΙΛΛΕΙΟΣ ΝΗΣΟΣ ΦΛΩΡΙΝΑΣ, ΑΓΙΟΣ ΓΕΡΜΑΝΟΣ ΦΛΩΡΙΝΑΣ, ΒΡΟΝΤΕΡΟ ΦΛΩΡΙΝΑΣ, ΚΑΛΛΙΘΕΑ ΦΛΩΡΙΝΑΣ, ΚΑΡΥΕΣ ΦΛΩΡΙΝΑΣ, ΛΑΙΜΟΣ ΦΛΩΡΙΝΑΣ, ΛΕΥΚΩΝΑΣ ΦΛΩΡΙΝΑΣ, ΜΗΛΕΩΝΑΣ ΦΛΩΡΙΝΑΣ, ΜΙΚΡΟΛΙΜΝΗ ΦΛΩΡΙΝΑΣ, ΟΞΥΑ ΦΛΩΡΙΝΑΣ, ΠΛΑΤΥ ΦΛΩΡΙΝΑΣ, ΠΥΛΗ ΑΓΙΟΥ ΑΧΙΛΛΕΙΟΥ ΦΛΩΡΙΝΑΣ, ΨΑΡΑΔΕΣ ΦΛΩΡΙΝΑΣ', Prefecture: 'Φλώρινας' },
    { PostalCode: '53100', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΦΛΩΡΙΝΑΣ, ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΦΛΩΡΙΝΑΣ, ΑΓΙΟΣ ΒΑΡΘΟΛΟΜΑΙΟΣ ΦΛΩΡΙΝΑΣ, ΑΚΡΙΤΑΣ ΦΛΩΡΙΝΑΣ, ΑΛΩΝΑ ΦΛΩΡΙΝΑΣ, ΑΜΜΟΧΩΡΙ ΦΛΩΡΙΝΑΣ, ΑΝΩ ΚΑΛΛΙΝΙΚΗ ΦΛΩΡΙΝΑΣ, ΑΝΩ ΚΛΕΙΝΕΣ ΦΛΩΡΙΝΑΣ, ΑΝΩ ΥΔΡΟΥΣΣΑ ΦΛΩΡΙΝΑΣ, ΑΡΜΕΝΟΧΩΡΙ ΦΛΩΡΙΝΑΣ, ΑΤΡΑΠΟΣ ΦΛΩΡΙΝΑΣ, ΔΡΟΣΟΠΗΓΗ ΦΛΩΡΙΝΑΣ, ΕΘΝΙΚΟ ΦΛΩΡΙΝΑΣ, ΙΤΕΑ ΦΛΩΡΙΝΑΣ, ΚΑΛΟΓΕΡΙΤΣΑ ΦΛΩΡΙΝΑΣ, ΚΑΤΩ ΚΑΛΛΙΝΙΚΗ ΦΛΩΡΙΝΑΣ, ΚΑΤΩ ΚΛΕΙΝΕΣ ΦΛΩΡΙΝΑΣ, ΚΛΑΔΟΡΡΑΧΗ ΦΛΩΡΙΝΑΣ, ΚΟΙΜΗΣΙΣ ΤΗΣ ΘΕΟΤΟΚΟΥ ΦΛΩΡΙΝΑΣ, ΚΟΛΧΙΚΗ ΦΛΩΡΙΝΑΣ, ΚΟΡΥΦΗ ΦΛΩΡΙΝΑΣ, ΚΡΑΤΕΡΟ ΦΛΩΡΙΝΑΣ, ΛΕΠΤΟΚΑΡΥΕΣ ΦΛΩΡΙΝΑΣ, ΜΑΡΙΝΑ ΦΛΩΡΙΝΑΣ, ΜΕΣΟΚΑΜΠΟΣ ΦΛΩΡΙΝΑΣ, ΜΕΣΟΝΗΣΙ ΦΛΩΡΙΝΑΣ, ΜΕΣΟΧΩΡΙ ΦΛΩΡΙΝΑΣ, ΝΕΟΣ ΚΑΥΚΑΣΟΣ ΦΛΩΡΙΝΑΣ, ΝΕΟΧΩΡΑΚΙ ΦΛΩΡΙΝΑΣ, ΝΙΚΗ ΦΛΩΡΙΝΑΣ, ΠΑΛΑΙΣΤΡΑ ΦΛΩΡΙΝΑΣ, ΠΑΠΠΑΓΙΑΝΝΗΣ ΦΛΩΡΙΝΑΣ, ΠΑΡΟΡΕΙΟ ΦΛΩΡΙΝΑΣ, ΠΕΡΑΣΜΑ ΦΛΩΡΙΝΑΣ, ΠΟΛΥΠΛΑΤΑΝΟΣ ΦΛΩΡΙΝΑΣ, ΠΟΛΥΠΟΤΑΜΟΣ ΦΛΩΡΙΝΑΣ, ΠΡΩΤΗ ΦΛΩΡΙΝΑΣ, ΣΙΜΟΣ ΙΩΑΝΝΙΔΗΣ ΦΛΩΡΙΝΑΣ, ΣΚΟΠΙΑ ΦΛΩΡΙΝΑΣ, ΤΡΙΑΝΤΑΦΥΛΛΙΑ ΦΛΩΡΙΝΑΣ, ΤΡΙΒΟΥΝΟ ΦΛΩΡΙΝΑΣ, ΤΡΙΠΟΤΑΜΟΣ ΦΛΩΡΙΝΑΣ, ΤΡΟΠΑΙΟΥΧΟΣ ΦΛΩΡΙΝΑΣ, ΥΔΡΟΥΣΣΑ ΦΛΩΡΙΝΑΣ, ΦΛΑΜΠΟΥΡΟ ΦΛΩΡΙΝΑΣ, ΦΛΩΡΙΝΑ ΦΛΩΡΙΝΑΣ', Prefecture: 'Φλώρινας' },
    { PostalCode: '53200', Area: 'ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΦΛΩΡΙΝΑΣ, ΑΜΥΝΤΑΙΟ ΦΛΩΡΙΝΑΣ, ΑΝΑΛΗΨΗ ΦΛΩΡΙΝΑΣ, ΒΕΓΟΡΑ ΦΛΩΡΙΝΑΣ, ΛΕΒΑΙΑ ΦΛΩΡΙΝΑΣ, ΠΕΤΡΕΣ ΦΛΩΡΙΝΑΣ, ΡΟΔΩΝΟ ΦΛΩΡΙΝΑΣ, ΣΩΤΗΡΑΣ ΦΛΩΡΙΝΑΣ', Prefecture: 'Φλώρινας' },
    { PostalCode: '53533', Area: 'ΠΑΥΛΟΥ ΜΕΛΑ ΘΕΣΣΑΛΟΝΙΚΗΣ', Prefecture: 'Φλώρινας' },
    { PostalCode: '33052', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΝΗΣΟΣ ΦΩΚΙΔΟΣ, ΑΨΗΦΙΑ ΝΗΣΟΣ ΦΩΚΙΔΟΣ, ΓΑΛΑΞΙΔΙ ΦΩΚΙΔΟΣ', Prefecture: 'Φωκίδας' },
    { PostalCode: '33053', Area: 'ΑΒΟΡΟΣ ΦΩΚΙΔΟΣ, ΑΙΓΙΤΙΟ ΦΩΚΙΔΟΣ, ΒΡΑΙΛΑ ΦΩΚΙΔΟΣ, ΔΑΦΝΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΔΙΑΚΟΠΙ ΑΙΤΩΛ/ΝΙΑΣ, ΔΩΡΙΚΟ ΦΩΚΙΔΟΣ, ΚΑΛΛΙΟ ΦΩΚΙΔΟΣ, ΚΑΡΟΥΤΕΣ ΦΩΚΙΔΟΣ, ΚΛΗΜΑ ΛΙΔΟΡΚΙΟΥ ΦΩΚΙΔΟΣ, ΚΟΝΙΑΚΟΣ ΦΩΚΙΔΟΣ, ΛΕΥΚΑ ΦΩΚΙΔΟΣ, ΛΕΥΚΑΔΙΤΙ ΦΩΚΙΔΟΣ, ΛΙΔΟΡΙΚΙ ΦΩΚΙΔΟΣ, ΜΑΛΑΝΔΡΙΝΟ ΦΩΚΙΔΟΣ, ΠΑΛΑΙΟΚΑΣΤΡΟ ΦΩΚΙΔΟΣ, ΠΕΝΤΑΠΟΛΗ ΦΩΚΙΔΟΣ, ΣΚΑΛΟΥΛΑ ΦΩΚΙΔΟΣ, ΣΥΚΕΑ ΦΩΚΙΔΟΣ, ΤΡΙΒΙΔΙ ΦΩΚΙΔΟΣ', Prefecture: 'Φωκίδας' },
    { PostalCode: '33054', Area: 'ΔΕΛΦΟΙ ΦΩΚΙΔΟΣ, ΚΑΛΑΝΙΑ ΒΟΙΩΤΙΑΣ, ΚΡΟΚΙ ΔΕΛΦΩΝ ΒΟΙΩΤΙΑΣ', Prefecture: 'Φωκίδας' },
    { PostalCode: '33056', Area: 'ΑΓΙΟΣ ΠΟΛΥΚΑΡΠΟΣ ΜΑΛΑΜΑΤΩΝ ΑΙΤΩΛ/ΝΙΑΣ, ΓΡΗΓΟΡΙΤΙΚΑ ΑΙΤΩΛ/ΝΙΑΣ, ΔΡΟΣΑΤΟ ΑΙΤΩΛ/ΝΙΑΣ, ΕΥΠΑΛΙΟ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΜΠΟΣ ΕΥΠΑΛΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΚΑΣΤΡΑΚΙ ΕΥΠΑΛΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΚΛΗΜΑ ΕΥΠΑΛΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΛΟΓΓΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΓΟΥΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΛΑΜΑΤΑ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΝΑΓΟΥΛΗ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΡΑΘΙΑΣ (ΞΥΔΙΑΣ) ΑΙΤΩΛ/ΝΙΑΣ, ΜΟΝΑΣΤΗΡΑΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΛΑΙΟΜΥΛΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΑΡΑΛΙΑ ΣΕΡΓΟΥΛΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΠΕΥΚΑΚΙ ΑΙΤΩΛ/ΝΙΑΣ, ΠΗΓΗ ΑΙΤΩΛ/ΝΙΑΣ, ΠΥΡΓΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΣΕΡΓΟΥΛΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΚΑΛΩΜΑ ΑΙΤΩΛ/ΝΙΑΣ, ΤΡΙΚΟΡΦΟ ΕΥΠΑΛΙΟΥ ΑΙΤΩΛ/ΝΙΑΣ, ΦΙΛΟΘΕΗ ΑΙΤΩΛ/ΝΙΑΣ, ΧΙΛΙΑΔΟΥ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Φωκίδας' },
    { PostalCode: '33057', Area: 'ΑΝΩ ΜΠΡΑΛΟΣ ΒΟΙΩΤΙΑΣ, ΑΠΟΣΤΟΛΙΑΣ ΒΟΙΩΤΙΑΣ, ΒΑΡΓΙΑΝΗ ΒΟΙΩΤΙΑΣ, ΓΡΑΒΙΑ ΒΟΙΩΤΙΑΣ, ΕΠΤΑΛΟΦΟΣ ΒΟΙΩΤΙΑΣ, ΚΑΛΟΣΚΟΠΗ ΒΟΙΩΤΙΑΣ, ΚΑΣΤΕΛΛΙΑ ΒΟΙΩΤΙΑΣ, ΛΙΛΑΙΑ ΒΟΙΩΤΙΑΣ, ΜΑΡΙΟΛΑΤΑ ΒΟΙΩΤΙΑΣ, ΜΠΡΑΛΟΣ ΒΟΙΩΤΙΑΣ, ΟΙΝΟΧΩΡΙ ΒΟΙΩΤΙΑΣ, ΠΑΛΑΙΟΧΩΡΙ ΔΩΡΙΕΩΝ ΒΟΙΩΤΙΑΣ, ΣΚΛΗΘΡΟ ΒΟΙΩΤΙΑΣ, ΣΤΑΘΜΟΣ ΔΟΜΟΚΟΥ ΒΟΙΩΤΙΑΣ', Prefecture: 'Φωκίδας' },
    { PostalCode: '33058', Area: 'ΑΓΙΑ ΕΙΡΗΝΗ ΚΑΛΛΙΘΕΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΙ ΠΑΝΤΕΣ ΦΩΚΙΔΟΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΝΗΣΟΣ ΦΩΚΙΔΟΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΚΑΛΛΙΘΕΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΝΗΣΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΓΙΟΣ ΣΠΥΡΙΔΩΝΑΣ ΚΑΛΛΙΘΕΑΣ ΑΙΤΩΛ/ΝΙΑΣ, ΑΜΥΓΔΑΛΙΑ ΦΩΚΙΔΟΣ, ΓΛΥΦΑΔΑ ΑΙΤΩΛ/ΝΙΑΣ, ΔΑΦΝΟΧΩΡΙ ΑΙΤΩΛ/ΝΙΑΣ, ΕΛΑΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΕΡΑΤΕΙΝΗ ΦΩΚΙΔΟΣ, ΚΑΛΛΙΘΕΑ ΑΙΤΩΛ/ΝΙΑΣ, ΚΛΟΒΙΝΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΜΑΚΡΙΝΗ ΦΩΚΙΔΟΣ, ΜΗΛΕΑ ΦΩΚΙΔΟΣ, ΝΕΟΙ ΑΓΙΟΙ  ΠΑΝΤΕΣ ΦΩΚΙΔΟΣ, ΟΡΜΟΣ ΛΕΜΟΝΙΑΣ ΦΩΚΙΔΟΣ, ΠΑΝΟΡΜΟΣ ΦΩΚΙΔΟΣ, ΠΑΡΑΛΙΑ ΑΓΙΩΝ ΠΑΝΤΩΝ ΦΩΚΙΔΟΣ, ΠΑΡΑΛΙΑ ΤΟΛΟΦΩΝΑ ΦΩΚΙΔΟΣ, ΠΡΑΣΟΥΔΙ  ΝΗΣΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΣΠΗΛΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΣΩΤΑΙΝΑ ΦΩΚΙΔΟΣ, ΤΟΛΟΦΩΝΑΣ ΦΩΚΙΔΟΣ, ΤΡΙΖΟΝΙΑ ΝΗΣΟΣ ΑΙΤΩΛ/ΝΙΑΣ, ΦΛΑΜΠΟΥΡΑΚΙΑ ΑΙΤΩΛ/ΝΙΑΣ, ΧΑΝΙΑ ΑΙΤΩΛ/ΝΙΑΣ', Prefecture: 'Φωκίδας' },
    { PostalCode: '33100', Area: 'ΑΓΙΑ ΕΥΘΥΜΙΑ ΦΩΚΙΔΟΣ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΑΜΦΙΣΣΑΣ ΦΩΚΙΔΟΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ ΑΜΦΙΣΣΑΣ ΦΩΚΙΔΟΣ, ΑΜΦΙΣΣΑ ΦΩΚΙΔΟΣ, ΒΙΝΙΑΝΗ ΦΩΚΙΔΟΣ, ΒΟΥΝΙΧΩΡΑ ΦΩΚΙΔΟΣ, ΔΡΟΣΟΧΩΡΙ ΦΩΚΙΔΟΣ, ΕΛΑΙΩΝΑΣ ΦΩΚΙΔΟΣ, ΜΟΝΑΣΤΗΡΙ ΠΡΟΣΗΛΙΟΥ ΦΩΚΙΔΟΣ, ΠΕΝΤΕΟΡΙΑ ΦΩΚΙΔΟΣ, ΠΡΟΣΗΛΙΟ ΦΩΚΙΔΟΣ, ΣΕΡΝΙΚΑΚΙ ΦΩΚΙΔΟΣ, ΤΡΙΤΑΙΑ ΦΩΚΙΔΟΣ', Prefecture: 'Φωκίδας' },
    { PostalCode: '33200', Area: 'ΑΓΙΟΣ ΑΘΑΝΑΣΙΟΣ ΦΩΚΙΔΟΣ, ΑΓΙΟΣ ΚΩΝΣΤΑΝΤΙΝΟΣ  ΝΗΣΟΣ ΦΩΚΙΔΟΣ, ΙΤΕΑ ΦΩΚΙΔΟΣ, ΚΙΡΡΑ ΦΩΚΙΔΟΣ', Prefecture: 'Φωκίδας' },
    { PostalCode: '63072', Area: 'ΒΑΛΤΙ ΧΑΛΚΙΔΙΚΗΣ, ΔΕΣΤΕΝΙΚΑ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΛΑΜΙΤΣΙ ΧΑΛΚΙΔΙΚΗΣ, ΚΟΥΦΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΠΑΡΑΛΙΑ ΣΥΚΕΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΠΛΑΤΑΝΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΣΑΡΤΗ ΧΑΛΚΙΔΙΚΗΣ, ΣΥΚΕΑ ΧΑΛΚΙΔΙΚΗΣ, ΤΟΡΩΝΗ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '63073', Area: 'ΑΓΙΑ ΑΝΑΣΤΑΣΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΑΓΙΟΣ ΠΡΟΔΡΟΜΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΓΑΛΑΡΙΝΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΓΑΛΑΤΙΣΤΑ ΧΑΛΚΙΔΙΚΗΣ, ΓΕΡΟΠΛΑΤΑΝΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΔΟΥΜΠΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΚΙΟΥΡΚΤΣΟΓΛΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΑΓΙΑΣ ΑΝΑΣΤΑΣΙΑΣ ΦΑΡΜΑΚΟΛΥΤΡΙΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΠΑΛΑΙΟΧΩΡΑ ΧΑΛΚΙΔΙΚΗΣ, ΡΙΖΑ ΧΑΛΚΙΔΙΚΗΣ, ΣΑΝΑ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '63074', Area: 'ΑΡΝΑΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΒΑΡΒΑΡΑ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΥΚΑΝΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΟΧΩΡΙ ΧΑΛΚΙΔΙΚΗΣ, ΠΑΛΑΙΟΧΩΡΙ ΧΑΛΚΙΔΙΚΗΣ, ΣΤΑΝΟΣ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '63075', Area: 'ΑΜΜΟΥΛΙΑΝΗ ΝΗΣΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΓΑΒΡΑΔΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΓΟΜΑΤΙ ΧΑΛΚΙΔΙΚΗΣ, ΔΡΕΝΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΕΛΕΥΘΕΡΟΝΗΣΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΙΕΡΙΣΣΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΚΟΥΜΙΤΣΑ ΧΑΛΚΙΔΙΚΗΣ, ΚΡΥΟΝΕΡΙ ΧΑΛΚΙΔΙΚΗΣ, ΛΙΜΑΝΙ ΑΜΜΟΥΛΙΑΝΗΣ ΧΑΛΚΙΔΙΚΗΣ, ΛΙΜΑΝΙ ΙΕΡΙΣΣΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΕΤΟΧΙ ΑΓΙΟΥ ΠΑΥΛΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΑ ΡΟΔΑ ΧΑΛΚΙΔΙΚΗΣ, ΞΗΡΟΠΟΤΑΜΟ ΧΑΛΚΙΔΙΚΗΣ, ΟΥΡΑΝΟΠΟΛΗ ΧΑΛΚΙΔΙΚΗΣ, ΣΚΑΛΑ ΝΕΩΝ ΡΟΔΩΝ ΧΑΛΚΙΔΙΚΗΣ, ΤΡΥΠΗΤΗ ΝΗΣΟΣ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '63077', Area: 'ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΝΕΑΣ ΣΚΙΩΝΗΣ ΧΑΛΚΙΔΙΚΗΣ, ΑΖΑΠΙΚΟ ΚΑΣΣΑΝΔΡΕΙΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΑΦΥΤΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΓΛΥΦΟΝΕΡΙ ΧΑΛΚΙΔΙΚΗΣ, ΕΛΑΝΗ ΧΑΛΚΙΔΙΚΗΣ, ΕΥΔΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΛΑΝΔΡΑ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΛΛΙΘΕΑ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΛΟΥΤΣΙΚΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΣΣΑΝΔΡΑ ΠΑΛΛΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΣΣΑΝΔΡΕΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΣΣΑΝΔΡΗΝΟ ΧΑΛΚΙΔΙΚΗΣ, ΚΡΥΟΠΗΓΗ ΧΑΛΚΙΔΙΚΗΣ, ΛΕΥΚΗ ΠΕΡΙΣΤΕΡΑ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΛΑΙ ΚΑΛΥΒΑΙ ΧΑΛΚΙΔΙΚΗΣ, ΜΠΟΥΛΑΜΑΤΣΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΑ ΣΚΙΩΝΗ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΑ ΦΩΚΑΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΠΟΣΕΙΔΙ ΧΑΛΚΙΔΙΚΗΣ, ΠΥΡΓΟΣ ΣΑΝΗ ΧΑΛΚΙΔΙΚΗΣ, ΣΑΝΗ ΧΑΛΚΙΔΙΚΗΣ, ΣΙΒΗΡΗ ΧΑΛΚΙΔΙΚΗΣ, ΣΚΑΛΑ ΦΟΥΡΚΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΣΩΛΗΝΑ ΧΑΛΚΙΔΙΚΗΣ, ΦΟΥΡΚΑ ΧΑΛΚΙΔΙΚΗΣ, ΦΥΛΑΚΕΣ ΚΑΡΑΚΑΛΛΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΦΥΛΑΚΕΣ ΚΑΣΣΑΝΔΡΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΦΥΛΑΚΕΣ ΞΕΝΟΦΩΝΤΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΧΡΟΥΣΟΥ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '63078', Area: 'ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΑΣΣΑ ΧΑΛΚΙΔΙΚΗΣ, ΒΟΥΡΒΟΥΡΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΔΙΑΠΟΡΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΡΥΔΙ ΧΑΛΚΙΔΙΚΗΣ, ΚΟΥΝΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΛΑΓΟΝΗΣΙ ΧΑΛΚΙΔΙΚΗΣ ΧΑΛΚΙΔΙΚΗΣ, ΛΑΤΟΥΡΑ ΧΑΛΚΙΔΙΚΗΣ, ΛΙΒΡΟΧΙΟ ΧΑΛΚΙΔΙΚΗΣ, ΜΕΤΑΓΚΙΤΣΙ ΧΑΛΚΙΔΙΚΗΣ, ΜΕΤΑΜΟΡΦΩΣΗ ΧΑΛΚΙΔΙΚΗΣ, ΟΡΜΟΣ ΠΑΝΑΓΙΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΠΛΑΝΑ ΧΑΛΚΙΔΙΚΗΣ, ΠΥΡΓΑΔΙΚΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΣΑΛΟΝΙΚΙΟΥ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '63080', Area: 'ΑΓΙΟΣ ΠΑΥΛΟΣ ΚΑΛΛΙΚΡΑΤΕΙΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΑΓΙΟΣ ΠΑΥΛΟΣ ΝΙΚΗΤΗΣ ΧΑΛΚΙΔΙΚΗΣ, ΕΛΑΙΟΧΩΡΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΚΡΗΝΗ ΧΑΛΚΙΔΙΚΗΣ, ΛΑΚΚΩΜΑ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΑ ΓΩΝΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΑ ΗΡΑΚΛΕΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΑ ΚΑΛΛΙΚΡΑΤΕΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΑ ΣΙΛΑΤΑ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΟΧΩΡΑΚΙ ΧΑΛΚΙΔΙΚΗΣ, ΠΕΤΡΑΛΩΝΑ ΧΑΛΚΙΔΙΚΗΣ, ΡΟΔΟΚΗΠΟΣ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '63081', Area: 'ΑΖΑΠΙΚΟ ΝΕΟΥ ΜΑΡΜΑΡΑ ΧΑΛΚΙΔΙΚΗΣ, ΓΑΛΗΝΗ ΝΕΟΥ ΜΑΡΜΑΡΑ ΧΑΛΚΙΔΙΚΗΣ, ΕΛΙΑ ΑΓΙΟΥ ΝΙΚΟΛΑΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΕΛΙΑ ΝΙΚΗΤΗ ΧΑΛΚΙΔΙΚΗΣ, ΘΕΣΗ ΚΑΛΥΒΑ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΛΟΓΡΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΛΑΓΟΜΑΝΤΡΑ ΧΑΛΚΙΔΙΚΗΣ, ΛΙΜΑΝΙ ΚΑΡΑ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΟΣ ΜΑΡΜΑΡΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΠΑΡΑΔΕΙΣΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΠΑΡΘΕΝΩΝΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΣΠΑΘΙΕΣ ΧΑΛΚΙΔΙΚΗΣ, ΣΤΥΛΑΔΑΡΙ ΧΑΛΚΙΔΙΚΗΣ, ΤΡΙΠΟΤΑΜΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΧΛΙΑΔΟΥ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '63085', Area: 'ΑΓΙΑ ΠΑΡΑΣΚΕΥΗ ΧΑΛΚΙΔΙΚΗΣ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΠΑΛΙΟΥΡΙΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΓΛΑΡΟΚΑΒΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΛΕΥΚΕΣ ΧΑΛΚΙΔΙΚΗΣ, ΛΟΥΤΡΑ ΑΓΙΑΣ ΠΑΡΑΣΚΕΥΗΣ ΧΑΛΚΙΔΙΚΗΣ, ΞΥΝΑ ΧΑΛΚΙΔΙΚΗΣ, ΠΑΛΙΟΥΡΙ ΧΑΛΚΙΔΙΚΗΣ, ΠΑΝΟΡΑΜΑ ΧΑΛΚΙΔΙΚΗΣ, ΠΕΥΚΟΧΩΡΙ ΧΑΛΚΙΔΙΚΗΣ, ΠΗΓΑΔΑΚΙ ΠΟΛΥΧΡΟΝΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΠΗΓΑΔΑΚΙ ΣΥΚΕΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΠΟΛΥΧΡΟΝΟ ΧΑΛΚΙΔΙΚΗΣ, ΦΡΑΜΑ ΧΑΛΚΙΔΙΚΗΣ, ΧΑΝΙΩΤΗΣ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '63086', Area: 'ΒΙΓΛΑ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΡΥΕΣ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΨΑΛΑ ΧΑΛΚΙΔΙΚΗΣ, ΜΕΤΟΧΙ ΧΟΥΡΜΙΤΣΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΒΑΤΟΠΕΔΙΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΕΣΦΙΓΜΕΝΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΙΒΗΡΩΝ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΚΑΡΑΚΑΛΛΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΚΟΥΤΛΟΥΜΟΥΣΙΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΜΕΓΙΣΤΗΣ ΛΑΥΡΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΠΑΝΤΟΚΡΑΤΟΡΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΣΤΑΥΡΟΝΙΚΗΤΑ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΦΙΛΟΘΕΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΧΙΛΙΑΝΔΑΡΙΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΠΡΟΒΑΤΑ-ΜΟΡΦΟΝΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΣΚΗΤΗ ΑΓΙΟΥ ΑΝΔΡΕΟΥ ΒΑΤΟΠΕΔΙΟΥ , ΧΑΛΚΙΔΙΚΗΣ, ΣΚΗΤΗ ΑΓΙΟΥ ΔΗΜΗΤΡΙΟΥ ΒΑΤΟΠΕΔΙΟΥ, ΧΑΛΚΙΔΙΚΗΣ, ΣΚΗΤΗ ΑΓΙΟΥ ΔΗΜΗΤΡΙΟΥ(ΛΑΚΟΣΚΗΤΗ) ΧΑΛΚΙΔΙΚΗΣ, ΣΚΗΤΗ ΑΓΙΟΥ ΠΑΝΤΕΛΕΗΜΟΝΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΣΚΗΤΗ ΠΡΟΦΗΤΟΥ ΗΛΙΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΣΚΗΤΗ ΤΙΜΙΟΥ ΠΡΟΔΡΟΜΟΥ ΙΒΗΡΩΝ ΧΑΛΚΙΔΙΚΗΣ, ΣΚΗΤΗ ΤΙΜΙΟΥ ΠΡΟΔΡΟΜΟΥ ΜΕΓΙΣΤΗΣ ΛΑΥΡΑΣ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '63087', Area: 'ΒΟΥΛΕΥΤΗΡΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΔΑΦΝΗ ΑΓΙΟΥ ΟΡΟΥΣ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΡΟΥΛΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΤΟΥΝΑΚΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΚΕΡΑΣΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΑΓΙΟΥ ΔΙΟΝΥΣΙΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΑΓΙΟΥ ΠΑΝΤΕΛΕΗΜΟΝΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΑΓΙΟΥ ΠΑΥΛΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΔΟΧΕΙΑΡΙΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΖΩΓΡΑΦΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΚΩΝΣΤΑΜΟΝΙΤΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΞΕΝΟΦΩΝΤΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΞΗΡΟΠΟΤΑΜΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΟΣΙΟΥ ΓΡΗΓΟΡΙΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΝΗ ΣΙΜΩΝΟΣ ΠΕΤΡΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΑ ΣΚΗΤΗ ΧΑΛΚΙΔΙΚΗΣ, ΣΚΗΤΗ ΑΓΙΑΣ ΑΝΝΗΣ ΧΑΛΚΙΔΙΚΗΣ, ΣΚΗΤΗ ΑΓΙΑΣ ΤΡΙΑΔΟΣ (ΚΑΥΣΟΚΑΛΥΒΙΩΝ) ΧΑΛΚΙΔΙΚΗΣ, ΣΚΗΤΗ ΕΥΑΓΓΕΛΙΣΜΟΥ ΘΕΟΤΟΚΟΣ(ΞΕΝΟΦΩΝΤΟΣ) ΧΑΛΚΙΔΙΚΗΣ, ΣΚΗΤΗ ΘΕΟΤΟΚΟΥ(ΝΕΑ ΣΚΗΤΗ) ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '63088', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΧΑΛΚΙΔΙΚΗΣ, ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΧΑΛΚΙΔΙΚΗΣ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΝΙΚΗΤΗΣ ΧΑΛΚΙΔΙΚΗΣ, ΑΙΜΠΕΛΙΤΣΙ ΧΑΛΚΙΔΙΚΗΣ, ΓΑΛΗΝΗ ΑΓΙΟΥ ΝΙΚΟΛΑΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΕΛΑΙΩΝΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΖΩΓΡΑΦΟΥ ΑΓΙΟΥ ΝΙΚΟΛΑΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΗΜΕΡΗ ΕΛΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΚΕΛΥΦΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΝΙΚΗΤΗ ΧΑΛΚΙΔΙΚΗΣ, ΠΕΡΙΣΤΕΡΙ ΧΑΛΚΙΔΙΚΗΣ, ΠΥΡΓΟΣ ΣΙΘΩΝΙΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΣΠΑΛΑΘΡΟΝΗΣΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΣΧΟΙΝΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΦΤΕΡΩΤΗ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '63100', Area: 'ΒΡΑΣΤΑΜΑ ΧΑΛΚΙΔΙΚΗΣ, ΓΕΡΑΚΙΝΗ ΧΑΛΚΙΔΙΚΗΣ, ΔΙΑΣΤΑΥΡΩΣΗ ΠΑΛΑΙΟΚΑΣΤΡΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΚΑΛΥΒΕΣ ΠΟΛΥΓΥΡΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΚΕΛΛΙ ΧΑΛΚΙΔΙΚΗΣ, ΠΑΛΑΙΟΚΑΣΤΡΟ ΧΑΛΚΙΔΙΚΗΣ, ΠΑΤΕΛΙΔΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΠΟΛΥΓΥΡΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΤΑΞΙΑΡΧΗΣ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '63200', Area: 'ΑΓΙΟΣ ΜΑΜΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΧΑΛΚΙΔΙΚΗΣ, ΒΕΡΓΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΔΙΟΝΥΣΙΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΖΩΓΡΑΦΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΜΟΥΡΙΕΣ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΑ ΜΟΥΔΑΝΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΑ ΠΛΑΓΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΑ ΠΟΤΕΙΔΑΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΝΕΑ ΤΕΝΕΔΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΟΛΥΝΘΟΣ ΧΑΛΚΙΔΙΚΗΣ, ΠΑΠΑ ΑΛΩΝΙ ΧΑΛΚΙΔΙΚΗΣ, ΠΑΡΑΛΙΑ ΔΙΟΝΥΣΙΟΥ ΧΑΛΚΙΔΙΚΗΣ, ΠΑΡΑΛΙΑ ΝΕΑΣ ΤΡΙΓΛΙΑΣ ΧΑΛΚΙΔΙΚΗΣ, ΠΟΡΤΑΡΙΑ ΧΑΛΚΙΔΙΚΗΣ, ΠΟΡΤΕΣ ΧΑΛΚΙΔΙΚΗΣ, ΣΗΜΑΝΤΡΑ ΧΑΛΚΙΔΙΚΗΣ, ΣΩΖΟΠΟΛΗ ΧΑΛΚΙΔΙΚΗΣ, ΦΛΟΓΗΤΑ ΧΑΛΚΙΔΙΚΗΣ', Prefecture: 'Χαλκιδικής' },
    { PostalCode: '73001', Area: 'ΑΓΙΑ ΚΥΡΙΑΚΗ ΧΑΝΙΩΝ, ΑΓΙΑ ΤΡΙΑΔΑ ΣΕΛΙΝΟΥ ΧΑΝΙΩΝ, ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΣΚΛΑΒΟΠΟΥΛΩΝ ΧΑΝΙΩΝ, ΑΓΙΟΣ ΠΑΥΛΟΣ ΒΟΥΤΑ ΧΑΝΙΩΝ, ΑΖΟΓΥΡΕΣ ΒΟΥΤΑ ΧΑΝΙΩΝ, ΑΖΟΓΥΡΕΣ ΠΑΛΑΙΟΧΩΡΑΣ ΧΑΝΙΩΝ, ΑΜΠΕΛΟΣ ΓΑΥΔΟΥ ΧΑΝΙΩΝ, ΑΝΥΔΡΟΙ ΧΑΝΙΩΝ, ΑΡΧΟΝΤΙΚΟ ΧΑΝΙΩΝ, ΑΣΦΕΝΔΙΛΕΣ ΧΑΝΙΩΝ, ΑΧΛΑΔΙΑΚΕΣ ΧΑΝΙΩΝ, ΒΑΤΣΙΑΝΑ ΧΑΝΙΩΝ, ΒΛΙΘΙΑΣ ΧΑΝΙΩΝ, ΒΟΥΤΑΣ ΧΑΝΙΩΝ, ΓΑΥΔΟΠΟΥΛΑ ΧΑΝΙΩΝ, ΓΙΑΛΟΣ ΧΑΝΙΩΝ, ΓΡΗΓΟΡΙΑΝΑ ΣΑΡΑΚΗΝΑΣ ΧΑΝΙΩΝ, ΚΑΛΑΜΙΟΣ ΧΑΝΙΩΝ, ΚΑΛΑΜΟΣ ΧΑΝΙΩΝ, ΚΑΜΑΤΕΡΑ ΧΑΝΙΩΝ, ΚΑΡΑΒΕ ΓΑΥΔΟΥ ΧΑΝΙΩΝ, ΚΑΣΤΡΙ ΓΑΥΔΟΥ ΧΑΝΙΩΝ, ΚΙΤΥΡΟΣ ΧΑΝΙΩΝ, ΚΟΝΤΟΚΥΝΗΓΙ ΧΑΝΙΩΝ, ΚΟΥΝΤΟΥΡΑ ΧΑΝΙΩΝ, ΛΑΓΚΑΔΑΣ ΧΑΝΙΩΝ, ΛΑΚΚΟΣ ΣΚΛΑΒΟΠΟΥΛΑΣ ΧΑΝΙΩΝ, ΛΙΒΑΔΙ ΒΟΥΤΑ ΧΑΝΙΩΝ, ΜΑΝΑΤΙΑΝΑ ΧΑΝΙΩΝ, ΜΟΥΣΤΑΚΟΣ ΧΑΝΙΩΝ, ΠΑΛΑΙΟΧΩΡΑ ΧΑΝΙΩΝ, ΠΛΑΤΑΝΕΣ ΣΕΛΙΝΟΥ ΧΑΝΙΩΝ, ΠΛΑΤΑΝΟΣ ΣΕΛΙΝΟΥ ΧΑΝΙΩΝ, ΠΡΟΔΡΟΜΙΟ ΧΑΝΙΩΝ, ΣΑΡΑΚΗΝΑ ΧΑΝΙΩΝ, ΣΚΛΑΒΟΠΟΥΛΑ ΧΑΝΙΩΝ, ΣΠΑΝΙΑΚΟΣ ΧΑΝΙΩΝ, ΣΤΑΥΡΟΣ ΣΕΛΙΝΟΥ ΧΑΝΙΩΝ, ΦΑΡΑΓΓΙ ΣΕΛΙΝΟΥ ΧΑΝΙΩΝ, ΦΩΚΙΑ ΓΑΥΔΟΥ ΧΑΝΙΩΝ, ΧΑΣΙΟ ΧΑΝΙΩΝ, ΧΟΝΔΡΟΣ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73002', Area: 'ΑΝΩ ΚΕΦΑΛΑ ΧΑΝΙΩΝ, ΑΝΩΣΚΕΛΗ ΧΑΝΙΩΝ, ΒΛΑΧΕΡΩΝΙΤΙΣΣΑ ΧΑΝΙΩΝ, ΒΟΥΚΟΛΙΕΣ ΧΑΝΙΩΝ, ΓΑΒΑΛΟΜΟΥΡΙ ΧΑΝΙΩΝ, ΔΕΜΠΛΑ ΧΑΝΙΩΝ, ΔΡΟΜΟΝΕΡΟ ΧΑΝΙΩΝ, ΕΛΛΗΝΙΚΟ ΧΑΝΙΩΝ, ΖΟΥΝΑΚΙ ΧΑΝΙΩΝ, ΚΑΚΟΠΕΤΡΟΣ ΧΑΝΙΩΝ, ΚΑΛΛΙΘΕΑ ΚΙΣΣΑΜΟΥ ΧΑΝΙΩΝ, ΚΑΤΩ ΚΕΦΑΛΑ ΧΑΝΙΩΝ, ΚΑΦΟΥΡΟΣ ΧΑΝΙΩΝ, ΚΕΧΡΕΣ ΧΑΝΙΩΝ, ΚΟΤΣΥΦΙΑΝΑ ΧΑΝΙΩΝ, ΚΟΥΛΚΟΥΘΙΑΝΑ ΧΑΝΙΩΝ, ΛΗΔΙΑΝΑ ΧΑΝΙΩΝ, ΛΙΜΝΗ ΚΥΔΩΝΙΑΣ ΧΑΝΙΩΝ, ΛΟΥΦΑΡΔΙΑΝΑ ΧΑΝΙΩΝ, ΜΕΣΑ ΒΟΥΚΟΛΙΕΣ ΧΑΝΙΩΝ, ΜΕΣΑΥΛΙΑ ΧΑΝΙΩΝ, ΜΕΤΟΧΙ ΣΙΡΙΛΙΟΥ ΧΑΝΙΩΝ, ΜΙΧΑΛΙΑΝΑ ΧΑΝΙΩΝ, ΜΟΥΛΑΜΕΡΙΑΝΑ ΧΑΝΙΩΝ, ΜΠΟΥΓΙΟΥΚΛΙΑΝΑ ΧΑΝΙΩΝ, ΝΕΑΡΑ ΕΣΙΑΝΑ ΧΑΝΙΩΝ, ΝΕΟ ΧΩΡΙΟ ΚΥΔΩΝΙΑΣ ΧΑΝΙΩΝ, ΝΕΡΑΤΖΙΑ ΧΑΝΙΩΝ, ΝΕΡΙΑΝΑ ΧΑΝΙΩΝ, ΠΑΛΑΙΑ ΡΟΥΜΑΤΑ ΧΑΝΙΩΝ, ΠΕΤΡΕΣ ΚΥΔΩΝΙΑΣ ΧΑΝΙΩΝ, ΠΗΓΗ ΧΑΝΙΩΝ, ΠΛΑΤΑΝΕΣ ΚΙΣΣΑΜΟΥ ΧΑΝΙΩΝ, ΠΟΛΕΜΑΡΧΙ ΧΑΝΙΩΝ, ΠΟΝΤΙΚΙΑΝΑ ΧΑΝΙΩΝ, ΣΙΡΙΛΙ ΧΑΝΙΩΝ, ΦΩΤΟΚΑΔΟ ΧΑΝΙΩΝ, ΧΡΥΣΑΥΓΗ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73003', Area: 'ΑΡΜΕΝΟΙ ΧΑΝΙΩΝ, ΚΑΛΑΜΙ ΑΠΟΚΩΡΟΝΟΥ ΧΑΝΙΩΝ, ΚΑΛΥΒΕΣ ΧΑΝΙΩΝ, ΚΥΡΙΑΚΟΣΕΛΛΙΑ ΧΑΝΙΩΝ, ΜΑΧΑΙΡΟΙ ΧΑΝΙΩΝ, ΝΕΟ ΧΩΡΙΟ ΑΠΟΚΟΡΡΩΝΟΥ ΧΑΝΙΩΝ, ΠΡΟΒΑΡΜΑ ΧΑΝΙΩΝ, ΡΑΜΝΗ ΧΑΝΙΩΝ, ΣΑΜΩΝΑΣ ΧΑΝΙΩΝ, ΣΤΥΛΟΣ ΧΑΝΙΩΝ, ΤΣΙΒΑΡΑΣ ΧΑΝΙΩΝ, ΦΑΡΑΓΓΙ ΑΠΟΚΟΡΩΝΟΥ ΧΑΝΙΩΝ, ΧΙΛΙΟΜΟΥΔΟΥ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73004', Area: 'ΑΓΙΟΙ ΑΠΟΣΤΟΛΟΙ ΧΑΝΙΩΝ, ΑΛΙΓΟΙ ΧΑΝΙΩΝ, ΑΝΙΣΑΡΑΚΙ ΧΑΝΙΩΝ, ΑΡΜΙΟ ΧΑΝΙΩΝ, ΒΑΜΒΑΚΑΔΕΣ ΧΑΝΙΩΝ, ΓΡΗΓΟΡΙΑΝΑ ΠΛΕΜΕΝΙΑΝΩΝ ΧΑΝΙΩΝ, ΔΕΣΠΟΤΙΚΟ ΧΑΝΙΩΝ, ΔΡΥΣ ΧΑΝΙΩΝ, ΚΑΒΑΛΛΑΡΙΑΝΑ ΧΑΝΙΩΝ, ΚΑΔΡΟΣ ΧΑΝΙΩΝ, ΚΑΚΟΔΙΚΙ ΧΑΝΙΩΝ, ΚΑΛΛΙΘΕΑ ΣΕΛΙΝΟΥ ΧΑΝΙΩΝ, ΚΑΝΤΑΝΟΣ ΧΑΝΙΩΝ, ΚΟΠΕΤΟΙ ΧΑΝΙΩΝ, ΛΟΦΟΣ ΧΑΝΙΩΝ, ΜΑΡΟΥΔΙΑΝΑ ΧΑΝΙΩΝ, ΜΟΤΖΙΑΝΑ ΧΑΝΙΩΝ, ΠΑΛΛΗΚΑΡΙΑΝΑ ΧΑΝΙΩΝ, ΠΑΝΩ ΦΛΩΡΙΑ ΧΑΝΙΩΝ, ΠΑΠΠΑΔΙΑΝΑ ΚΑΚΟΔΙΚΟΥ ΧΑΝΙΩΝ, ΠΛΕΜΕΝΙΑΝΑ ΧΑΝΙΩΝ, ΣΠΙΝΑ ΧΑΝΙΩΝ, ΣΦΑΚΟΣ ΧΑΝΙΩΝ, ΤΡΑΧΙΝΙΑΚΟΣ ΧΑΝΙΩΝ, ΦΛΩΡΙΑ ΧΑΝΙΩΝ, ΧΡΥΣΟΠΗΓΗ ΧΑΝΙΩΝ, ΨΑΡΙΑΝΑ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73005', Area: 'ΑΓΙΑ ΧΑΝΙΩΝ, ΑΛΙΚΙΑΝΟΣ ΧΑΝΙΩΝ, ΑΠΟΘΗΚΕΣ ΧΑΝΙΩΝ, ΑΣΚΟΡΔΑΛΟΣ ΧΑΝΙΩΝ, ΒΑΤΟΛΑΚΚΟΣ ΧΑΝΙΩΝ, ΕΠΙΣΚΟΠΗ ΚΥΔΩΝΙΑΣ ΧΑΝΙΩΝ, ΖΟΥΡΒΑ ΧΑΝΙΩΝ, ΚΑΡΑΝΟΣ ΧΑΝΙΩΝ, ΚΑΡΕΣ ΚΥΔΩΝΙΑΣ ΧΑΝΙΩΝ, ΚΟΥΦΟΣ ΧΑΝΙΩΝ, ΚΥΡΤΩΜΑΔΟΣ ΧΑΝΙΩΝ, ΛΑΓΓΟΣ ΧΑΝΙΩΝ, ΛΑΚΚΟΙ ΚΥΔΩΝΙΑΣ ΧΑΝΙΩΝ, ΜΑΝΟΛΙΟΠΟΥΛΟ ΧΑΝΙΩΝ, ΜΕΣΚΛΑ ΧΑΝΙΩΝ, ΜΠΑΠΙΟΛΟΣ ΧΑΝΙΩΝ, ΝΕΑ ΡΟΥΜΑΤΑ ΧΑΝΙΩΝ, ΝΤΕΡΕΣ ΧΑΝΙΩΝ, ΟΜΑΛΟΣ ΧΑΝΙΩΝ, ΟΡΘΟΥΝΙ ΧΑΝΙΩΝ, ΠΑΠΠΑΔΙΑΝΑ ΚΥΔΩΝΙΑΣ ΧΑΝΙΩΝ, ΠΡΑΣΕΣ ΧΑΝΙΩΝ, ΣΕΜΠΡΩΝΑΣ ΧΑΝΙΩΝ, ΣΚΙΝΕΣ ΧΑΝΙΩΝ, ΣΚΟΝΙΖΟ ΧΑΝΙΩΝ, ΦΟΥΡΝΕΣ ΧΑΝΙΩΝ, ΧΛΙΑΡΟ ΧΑΝΙΩΝ, ΧΩΣΤΗ ΧΑΝΙΩΝ, ΨΑΘΟΓΙΑΝΝΟΣ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73006', Area: 'ΑΓΙΟΣ ΑΝΤΩΝΙΟΣ ΕΠΙΣΚΟΠΗΣ ΧΑΝΙΩΝ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΖΥΜΠΡΑΓΟΥ ΧΑΝΙΩΝ, ΑΝΩ ΒΟΥΒΕΣ ΧΑΝΙΩΝ, ΑΣΠΡΑ ΝΕΡΑ ΧΑΝΙΩΝ, ΑΣΤΡΑΤΗΓΟΣ ΧΑΝΙΩΝ, ΑΣΤΡΙΚΑΣ ΧΑΝΙΩΝ, ΑΦΡΑΤΑ ΧΑΝΙΩΝ, ΒΑΓΙ ΧΑΝΙΩΝ, ΒΑΣΙΛΙΑΝΑ ΧΑΝΙΩΝ, ΒΑΣΙΛΟΠΟΥΛΟ ΧΑΝΙΩΝ, ΒΕΝΙΟ ΧΑΝΙΩΝ, ΒΟΥΒΕΣ ΧΑΝΙΩΝ, ΓΕΡΑΚΙΑΝΑ ΧΑΝΙΩΝ, ΓΛΩΣΣΑ ΧΑΝΙΩΝ, ΓΡΑ ΚΕΡΑ ΧΑΝΙΩΝ, ΔΑΡΜΑΡΟΧΩΡΙ ΧΑΝΙΩΝ, ΔΕΛΙΑΝΑ ΧΑΝΙΩΝ, ΔΡΑΚΟΝΑ ΚΙΣΣΑΜΟΥ ΧΑΝΙΩΝ, ΔΡΑΚΟΝΑ ΧΑΝΙΩΝ, ΕΠΙΣΚΟΠΗ  ΚΙΣΣΑΜΟΥ ΧΑΝΙΩΝ, ΖΥΜΠΡΑΓΟΣ ΧΑΝΙΩΝ, ΚΑΛΑΜΙ ΚΙΣΣΑΜΟΥ ΧΑΝΙΩΝ, ΚΑΛΥΔΟΝΙΑ ΧΑΝΙΩΝ, ΚΑΜΑΡΑ ΔΕΛΙΑΝΩΝ ΧΑΝΙΩΝ, ΚΑΜΑΡΑ ΚΑΛΥΔΟΝΙΑΣ ΧΑΝΙΩΝ, ΚΑΜΙΣΙΑΝΑ ΧΑΝΙΩΝ, ΚΑΡΘΙΑΝΑ ΧΑΝΙΩΝ, ΚΟΛΥΜΒΑΡΙ ΧΑΝΙΩΝ, ΚΟΥΜΟΥΛΙ ΧΑΝΙΩΝ, ΚΡΥΑ ΒΡΥΣΗ ΧΑΝΙΩΝ, ΛΟΥΚΟΥΜΙΧΕΛΙΑΝΑ ΧΑΝΙΩΝ, ΜΑΡΑΘΟΚΕΦΑΛΑ ΧΑΝΙΩΝ, ΜΕΛΙΣΣΟΥΡΓΕΙΟ ΧΑΝΙΩΝ, ΜΕΤΟΧΙ ΚΑΡΩΝ ΧΑΝΙΩΝ, ΜΙΝΩΘΙΑΝΑ ΧΑΝΙΩΝ, ΜΟΘΙΑΝΑ ΧΑΝΙΩΝ, ΜΟΝΗ ΟΔΗΓΗΤΡΙΑΣ ΚΥΡΙΑΣ ΓΩΝΙΑΣ ΧΑΝΙΩΝ, ΝΟΧΙΑ ΧΑΝΙΩΝ, ΠΑΝΕΘΗΜΟΣ ΧΑΝΙΩΝ, ΠΑΡΑΛΙΑ ΧΑΝΙΩΝ, ΠΕΤΑΛΙΑΝΑ ΧΑΝΙΩΝ, ΠΥΡΓΟΣ ΔΕΛΙΑΝΩΝ ΧΑΝΙΩΝ, ΡΑΒΔΟΥΧΑ ΧΑΝΙΩΝ, ΡΑΠΑΝΙΑΝΑ ΧΑΝΙΩΝ, ΡΟΔΩΠΟΣ ΧΑΝΙΩΝ, ΣΚΑΦΙΩΤΕΣ ΧΑΝΙΩΝ, ΣΚΟΥΤΕΛΩΝΑΣ ΧΑΝΙΩΝ, ΣΠΗΛΙΑ ΧΑΝΙΩΝ, ΤΑΥΡΩΝΙΤΗΣ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73007', Area: 'ΑΛΙΚΑΜΠΟΣ ΧΑΝΙΩΝ, ΑΡΕΒΙΤΗΣ ΧΑΝΙΩΝ, ΑΣΠΡΟΥΛΙΑΝΟΙ ΧΑΝΙΩΝ, ΑΧΑΤΖΗΚΙΑ ΧΑΝΙΩΝ, ΒΑΤΟΥΔΙΑΡΗΣ ΧΑΝΙΩΝ, ΒΑΦΕΣ ΧΑΝΙΩΝ, ΒΡΥΣΕΣ ΑΠΟΚΟΡΡΩΝΟΥ ΧΑΝΙΩΝ, ΓΕΩΡΓΙΟΥΠΟΛΗ ΧΑΝΙΩΝ, ΔΡΑΜΙΑ ΧΑΝΙΩΝ, ΕΜΠΡΟΣΝΕΡΟΣ ΧΑΝΙΩΝ, ΚΑΒΑΛΛΟΣ ΧΑΝΙΩΝ, ΚΑΒΡΟΣ ΧΑΝΙΩΝ, ΚΑΣΤΕΛΛΟΣ ΧΑΝΙΩΝ, ΚΟΥΡΝΑΣ ΧΑΝΙΩΝ, ΚΡΑΠΗ ΧΑΝΙΩΝ, ΜΑΖΑ  ΑΠΟΚΟΡΩΝΟΥ ΧΑΝΙΩΝ, ΜΑΘΕΣ ΧΑΝΙΩΝ, ΜΕΤΑΜΟΡΦΩΣΗ ΧΑΝΙΩΝ, ΜΕΤΟΧΙ ΑΠΟΚΟΡΩΝΟΥ ΧΑΝΙΩΝ, ΜΟΥΡΙ ΓΕΩΡΓΙΟΥΠΟΛΕΩΣ ΧΑΝΙΩΝ, ΝΙΠΟΣ ΧΑΝΙΩΝ, ΠΑΡΑΛΙΑ ΚΟΥΡΝΑ ΧΑΝΙΩΝ, ΠΑΤΗΜΑ ΧΑΝΙΩΝ, ΦΙΛΙΠΠΟΣ ΧΑΝΙΩΝ, ΦΟΝΕΣ ΧΑΝΙΩΝ, ΦΥΛΑΚΗ ΧΑΝΙΩΝ, ΧΑΜΠΑΘΑ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73011', Area: 'ΑΓΙΑ ΡΟΥΜΕΛΗ ΧΑΝΙΩΝ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΧΑΝΙΩΝ, ΑΓΙΟΣ ΝΕΚΤΑΡΙΟΣ ΧΑΝΙΩΝ, ΑΝΩΠΟΛΗ  ΧΑΝΙΩΝ, ΑΡΑΔΑΙΝΑ ΧΑΝΙΩΝ, ΑΣΦΕΝΔΟΣ ΧΑΝΙΩΝ, ΒΟΥΒΑΣ ΧΑΝΙΩΝ, ΒΡΑΣΚΑΣ ΧΑΝΙΩΝ, ΒΡΙΤΟΜΑΡΤΗ ΧΑΝΙΩΝ, ΙΜΠΡΟΣ ΧΑΝΙΩΝ, ΚΑΛΛΙΚΡΑΤΗΣ ΧΑΝΙΩΝ, ΚΑΨΟΔΑΣΟΣ ΧΑΝΙΩΝ, ΚΟΜΙΤΑΔΕΣ ΧΑΝΙΩΝ, ΛΙΒΑΝΙΑΝΑ ΧΑΝΙΩΝ, ΛΟΥΤΡΟ ΧΑΝΙΩΝ, ΝΟΜΙΚΙΑΝΑ ΧΑΝΙΩΝ, ΠΑΛΑΙΑ ΑΓΙΑ ΡΟΥΜΕΛΗ ΧΑΝΙΩΝ, ΠΑΤΣΙΑΝΟΣ ΧΑΝΙΩΝ, ΣΚΑΛΩΤΗ ΧΑΝΙΩΝ, ΦΡΑΓΚΟΚΑΣΤΕΛΟ (ΠΑΡΑΔΕΙΣΟΣ) ΧΑΝΙΩΝ, ΧΩΡΑ ΣΦΑΚΙΩΝ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73014', Area: 'ΑΓΙΑ ΜΑΡΙΝΑ ΧΑΝΙΩΝ, ΒΡΥΣΕΣ ΚΥΔΩΝΙΑΣ ΧΑΝΙΩΝ, ΓΕΡΑΝΙ ΧΑΝΙΩΝ, ΚΟΙΛΑΔΑ ΧΑΝΙΩΝ, ΚΟΝΤΟΜΑΡΙ ΧΑΝΙΩΝ, ΚΥΠΑΡΙΣΣΟΣ ΧΑΝΙΩΝ, ΛΟΥΤΡΑΚΙ ΧΑΝΙΩΝ, ΜΑΛΕΜΕ ΧΑΝΙΩΝ, ΜΑΡΟΥΛΙΑΧΙΑΝΑ ΧΑΝΙΩΝ, ΜΕΤΟΧΙ ΚΟΝΤΟΜΑΡΙΟΥ ΧΑΝΙΩΝ, ΜΟΔΙ ΧΑΝΙΩΝ, ΞΑΜΟΥΔΟΧΩΡΙ ΧΑΝΙΩΝ, ΞΗΡΟΚΑΜΠΙ ΧΑΝΙΩΝ, ΠΑΛΑΙΟ ΓΕΡΑΝΙ ΧΑΝΙΩΝ, ΠΑΤΕΛΛΑΡΙ ΧΑΝΙΩΝ, ΠΛΑΤΑΝΙΑΣ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73100', Area: 'ΑΓΙΑ ΖΩΝΗ ΧΑΝΙΩΝ, ΑΓΙΑ ΤΡΙΑΔΑ ΜΟΝΑΣΤΗΡΙ ΧΑΝΙΩΝ, ΑΓΙΟΙ ΘΕΟΔΩΡΟΙ ΝΕΑΣ ΚΥΔΩΝΙΑΣ ΧΑΝΙΩΝ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΚΥΔΩΝΙΑΣ ΧΑΝΙΩΝ, ΑΓΙΟΣ ΝΙΚΟΛΑΟΣ ΧΑΝΙΩΝ, ΑΓΙΟΣ ΟΝΟΥΦΡΙΟΣ ΧΑΝΙΩΝ, ΑΕΡΟΔΡΟΜΙΟ (ΠΕΡΙΟΧΗ ΣΤΕΡΝΩΝ) ΧΑΝΙΩΝ, ΑΚΡΟΠΟΛΗ ΧΑΝΙΩΝ, ΑΛΕΤΡΟΥΒΑΡΙ ΧΑΝΙΩΝ, ΑΝΕΜΟΜΥΛΟΙ ΧΑΝΙΩΝ, ΑΡΓΟΥΛΕΣ ΑΡΩΝΙΟΥ ΧΑΝΙΩΝ, ΑΡΓΟΥΛΙΔΕΣ ΣΦΑΚΙΩΝ ΧΑΝΙΩΝ, ΑΡΩΝΙ ΧΑΝΙΩΝ, ΑΧΛΑΔΕΣ ΧΑΝΙΩΝ, ΒΑΜΒΑΚΟΠΟΥΛΟ ΧΑΝΙΩΝ, ΒΑΡΥΠΕΤΡΟ ΧΑΝΙΩΝ, ΓΑΛΑΤΑΣ ΧΑΝΙΩΝ, ΓΑΛΗΝΗ ΧΑΝΙΩΝ, ΓΕΡΟΛΑΚΚΟΣ ΧΑΝΙΩΝ, ΓΕΡΟΠΡΙΝΟΣ ΧΑΝΙΩΝ, ΓΟΥΒΕΡΝΕΤΟ ΜΟΝΑΣΤΗΡΙ ΧΑΝΙΩΝ, ΔΑΡΑΤΣΟΣ ΧΑΝΙΩΝ, ΖΟΡΝΑΔΗΣ ΧΑΝΙΩΝ, ΘΕΡΙΣΟ ΧΑΝΙΩΝ, ΘΥΜΙΑ ΧΑΝΙΩΝ, ΚΑΘΙΑΝΑ ΧΑΝΙΩΝ, ΚΑΛΑΘΑΣ ΧΑΝΙΩΝ, ΚΑΛΟΡΡΟΥΜΑ ΧΑΝΙΩΝ, ΚΑΜΠΑΝΙ ΧΑΝΙΩΝ, ΚΑΜΠΟΙ ΧΑΝΙΩΝ, ΚΑΤΩ ΜΑΡΑΘΙ ΧΑΝΙΩΝ, ΚΑΤΩΧΩΡΙ ΧΑΝΙΩΝ, ΚΟΝΤΟΠΟΥΛΑ ΧΑΝΙΩΝ, ΚΟΡΑΚΙΕΣ ΧΑΝΙΩΝ, ΚΟΥΜΑΡΕΣ ΧΑΝΙΩΝ, ΚΟΥΝΟΥΠΙΔΙΑΝΑ ΧΑΝΙΩΝ, ΛΟΥΛΟΣ ΧΑΝΙΩΝ, ΛΥΓΙΔΕΣ ΧΑΝΙΩΝ, ΜΑΔΑΡΟ ΧΑΝΙΩΝ, ΜΑΛΑΞΑ ΧΑΝΙΩΝ, ΜΑΡΑΘΙ ΧΑΝΙΩΝ, ΜΑΡΜΑΡΑΣ ΧΑΝΙΩΝ, ΜΟΝΗ ΑΓΙΑΣ ΤΡΙΑΔΑΣ ΤΖΑΓΚΑΡΟΛΩΝ ΧΑΝΙΩΝ, ΜΟΝΗ ΚΥΡΙΑΣ ΑΓΓΕΛΩΝ ΑΓ.ΙΩΑΝ.ΓΟΥΒΕΡΝ. ΧΑΝΙΩΝ, ΜΟΥΖΟΥΡΑΣ ΧΑΝΙΩΝ, ΜΥΛΩΝΙΑΝΑ ΧΑΝΙΩΝ, ΝΕΡΟΚΟΥΡΟΣ ΧΑΝΙΩΝ, ΟΑΣΗ ΧΑΝΙΩΝ, ΠΑΖΙΝΟΣ ΧΑΝΙΩΝ, ΠΑΝΑΓΙΑ ΧΑΝΙΩΝ, ΠΕΡΙΒΟΛΙΑ ΚΥΔΩΝΙΑΣ ΧΑΝΙΩΝ, ΠΛΑΤΥΒΟΛΑ ΧΑΝΙΩΝ, ΠΟΤΙΣΤΗΡΙΑ ΧΑΝΙΩΝ, ΠΥΘΑΡΙ ΧΑΝΙΩΝ, ΣΠΗΛΙΑΡΙΑ ΧΑΝΙΩΝ, ΣΤΑΛΟΣ ΧΑΝΙΩΝ, ΣΤΑΥΡΟΣ ΑΚΡΩΤΗΡΙΟΥ ΧΑΝΙΩΝ, ΣΤΕΡΝΕΣ (& 115 ΠΜ) ΧΑΝΙΩΝ, ΤΕΡΣΑΝΑΣ ΧΑΝΙΩΝ, ΤΣΑΚΙΣΤΡΑ ΧΑΝΙΩΝ, ΧΑΝΙΑ ΧΑΝΙΩΝ, ΧΟΡΔΑΚΙ ΧΑΝΙΩΝ, ΧΩΡΑΦΑΚΙΑ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73131', Area: 'ΧΑΝΙΑ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73132', Area: 'ΧΑΝΙΑ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73133', Area: 'ΧΑΝΙΑ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73134', Area: 'ΧΑΝΙΑ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73135', Area: 'ΧΑΝΙΑ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73136', Area: 'ΧΑΝΙΑ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73137', Area: 'ΧΑΝΙΑ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73200', Area: 'ΑΠΤΕΡΑ ΧΑΝΙΩΝ, ΠΛΑΤΑΝΙ ΧΑΝΙΩΝ, ΣΟΥΔΑ  ΧΑΝΙΩΝ, ΤΣΙΚΑΛΑΡΙΑ ΚΥΔΩΝΙΑΣ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73300', Area: 'ΒΑΝΤΕΣ  ΧΑΝΙΩΝ, ΚΡΥΟ ΝΕΡΟ ΧΑΝΙΩΝ, ΜΟΥΡΝΙΕΣ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '73400', Area: 'ΑΓΙΟΣ ΑΝΤΩΝΙΟΣ ΚΑΛΛΕΡΓΙΑΝΩΝ ΧΑΝΙΩΝ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΚΙΣΣΑΜΟΥ ΧΑΝΙΩΝ, ΑΖΟΓΥΡΑΣ ΧΑΝΙΩΝ, ΑΝΩ ΔΡΑΠΑΝΙΑΣ ΧΑΝΙΩΝ, ΑΡΜΕΝΟΧΩΡΙ ΧΑΝΙΩΝ, ΒΑΡΔΙΑΝΑ ΧΑΝΙΩΝ, ΓΑΛΟΥΒΑΣ ΧΑΝΙΩΝ, ΓΡΑΜΒΟΥΣΑ ΧΑΝΙΩΝ, ΓΡΗΓΟΡΙΑΝΑ ΠΟΛΥΡΡΗΝΙΑΣ ΧΑΝΙΩΝ, ΔΑΦΝΗ ΧΑΝΙΩΝ, ΔΕΡΜΙΖΙΑΝΑ ΧΑΝΙΩΝ, ΔΡΑΠΑΝΙΑΣ ΧΑΝΙΩΝ, ΕΛΑΦΟΝΗΣΟΣ ΧΑΝΙΩΝ ΧΑΝΙΩΝ, ΖΑΧΑΡΙΑΝΑ ΧΑΝΙΩΝ, ΖΕΡΒΙΑΝΑ ΧΑΝΙΩΝ, ΚΑΒΟΥΣΙ ΧΑΝΙΩΝ, ΚΑΛΛΕΡΓΙΑΝΑ ΧΑΝΙΩΝ, ΚΑΛΟΥΔΙΑΝΑ ΧΑΝΙΩΝ, ΚΑΛΥΒΙΑΝΗ ΧΑΝΙΩΝ, ΚΑΡΕΦΙΛΙΑΝΑ ΧΑΝΙΩΝ, ΚΑΣΤΕΛΙ ΚΙΣΣΑΜΟΥ ΧΑΝΙΩΝ, ΚΑΤΖΙΑΝΑ ΧΑΝΙΩΝ, ΚΑΤΩ ΠΑΛΑΙΟΚΑΣΤΡΟ ΧΑΝΙΩΝ, ΚΕΡΑ ΧΑΝΙΩΝ, ΚΙΣΣΑΜΟΣ ΧΑΝΙΩΝ, ΚΟΚΚΙΝΟ ΜΕΤΟΧΙ ΧΑΝΙΩΝ, ΚΟΛΕΝΗ ΧΑΝΙΩΝ, ΚΟΡΦΑΛΩΝΑΣ ΧΑΝΙΩΝ, ΚΟΤΣΙΑΝΑ ΧΑΝΙΩΝ, ΚΟΥΚΟΥΝΑΡΑ ΧΑΝΙΩΝ, ΚΟΥΝΟΥΠΙΤΣΑ ΧΑΝΙΩΝ, ΚΟΥΡΘΙΑΝΑ ΧΑΝΙΩΝ, ΛΙΜΕΝΙΣΚΟΣ ΧΑΝΙΩΝ, ΛΟΥΣΑΚΙΕΣ ΧΑΝΙΩΝ, ΛΥΡΙΔΙΑΝΑ ΧΑΝΙΩΝ, ΜΑΝΕΡΙΑΝΑ ΧΑΝΙΩΝ, ΜΑΡΕΔΙΑΝΑ ΧΑΝΙΩΝ, ΜΕΝΙΑΝΑ ΧΑΝΙΩΝ, ΜΕΡΑΔΑ ΧΑΝΙΩΝ, ΜΕΤΟΧΙ ΛΟΥΣΑΚΙΟΥ ΧΑΝΙΩΝ, ΝΕΟ ΧΩΡΙΟ ΚΙΣΣΑΜΟΥ ΧΑΝΙΩΝ, ΝΩΠΗΓΕΙΑ ΧΑΝΙΩΝ, ΠΑΠΠΑΓΙΑΝΝΑΚΗΔΕΣ ΧΑΝΙΩΝ, ΠΕΡΒΟΛΑΚΙΑ ΧΑΝΙΩΝ, ΠΙΠΕΡΙΑΝΑ ΧΑΝΙΩΝ, ΠΛΑΚΑΛΩΝΑ ΧΑΝΙΩΝ, ΠΟΛΛΥΡΗΝΙΑ ΧΑΝΙΩΝ, ΠΟΤΑΜΙΔΑ ΧΑΝΙΩΝ, ΠΥΡΓΟΣ ΚΙΣΣΑΜΟΥ ΧΑΝΙΩΝ, ΡΟΚΚΑ ΧΑΝΙΩΝ, ΣΦΑΚΟΠΗΓΑΔΙ ΧΑΝΙΩΝ, ΤΡΑΧΗΛΟΣ ΧΑΝΙΩΝ, ΤΡΙΑΛΩΝΙΑ ΧΑΝΙΩΝ, ΤΣΙΚΑΛΑΡΙΑ  ΚΙΣΣΑΜΟΥ ΧΑΝΙΩΝ, ΦΑΛΑΣΑΡΝΑ ΧΑΝΙΩΝ, ΦΑΛΕΛΙΑΝΑ ΧΑΝΙΩΝ, ΦΟΥΡΝΑΔΟΣ ΧΑΝΙΩΝ, ΦΤΕΡΟΛΑΚΚΑ ΧΑΝΙΩΝ, ΧΑΙΡΕΘΙΑΝΑ ΧΑΝΙΩΝ, ΧΑΡΑΥΓΗ ΧΑΝΙΩΝ, ΧΑΡΧΑΛΙΑΝΑ ΧΑΝΙΩΝ, ΧΟΡΕΥΤΙΑΝΑ ΧΑΝΙΩΝ, ΧΟΥΔΑΛΙΑΝΑ ΧΑΝΙΩΝ, ΧΡΥΣΟΣΚΑΛΙΤΙΣΣΑ ΧΑΝΙΩΝ', Prefecture: 'Χανίων' },
    { PostalCode: '82100', Area: 'ΑΓΙΑ ΕΡΜΙΟΝΗ ΧΙΟΥ, ΑΓΙΟΣ ΓΕΩΡΓΙΟΣ ΣΥΚΟΥΣΗΣ ΧΙΟΥ, ΑΓΙΟΣ ΙΩΑΝΝΗΣ ΧΙΟΥ, ΑΜΠΕΛΟΣ ΧΙΟΥ, ΑΝΑΒΑΤΟΣ ΧΙΟΥ, ΑΥΓΩΝΥΜΑ ΧΙΟΥ, ΒΑΣΙΛΕΩΝΟΙΚΟ ΧΙΟΥ, ΒΕΡΒΕΡΑΤΟ ΧΙΟΥ, ΒΛΥΧΑΔΑ ΧΙΟΥ, ΒΟΚΑΡΙΑ ΧΙΟΥ, ΒΟΥΔΟΤΟΠΟΣ ΧΙΟΥ, ΒΟΥΝΟ ΧΙΟΥ, ΓΙΟΣΩΝΑΣ ΧΙΟΥ, ΓΡΙΔΙΑ ΧΙΟΥ, ΔΑΦΝΩΝΑΣ ΧΙΟΥ, ΔΕΛΦΙΝΙ ΧΙΟΥ, ΖΥΦΙΑΣ ΧΙΟΥ, ΘΥΜΙΑΝΑ ΧΙΟΥ, ΚΑΛΛΙΜΑΣΙΑ ΧΙΟΥ, ΚΑΡΔΑΜΥΛΑ ΧΙΟΥ, ΚΑΡΥΕΣ ΧΙΟΥ, ΚΑΡΦΑΣ ΧΙΟΥ, ΚΑΤΑΡΡΑΚΤΗΣ ΧΙΟΥ, ΚΕΡΑΜΕΙΑ ΧΙΟΥ, ΚΟΙΝΗ ΧΙΟΥ, ΛΕΥΚΩΝΙΑ ΧΙΟΥ, ΛΙΛΙΚΑΣ ΧΙΟΥ, ΜΟΝΗ ΑΓΙΟΥ ΚΩΝ/ΝΟΥ ΦΡΑΓΚΟΒ. ΧΙΟΥ, ΜΟΝΗ ΑΓΙΟΥ ΜΗΝΑ ΧΙΟΥ, ΜΟΝΗ ΑΓΙΟΥ ΣΤΕΦΑΝΟΥ ΧΙΟΥ, ΜΟΝΗ ΑΓΙΩΝ ΠΑΤΕΡΩΝ ΧΙΟΥ, ΜΟΝΗ ΜΥΡΣΙΝΙΔΙΟΥ ΧΙΟΥ, ΜΟΝΗ ΠΑΝΑΓΙΑΣ ΚΟΙΜ.ΠΛΑΚΙΔΙΩΤΙΣ. ΧΙΟΥ, ΜΟΝΗ ΤΑΞΙΑΡΧΩΝ ΧΙΟΥ, ΜΥΡΜΗΓΚΙ ΧΙΟΥ, ΝΕΝΗΤΑ ΧΙΟΥ, ΝΕΟΧΩΡΙ ΧΙΟΥ, ΠΑΓΙΔΑ ΧΙΟΥ, ΠΑΡΑΛΙΑ ΑΓΙΑΣ ΦΩΤΕΙΝΗΣ ΧΙΟΥ, ΧΙΟΣ ΧΙΟΥ', Prefecture: 'Χίου' },
    { PostalCode: '82101', Area: 'ΑΓΙΟΣ ΠΑΝΤΕΛΕΗΜΩΝ ΝΗΣΟΣ ΧΙΟΥ, ΑΡΧΟΝΤΟΝΗΣΟ ΟΙΝΟΥΣΣΩΝ ΧΙΟΥ, ΑΣΠΑΛΑΘΡΟΚΑΜΠΟΣ ΟΙΝΟΥΣΣΩΝ ΧΙΟΥ, ΒΑΤΟΣ ΧΙΟΥ, ΓΑΙΔΟΥΡΟΝΗΣΟΣ ΧΙΟΥ, ΚΑΣΤΡΟ ΟΙΝΟΥΣΣΩΝ ΧΙΟΥ, ΜΟΝΑΦΤΗΣ ΧΙΟΥ, ΜΟΝΟΛΙΑ ΧΙΟΥ, ΝΕΚΤΑ ΧΙΟΥ, ΝΗΣΙ ΠΑΝΑΓΙΑΣ ΧΙΟΥ, ΟΙΝΟΥΣΣΕΣ ΧΙΟΥ, ΠΑΣΑΣ ΝΗΣΟΣ ΧΙΟΥ, ΠΟΝΤΙΚΟΝΗΣΙ ΧΙΟΥ, ΠΡΑΣΟΝΗΣΙΑ ΧΙΟΥ, ΣΑΝΤΑ ΠΑΝΑΓΙΑ ΧΙΟΥ, ΣΚΛΑΒΙΑ ΧΙΟΥ, ΦΛΑΤΣΙΑ ΧΙΟΥ', Prefecture: 'Χίου' },
    { PostalCode: '82102', Area: 'ΑΓΙΟΣ ΣΤΕΦΑΝΟΣ ΜΑΣΤΙΧΩΡΙΩΝ ΧΙΟΥ, ΑΛΜΥΡΟΣ ΧΙΟΥ, ΑΡΜΟΛΙΑ ΧΙΟΥ, ΒΑΒΙΛΟΙ ΧΙΟΥ, ΒΕΝΕΤΙΚΟ ΧΙΟΥ, ΒΕΣΣΑ ΧΙΟΥ, ΔΟΤΙΑ ΠΥΡΓΙΟΥ ΧΙΟΥ, ΕΛΑΤΑ ΧΙΟΥ, ΕΜΠΟΡΕΙΟΣ ΧΙΟΥ, ΕΞΩ ΔΙΔΥΜΑ ΧΙΟΥ, ΘΟΛΟΠΟΤΑΜΙ ΧΙΟΥ, ΚΑΛΑΜΩΤΗ ΧΙΟΥ, ΚΑΛΟΓΕΡΟΣ ΧΙΟΥ, ΚΑΡΥΝΤΑ ΧΙΟΥ, ΚΩΜΗ ΧΙΟΥ, ΛΙΘΙΟ ΧΙΟΥ, ΛΙΜΑΝΙ ΛΙΘΙΟΥ ΧΙΟΥ, ΛΙΜΕΝΑΣ (ΠΑΣΑ ΛΙΜΑΝΙ) ΧΙΟΥ, ΜΕΡΙΚΟΥΝΤΑ ΧΙΟΥ, ΜΕΣΑ ΔΙΔΥΜΑ ΧΙΟΥ, ΜΕΣΤΑ ΧΙΟΥ, ΜΟΝΗ ΑΓΙΟΥ ΓΕΩΡΓΙΟΥ ΧΙΟΥ, ΝΗΣΑΚΙ ΧΙΟΥ, ΟΛΥΜΠΟΙ ΧΙΟΥ, ΠΑΤΡΙΚΑ ΧΙΟΥ, ΠΕΛΑΓΟΝΗΣΟΣ ΧΙΟΥ, ΠΛΑΚΑ ΧΙΟΥ, ΠΥΡΓΙ ΧΙΟΥ, ΤΡΑΧΥΛΙΑ ΧΙΟΥ, ΧΑΛΚΕΙΟ ΧΙΟΥ', Prefecture: 'Χίου' },
    { PostalCode: '82103', Area: 'ΑΓΙΑΣΜΑΤΑ ΚΕΡΑΜΟΥ ΧΙΟΥ, ΑΓΙΑΣΜΑΤΑ ΛΕΠΤΟΠΟΔΩΝ ΧΙΟΥ, ΑΓΙΟ ΓΑΛΑ ΧΙΟΥ, ΑΓΙΟΣ ΑΙΜΙΛΙΑΝΟΣ ΧΙΟΥ, ΑΓΙΟΣ ΙΣΙΔΩΡΟΣ ΧΙΟΥ, ΑΦΡΟΔΙΣΙΑ ΧΙΟΥ, ΒΟΛΙΣΣΟΣ ΧΙΟΥ, ΔΙΕΥΧΑ ΧΙΟΥ, ΕΓΡΗΓΟΡΟΣ ΧΙΟΥ, ΕΖΟΥΣΑ ΧΙΟΥ, ΚΑΤΑΒΑΣΗ ΧΙΟΥ, ΚΕΡΑΜΟΣ ΒΙΚΙΟΥ ΧΙΟΥ, ΚΕΡΑΜΟΣ ΧΙΟΥ ΧΙΟΥ, ΚΟΣΚΙΝΑΣ ΧΙΟΥ, ΚΟΣΜΑΔΟΣ ΧΙΟΥ, ΚΟΥΡΟΥΝΙΑ ΧΙΟΥ, ΛΕΠΤΟΠΟΔΑ ΧΙΟΥ, ΛΗΜΝΙΑ ΧΙΟΥ ΧΙΟΥ, ΛΙΜΙΑ ΧΙΟΥ, ΜΑΝΑΓΡΟΣ ΧΙΟΥ, ΜΑΡΜΑΡΟ ΧΙΟΥ, ΜΕΛΑΝΙΟΣ ΧΙΟΥ, ΜΟΝΗ ΑΓΙΑΣ ΜΑΡΚΕΛΛΑΣ ΧΙΟΥ, ΜΟΝΗ ΑΓΙΑΣ ΜΑΤΡΩΝΗΣ ΧΑΛΑΝΔΡΩΝ ΧΙΟΥ, ΜΟΝΗ ΑΓΙΟΥ ΜΑΡΚΟΥ ΧΙΟΥ, ΝΑΓΟΣ ΧΙΟΥ, ΝΕΑ ΠΟΤΑΜΙΑ ΧΙΟΥ, ΝΕΝΗΤΟΥΡΙΑ ΧΙΟΥ, ΠΑΡΠΑΡΙΑ ΧΙΟΥ, ΠΙΡΑΜΑ ΧΙΟΥ, ΠΙΣΠΙΛΟΥΝΤΑ ΧΙΟΥ, ΠΥΡΓΙΑ ΧΙΟΥ, ΣΙΔΗΡΟΥΝΤΑ ΧΙΟΥ, ΣΚΑΡΙΩΤΗΣ ΧΙΟΥ, ΤΡΥΠΕΣ ΧΙΟΥ, ΧΑΛΑΝΔΡΑ ΧΙΟΥ, ΧΙΟΥ ΠΕΡΙΟΧΗ ΛΗΜΝΟΣ ΧΙΟΥ, ΧΩΡΗ ΧΙΟΥ', Prefecture: 'Χίου' },
    { PostalCode: '82104', Area: 'ΑΓΙΟ ΝΙΚΟΛΑΚΙ ΧΙΟΥ, ΑΝΤΙΨΑΡΑ ΧΙΟΥ, ΔΑΚΑΛΙΟ ΧΙΟΥ, ΚΑΤΩ ΝΗΣΙ ΧΙΟΥ, ΜΟΝΗ ΚΟΙΜΗΣΕΩΣ ΘΕΟΤΟΚΟΥ ΨΑΡΩΝ ΧΙΟΥ, ΨΑΡΑ ΧΙΟΥ', Prefecture: 'Χίου' },
    { PostalCode: '82300', Area: 'ΑΓΡΕΛΩΠΟΣ ΧΙΟΥ, ΑΜΑΔΕΣ ΧΙΟΥ, ΒΙΚΙΟ ΧΙΟΥ, ΓΛΑΣΤΡΙΑ ΧΙΟΥ, ΚΑΜΠΙΑ ΧΙΟΥ, ΚΕΡΤΗΣ ΧΙΟΥ, ΚΗΠΟΥΡΙΕΣ ΧΙΟΥ, ΛΑΓΚΑΔΑ ΧΙΟΥ, ΜΑΡΓΑΡΙΤΙ ΧΙΟΥ, ΝΕΑ ΜΟΝΗ ΧΙΟΥ, ΠΑΝΤΟΥΚΙΟΣ ΧΙΟΥ, ΠΑΡΑΛΙΑ ΑΜΑΔΕΩΝ ΧΙΟΥ, ΠΙΤΥΟΣ ΧΙΟΥ, ΣΑΡΑΚΗΝΟΠΕΤΡΑ ΧΙΟΥ, ΣΠΑΡΤΟΥΝΤΑ ΧΙΟΥ, ΣΤΡΟΒΙΛΙ ΧΙΟΥ, ΣΥΚΙΑΔΑ ΧΙΟΥ, ΦΥΤΑ ΧΙΟΥ', Prefecture: 'Χίου' }
];
var genders = [{
        Name: 'Άρρεν',
        Code: 'male'
    }, {
        Name: 'Θήλυ',
        Code: 'female'
    }];
var departments = [{
        Name: 'Τμήμα Μηχανικών Πληροφορικής',
        Code: 'ICE'
    }, {
        Name: 'Τμήμα Ηλεκτρολόγων Μηχανικών',
        Code: 'IΕE'
    }];
var context = new DataContext_1.DataContext();
context.AddDataSource(new DataSource_1.default('postalCodes', postalCodes));
context.AddDataSource(new DataSource_1.default('genders', genders));
context.AddDataSource(new DataSource_1.default('departments', departments));
var page = new RowContainer_1.default({
    Id: Guid_1.default.NewGuid(),
    CssClasses: ['row', 'd-flex', 'justify-content-center'],
    Children: [
        new ColumnContainer_1.default({
            Id: Guid_1.default.NewGuid(),
            Width: 12,
            WidthDesktop: 10,
            Children: [
                new FormContainer_1.default({
                    Id: formId,
                    Children: [
                        new ActionContainer_1.default({
                            Id: Guid_1.default.NewGuid(),
                            Children: [
                                new FormSubmitAction_1.default({
                                    Id: submitActionId,
                                    FormId: formId
                                }, context)
                            ]
                        }, context),
                        new RowContainer_1.default({
                            Id: Guid_1.default.NewGuid(),
                            Children: [
                                new ColumnContainer_1.default({
                                    Id: Guid_1.default.NewGuid(),
                                    Width: 12,
                                    WidthDesktop: 6,
                                    Children: [
                                        new TextControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Όνομα",
                                            AriaLabel: "Όνομα",
                                            PlaceHolder: "Όνομα",
                                            Required: true
                                        }, context),
                                        new TextControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Επώνυμο",
                                            AriaLabel: "Επώνυμο",
                                            PlaceHolder: "Επώνυμο",
                                            Required: true
                                        }, context),
                                        new TextControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Πατρώνυμο",
                                            AriaLabel: "Πατρώνυμο",
                                            PlaceHolder: "Πατρώνυμο",
                                            Required: true
                                        }, context),
                                        new SelectControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Φύλο",
                                            AriaLabel: "Φύλο",
                                            PleaseSelect: true,
                                            Required: true,
                                            LookupDataSource: {
                                                Name: 'genders',
                                                TextField: 'Name',
                                                ValueField: 'Code',
                                            }
                                        }, context),
                                        new SelectControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Τμήμα",
                                            AriaLabel: "Τμήμα",
                                            PleaseSelect: true,
                                            Required: true,
                                            LookupDataSource: {
                                                Name: 'departments',
                                                TextField: 'Name',
                                                ValueField: 'Code',
                                            }
                                        }, context),
                                        new TextControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Αριθμός μητρώου",
                                            AriaLabel: "Αριθμός μητρώου",
                                            PlaceHolder: "Αριθμός μητρώου",
                                            Required: true
                                        }, context),
                                        new TextAreaControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Αναπηρία",
                                            AriaLabel: "Αναπηρία",
                                            PlaceHolder: "Αναπηρία"
                                        }, context)
                                    ]
                                }, context),
                                new ColumnContainer_1.default({
                                    Id: Guid_1.default.NewGuid(),
                                    Width: 12,
                                    WidthDesktop: 6,
                                    Children: [
                                        new TextControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Τηλέφωνο (οικίας)",
                                            AriaLabel: "Τηλέφωνο (οικίας)",
                                            PlaceHolder: "Τηλέφωνο (οικίας)",
                                            Required: true
                                        }, context),
                                        new TextControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Τηλέφωνο (κινητό)",
                                            AriaLabel: "Τηλέφωνο (κινητό)",
                                            PlaceHolder: "Τηλέφωνο (κινητό)",
                                            Required: true
                                        }, context),
                                        new TextControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Email",
                                            AriaLabel: "Email",
                                            PlaceHolder: "Email",
                                            Required: true
                                        }, context),
                                        new TextControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Διευθυνση",
                                            AriaLabel: "Διευθυνση",
                                            PlaceHolder: "Διευθυνση",
                                            Required: true
                                        }, context),
                                        new SelectControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Τ.Κ.",
                                            AriaLabel: "Τ.Κ.",
                                            PleaseSelect: true,
                                            Required: true,
                                            LookupDataSource: {
                                                Name: 'postalCodes',
                                                TextField: 'PostalCode',
                                                ValueField: 'PostalCode',
                                            }
                                        }, context),
                                        new TextControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Πόλη",
                                            AriaLabel: "Πόλη",
                                            PlaceHolder: "Πόλη",
                                            ReadOnly: true,
                                            Required: true
                                        }, context),
                                        new TextControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: "Περιφέρεια",
                                            AriaLabel: "Περιφέρεια",
                                            PlaceHolder: "Περιφέρεια",
                                            ReadOnly: true,
                                            Required: true
                                        }, context),
                                    ]
                                }, context),
                                new ColumnContainer_1.default({
                                    Id: Guid_1.default.NewGuid(),
                                    Width: 12,
                                    Children: [
                                        new ButtonControl_1.default({
                                            Id: Guid_1.default.NewGuid(),
                                            Title: 'Επόμενο Βήμα',
                                            ActionId: submitActionId
                                        }, context)
                                    ]
                                }, context)
                            ]
                        }, context)
                    ]
                }, context)
            ]
        }, context)
    ]
}, context);
// var body = document.getElementsByClassName('page')[0] as HTMLElement;
//
// page.Build();
// page.Render(body);
// page.Bind();
var dataSource = context.Get('postalCodes');
console.log(dataSource);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./Theme/ts/index.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFkdWluby51aS8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vZ3JhZHVpbm8udWkvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2xvZGFzaC5qcyIsIndlYnBhY2s6Ly9ncmFkdWluby51aS8uL25vZGVfbW9kdWxlcy9vd2wuY2Fyb3VzZWwvZGlzdC9vd2wuY2Fyb3VzZWwuanMiLCJ3ZWJwYWNrOi8vZ3JhZHVpbm8udWkvLi9UaGVtZS90cy9BY3Rpb24udHMiLCJ3ZWJwYWNrOi8vZ3JhZHVpbm8udWkvLi9UaGVtZS90cy9BY3Rpb25Db250YWluZXIudHMiLCJ3ZWJwYWNrOi8vZ3JhZHVpbm8udWkvLi9UaGVtZS90cy9CdXR0b25Db250cm9sLnRzIiwid2VicGFjazovL2dyYWR1aW5vLnVpLy4vVGhlbWUvdHMvQ29sdW1uQ29udGFpbmVyLnRzIiwid2VicGFjazovL2dyYWR1aW5vLnVpLy4vVGhlbWUvdHMvQ29udGFpbmVyLnRzIiwid2VicGFjazovL2dyYWR1aW5vLnVpLy4vVGhlbWUvdHMvQ29udHJvbC50cyIsIndlYnBhY2s6Ly9ncmFkdWluby51aS8uL1RoZW1lL3RzL0RhdGFDb250ZXh0LnRzIiwid2VicGFjazovL2dyYWR1aW5vLnVpLy4vVGhlbWUvdHMvRGF0YVNvdXJjZS50cyIsIndlYnBhY2s6Ly9ncmFkdWluby51aS8uL1RoZW1lL3RzL0Zvcm1Db250YWluZXIudHMiLCJ3ZWJwYWNrOi8vZ3JhZHVpbm8udWkvLi9UaGVtZS90cy9Gb3JtU3VibWl0QWN0aW9uLnRzIiwid2VicGFjazovL2dyYWR1aW5vLnVpLy4vVGhlbWUvdHMvR3VpZC50cyIsIndlYnBhY2s6Ly9ncmFkdWluby51aS8uL1RoZW1lL3RzL09ic2VydmFibGUudHMiLCJ3ZWJwYWNrOi8vZ3JhZHVpbm8udWkvLi9UaGVtZS90cy9Sb3dDb250YWluZXIudHMiLCJ3ZWJwYWNrOi8vZ3JhZHVpbm8udWkvLi9UaGVtZS90cy9TZWxlY3RDb250cm9sLnRzIiwid2VicGFjazovL2dyYWR1aW5vLnVpLy4vVGhlbWUvdHMvVGV4dEFyZWFDb250cm9sLnRzIiwid2VicGFjazovL2dyYWR1aW5vLnVpLy4vVGhlbWUvdHMvVGV4dENvbnRyb2wudHMiLCJ3ZWJwYWNrOi8vZ3JhZHVpbm8udWkvLi9UaGVtZS90cy9jdXN0b20udHMiLCJ3ZWJwYWNrOi8vZ3JhZHVpbm8udWkvLi9UaGVtZS90cy9pbmRleC50cyIsIndlYnBhY2s6Ly9ncmFkdWluby51aS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9ncmFkdWluby51aS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2dyYWR1aW5vLnVpL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vZ3JhZHVpbm8udWkvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsTUFBTSxLQUEwQjs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBOzs7QUFHQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOzs7QUFHQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsWUFBWTs7QUFFcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGLG9CQUFvQjs7QUFFcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUYsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQSxrQkFBa0Isa0NBQWtDO0FBQ3BELEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFNBQVM7QUFDbEI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTLFlBQVk7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxTQUFTO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQyxJQUFJO0FBQ3RDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDBCQUEwQjtBQUMxQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0IsSUFBSTs7QUFFcEI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsMENBQTBDLElBQUk7QUFDOUM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxnQ0FBZ0MsTUFBTTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsZUFBZTs7QUFFZixTQUFTOztBQUVUO0FBQ0EsUUFBUSxpQ0FBaUM7QUFDekMsUUFBUSxvQkFBb0I7QUFDNUIsUUFBUSxzQ0FBc0M7QUFDOUMsUUFBUTtBQUNSLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsNkRBQTZEOztBQUU3RDtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsOERBQThEOztBQUU5RDtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDOztBQUVsQztBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7O0FBRTlDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7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Q0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILFFBQVEsU0FBUztBQUNqQjtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaURBQWlEO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRCxVQUFVLDRDQUE0QztBQUN0RDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7O0FBRUEsQ0FBQzs7OztBQUlEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBLFFBQVEsR0FBRztBQUNYO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBOzs7O0FBSUE7O0FBRUE7O0FBRUE7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBOztBQUVBLGNBQWMsU0FBUztBQUN2QjtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVUsT0FBTztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxPQUFPO0FBQ2pCLDBCQUEwQix3QkFBd0I7O0FBRWxEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1COztBQUVuQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGNBQWM7QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFROztBQUVSO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3Q0FBd0Msc0NBQXNDO0FBQzlFLG9DQUFvQyx1Q0FBdUM7QUFDM0Usb0NBQW9DLHNDQUFzQztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLE9BQU87QUFDUDtBQUNBLE1BQU07QUFDTixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVOztBQUVWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTs7QUFFUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0NBQW9DO0FBQ3BDLHFDQUFxQztBQUNyQyxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7Ozs7QUFLQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVLFNBQVM7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QixhQUFhO0FBQ3BDLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLFNBQVM7QUFDN0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7OztBQUdBOztBQUVBOzs7O0FBSUE7QUFDQTtBQUNBLEdBQUc7QUFDSCxjQUFjOztBQUVkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLGdCQUFnQjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7O0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxFQUFFO0FBQ0Y7O0FBRUEsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsT0FBTztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLE9BQU87QUFDZjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxnQkFBZ0I7QUFDbEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVc7O0FBRVg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsK0RBQStEO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxjQUFjOztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFtQjtBQUNwQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHVDQUF1QztBQUNqRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsdURBQXVEO0FBQzlFOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssK0NBQStDO0FBQ3BEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCxjQUFjLHFDQUFxQztBQUNuRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDLE9BQU87QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7O0FBRTlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsT0FBTztBQUNqQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixnQkFBZ0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLCtCQUErQjtBQUN2QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsdUNBQXVDLE9BQU87QUFDOUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDLE9BQU87QUFDL0M7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLHFDQUFxQztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBLFNBQVMsOEJBQThCO0FBQ3ZDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxZQUFZLE9BQU87QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFdBQVc7QUFDcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBOzs7O0FBSUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtDQUErQyxjQUFjLFdBQVc7QUFDeEUsbUJBQW1CLFVBQVU7QUFDN0I7QUFDQSxzQkFBc0IsY0FBYyxzQkFBc0IsZ0JBQWdCO0FBQzFFLGdCQUFnQixXQUFXLFlBQVk7QUFDdkMsY0FBYztBQUNkOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNkNBQTZDLGNBQWM7QUFDM0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRixDQUFDOzs7QUFHRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0RBQStEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsT0FBTzs7QUFFZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBOztBQUVBLFVBQVUsT0FBTztBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBOztBQUVBLFdBQVcsU0FBUztBQUNwQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBLFFBQVEsT0FBTztBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxnQkFBZ0I7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLGlEQUFpRCwwQkFBMEI7QUFDM0U7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLGdCQUFnQjtBQUMxQjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBOztBQUVBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUEsUUFBUSxnQkFBZ0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLGdCQUFnQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQSxpRUFBaUU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixjQUFjO0FBQ2xDLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlEQUFpRDs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCLFNBQVM7QUFDeEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0JBQStCLFNBQVM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGtCQUFrQjtBQUM1QixXQUFXLGtCQUFrQjtBQUM3QixjQUFjO0FBQ2QsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxRQUFRLG1CQUFtQjtBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLGlDQUFpQztBQUNqQztBQUNBOztBQUVBLElBQUk7QUFDSjs7QUFFQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFNBQVM7QUFDcEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7OztBQUdBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBOztBQUVBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJDQUEyQztBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsS0FBSztBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHFDQUFxQzs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBLGFBQWE7O0FBRWI7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsS0FBSztBQUNMOztBQUVBLFdBQVc7QUFDWCxHQUFHO0FBQ0g7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjs7QUFFaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjs7QUFFaEIsZ0RBQWdEO0FBQ2hEOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxJQUFJOztBQUVKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDOztBQUVsQztBQUNBLHNCQUFzQjtBQUN0QiwyQkFBMkI7O0FBRTNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQyxXQUFXLHlCQUF5QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixhQUFhLHVDQUF1QztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxxREFBcUQ7QUFDckQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1COztBQUVuQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLGNBQWMsc0RBQXNEO0FBQ3BFOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEO0FBQ0EsY0FBYyxtQ0FBbUM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxFQUFFO0FBQ0YsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLLElBQTBDO0FBQy9DLENBQUMsaUNBQWtCLEVBQUUsbUNBQUU7QUFDdkI7QUFDQSxFQUFFO0FBQUEsa0dBQUU7QUFDSjs7Ozs7QUFLQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7O0FDaG9WRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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O0FBQ3RCLGlCQUFpQixFQUFFO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLEVBQUU7QUFDakIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCLEVBQUU7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLEVBQUU7QUFDakIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFD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QUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE1BQU07QUFDckIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FB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QVM7QUFDeEIsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixlQUFlLFNBQVM7QUFDeEIsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIs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LFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFB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aUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsS0FBSztBQUNwQixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUscUJBQXFCO0FBQ3BDLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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RTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGtCQUFrQixFQUFFO0FBQ3RFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFNBQVM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsMEJBQTBCLFNBQVM7QUFDbkM7QUFDQTtBQUNBLDBCQUEwQixTQUFTO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCLGNBQWM7QUFDZDtBQUNBLGlCQUFpQixTQUFTO0FBQzFCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxVQUFVO0FBQ3pCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUztBQUMxQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFVBQVU7QUFDekIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsVUFBVTtBQUN6QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVMsR0FBRyxTQUFTLEdBQUcsU0FBUztBQUNsRCxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUyxHQUFHLFNBQVMsR0FBRyxTQUFTO0FBQ2xELGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUscUJBQXFCO0FBQ3BDLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQSxxQkFBcUIsUUFBUSxPQUFPLFNBQVMsRUFBRTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFVBQVU7QUFDekIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFNBQVMsR0FBRyxTQUFTLEdBQUcsU0FBUztBQUNwRCxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFVBQVU7QUFDekIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLE9BQU8sU0FBUyxFQUFFLEdBQUcsT0FBTyxpQkFBaUIsRUFBRTtBQUN0RSxjQUFjLE9BQU8saUJBQWlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDRCQUE0QjtBQUNqRCxxQkFBcUIsNkJBQTZCO0FBQ2xELHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUNBQXFDLG1CQUFtQixFQUFFO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiwyQkFBMkI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw0QkFBNEI7QUFDakQscUJBQXFCLDZCQUE2QjtBQUNsRCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHlDQUF5QyxtQkFBbUIsRUFBRTtBQUM5RDtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEJBQTRCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLGFBQWE7QUFDNUIsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixFQUFFO0FBQ25CO0FBQ0E7QUFDQSxxQkFBcUIsUUFBUSxPQUFPLFNBQVMsRUFBRTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsYUFBYTtBQUM1QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0EscUJBQXFCLE9BQU8sU0FBUztBQUNyQyw2QkFBNkIsZ0JBQWdCLFNBQVMsR0FBRztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLGFBQWE7QUFDNUIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBLDhCQUE4QixnQkFBZ0IsU0FBUyxHQUFHO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLGFBQWE7QUFDNUIsZUFBZSxLQUFLO0FBQ3BCLGlCQUFpQixFQUFFO0FBQ25CO0FBQ0E7QUFDQSxxQkFBcUIsUUFBUSxPQUFPLG9CQUFvQixFQUFFO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0EsUUFBUTtBQUNSLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLCtCQUErQjtBQUNwRCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHVDQUF1QyxjQUFjLEVBQUU7QUFDdkQsY0FBYywyQkFBMkI7QUFDekM7QUFDQTtBQUNBO0FBQ0EsY0FBYywyQkFBMkI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFVBQVU7QUFDekIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVMsR0FBRyxTQUFTO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTLEdBQUcsU0FBUztBQUNyQztBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVEsaUJBQWlCLEdBQUcsaUJBQWlCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLHFCQUFxQjtBQUNwQyxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLHFCQUFxQjtBQUNwQyxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsYUFBYTtBQUM1QixlQUFlLEVBQUU7QUFDakIsaUJBQWlCLEVBQUU7QUFDbkI7QUFDQTtBQUNBLHFCQUFxQixRQUFRLE9BQU8sK0JBQStCLEVBQUU7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLGFBQWE7QUFDNUIsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQSxxQkFBcUIsUUFBUSxPQUFPLFNBQVMsRUFBRTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsYUFBYTtBQUM1QixlQUFlLEVBQUU7QUFDakIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU8sV0FBVztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsRUFBRTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxvQkFBb0IseUJBQXlCO0FBQzdDO0FBQ0EsUUFBUSxJQUFJO0FBQ1osY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLGFBQWE7QUFDNUIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBLHFCQUFxQixRQUFRLE9BQU8sU0FBUyxFQUFFO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRLFFBQVEsRUFBRTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRLFFBQVEsRUFBRTtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsYUFBYTtBQUM1QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBLHFCQUFxQixRQUFRLE9BQU8sU0FBUyxFQUFFO0FBQy9DO0FBQ0EsaURBQWlELGNBQWMsRUFBRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsc0JBQXNCLEVBQUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLGFBQWE7QUFDNUIsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPLFdBQVc7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QzdCLGVBQWUsZ0JBQWdCO0FBQy9CLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLGNBQWM7QUFDN0IsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUssTUFBTSxpQkFBaUI7O0FBRTVCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLDREQUE0RDtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIseUNBQXlDO0FBQ3RFO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLE1BQU0sSUFBMEU7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSSxtQ0FBTztBQUNYO0FBQ0EsS0FBSztBQUFBLGtHQUFDO0FBQ047QUFDQTtBQUNBLE9BQU8sRUFTSjtBQUNILENBQUM7Ozs7Ozs7Ozs7Ozs7QUN4emhCRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9CLFlBQVksT0FBTztBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0Q0FBNEMsT0FBTztBQUNuRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQSxJQUFJOztBQUVKOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QjtBQUN6QixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFB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LGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQ0FBb0M7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDLGtCQUFrQixvQ0FBYTs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLFlBQVksSUFBSTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBLGtDQUFrQzs7QUFFbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDLGtCQUFrQixvQ0FBYTs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFD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QTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxrQkFBa0Isb0NBQWE7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxZQUFZLElBQUk7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FB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QUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBLGtDQUFrQzs7QUFFbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRyxFQUFFOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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LEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwwQkFBMEIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ2hGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUN2RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFFLFVB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QUksRUFBRSw0QkFBNEIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ2xGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsOEJBQThCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUNwRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDhCQUE4QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDcEYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw4QkFBOEIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3BGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsOEJBQThCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUNwRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDeEUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw4QkFBOEIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3BGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsOEJBQThCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUNwRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDhCQUE4QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDcEYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw4QkFBOEIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3BGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsOEJBQThCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUNwRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDhCQUE4QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDcEYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw4QkFBOEIsRUFBRSxVQUFV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RUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGlSQUFpUixFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDNVUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQ0FBb0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQy9GLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMvRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9DQUFvQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDL0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQ0FBb0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQy9GLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMvRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9DQUFvQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDL0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQ0FBb0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQy9GLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaUNBQWlDLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUM1RixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9DQUFvQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDL0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQ0FBb0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQy9GLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMvRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9DQUFvQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDL0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQ0FBb0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQy9GLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMvRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9DQUFvQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDL0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQ0FBb0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQy9GLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMvRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9DQUFvQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDL0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQ0FBb0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQy9GLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMvRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9DQUFvQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDL0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQ0FBb0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQy9GLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMvRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9DQUFvQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDL0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQ0FBb0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQy9GLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMvRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGtDQUFrQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDN0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrQ0FBa0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQzdGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsa0NBQWtDLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUM3RixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGtDQUFrQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDN0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx5QkFBeUIsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQ3BGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUNoRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGtDQUFrQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDN0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxnQ0FBZ0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQzNGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMkJBQTJCLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUN0RixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDREQUE0RCxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDdkgsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx1QkFBdUIsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQ2xGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaUNBQWlDLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUM1RixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDBCQUEwQixFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDckYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxpQ0FBaUMsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQzVGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMvRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLCtCQUErQixFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDMUYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrQ0FBa0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQzdGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsa0NBQWtDLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUM3RixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGtDQUFrQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDN0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrQ0FBa0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQzdGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMEJBQTBCLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUNyRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGlDQUFpQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDNUYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQ25GLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0NBQW9DLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMvRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9DQUFvQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDL0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwwQkFBMEIsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQ3JGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMEJBQTBCLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUNyRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdDQUFnQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDM0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxnQ0FBZ0MsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQzNGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMEJBQTBCLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUNyRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLCtCQUErQixFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDMUYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwrQkFBK0IsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQzFGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ0NBQWdDLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMzRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdDQUFnQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDM0YsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw2UEFBNlAsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQ3hULEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd1BBQXdQLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUNuVCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDhCQUE4QixFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDekYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxzREFBc0QsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQ2pILEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ1BBQWdQLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMzUyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDJMQUEyTCxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDdFAsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw4QkFBOEIsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQ3pGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUNsRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDBCQUEwQixFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDckYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwwT0FBME8sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQ3JTLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsK1dBQStXLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMxYSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDBCQUEwQixFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDckYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxnUEFBZ1AsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQzNTLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ1pBQWdaLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMzYyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDJIQUEySCxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDdEwsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx1RUFBdUUsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQ2xJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsbUhBQW1ILEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUM5SyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9oQkFBb2hCLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUMva0IsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw4RkFBOEYsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFO0lBQ3pKLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsOENBQThDLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUN6RyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHFLQUFxSyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUU7SUFDaE8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxtUkFBbVIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzNVLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsNmRBQTZkLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUNyaEIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxzNUJBQXM1QixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDOThCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsNGpCQUE0akIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ3BuQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHVCQUF1QixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDL0UsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw0SEFBNEgsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ3BMLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb2NBQW9jLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUM1ZixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDhhQUE4YSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDdGUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx1aUJBQXVpQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDL2xCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMmlCQUEyaUIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ25tQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDZDQUE2QyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDckcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzdFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUM1RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDNUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzVFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUM1RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDhsSkFBOGxKLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUN0cEosRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzdFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUM3RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDN0UsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzdFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaUVBQWlFLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUN2SCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGtNQUFrTSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDeFAsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxtTkFBbU4sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3pRLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsNlNBQTZTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUNuVyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHNGQUFzRixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDNUksRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx5UEFBeVAsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQy9TLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMllBQTJZLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUNqYyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHFKQUFxSixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDM00sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxtVEFBbVQsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3pXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsc0JBQXNCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM1RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDRXQUE0VyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDbGEsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwrZ0JBQStnQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDcmtCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMENBQTBDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUNoRyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1DQUFtQyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDekYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3ZFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUN0RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDdEUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx5TEFBeUwsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQy9PLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsc2hDQUFzaEMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzlrQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLCtKQUErSixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDdk4sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx5SEFBeUgsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ2pMLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUM1RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHl0Q0FBeXRDLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUNqeEMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrZUFBa2UsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzFoQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDZPQUE2TyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDclMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwyZ0JBQTJnQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDbmtCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUscU9BQXFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUM3UixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHFQQUFxUCxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDN1MsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3TkFBd04sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ2hSLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsOEhBQThILEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUN0TCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDZEQUE2RCxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDckgsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzVFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsNElBQTRJLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUNwTSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHNNQUFzTSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDOVAsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxnM0JBQWczQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDeDZCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUseTZCQUF5NkIsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQ2grQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDIrQkFBMitCLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUNsaUMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxzMUJBQXMxQixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDNzRCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsdzdCQUF3N0IsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQy8rQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHlnQ0FBeWdDLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUNoa0MsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrOEVBQWs4RSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDei9FLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsdVNBQXVTLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRTtJQUNqVyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDZqQkFBNmpCLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRTtJQUN2bkIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxnaUJBQWdpQixFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUU7SUFDMWxCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsc0lBQXNJLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRTtJQUNoTSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHkxQkFBeTFCLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRTtJQUNuNUIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxxN0JBQXE3QixFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUU7SUFDLytCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd2dCQUF3Z0IsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFO0lBQ2xrQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDROQUE0TixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDalIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx5WUFBeVksRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQzliLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDcEUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ3JFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsNjBDQUE2MEMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ2w0QyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdlQUF3ZSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDN2hCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUseUtBQXlLLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUM5TixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDRiQUE0YixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDbGYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxxckJBQXFyQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDM3VCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd0ZBQXdGLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5SSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLCtEQUErRCxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDckgsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3R0FBd0csRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlKLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ0lBQWdJLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUN0TCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdOQUFnTixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDdFEsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3eENBQXd4QyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDOTBDLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsOGpCQUE4akIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3BuQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdLQUFnSyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDdE4sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxnSEFBZ0gsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3RLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUscVdBQXFXLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUMzWixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHlDQUF5QyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDakcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrSkFBa0osRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsdVVBQXVVLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUMvWCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDJPQUEyTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDblMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx5TkFBeU4sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ2pSLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsa0lBQWtJLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUMxTCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDJPQUEyTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDblMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxxQ0FBcUMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzdGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ1VBQWdVLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUN4WCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLCtMQUErTCxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDdlAsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxndkJBQWd2QixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDeHlCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaVVBQWlVLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUN6WCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDJXQUEyVyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDbmEsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxzZ0JBQXNnQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDOWpCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUseWVBQXllLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUNqaUIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvTUFBb00sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQzNQLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsc3ZCQUFzdkIsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQzd5QixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDZSQUE2UixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDcFYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxtUkFBbVIsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQzFVLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaWJBQWliLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUN4ZSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLCtZQUErWSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDdGMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxtWEFBbVgsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQzFhLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsK3pCQUErekIsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQ3QzQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDhJQUE4SSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDck0sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrSUFBa0ksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQ3pMLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd1FBQXdRLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUMvVCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDB4QkFBMHhCLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUNqMUIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw2aUNBQTZpQyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDcG1DLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsdXhDQUF1eEMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQzkwQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1lQUFtZSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDMWhCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsa2hEQUFraEQsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQ3prRCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLCtQQUErUCxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDdFQsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxpdkJBQWl2QixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDeHlCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMHVCQUEwdUIsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQ2p5QixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLCtqQkFBK2pCLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUN0bkIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxpcUJBQWlxQixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDeHRCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMFJBQTBSLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUNqVixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9IQUFvSCxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDM0ssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxteEJBQW14QixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDMTBCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMlBBQTJQLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUNsVCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGlIQUFpSCxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDeEssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwyK0JBQTIrQixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDbGlDLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMGhCQUEwaEIsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQ2psQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGtRQUFrUSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDelQsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxzaUJBQXNpQixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDN2xCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsK2RBQStkLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUN0aEIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx1OEJBQXU4QixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDOS9CLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsbzBDQUFvMEMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQzMzQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDRIQUE0SCxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDbEwsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3REFBd0QsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzlHLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMG1CQUEwbUIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ2hxQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1IQUFtSCxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDekssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw4TUFBOE0sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3BRLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUMxRSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHFSQUFxUixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDM1UsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrekJBQWt6QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDeDJCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsK2tDQUEra0MsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3JvQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDBEQUEwRCxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDaEgsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUMvRCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9DQUFvQyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDMUYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3RFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUN0RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDdEUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3pFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUN6RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDdEUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3RFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUN0RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDekUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3RFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUN6RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGt2Q0FBa3ZDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUN4eUMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwyZUFBMmUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQ2xpQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHNZQUFzWSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDN2IsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwyZ0JBQTJnQixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDbGtCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsNHRCQUE0dEIsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQ254QixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGtqQ0FBa2pDLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUN6bUMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwyakNBQTJqQyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDbG5DLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMHhDQUEweEMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQ2oxQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDgyQkFBODJCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUNuNkIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxtVEFBbVQsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ3hXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb0hBQW9ILEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUN6SyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9EQUFvRCxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDekcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw4WUFBOFksRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ25jLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsNFFBQTRRLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUNqVSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDZjQUE2YyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDbGdCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd05BQXdOLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUM3USxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDhGQUE4RixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDbkosRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx5TkFBeU4sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQzlRLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMktBQTJLLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUNoTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGtDQUFrQyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDdkYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwrWUFBK1ksRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ3BjLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsNFNBQTRTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUNqVyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG10QkFBbXRCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUN4d0IsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx5b0JBQXlvQixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDOXJCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsdUVBQXVFLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUM1SCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDZZQUE2WSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDcGMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxtQ0FBbUMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQzFGLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsOGxCQUE4bEIsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQ3JwQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLCtOQUErTixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDdlIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw0WUFBNFksRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ3BjLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsc0hBQXNILEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUM5SyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdmQUFnZixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDeGlCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMG5CQUEwbkIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ2xyQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1QQUFtUCxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDM1MsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxzdUJBQXN1QixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDOXhCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUN6RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDBMQUEwTCxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDbFAsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw2VEFBNlQsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ3JYLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsbU1BQW1NLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUMzUCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDekUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ3pFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUN6RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDekUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ3pFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUM3RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDN0UsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxzN0JBQXM3QixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDOStCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsbW5CQUFtbkIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzNxQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGt3QkFBa3dCLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUMxekIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx5bUJBQXltQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDanFCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaVRBQWlULEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUN6VyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHlaQUF5WixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDamQsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxpY0FBaWMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ3pmLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUMxRSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDhPQUE4TyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDdFMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxpYkFBaWIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ3plLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaVhBQWlYLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUN6YSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHNpQ0FBc2lDLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUM5bEMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzdFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUM3RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDN0UsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzdFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsdWdCQUF1Z0IsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQy9qQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGlTQUFpUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDelYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3VEFBd1QsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ2hYLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaXRCQUFpdEIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ3p3QixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9QQUFvUCxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDelMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwrVUFBK1UsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ3BZLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUscUdBQXFHLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUMxSixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDQ2Q0FBNDZDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUNqK0MsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwrYUFBK2EsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ3BlLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaWZBQWlmLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUN0aUIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrUEFBa1AsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ3ZTLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ0NBQWdDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUNyRixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdhQUFnYSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDcmQsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxtV0FBbVcsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ3haLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaUhBQWlILEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUN0SyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdtQkFBd21CLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUM3cEIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx5WUFBeVksRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQzliLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMENBQTBDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUNoRyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDRMQUE0TCxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDbFAsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxpSUFBaUksRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3ZMLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsbWtDQUFta0MsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3puQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdEQUFnRCxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDdEcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ3ZFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsbVZBQW1WLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUMxWSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdWQUFnVixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDdlksRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxzdkJBQXN2QixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDN3lCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsc2xCQUFzbEIsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQzdvQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDhxQkFBOHFCLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUNydUIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxxWUFBcVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQzViLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsa1VBQWtVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUN6WCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHd3QkFBd3dCLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUMvekIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw2N0JBQTY3QixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDcC9CLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUscU9BQXFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUM1UixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDBmQUEwZixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDampCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsbWZBQW1mLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUMxaUIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3Z0RBQXdnRCxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDL2pELEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd3dDQUF3d0MsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzl6QyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHNjQUFzYyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDNWYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw0cENBQTRwQyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDbHRDLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsK1VBQStVLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUNyWSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDJwQkFBMnBCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRTtJQUMvc0IsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw4UUFBOFEsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFO0lBQ2xVLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsNlRBQTZULEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRTtJQUNqWCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHNUQUFzVCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUU7SUFDMVcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx3bkJBQXduQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUU7SUFDNXFCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsdWRBQXVkLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRTtJQUMzZ0IsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrakJBQWtqQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUU7SUFDdG1CLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMmRBQTJkLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRTtJQUMvZ0IsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw2YkFBNmIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFO0lBQ2pmLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMEZBQTBGLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUMvSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9HQUFvRyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDekosRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvS0FBb0ssRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ3pOLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ0hBQWdILEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUNySyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGtRQUFrUSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDdlQsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxzdkJBQXN2QixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDM3lCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDcEUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUNwRSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ3BFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDcEUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUNwRSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdXQUFnVyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDclosRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw4WUFBOFksRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ25jLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsNlJBQTZSLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUNsVixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHlCQUF5QixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDaEYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxtSUFBbUksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQzFMLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb2hDQUFvaEMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQzNrQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHM5Q0FBczlDLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUM3Z0QsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxpckNBQWlyQyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDeHVDLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsc0VBQXNFLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUM5SCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHFNQUFxTSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDN1AsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwySEFBMkgsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ25MLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsK0NBQStDLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUN2RyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHlaQUF5WixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDamQsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxnNEJBQWc0QixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDeDdCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsOFhBQThYLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUN0YixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDM0UsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzFFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ0xBQWdMLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUN4TyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHlkQUF5ZCxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDamhCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZytCQUFnK0IsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ3hoQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7SUFDM0UsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQzNFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUMzRSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9nQkFBb2dCLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRTtJQUM1akIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw2ZEFBNmQsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFO0lBQ3JoQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDRGQUE0RixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDbkosRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw0RkFBNEYsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO0lBQ25KLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUN4RSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDRRQUE0USxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDblUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx5N0JBQXk3QixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDaC9CLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsdUpBQXVKLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtJQUM5TSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDBCQUEwQixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUU7SUFDakYsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxzRUFBc0UsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQzVILEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd1ZBQXdWLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUM5WSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHlEQUF5RCxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDL0csRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxraUJBQWtpQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUU7SUFDeGxCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsOFJBQThSLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUNwVixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG9vQkFBb29CLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUMxckIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw0UkFBNFIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO0lBQ2xWLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUseUZBQXlGLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTtJQUMvSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHdMQUF3TCxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUU7SUFDalAsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvUkFBb1IsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFO0lBQzdVLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMEhBQTBILEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRTtJQUNuTCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHNZQUFzWSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUU7SUFDL2IsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrdEJBQWt0QixFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUU7SUFDM3dCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaVZBQWlWLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRTtJQUMxWSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDBTQUEwUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUU7SUFDblcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrWEFBa1gsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFO0lBQzNhLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUseVZBQXlWLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRTtJQUNsWixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGlzQkFBaXNCLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRTtJQUMxdkIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSx1bUJBQXVtQixFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUU7SUFDaHFCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMFhBQTBYLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRTtJQUNuYixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDJOQUEyTixFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUU7SUFDcFIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwyYkFBMmIsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFO0lBQ3BmLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsNjFCQUE2MUIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ2w1QixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGt1QkFBa3VCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUN2eEIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw2UEFBNlAsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ2xULEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsb2ZBQW9mLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUN6aUIsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxvZ0JBQW9nQixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDempCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsaThCQUFpOEIsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ3QvQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1mQUFtZixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDeGlCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsd1pBQXdaLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUM3YyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDhTQUE4UyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDblcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwydUNBQTJ1QyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDaHlDLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDbkUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUNuRSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ25FLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDbkUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUNuRSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQ25FLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDbkUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSwwRUFBMEUsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFO0lBQy9ILEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsbURBQW1ELEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUN4RyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDZ1Q0FBNnVDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRTtJQUNseUMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxrc0JBQWtzQixFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7SUFDcnZCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsbVVBQW1VLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTtJQUN0WCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLHFlQUFxZSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7SUFDeGhCLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsMHBCQUEwcEIsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFO0lBQzdzQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdIQUFnSCxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7SUFDbkssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxnUkFBZ1IsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFO0NBQ25VLENBQUM7QUFFRixJQUFJLE9BQU8sR0FBRyxDQUFDO1FBQ1gsSUFBSSxFQUFFLE9BQU87UUFDYixJQUFJLEVBQUUsTUFBTTtLQUNmLEVBQUM7UUFDRSxJQUFJLEVBQUUsTUFBTTtRQUNaLElBQUksRUFBRSxRQUFRO0tBQ2pCLENBQUMsQ0FBQztBQUVILElBQUksV0FBVyxHQUFHLENBQUM7UUFDZixJQUFJLEVBQUUsOEJBQThCO1FBQ3BDLElBQUksRUFBRSxLQUFLO0tBQ2QsRUFBRTtRQUNDLElBQUksRUFBRSw4QkFBOEI7UUFDcEMsSUFBSSxFQUFFLEtBQUs7S0FDZCxDQUFDO0FBRUYsSUFBSSxPQUFPLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUM7QUFFaEMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLG9CQUFVLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDbEUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLG9CQUFVLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDMUQsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLG9CQUFVLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFHbEUsSUFBSSxJQUFJLEdBQUcsSUFBSSxzQkFBWSxDQUFDO0lBQ3hCLEVBQUUsRUFBRSxjQUFJLENBQUMsT0FBTyxFQUFFO0lBQ2xCLFVBQVUsRUFBRSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsd0JBQXdCLENBQUM7SUFDdkQsUUFBUSxFQUFFO1FBQ04sSUFBSSx5QkFBZSxDQUFDO1lBQ2hCLEVBQUUsRUFBRSxjQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xCLEtBQUssRUFBRSxFQUFFO1lBQ1QsWUFBWSxFQUFFLEVBQUU7WUFDaEIsUUFBUSxFQUFFO2dCQUNOLElBQUksdUJBQWEsQ0FBQztvQkFDZCxFQUFFLEVBQUUsTUFBTTtvQkFDVixRQUFRLEVBQUU7d0JBQ04sSUFBSSx5QkFBZSxDQUFDOzRCQUNoQixFQUFFLEVBQUUsY0FBSSxDQUFDLE9BQU8sRUFBRTs0QkFDbEIsUUFBUSxFQUFFO2dDQUNOLElBQUksMEJBQXVCLENBQUM7b0NBQ3hCLEVBQUUsRUFBRSxjQUFjO29DQUNsQixNQUFNLEVBQUUsTUFBTTtpQ0FDakIsRUFBRSxPQUFPLENBQUM7NkJBQ2Q7eUJBQ0osRUFBRSxPQUFPLENBQUM7d0JBQ1gsSUFBSSxzQkFBWSxDQUFDOzRCQUNiLEVBQUUsRUFBRSxjQUFJLENBQUMsT0FBTyxFQUFFOzRCQUNsQixRQUFRLEVBQUU7Z0NBQ04sSUFBSSx5QkFBZSxDQUFDO29DQUNoQixFQUFFLEVBQUUsY0FBSSxDQUFDLE9BQU8sRUFBRTtvQ0FDbEIsS0FBSyxFQUFFLEVBQUU7b0NBQ1QsWUFBWSxFQUFFLENBQUM7b0NBQ2YsUUFBUSxFQUFFO3dDQUNOLElBQUkscUJBQVcsQ0FBQzs0Q0FDWixFQUFFLEVBQUUsY0FBSSxDQUFDLE9BQU8sRUFBRTs0Q0FDbEIsS0FBSyxFQUFFLE9BQU87NENBQ2QsU0FBUyxFQUFFLE9BQU87NENBQ2xCLFdBQVcsRUFBRSxPQUFPOzRDQUNwQixRQUFRLEVBQUUsSUFBSTt5Q0FDakIsRUFBRSxPQUFPLENBQUM7d0NBQ1gsSUFBSSxxQkFBVyxDQUFDOzRDQUNaLEVBQUUsRUFBRSxjQUFJLENBQUMsT0FBTyxFQUFFOzRDQUNsQixLQUFLLEVBQUUsU0FBUzs0Q0FDaEIsU0FBUyxFQUFFLFNBQVM7NENBQ3BCLFdBQVcsRUFBRSxTQUFTOzRDQUN0QixRQUFRLEVBQUUsSUFBSTt5Q0FDakIsRUFBRSxPQUFPLENBQUM7d0NBQ1gsSUFBSSxxQkFBVyxDQUFDOzRDQUNaLEVBQUUsRUFBRSxjQUFJLENBQUMsT0FBTyxFQUFFOzRDQUNsQixLQUFLLEVBQUUsV0FBVzs0Q0FDbEIsU0FBUyxFQUFFLFdBQVc7NENBQ3RCLFdBQVcsRUFBRSxXQUFXOzRDQUN4QixRQUFRLEVBQUUsSUFBSTt5Q0FDakIsRUFBRSxPQUFPLENBQUM7d0NBQ1gsSUFBSSx1QkFBYSxDQUFDOzRDQUNkLEVBQUUsRUFBRSxjQUFJLENBQUMsT0FBTyxFQUFFOzRDQUNsQixLQUFLLEVBQUUsTUFBTTs0Q0FDYixTQUFTLEVBQUUsTUFBTTs0Q0FDakIsWUFBWSxFQUFFLElBQUk7NENBQ2xCLFFBQVEsRUFBRSxJQUFJOzRDQUNkLGdCQUFnQixFQUFFO2dEQUNkLElBQUksRUFBRSxTQUFTO2dEQUNmLFNBQVMsRUFBRSxNQUFNO2dEQUNqQixVQUFVLEVBQUUsTUFBTTs2Q0FDckI7eUNBQ0osRUFBRSxPQUFPLENBQUM7d0NBQ1gsSUFBSSx1QkFBYSxDQUFDOzRDQUNkLEVBQUUsRUFBRSxjQUFJLENBQUMsT0FBTyxFQUFFOzRDQUNsQixLQUFLLEVBQUUsT0FBTzs0Q0FDZCxTQUFTLEVBQUUsT0FBTzs0Q0FDbEIsWUFBWSxFQUFFLElBQUk7NENBQ2xCLFFBQVEsRUFBRSxJQUFJOzRDQUNkLGdCQUFnQixFQUFFO2dEQUNkLElBQUksRUFBRSxhQUFhO2dEQUNuQixTQUFTLEVBQUUsTUFBTTtnREFDakIsVUFBVSxFQUFFLE1BQU07NkNBQ3JCO3lDQUNKLEVBQUUsT0FBTyxDQUFDO3dDQUNYLElBQUkscUJBQVcsQ0FBQzs0Q0FDWixFQUFFLEVBQUUsY0FBSSxDQUFDLE9BQU8sRUFBRTs0Q0FDbEIsS0FBSyxFQUFFLGlCQUFpQjs0Q0FDeEIsU0FBUyxFQUFFLGlCQUFpQjs0Q0FDNUIsV0FBVyxFQUFFLGlCQUFpQjs0Q0FDOUIsUUFBUSxFQUFFLElBQUk7eUNBQ2pCLEVBQUUsT0FBTyxDQUFDO3dDQUNYLElBQUkseUJBQWUsQ0FBQzs0Q0FDaEIsRUFBRSxFQUFFLGNBQUksQ0FBQyxPQUFPLEVBQUU7NENBQ2xCLEtBQUssRUFBRSxVQUFVOzRDQUNqQixTQUFTLEVBQUUsVUFBVTs0Q0FDckIsV0FBVyxFQUFFLFVBQVU7eUNBQzFCLEVBQUUsT0FBTyxDQUFDO3FDQUNkO2lDQUNKLEVBQUUsT0FBTyxDQUFDO2dDQUNYLElBQUkseUJBQWUsQ0FBQztvQ0FDaEIsRUFBRSxFQUFFLGNBQUksQ0FBQyxPQUFPLEVBQUU7b0NBQ2xCLEtBQUssRUFBRSxFQUFFO29DQUNULFlBQVksRUFBRSxDQUFDO29DQUNmLFFBQVEsRUFBRTt3Q0FDTixJQUFJLHFCQUFXLENBQUM7NENBQ1osRUFBRSxFQUFFLGNBQUksQ0FBQyxPQUFPLEVBQUU7NENBQ2xCLEtBQUssRUFBRSxtQkFBbUI7NENBQzFCLFNBQVMsRUFBRSxtQkFBbUI7NENBQzlCLFdBQVcsRUFBRSxtQkFBbUI7NENBQ2hDLFFBQVEsRUFBRSxJQUFJO3lDQUNqQixFQUFFLE9BQU8sQ0FBQzt3Q0FDWCxJQUFJLHFCQUFXLENBQUM7NENBQ1osRUFBRSxFQUFFLGNBQUksQ0FBQyxPQUFPLEVBQUU7NENBQ2xCLEtBQUssRUFBRSxtQkFBbUI7NENBQzFCLFNBQVMsRUFBRSxtQkFBbUI7NENBQzlCLFdBQVcsRUFBRSxtQkFBbUI7NENBQ2hDLFFBQVEsRUFBRSxJQUFJO3lDQUNqQixFQUFFLE9BQU8sQ0FBQzt3Q0FDWCxJQUFJLHFCQUFXLENBQUM7NENBQ1osRUFBRSxFQUFFLGNBQUksQ0FBQyxPQUFPLEVBQUU7NENBQ2xCLEtBQUssRUFBRSxPQUFPOzRDQUNkLFNBQVMsRUFBRSxPQUFPOzRDQUNsQixXQUFXLEVBQUUsT0FBTzs0Q0FDcEIsUUFBUSxFQUFFLElBQUk7eUNBQ2pCLEVBQUUsT0FBTyxDQUFDO3dDQUNYLElBQUkscUJBQVcsQ0FBQzs0Q0FDWixFQUFFLEVBQUUsY0FBSSxDQUFDLE9BQU8sRUFBRTs0Q0FDbEIsS0FBSyxFQUFFLFdBQVc7NENBQ2xCLFNBQVMsRUFBRSxXQUFXOzRDQUN0QixXQUFXLEVBQUUsV0FBVzs0Q0FDeEIsUUFBUSxFQUFFLElBQUk7eUNBQ2pCLEVBQUUsT0FBTyxDQUFDO3dDQUNYLElBQUksdUJBQWEsQ0FBQzs0Q0FDZCxFQUFFLEVBQUUsY0FBSSxDQUFDLE9BQU8sRUFBRTs0Q0FDbEIsS0FBSyxFQUFFLE1BQU07NENBQ2IsU0FBUyxFQUFFLE1BQU07NENBQ2pCLFlBQVksRUFBRSxJQUFJOzRDQUNsQixRQUFRLEVBQUUsSUFBSTs0Q0FDZCxnQkFBZ0IsRUFBRTtnREFDZCxJQUFJLEVBQUUsYUFBYTtnREFDbkIsU0FBUyxFQUFFLFlBQVk7Z0RBQ3ZCLFVBQVUsRUFBRSxZQUFZOzZDQUMzQjt5Q0FDSixFQUFFLE9BQU8sQ0FBQzt3Q0FDWCxJQUFJLHFCQUFXLENBQUM7NENBQ1osRUFBRSxFQUFFLGNBQUksQ0FBQyxPQUFPLEVBQUU7NENBQ2xCLEtBQUssRUFBRSxNQUFNOzRDQUNiLFNBQVMsRUFBRSxNQUFNOzRDQUNqQixXQUFXLEVBQUUsTUFBTTs0Q0FDbkIsUUFBUSxFQUFFLElBQUk7NENBQ2QsUUFBUSxFQUFFLElBQUk7eUNBQ2pCLEVBQUUsT0FBTyxDQUFDO3dDQUNYLElBQUkscUJBQVcsQ0FBQzs0Q0FDWixFQUFFLEVBQUUsY0FBSSxDQUFDLE9BQU8sRUFBRTs0Q0FDbEIsS0FBSyxFQUFFLFlBQVk7NENBQ25CLFNBQVMsRUFBRSxZQUFZOzRDQUN2QixXQUFXLEVBQUUsWUFBWTs0Q0FDekIsUUFBUSxFQUFFLElBQUk7NENBQ2QsUUFBUSxFQUFFLElBQUk7eUNBQ2pCLEVBQUUsT0FBTyxDQUFDO3FDQUNkO2lDQUNKLEVBQUUsT0FBTyxDQUFDO2dDQUNYLElBQUkseUJBQWUsQ0FBQztvQ0FDaEIsRUFBRSxFQUFFLGNBQUksQ0FBQyxPQUFPLEVBQUU7b0NBQ2xCLEtBQUssRUFBRSxFQUFFO29DQUNULFFBQVEsRUFBRTt3Q0FDTixJQUFJLHVCQUFhLENBQUM7NENBQ2QsRUFBRSxFQUFFLGNBQUksQ0FBQyxPQUFPLEVBQUU7NENBQ2xCLEtBQUssRUFBRSxjQUFjOzRDQUNyQixRQUFRLEVBQUUsY0FBYzt5Q0FDM0IsRUFBRSxPQUFPLENBQUM7cUNBQ2Q7aUNBQ0osRUFBRSxPQUFPLENBQUM7NkJBQ2Q7eUJBQ0osRUFBRSxPQUFPLENBQUM7cUJBQ2Q7aUJBQ0osRUFBRSxPQUFPLENBQUM7YUFDZDtTQUNKLEVBQUUsT0FBTyxDQUFDO0tBQ2Q7Q0FDSixFQUFFLE9BQU8sQ0FBQztBQUVYLHdFQUF3RTtBQUN4RSxFQUFFO0FBQ0YsZ0JBQWdCO0FBQ2hCLHFCQUFxQjtBQUNyQixlQUFlO0FBRWYsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUU1QyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7Ozs7O1VDM3JDeEI7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOzs7OztXQ3pCQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLEVBQUU7V0FDRjtXQUNBO1dBQ0EsQ0FBQyxJOzs7OztXQ1BEO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsRTs7Ozs7VUNKQTtVQUNBO1VBQ0E7VUFDQSIsImZpbGUiOiJzeXN0ZW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNi4wXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgT3BlbkpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjEtMDMtMDJUMTc6MDhaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG5cdFx0Ly8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG5cdFx0Ly8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cblx0XHQvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG5cdFx0Ly8gU3VwcG9ydDogUXRXZWIgPD0zLjguNSwgV2ViS2l0IDw9NTM0LjM0LCB3a2h0bWx0b3BkZiB0b29sIDw9MC4xMi41XG5cdFx0Ly8gUGx1cyBmb3Igb2xkIFdlYktpdCwgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIGNvbGxlY3Rpb25zXG5cdFx0Ly8gKGUuZy4sIGB0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIikgPT09IFwiZnVuY3Rpb25cImApLiAoZ2gtNDc1Nilcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCIgJiZcblx0XHRcdHR5cGVvZiBvYmouaXRlbSAhPT0gXCJmdW5jdGlvblwiO1xuXHR9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy42LjBcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGZsYXQoIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdFx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdH0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNlxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAyMS0wMi0xNlxuICovXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRub25uYXRpdmVTZWxlY3RvckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoIHt9ICkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoTmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0WyBpIF0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxcIiArXG5cdFx0XCJpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaWRlbnQtdG9rZW4tZGlhZ3JhbVxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcW15cXFxcclxcXFxuXFxcXGZdfFtcXFxcdy1dfFteXFwwLVxcXFx4N2ZdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XVxuXHRcdC8vIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblxuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0cmV0dXJuIG5vbkhleCA/XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0bm9uSGV4IDpcblxuXHRcdFx0Ly8gUmVwbGFjZSBhIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZSB3aXRoIHRoZSBlbmNvZGVkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHRcdC8vIEZvciB2YWx1ZXMgb3V0c2lkZSB0aGUgQmFzaWMgTXVsdGlsaW5ndWFsIFBsYW5lIChCTVApLCBtYW51YWxseSBjb25zdHJ1Y3QgYVxuXHRcdFx0Ly8gc3Vycm9nYXRlIHBhaXJcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgK1xuXHRcdFx0XHRjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICggdGFyZ2V0WyBqKysgXSA9IGVsc1sgaSsrIF0gKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAoIG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAoIG0gPSBtYXRjaFsgMSBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKCBlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMiBdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIG0gPSBtYXRjaFsgMyBdICkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSApICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdCggbm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCByY29tYmluYXRvcnMudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAhPT0gY29udGV4dCB8fCAhc3VwcG9ydC5zY29wZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRcdGlmICggKCBuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkgKSApIHtcblx0XHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsICggbmlkID0gZXhwYW5kbyApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbIGkgXSA9ICggbmlkID8gXCIjXCIgKyBuaWQgOiBcIjpzY29wZVwiICkgKyBcIiBcIiArXG5cdFx0XHRcdFx0XHRcdHRvU2VsZWN0b3IoIGdyb3Vwc1sgaSBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICk7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoIFwifFwiICksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbIGkgXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5uZXh0U2libGluZyApICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuICggbmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIgKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbICggaiA9IG1hdGNoSW5kZXhlc1sgaSBdICkgXSApIHtcblx0XHRcdFx0XHRzZWVkWyBqIF0gPSAhKCBtYXRjaGVzWyBqIF0gPSBzZWVkWyBqIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSApO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5hbWVzcGFjZSA9IGVsZW0gJiYgZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9IGVsZW0gJiYgKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBDaHJvbWUgPD0xNiAtIDI1IG9ubHksIEZpcmVmb3ggPD0zLjYgLSAzMSBvbmx5LFxuXHQvLyBTYWZhcmkgNCAtIDUgb25seSwgT3BlcmEgPD0xMS42IC0gMTIueCBvbmx5XG5cdC8vIElFL0VkZ2UgJiBvbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wIG9ubHlcblx0Ly8gU2FmYXJpIDYuMCBzdXBwb3J0cyA6c2NvcGUgYnV0IGl0J3MgYW4gYWxpYXMgb2YgOnJvb3QgdGhlcmUuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblx0XHRyZXR1cm4gdHlwZW9mIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdCFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZSBmaWVsZHNldCBkaXZcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiApO1xuXHR9ICk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoIFwiXCIgKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiKlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbIFwiVEFHXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kWyBcIkNMQVNTXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoIHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkgKSApIHtcblxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0dmFyIGlucHV0O1xuXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTMuNiAtIDUgb25seVxuXHRcdFx0Ly8gT2xkIEZpcmVmb3ggZG9lc24ndCB0aHJvdyBvbiBhIGJhZGx5LWVzY2FwZWQgaWRlbnRpZmllci5cblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiXFxcXFxcZlwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbXFxcXHJcXFxcblxcXFxmXVwiICk7XG5cdFx0fSApO1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT1kXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjplbmFibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBPcGVyYSAxMCAtIDExIG9ubHlcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIiosOnhcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLC4qOlwiICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAoIG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvciApICkgKSApIHtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkgKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGIgPSBiLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRyZXR1cm4gYSA9PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwWyBpIF0gPT09IGJwWyBpIF0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbIGkgXSwgYnBbIGkgXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRhcFsgaSBdID09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoICggbm9kZSA9IGVsZW1bIGkrKyBdICkgKSB7XG5cblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHxcblx0XHRcdFx0bWF0Y2hbIDUgXSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwclsgXCJDSElMRFwiIF0udGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcdFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiYgY2xhc3NDYWNoZShcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuXHRcdFx0XHQoICFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpICkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbIFwiZW1wdHlcIiBdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbIFwibnRoXCIgXSA9IEV4cHIucHNldWRvc1sgXCJlcVwiIF07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LFxuXHRcdFx0XHRbXVxuXHRcdFx0KSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHR0b2tlbnNcblx0XHRcdFx0XHRcdC5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFsgXCJUQUdcIiBdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZShcblx0XHRcdHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzIClcblx0XHQpO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbIFwiSURcIiBdKCB0b2tlbi5tYXRjaGVzWyAwIF1cblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksIGNvbnRleHQgKSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByWyBcIm5lZWRzQ29udGV4dFwiIF0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJocmVmXCIgKSA9PT0gXCIjXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIF9uYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09IG51bGw7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9ICk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0gKSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG5cdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIHByaW1hcnkgRGVmZXJyZWRcblx0XHRcdHByaW1hcnkgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0cHJpbWFyeS5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgcHJpbWFyeS5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBwcmltYXJ5LnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIHByaW1hcnkuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHByaW1hcnkudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgcHJpbWFyeS5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJpbWFyeS5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIF9rZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyIHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0XHRcdC8vIEluIENocm9tZSwgaWYgYW4gZWxlbWVudCBoYXZpbmcgYSBmb2N1c291dCBoYW5kbGVyIGlzIGJsdXJyZWQgYnlcblx0XHRcdFx0XHRcdC8vIGNsaWNraW5nIG91dHNpZGUgb2YgaXQsIGl0IGludm9rZXMgdGhlIGhhbmRsZXIgc3luY2hyb25vdXNseS4gSWZcblx0XHRcdFx0XHRcdC8vIHRoYXQgaGFuZGxlciBjYWxscyBgLnJlbW92ZSgpYCBvbiB0aGUgZWxlbWVudCwgdGhlIGRhdGEgaXMgY2xlYXJlZCxcblx0XHRcdFx0XHRcdC8vIGxlYXZpbmcgYHJlc3VsdGAgdW5kZWZpbmVkLiBXZSBuZWVkIHRvIGd1YXJkIGFnYWluc3QgdGhpcy5cblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQgJiYgcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXHR3aGljaDogdHJ1ZVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCBleHBlY3RTeW5jICk7XG5cblx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwcmVzcyBuYXRpdmUgZm9jdXMgb3IgYmx1ciBhcyBpdCdzIGFscmVhZHkgYmVpbmcgZmlyZWRcblx0XHQvLyBpbiBsZXZlcmFnZU5hdGl2ZS5cblx0XHRfZGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9LCBkb2MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjayApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmNhbGwoIGVsZW0gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHQvL1xuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNzArXG5cdFx0Ly8gT25seSBGaXJlZm94IGluY2x1ZGVzIGJvcmRlciB3aWR0aHNcblx0XHQvLyBpbiBjb21wdXRlZCBkaW1lbnNpb25zLiAoZ2gtNDUyOSlcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7Ym9yZGVyLWNvbGxhcHNlOnNlcGFyYXRlXCI7XG5cdFx0XHRcdHRyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjoxcHggc29saWRcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEhlaWdodCBzZXQgdGhyb3VnaCBjc3NUZXh0IGRvZXMgbm90IGdldCBhcHBsaWVkLlxuXHRcdFx0XHQvLyBDb21wdXRlZCBoZWlnaHQgdGhlbiBjb21lcyBiYWNrIGFzIDAuXG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDggQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBJbiBvdXIgYm9keUJhY2tncm91bmQuaHRtbCBpZnJhbWUsXG5cdFx0XHRcdC8vIGRpc3BsYXkgZm9yIGFsbCBkaXYgZWxlbWVudHMgaXMgc2V0IHRvIFwiaW5saW5lXCIsXG5cdFx0XHRcdC8vIHdoaWNoIGNhdXNlcyBhIHByb2JsZW0gb25seSBpbiBBbmRyb2lkIDggQ2hyb21lIDg2LlxuXHRcdFx0XHQvLyBFbnN1cmluZyB0aGUgZGl2IGlzIGRpc3BsYXk6IGJsb2NrXG5cdFx0XHRcdC8vIGdldHMgYXJvdW5kIHRoaXMgaXNzdWUuXG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gKCBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlclRvcFdpZHRoLCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCwgMTAgKSApID09PSB0ci5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggX2VsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBVc2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZS5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94LlxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTAgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIGluIHNvbWUgY2FzZXMgSUUgOSBkb2Vzbid0IHN1ZmZlciBmcm9tIHRoaXMgaXNzdWUuXG5cdFx0IXN1cHBvcnQucmVsaWFibGVUckRpbWVuc2lvbnMoKSAmJiBub2RlTmFtZSggZWxlbSwgXCJ0clwiICkgfHxcblxuXHRcdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHRcdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0XHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlICYgY29ubmVjdGVkXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIF9pLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApIClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWwsIHBhcnNlckVycm9yRWxlbTtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge31cblxuXHRwYXJzZXJFcnJvckVsZW0gPSB4bWwgJiYgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKVsgMCBdO1xuXHRpZiAoICF4bWwgfHwgcGFyc2VyRXJyb3JFbGVtICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyAoXG5cdFx0XHRwYXJzZXJFcnJvckVsZW0gP1xuXHRcdFx0XHRqUXVlcnkubWFwKCBwYXJzZXJFcnJvckVsZW0uY2hpbGROb2RlcywgZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0XHRcdHJldHVybiBlbC50ZXh0Q29udGVudDtcblx0XHRcdFx0fSApLmpvaW4oIFwiXFxuXCIgKSA6XG5cdFx0XHRcdGRhdGFcblx0XHQpICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKS5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxub3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdCBidXQgbm90IGlmIGpzb25wXG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJqc29uXCIsIHMuZGF0YVR5cGVzICkgPCAwICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UuZ3VpZCsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggX2ksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHtcblx0XHRwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLFxuXHRcdGNvbnRlbnQ6IHR5cGUsXG5cdFx0XCJcIjogXCJvdXRlclwiICsgbmFtZVxuXHR9LCBmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBfaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKFxuXHQoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXHR9XG4pO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcbi8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcbn07XG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvZGFzaCA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuOyhmdW5jdGlvbigpIHtcblxuICAvKiogVXNlZCBhcyBhIHNhZmUgcmVmZXJlbmNlIGZvciBgdW5kZWZpbmVkYCBpbiBwcmUtRVM1IGVudmlyb25tZW50cy4gKi9cbiAgdmFyIHVuZGVmaW5lZDtcblxuICAvKiogVXNlZCBhcyB0aGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuICovXG4gIHZhciBWRVJTSU9OID0gJzQuMTcuMjEnO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xuICB2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuICAvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG4gIHZhciBDT1JFX0VSUk9SX1RFWFQgPSAnVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuJyxcbiAgICAgIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJyxcbiAgICAgIElOVkFMSURfVEVNUExfVkFSX0VSUk9SX1RFWFQgPSAnSW52YWxpZCBgdmFyaWFibGVgIG9wdGlvbiBwYXNzZWQgaW50byBgXy50ZW1wbGF0ZWAnO1xuXG4gIC8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbiAgdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbiAgdmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbiAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbiAgdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICB2YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuICAvKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbiAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsXG4gICAgICBERUZBVUxUX1RSVU5DX09NSVNTSU9OID0gJy4uLic7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuICB2YXIgSE9UX0NPVU5UID0gODAwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDIsXG4gICAgICBMQVpZX1dISUxFX0ZMQUcgPSAzO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuICB2YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCxcbiAgICAgIE5BTiA9IDAgLyAwO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG4gIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCA+Pj4gMTtcblxuICAvKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xuICB2YXIgd3JhcEZsYWdzID0gW1xuICAgIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gICAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICAgIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG4gIF07XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJyxcbiAgICAgIHdlYWtTZXRUYWcgPSAnW29iamVjdCBXZWFrU2V0XSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLFxuICAgICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgd2hpdGVzcGFjZS4gKi9cbiAgdmFyIHJlVHJpbVN0YXJ0ID0gL15cXHMrLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhIHNpbmdsZSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci4gKi9cbiAgdmFyIHJlV2hpdGVzcGFjZSA9IC9cXHMvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdyYXAgZGV0YWlsIGNvbW1lbnRzLiAqL1xuICB2YXIgcmVXcmFwQ29tbWVudCA9IC9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sXG4gICAgICByZVdyYXBEZXRhaWxzID0gL1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLFxuICAgICAgcmVTcGxpdERldGFpbHMgPSAvLD8gJiAvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIGNvbXBvc2VkIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gdmFsaWRhdGUgdGhlIGB2YWxpZGF0ZWAgb3B0aW9uIGluIGBfLnRlbXBsYXRlYCB2YXJpYWJsZS5cbiAgICpcbiAgICogRm9yYmlkcyBjaGFyYWN0ZXJzIHdoaWNoIGNvdWxkIHBvdGVudGlhbGx5IGNoYW5nZSB0aGUgbWVhbmluZyBvZiB0aGUgZnVuY3Rpb24gYXJndW1lbnQgZGVmaW5pdGlvbjpcbiAgICogLSBcIigpLFwiIChtb2RpZmljYXRpb24gb2YgZnVuY3Rpb24gcGFyYW1ldGVycylcbiAgICogLSBcIj1cIiAoZGVmYXVsdCB2YWx1ZSlcbiAgICogLSBcIltde31cIiAoZGVzdHJ1Y3R1cmluZyBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzKVxuICAgKiAtIFwiL1wiIChiZWdpbm5pbmcgb2YgYSBjb21tZW50KVxuICAgKiAtIHdoaXRlc3BhY2VcbiAgICovXG4gIHZhciByZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycyA9IC9bKCk9LHt9XFxbXFxdXFwvXFxzXS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaFxuICAgKiBbRVMgdGVtcGxhdGUgZGVsaW1pdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbC1sZXhpY2FsLWNvbXBvbmVudHMpLlxuICAgKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG4gIHZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG4gIHZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG4gIHZhciByZUxhdGluID0gL1tcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx4ZmZcXHUwMTAwLVxcdTAxN2ZdL2c7XG5cbiAgLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVOb01hdGNoID0gLygkXikvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbiAgdmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgICByc0RpbmdiYXRSYW5nZSA9ICdcXFxcdTI3MDAtXFxcXHUyN2JmJyxcbiAgICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICAgIHJzTm9uQ2hhclJhbmdlID0gJ1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZicsXG4gICAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgICAgcnNVcHBlclJhbmdlID0gJ0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZScsXG4gICAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xuICB2YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgICByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICAgIHJzTG93ZXIgPSAnWycgKyByc0xvd2VyUmFuZ2UgKyAnXScsXG4gICAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xuICB2YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc01pc2NVcHBlciA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzT3B0Q29udHJMb3dlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OmR8bGx8bXxyZXxzfHR8dmUpKT8nLFxuICAgICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICAgIHJzT3JkTG93ZXIgPSAnXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pJyxcbiAgICAgIHJzT3JkVXBwZXIgPSAnXFxcXGQqKD86MVNUfDJORHwzUkR8KD8hWzEyM10pXFxcXGRUSCkoPz1cXFxcYnxbYS16X10pJyxcbiAgICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxLFxuICAgICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG4gIHZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3MgZm9yIHN5bWJvbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrc19mb3JfU3ltYm9scykuXG4gICAqL1xuICB2YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xuICB2YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbiAgdmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICAgIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzVXBwZXIgKyAnPycgKyByc01pc2NMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlcixcbiAgICByc1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyLFxuICAgIHJzT3JkVXBwZXIsXG4gICAgcnNPcmRMb3dlcixcbiAgICByc0RpZ2l0cyxcbiAgICByc0Vtb2ppXG4gIF0uam9pbignfCcpLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG4gIHZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbiAgLyoqIFVzZWQgdG8gYXNzaWduIGRlZmF1bHQgYGNvbnRleHRgIG9iamVjdCBwcm9wZXJ0aWVzLiAqL1xuICB2YXIgY29udGV4dFByb3BzID0gW1xuICAgICdBcnJheScsICdCdWZmZXInLCAnRGF0YVZpZXcnLCAnRGF0ZScsICdFcnJvcicsICdGbG9hdDMyQXJyYXknLCAnRmxvYXQ2NEFycmF5JyxcbiAgICAnRnVuY3Rpb24nLCAnSW50OEFycmF5JywgJ0ludDE2QXJyYXknLCAnSW50MzJBcnJheScsICdNYXAnLCAnTWF0aCcsICdPYmplY3QnLFxuICAgICdQcm9taXNlJywgJ1JlZ0V4cCcsICdTZXQnLCAnU3RyaW5nJywgJ1N5bWJvbCcsICdUeXBlRXJyb3InLCAnVWludDhBcnJheScsXG4gICAgJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ1VpbnQxNkFycmF5JywgJ1VpbnQzMkFycmF5JywgJ1dlYWtNYXAnLFxuICAgICdfJywgJ2NsZWFyVGltZW91dCcsICdpc0Zpbml0ZScsICdwYXJzZUludCcsICdzZXRUaW1lb3V0J1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIG1ha2UgdGVtcGxhdGUgc291cmNlVVJMcyBlYXNpZXIgdG8gaWRlbnRpZnkuICovXG4gIHZhciB0ZW1wbGF0ZUNvdW50ZXIgPSAtMTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG4gIHZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xuICB0eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICB0eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbiAgdmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbiAgY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbiAgY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbiAgdmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgICAvLyBMYXRpbi0xIFN1cHBsZW1lbnQgYmxvY2suXG4gICAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICAgJ1xceGM3JzogJ0MnLCAgJ1xceGU3JzogJ2MnLFxuICAgICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAgICdcXHhlOCc6ICdlJywgICdcXHhlOSc6ICdlJywgJ1xceGVhJzogJ2UnLCAnXFx4ZWInOiAnZScsXG4gICAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAgICdcXHhkMSc6ICdOJywgICdcXHhmMSc6ICduJyxcbiAgICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgICAnXFx4ZDknOiAnVScsICAnXFx4ZGEnOiAnVScsICdcXHhkYic6ICdVJywgJ1xceGRjJzogJ1UnLFxuICAgICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICAgJ1xceGM2JzogJ0FlJywgJ1xceGU2JzogJ2FlJyxcbiAgICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAgICdcXHhkZic6ICdzcycsXG4gICAgLy8gTGF0aW4gRXh0ZW5kZWQtQSBibG9jay5cbiAgICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgICAnXFx1MDEwNic6ICdDJywgICdcXHUwMTA4JzogJ0MnLCAnXFx1MDEwYSc6ICdDJywgJ1xcdTAxMGMnOiAnQycsXG4gICAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAgICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgICAnXFx1MDExMic6ICdFJywgICdcXHUwMTE0JzogJ0UnLCAnXFx1MDExNic6ICdFJywgJ1xcdTAxMTgnOiAnRScsICdcXHUwMTFhJzogJ0UnLFxuICAgICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAgICdcXHUwMTFkJzogJ2cnLCAgJ1xcdTAxMWYnOiAnZycsICdcXHUwMTIxJzogJ2cnLCAnXFx1MDEyMyc6ICdnJyxcbiAgICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgICAnXFx1MDEyOSc6ICdpJywgICdcXHUwMTJiJzogJ2knLCAnXFx1MDEyZCc6ICdpJywgJ1xcdTAxMmYnOiAnaScsICdcXHUwMTMxJzogJ2knLFxuICAgICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICAgJ1xcdTAxMzknOiAnTCcsICAnXFx1MDEzYic6ICdMJywgJ1xcdTAxM2QnOiAnTCcsICdcXHUwMTNmJzogJ0wnLCAnXFx1MDE0MSc6ICdMJyxcbiAgICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAgICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgICAnXFx1MDE0NCc6ICduJywgICdcXHUwMTQ2JzogJ24nLCAnXFx1MDE0OCc6ICduJywgJ1xcdTAxNGInOiAnbicsXG4gICAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICAgJ1xcdTAxNTQnOiAnUicsICAnXFx1MDE1Nic6ICdSJywgJ1xcdTAxNTgnOiAnUicsXG4gICAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAgICdcXHUwMTViJzogJ3MnLCAgJ1xcdTAxNWQnOiAncycsICdcXHUwMTVmJzogJ3MnLCAnXFx1MDE2MSc6ICdzJyxcbiAgICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgICAnXFx1MDE2OCc6ICdVJywgICdcXHUwMTZhJzogJ1UnLCAnXFx1MDE2Yyc6ICdVJywgJ1xcdTAxNmUnOiAnVScsICdcXHUwMTcwJzogJ1UnLCAnXFx1MDE3Mic6ICdVJyxcbiAgICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAgICdcXHUwMTc2JzogJ1knLCAgJ1xcdTAxNzcnOiAneScsICdcXHUwMTc4JzogJ1knLFxuICAgICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAgICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAgICdcXHUwMTMyJzogJ0lKJywgJ1xcdTAxMzMnOiAnaWonLFxuICAgICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAgICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG4gIHZhciBodG1sRXNjYXBlcyA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgaHRtbFVuZXNjYXBlcyA9IHtcbiAgICAnJmFtcDsnOiAnJicsXG4gICAgJyZsdDsnOiAnPCcsXG4gICAgJyZndDsnOiAnPicsXG4gICAgJyZxdW90Oyc6ICdcIicsXG4gICAgJyYjMzk7JzogXCInXCJcbiAgfTtcblxuICAvKiogVXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHN0cmluZ0VzY2FwZXMgPSB7XG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgXCInXCI6IFwiJ1wiLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbiAgdmFyIGZyZWVQYXJzZUZsb2F0ID0gcGFyc2VGbG9hdCxcbiAgICAgIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xuICB2YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbiAgdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbiAgdmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuICB2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbiAgLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG4gIHZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgICAgaWYgKHR5cGVzKSB7XG4gICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgIH1cblxuICAgICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9KCkpO1xuXG4gIC8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG4gIHZhciBub2RlSXNBcnJheUJ1ZmZlciA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzQXJyYXlCdWZmZXIsXG4gICAgICBub2RlSXNEYXRlID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNEYXRlLFxuICAgICAgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXAsXG4gICAgICBub2RlSXNSZWdFeHAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1JlZ0V4cCxcbiAgICAgIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0LFxuICAgICAgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUFnZ3JlZ2F0b3JgIGZvciBhcnJheXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5QWdncmVnYXRvcihhcnJheSwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2hSaWdodChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZXZlcnlgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoIXByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXNXaXRoKGFycmF5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2VSaWdodChhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbLS1sZW5ndGhdO1xuICAgIH1cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIHZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBU0NJSSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhbiBBU0NJSSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmZpbmRLZXlgIGFuZCBgXy5maW5kTGFzdEtleWAsXG4gICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmBcbiAgICogdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCBvciBpdHMga2V5LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRLZXkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlSW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2ZXaXRoKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVhbmAgYW5kIGBfLm1lYW5CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZU1lYW4oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiBsZW5ndGggPyAoYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIC8gbGVuZ3RoKSA6IE5BTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCwgd2l0aG91dCBzdXBwb3J0XG4gICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxuICAgKiAgYGNvbGxlY3Rpb25gIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgZWFjaEZ1bmMpIHtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaW5pdEFjY3VtXG4gICAgICAgID8gKGluaXRBY2N1bSA9IGZhbHNlLCB2YWx1ZSlcbiAgICAgICAgOiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydEJ5YCB3aGljaCB1c2VzIGBjb21wYXJlcmAgdG8gZGVmaW5lIHRoZVxuICAgKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gICAqIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmVyIFRoZSBmdW5jdGlvbiB0byBkZWZpbmUgc29ydCBvcmRlci5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU29ydEJ5KGFycmF5LCBjb21wYXJlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICBhcnJheS5zb3J0KGNvbXBhcmVyKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc3VtYCBhbmQgYF8uc3VtQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgcmVzdWx0LFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRlZShhcnJheVtpbmRleF0pO1xuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGN1cnJlbnQgOiAocmVzdWx0ICsgY3VycmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICAgKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvUGFpcnNgIGFuZCBgXy50b1BhaXJzSW5gIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXlcbiAgICogb2Yga2V5LXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRvUGFpcnMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gW2tleSwgb2JqZWN0W2tleV1dO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRyaW1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVHJpbShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nXG4gICAgICA/IHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKVxuICAgICAgOiBzdHJpbmc7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2VcbiAgICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gdHJpbW1lZEVuZEluZGV4KHN0cmluZykge1xuICAgIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiByZVdoaXRlc3BhY2UudGVzdChzdHJpbmcuY2hhckF0KGluZGV4KSkpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICBpZiAoaXRlcmF0ZWVzLmxlbmd0aCkge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkoaXRlcmF0ZWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2VHZXQodmFsdWUsIGl0ZXJhdGVlLmxlbmd0aCA9PT0gMSA/IGl0ZXJhdGVlWzBdIDogaXRlcmF0ZWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWU7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2lkZW50aXR5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgICAqIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleE9mID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICBzZWVuID0gYXJyYXk7XG5cbiAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gYXJyYXkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpIHtcbiAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gICAgICogY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICBzdGFydCArPSBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXBlYXRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhcnJheVNhbXBsZSh2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZVNpemVgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgdmFyIGFycmF5ID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGFycmF5LCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InIHx8IGtleSA9PT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2h1ZmZsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAgICAgKiBwZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb2YgYGFycmF5YCB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgICAgICBpZiAoY29tcHV0ZWQgIT09IG51bGwgJiYgIWlzU3ltYm9sKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5LCByZXRIaWdoZXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gICAgICogd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlXG4gICAgICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGhpZ2ggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgdmFyIHZhbElzTmFOID0gdmFsdWUgIT09IHZhbHVlLFxuICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpLFxuICAgICAgICAgIHZhbElzVW5kZWZpbmVkID0gdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZShhcnJheVttaWRdKSxcbiAgICAgICAgICAgIG90aElzRGVmaW5lZCA9IGNvbXB1dGVkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gY29tcHV0ZWQgPT09IGNvbXB1dGVkLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChjb21wdXRlZCk7XG5cbiAgICAgICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICAgICAgdmFyIHNldExvdyA9IHJldEhpZ2hlc3QgfHwgb3RoSXNSZWZsZXhpdmU7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNVbmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBvdGhJc0RlZmluZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzTnVsbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNOdWxsKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAhb3RoSXNOdWxsICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc1N5bWJvbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3RoSXNOdWxsIHx8IG90aElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0TG93ID0gcmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldExvdykge1xuICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1pbihoaWdoLCBNQVhfQVJSQVlfSU5ERVgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZFVuaXFgIGFuZCBgXy5zb3J0ZWRVbmlxQnlgIHdpdGhvdXRcbiAgICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIGlmICghaW5kZXggfHwgIWVxKGNvbXB1dGVkLCBzZWVuKSkge1xuICAgICAgICAgIHZhciBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9OdW1iZXJgIHdoaWNoIGRvZXNuJ3QgZW5zdXJlIGNvcnJlY3RcbiAgICAgKiBjb252ZXJzaW9ucyBvZiBiaW5hcnksIGhleGFkZWNpbWFsLCBvciBvY3RhbCBzdHJpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgcmV0dXJuICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAgICAgKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgICAgICBpZiAoc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHNlZW4sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHByb3BlcnR5IHBhdGggdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51cGRhdGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHJldHVybiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdXBkYXRlcihiYXNlR2V0KG9iamVjdCwgcGF0aCkpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZHJvcFdoaWxlYCBhbmQgYF8udGFrZVdoaWxlYFxuICAgICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRHJvcF0gU3BlY2lmeSBkcm9wcGluZyBlbGVtZW50cyBpbnN0ZWFkIG9mIHRha2luZyB0aGVtLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgaXNEcm9wLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkgJiZcbiAgICAgICAgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge31cblxuICAgICAgcmV0dXJuIGlzRHJvcFxuICAgICAgICA/IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IDAgOiBpbmRleCksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiBsZW5ndGgpKVxuICAgICAgICA6IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IDApLCAoZnJvbVJpZ2h0ID8gbGVuZ3RoIDogaW5kZXgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgd3JhcHBlclZhbHVlYCB3aGljaCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAgICAgKiBwZXJmb3JtaW5nIGEgc2VxdWVuY2Ugb2YgYWN0aW9ucyBvbiB0aGUgdW53cmFwcGVkIGB2YWx1ZWAsIHdoZXJlIGVhY2hcbiAgICAgKiBzdWNjZXNzaXZlIGFjdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFjdGlvbnMgQWN0aW9ucyB0byBwZXJmb3JtIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdyYXBwZXJWYWx1ZSh2YWx1ZSwgYWN0aW9ucykge1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC52YWx1ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKGFjdGlvbnMsIGZ1bmN0aW9uKHJlc3VsdCwgYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24uZnVuYy5hcHBseShhY3Rpb24udGhpc0FyZywgYXJyYXlQdXNoKFtyZXN1bHRdLCBhY3Rpb24uYXJncykpO1xuICAgICAgfSwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ueG9yYCwgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWG9yKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VVbmlxKGFycmF5c1swXSkgOiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tpbmRleF0sXG4gICAgICAgICAgICBvdGhJbmRleCA9IC0xO1xuXG4gICAgICAgIHdoaWxlICgrK290aEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gYmFzZURpZmZlcmVuY2UocmVzdWx0W2luZGV4XSB8fCBhcnJheSwgYXJyYXlzW290aEluZGV4XSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKHJlc3VsdCwgMSksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uemlwT2JqZWN0YCB3aGljaCBhc3NpZ25zIHZhbHVlcyB1c2luZyBgYXNzaWduRnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25GdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzLCBhc3NpZ25GdW5jKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgdmFsc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGluZGV4IDwgdmFsc0xlbmd0aCA/IHZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGFzc2lnbkZ1bmMocmVzdWx0LCBwcm9wc1tpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhbiBlbXB0eSBhcnJheSBpZiBpdCdzIG5vdCBhbiBhcnJheSBsaWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgYGJhc2VSZXN0YCBhbGlhcyB3aGljaCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBgaWRlbnRpdHlgIGJ5IG1vZHVsZVxuICAgICAqIHJlcGxhY2VtZW50IHBsdWdpbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHZhciBjYXN0UmVzdCA9IGJhc2VSZXN0O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gICAgICByZXR1cm4gKCFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoKSA/IGFycmF5IDogYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgY2xlYXJUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vY2xlYXJUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ8T2JqZWN0fSBpZCBUaGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3Qgb2YgdGhlIHRpbWVyIHRvIGNsZWFyLlxuICAgICAqL1xuICAgIHZhciBjbGVhclRpbWVvdXQgPSBjdHhDbGVhclRpbWVvdXQgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiByb290LmNsZWFyVGltZW91dChpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICBidWZmZXIuY29weShyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gICAgICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG4gICAgICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gICAgICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gICAgICpcbiAgICAgKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICAgICAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAgICAgKiBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgICAgIGxlbmd0aCA9IG9iakNyaXRlcmlhLmxlbmd0aCxcbiAgICAgICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZUFzY2VuZGluZyhvYmpDcml0ZXJpYVtpbmRleF0sIG90aENyaXRlcmlhW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgKiAob3JkZXIgPT0gJ2Rlc2MnID8gLTEgOiAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgICAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgICAgIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMsXG4gICAgICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZWZ0TGVuZ3RoICsgcmFuZ2VMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICAgICAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgICAgIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5ncm91cEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBpbml0aWFsaXplci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLFxuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTtcblxuICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBzZXR0ZXIsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYWNjdW11bGF0b3IpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYW4gaW5zdGFuY2Ugb2YgYEN0b3JgIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgKiB3aGV0aGVyIGl0IHdhcyBpbnZva2VkIGFzIHBhcnQgb2YgYSBgbmV3YCBleHByZXNzaW9uIG9yIGJ5IGBjYWxsYCBvciBgYXBwbHlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDdG9yIFRoZSBjb25zdHJ1Y3RvciB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3RvcihDdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLiBTZWVcbiAgICAgICAgLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1mdW5jdGlvbi1vYmplY3RzLWNhbGwtdGhpc2FyZ3VtZW50LWFyZ3VtZW50c2xpc3RcbiAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgICAgIC8vIE1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBlbmFibGUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gICAgICB2YXIgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICAgICAgPyBbXVxuICAgICAgICAgIDogcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaXRlcmFibGVbaXRlcmF0ZWUgPyBjb2xsZWN0aW9uW2luZGV4XSA6IGluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsb3cgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihmdW5jcykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwcmVyZXEgPSBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1O1xuXG4gICAgICAgIGlmIChmcm9tUmlnaHQpIHtcbiAgICAgICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlcmVxICYmICF3cmFwcGVyICYmIGdldEZ1bmNOYW1lKGZ1bmMpID09ICd3cmFwcGVyJykge1xuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBuZXcgTG9kYXNoV3JhcHBlcihbXSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gd3JhcHBlciA/IGluZGV4IDogbGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGZ1bmMgPSBmdW5jc1tpbmRleF07XG5cbiAgICAgICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoZGF0YSAmJiBpc0xhemlhYmxlKGRhdGFbMF0pICYmXG4gICAgICAgICAgICAgICAgZGF0YVsxXSA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJlxuICAgICAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gd3JhcHBlcltnZXRGdW5jTmFtZShkYXRhWzBdKV0uYXBwbHkod3JhcHBlciwgZGF0YVszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICA/IHdyYXBwZXJbZnVuY05hbWVdKClcbiAgICAgICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gICAgICogIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBXUkFQX0FSWV9GTEFHLFxuICAgICAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycmllZCA9IGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSxcbiAgICAgICAgICBpc0ZsaXAgPSBiaXRtYXNrICYgV1JBUF9GTElQX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDdXJyaWVkKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgICAgICBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgICAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgdmFyIG5ld0hvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHRoaXNBcmcsXG4gICAgICAgICAgICBhcmdzLCBuZXdIb2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkgLSBsZW5ndGhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLFxuICAgICAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgICAgIGlmIChhcmdQb3MpIHtcbiAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmxpcCAmJiBsZW5ndGggPiAxKSB7XG4gICAgICAgICAgYXJncy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3Rvcihmbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmludmVydEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRvSXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludmVydGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmVydGVyKHNldHRlciwgdG9JdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgdG9JdGVyYXRlZShpdGVyYXRlZSksIHt9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSB1c2VkIGZvciBgdW5kZWZpbmVkYCBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXRoT3BlcmF0aW9uKG9wZXJhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgb3RoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9TdHJpbmcob3RoZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb051bWJlcihvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ub3ZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBvdmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU92ZXIoYXJyYXlGdW5jKSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oaXRlcmF0ZWVzKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICB2YXIgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGFycmF5RnVuYyhpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIGBsZW5ndGhgLiBUaGUgYGNoYXJzYCBzdHJpbmdcbiAgICAgKiBpcyB0cnVuY2F0ZWQgaWYgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGV4Y2VlZHMgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIGNoYXJzID0gY2hhcnMgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGJhc2VUb1N0cmluZyhjaGFycyk7XG5cbiAgICAgIHZhciBjaGFyc0xlbmd0aCA9IGNoYXJzLmxlbmd0aDtcbiAgICAgIGlmIChjaGFyc0xlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzTGVuZ3RoID8gYmFzZVJlcGVhdChjaGFycywgbGVuZ3RoKSA6IGNoYXJzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VSZXBlYXQoY2hhcnMsIG5hdGl2ZUNlaWwobGVuZ3RoIC8gc3RyaW5nU2l6ZShjaGFycykpKTtcbiAgICAgIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKVxuICAgICAgICA/IGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHJlc3VsdCksIDAsIGxlbmd0aCkuam9pbignJylcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nXG4gICAgICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksXG4gICAgICAgICAgICBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG5cbiAgICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJhbmdlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAoc3RhcnQgPCBlbmQgPyAxIDogLTEpIDogdG9GaW5pdGUoc3RlcCk7XG4gICAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSByZWxhdGlvbmFsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlbGF0aW9uYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24ob3BlcmF0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICBvdGhlciA9IHRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gICAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlY3VycnkoZnVuYywgYml0bWFzaywgd3JhcEZ1bmMsIHBsYWNlaG9sZGVyLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsXG4gICAgICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IHBhcnRpYWxzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgICAgIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG5cbiAgICAgIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsXG4gICAgICAgIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIGlmIChpc0xhemlhYmxlKGZ1bmMpKSB7XG4gICAgICAgIHNldERhdGEocmVzdWx0LCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhyZXN1bHQsIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLnJvdW5kYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBNYXRoW21ldGhvZE5hbWVdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gMCA6IG5hdGl2ZU1pbih0b0ludGVnZXIocHJlY2lzaW9uKSwgMjkyKTtcbiAgICAgICAgaWYgKHByZWNpc2lvbiAmJiBuYXRpdmVJc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgICAgLy8gU2hpZnQgd2l0aCBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhdm9pZCBmbG9hdGluZy1wb2ludCBpc3N1ZXMuXG4gICAgICAgICAgLy8gU2VlIFtNRE5dKGh0dHBzOi8vbWRuLmlvL3JvdW5kI0V4YW1wbGVzKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHZhciBwYWlyID0gKHRvU3RyaW5nKG51bWJlcikgKyAnZScpLnNwbGl0KCdlJyksXG4gICAgICAgICAgICAgIHZhbHVlID0gZnVuYyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG5cbiAgICAgICAgICBwYWlyID0gKHRvU3RyaW5nKHZhbHVlKSArICdlJykuc3BsaXQoJ2UnKTtcbiAgICAgICAgICByZXR1cm4gKyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy50b1BhaXJzYCBvciBgXy50b1BhaXJzSW5gIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhaXJzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvUGFpcnMoa2V5c0Z1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgICAgICBpZiAodGFnID09IG1hcFRhZykge1xuICAgICAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlVG9QYWlycyhvYmplY3QsIGtleXNGdW5jKG9iamVjdCkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gICAgICogYHRoaXNgIGJpbmRpbmcgYW5kIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogICAgMSAtIGBfLmJpbmRgXG4gICAgICogICAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogICAgNCAtIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBvZiBhIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogICAgOCAtIGBfLmN1cnJ5YFxuICAgICAqICAgMTYgLSBgXy5jdXJyeVJpZ2h0YFxuICAgICAqICAgMzIgLSBgXy5wYXJ0aWFsYFxuICAgICAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogIDEyOCAtIGBfLnJlYXJnYFxuICAgICAqICAyNTYgLSBgXy5hcnlgXG4gICAgICogIDUxMiAtIGBfLmZsaXBgXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICAgICAgYXJpdHkgPSBhcml0eSA9PT0gdW5kZWZpbmVkID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICAgICAgbGVuZ3RoIC09IGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChiaXRtYXNrICYgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpO1xuXG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCxcbiAgICAgICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgICBmdW5jID0gbmV3RGF0YVswXTtcbiAgICAgIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICAgICAgdGhpc0FyZyA9IG5ld0RhdGFbMl07XG4gICAgICBwYXJ0aWFscyA9IG5ld0RhdGFbM107XG4gICAgICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IChpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGgpXG4gICAgICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gICAgICBpZiAoIWFyaXR5ICYmIGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKTtcbiAgICAgIH1cbiAgICAgIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICAgICAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IFdSQVBfQ1VSUllfUklHSFRfRkxBRykge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gICAgICB9IGVsc2UgaWYgKChiaXRtYXNrID09IFdSQVBfUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKFdSQVBfQklORF9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcpKSAmJiAhaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZXR0ZXIgPSBkYXRhID8gYmFzZVNldERhdGEgOiBzZXREYXRhO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKSwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c2AgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25JbmAgdXNlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzXG4gICAgICogb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXNcbiAgICAgKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKG9ialZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzRGVlcGAgdG8gY3VzdG9taXplIGl0cyBgXy5tZXJnZWAgdXNlIHRvIG1lcmdlIHNvdXJjZVxuICAgICAqIG9iamVjdHMgaW50byBkZXN0aW5hdGlvbiBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCB0aHJ1LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgcGFyZW50IG9iamVjdCBvZiBgc3JjVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialZhbHVlKSAmJiBpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgb2JqVmFsdWUpO1xuICAgICAgICBiYXNlTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCB1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9taXRgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uY2xvbmVEZWVwYCB1c2UgdG8gb25seSBjbG9uZSBwbGFpblxuICAgICAqIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bmNsb25lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCB0byBkZWZlciBjbG9uaW5nIHRvIGBfLmNsb25lRGVlcGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tT21pdENsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gICAgICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gICAgICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICAgICAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgICAgIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICAgICAgaWYgKG9ialN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gICAgICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgICAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgICAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQsIGZsYXR0ZW4pLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGdldERhdGEgPSAhbWV0YU1hcCA/IG5vb3AgOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZ1bmNOYW1lKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSAoZnVuYy5uYW1lICsgJycpLFxuICAgICAgICAgIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdF0sXG4gICAgICAgICAgbGVuZ3RoID0gaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIHJlc3VsdCkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLFxuICAgICAgICAgICAgb3RoZXJGdW5jID0gZGF0YS5mdW5jO1xuICAgICAgICBpZiAob3RoZXJGdW5jID09IG51bGwgfHwgb3RoZXJGdW5jID09IGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFyZ3VtZW50IHBsYWNlaG9sZGVyIHZhbHVlIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEhvbGRlcihmdW5jKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gsICdwbGFjZWhvbGRlcicpID8gbG9kYXNoIDogZnVuYztcbiAgICAgIHJldHVybiBvYmplY3QucGxhY2Vob2xkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpdGVyYXRlZVwiIGZ1bmN0aW9uLiBJZiBgXy5pdGVyYXRlZWAgaXMgY3VzdG9taXplZCxcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGN1c3RvbSBtZXRob2QsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBiYXNlSXRlcmF0ZWVgLlxuICAgICAqIElmIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHRoZSBjaG9zZW4gZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIHRoZW0gYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWVdIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiB0aGUgY3JlYXRlZCBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNob3NlbiBmdW5jdGlvbiBvciBpdHMgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEl0ZXJhdGVlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaC5pdGVyYXRlZSB8fCBpdGVyYXRlZTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gaXRlcmF0ZWUgPyBiYXNlSXRlcmF0ZWUgOiByZXN1bHQ7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJlc3VsdChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgICAgIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgICAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgICAgICA6IGRhdGEubWFwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICAgICAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgaWYgKHVubWFza2VkKSB7XG4gICAgICAgIGlmIChpc093bikge1xuICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB3aGlsZSAob2JqZWN0KSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIHZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4gICAgLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuICAgIGlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAgICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgICAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAgICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICAgICAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgICAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZpZXcsIGFwcGx5aW5nIGFueSBgdHJhbnNmb3Jtc2AgdG8gdGhlIGBzdGFydGAgYW5kIGBlbmRgIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtcyBUaGUgdHJhbnNmb3JtYXRpb25zIHRvIGFwcGx5IHRvIHRoZSB2aWV3LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBzdGFydGAgYW5kIGBlbmRgXG4gICAgICogIHBvc2l0aW9ucyBvZiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRWaWV3KHN0YXJ0LCBlbmQsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybXNbaW5kZXhdLFxuICAgICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2Ryb3AnOiAgICAgIHN0YXJ0ICs9IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Ryb3BSaWdodCc6IGVuZCAtPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlJzogICAgICBlbmQgPSBuYXRpdmVNaW4oZW5kLCBzdGFydCArIHNpemUpOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlUmlnaHQnOiBzdGFydCA9IG5hdGl2ZU1heChzdGFydCwgZW5kIC0gc2l6ZSk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyAnc3RhcnQnOiBzdGFydCwgJ2VuZCc6IGVuZCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHdyYXBwZXIgZGV0YWlscyBmcm9tIHRoZSBgc291cmNlYCBib2R5IGNvbW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd3JhcHBlciBkZXRhaWxzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFdyYXBEZXRhaWxzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoID0gc291cmNlLm1hdGNoKHJlV3JhcERldGFpbHMpO1xuICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQocmVTcGxpdERldGFpbHMpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICAgICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gICAgICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgICAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICAgICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgICAgIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICAgICAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgICAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB3cmFwcGVyIGBkZXRhaWxzYCBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgYHNvdXJjZWAgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gaW5zZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHNvdXJjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIGRldGFpbHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBkZXRhaWxzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGRldGFpbHNbbGFzdEluZGV4XSA9IChsZW5ndGggPiAxID8gJyYgJyA6ICcnKSArIGRldGFpbHNbbGFzdEluZGV4XTtcbiAgICAgIGRldGFpbHMgPSBkZXRhaWxzLmpvaW4obGVuZ3RoID4gMiA/ICcsICcgOiAnICcpO1xuICAgICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKHJlV3JhcENvbW1lbnQsICd7XFxuLyogW3dyYXBwZWQgd2l0aCAnICsgZGV0YWlscyArICddICovXFxuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICAgICAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICAgICApIHtcbiAgICAgICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgICAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICAgICAgOiAodmFsdWUgPT09IG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMYXppYWJsZShmdW5jKSB7XG4gICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICBvdGhlciA9IGxvZGFzaFtmdW5jTmFtZV07XG5cbiAgICAgIGlmICh0eXBlb2Ygb3RoZXIgIT0gJ2Z1bmN0aW9uJyB8fCAhKGZ1bmNOYW1lIGluIExhenlXcmFwcGVyLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZ1bmMgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKG90aGVyKTtcbiAgICAgIHJldHVybiAhIWRhdGEgJiYgZnVuYyA9PT0gZGF0YVswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gICAgICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaXMgY2FwYWJsZSBvZiBiZWluZyBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2FibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICB2YXIgaXNNYXNrYWJsZSA9IGNvcmVKc0RhdGEgPyBpc0Z1bmN0aW9uIDogc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICAgICAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICAgICAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gICAgICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gICAgICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gICAgICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWVyZ2VzIHRoZSBmdW5jdGlvbiBtZXRhZGF0YSBvZiBgc291cmNlYCBpbnRvIGBkYXRhYC5cbiAgICAgKlxuICAgICAqIE1lcmdpbmcgbWV0YWRhdGEgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIHdyYXBwZXJzIHVzZWQgdG8gaW52b2tlIGEgZnVuY3Rpb24uXG4gICAgICogVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIG1ldGhvZHMgbGlrZSBgXy5iaW5kYCwgYF8uY3VycnlgLCBhbmQgYF8ucGFydGlhbGBcbiAgICAgKiBtYXkgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIGV4ZWN1dGlvbiBvcmRlci4gTWV0aG9kcyBsaWtlIGBfLmFyeWAgYW5kXG4gICAgICogYF8ucmVhcmdgIG1vZGlmeSBmdW5jdGlvbiBhcmd1bWVudHMsIG1ha2luZyB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcmVcbiAgICAgKiBleGVjdXRlZCBpbXBvcnRhbnQsIHByZXZlbnRpbmcgdGhlIG1lcmdpbmcgb2YgbWV0YWRhdGEuIEhvd2V2ZXIsIHdlIG1ha2VcbiAgICAgKiBhbiBleGNlcHRpb24gZm9yIGEgc2FmZSBjb21iaW5lZCBjYXNlIHdoZXJlIGN1cnJpZWQgZnVuY3Rpb25zIGhhdmUgYF8uYXJ5YFxuICAgICAqIGFuZCBvciBgXy5yZWFyZ2AgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgZGVzdGluYXRpb24gbWV0YWRhdGEuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBzb3VyY2UgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkYXRhYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZURhdGEoZGF0YSwgc291cmNlKSB7XG4gICAgICB2YXIgYml0bWFzayA9IGRhdGFbMV0sXG4gICAgICAgICAgc3JjQml0bWFzayA9IHNvdXJjZVsxXSxcbiAgICAgICAgICBuZXdCaXRtYXNrID0gYml0bWFzayB8IHNyY0JpdG1hc2ssXG4gICAgICAgICAgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgKFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHIHwgV1JBUF9BUllfRkxBRyk7XG5cbiAgICAgIHZhciBpc0NvbWJvID1cbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX1JFQVJHX0ZMQUcpICYmIChkYXRhWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpKSAmJiAoc291cmNlWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpO1xuXG4gICAgICAvLyBFeGl0IGVhcmx5IGlmIG1ldGFkYXRhIGNhbid0IGJlIG1lcmdlZC5cbiAgICAgIGlmICghKGlzQ29tbW9uIHx8IGlzQ29tYm8pKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgdGhpc0FyZ2AgaWYgYXZhaWxhYmxlLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICBkYXRhWzJdID0gc291cmNlWzJdO1xuICAgICAgICAvLyBTZXQgd2hlbiBjdXJyeWluZyBhIGJvdW5kIGZ1bmN0aW9uLlxuICAgICAgICBuZXdCaXRtYXNrIHw9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyA/IDAgOiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUc7XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgYXJndW1lbnRzLlxuICAgICAgdmFyIHZhbHVlID0gc291cmNlWzNdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFscyA9IGRhdGFbM107XG4gICAgICAgIGRhdGFbM10gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzKHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzRdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzRdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzNdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNF07XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgcmlnaHQgYXJndW1lbnRzLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbNV07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcGFydGlhbHMgPSBkYXRhWzVdO1xuICAgICAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzZdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzVdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNl07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcmdQb3NgIGlmIGF2YWlsYWJsZS5cbiAgICAgIHZhbHVlID0gc291cmNlWzddO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRhdGFbN10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyeWAgaWYgaXQncyBzbWFsbGVyLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0FSWV9GTEFHKSB7XG4gICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdID09IG51bGwgPyBzb3VyY2VbOF0gOiBuYXRpdmVNaW4oZGF0YVs4XSwgc291cmNlWzhdKTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyaXR5YCBpZiBvbmUgaXMgbm90IHByb3ZpZGVkLlxuICAgICAgaWYgKGRhdGFbOV0gPT0gbnVsbCkge1xuICAgICAgICBkYXRhWzldID0gc291cmNlWzldO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgZnVuY2AgYW5kIG1lcmdlIGJpdG1hc2tzLlxuICAgICAgZGF0YVswXSA9IHNvdXJjZVswXTtcbiAgICAgIGRhdGFbMV0gPSBuZXdCaXRtYXNrO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAgICAgKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICAgICAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFyZW50IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdGggVGhlIHBhdGggdG8gZ2V0IHRoZSBwYXJlbnQgdmFsdWUgb2YuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBhcmVudCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJlbnQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5sZW5ndGggPCAyID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgYGFycmF5YCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIGZpcnN0IGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBmaXJzdCBlbGVtZW50LCB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBzZWNvbmQgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIHNlY29uZCBlbGVtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byByZW9yZGVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFycmF5IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlcihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oaW5kZXhlcy5sZW5ndGgsIGFyckxlbmd0aCksXG4gICAgICAgICAgb2xkQXJyYXkgPSBjb3B5QXJyYXkoYXJyYXkpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgICAgIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgdGhpcyBmdW5jdGlvbiBiZWNvbWVzIGhvdCwgaS5lLiBpcyBpbnZva2VkIGEgbG90IGluIGEgc2hvcnRcbiAgICAgKiBwZXJpb2Qgb2YgdGltZSwgaXQgd2lsbCB0cmlwIGl0cyBicmVha2VyIGFuZCB0cmFuc2l0aW9uIHRvIGFuIGlkZW50aXR5XG4gICAgICogZnVuY3Rpb24gdG8gYXZvaWQgZ2FyYmFnZSBjb2xsZWN0aW9uIHBhdXNlcyBpbiBWOC4gU2VlXG4gICAgICogW1Y4IGlzc3VlIDIwNzBdKGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzApXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXREYXRhID0gc2hvcnRPdXQoYmFzZVNldERhdGEpO1xuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYHNldFRpbWVvdXRgXShodHRwczovL21kbi5pby9zZXRUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIHNldFRpbWVvdXQgPSBjdHhTZXRUaW1lb3V0IHx8IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICAgIHJldHVybiByb290LnNldFRpbWVvdXQoZnVuYywgd2FpdCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGB3cmFwcGVyYCB0byBtaW1pYyB0aGUgc291cmNlIG9mIGByZWZlcmVuY2VgXG4gICAgICogd2l0aCB3cmFwcGVyIGRldGFpbHMgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIHNvdXJjZSBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVyIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYHdyYXBwZXJgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdyYXBUb1N0cmluZyh3cmFwcGVyLCByZWZlcmVuY2UsIGJpdG1hc2spIHtcbiAgICAgIHZhciBzb3VyY2UgPSAocmVmZXJlbmNlICsgJycpO1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKHdyYXBwZXIsIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgdXBkYXRlV3JhcERldGFpbHMoZ2V0V3JhcERldGFpbHMoc291cmNlKSwgYml0bWFzaykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAgICAgKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gICAgICB2YXIgY291bnQgPSAwLFxuICAgICAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgd2hpY2ggbXV0YXRlcyBhbmQgc2V0cyB0aGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9YXJyYXkubGVuZ3RoXSBUaGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGVTZWxmKGFycmF5LCBzaXplKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgc2l6ZSA9IHNpemUgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHNpemU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IHNpemUpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBiYXNlUmFuZG9tKGluZGV4LCBsYXN0SW5kZXgpLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtyYW5kXTtcblxuICAgICAgICBhcnJheVtyYW5kXSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBhcnJheS5sZW5ndGggPSBzaXplO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIHZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgICAgIH1cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gICAgICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHdyYXBwZXIgYGRldGFpbHNgIGJhc2VkIG9uIGBiaXRtYXNrYCBmbGFncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGV0YWlsc2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV3JhcERldGFpbHMoZGV0YWlscywgYml0bWFzaykge1xuICAgICAgYXJyYXlFYWNoKHdyYXBGbGFncywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICB2YXIgdmFsdWUgPSAnXy4nICsgcGFpclswXTtcbiAgICAgICAgaWYgKChiaXRtYXNrICYgcGFpclsxXSkgJiYgIWFycmF5SW5jbHVkZXMoZGV0YWlscywgdmFsdWUpKSB7XG4gICAgICAgICAgZGV0YWlscy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGV0YWlscy5zb3J0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB3cmFwcGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHdyYXBwZXIgVGhlIHdyYXBwZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHdyYXBwZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNsb25lKHdyYXBwZXIpIHtcbiAgICAgIGlmICh3cmFwcGVyIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVyLl9fd3JhcHBlZF9fLCB3cmFwcGVyLl9fY2hhaW5fXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkod3JhcHBlci5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19pbmRleF9fICA9IHdyYXBwZXIuX19pbmRleF9fO1xuICAgICAgcmVzdWx0Ll9fdmFsdWVzX18gPSB3cmFwcGVyLl9fdmFsdWVzX187XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byBncm91cHMgdGhlIGxlbmd0aCBvZiBgc2l6ZWAuXG4gICAgICogSWYgYGFycmF5YCBjYW4ndCBiZSBzcGxpdCBldmVubHksIHRoZSBmaW5hbCBjaHVuayB3aWxsIGJlIHRoZSByZW1haW5pbmdcbiAgICAgKiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT0xXSBUaGUgbGVuZ3RoIG9mIGVhY2ggY2h1bmtcbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNodW5rcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMik7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsnYycsICdkJ11dXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAzKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InLCAnYyddLCBbJ2QnXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaHVuayhhcnJheSwgc2l6ZSwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc2l6ZSwgZ3VhcmQpIDogc2l6ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzaXplID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSBuYXRpdmVNYXgodG9JbnRlZ2VyKHNpemUpLCAwKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHNpemUgPCAxKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG5hdGl2ZUNlaWwobGVuZ3RoIC8gc2l6ZSkpO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gYmFzZVNsaWNlKGFycmF5LCBpbmRleCwgKGluZGV4ICs9IHNpemUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBmYWxzZXkgdmFsdWVzIHJlbW92ZWQuIFRoZSB2YWx1ZXMgYGZhbHNlYCwgYG51bGxgLFxuICAgICAqIGAwYCwgYFwiXCJgLCBgdW5kZWZpbmVkYCwgYW5kIGBOYU5gIGFyZSBmYWxzZXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY29tcGFjdChbMCwgMSwgZmFsc2UsIDIsICcnLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgY29uY2F0ZW5hdGluZyBgYXJyYXlgIHdpdGggYW55IGFkZGl0aW9uYWwgYXJyYXlzXG4gICAgICogYW5kL29yIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgY29uY2F0ZW5hdGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMV07XG4gICAgICogdmFyIG90aGVyID0gXy5jb25jYXQoYXJyYXksIDIsIFszXSwgW1s0XV0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob3RoZXIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCAtIDEpLFxuICAgICAgICAgIGFycmF5ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBhcmdzW2luZGV4IC0gMV0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UHVzaChpc0FycmF5KGFycmF5KSA/IGNvcHlBcnJheShhcnJheSkgOiBbYXJyYXldLCBiYXNlRmxhdHRlbihhcmdzLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBgYXJyYXlgIHZhbHVlcyBub3QgaW5jbHVkZWQgaW4gdGhlIG90aGVyIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy53aXRob3V0LCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2UoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbEJ5YCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kaWZmZXJlbmNlQnkoW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCBbeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBvcmRlciBhbmRcbiAgICAgKiByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsV2l0aGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VXaXRoKG9iamVjdHMsIFt7ICd4JzogMSwgJ3knOiAyIH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoY29tcGFyYXRvcikpIHtcbiAgICAgICAgY29tcGFyYXRvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbGxzIGVsZW1lbnRzIG9mIGBhcnJheWAgd2l0aCBgdmFsdWVgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdFxuICAgICAqIGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLmZpbGwoYXJyYXksICdhJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdhJywgJ2EnXVxuICAgICAqXG4gICAgICogXy5maWxsKEFycmF5KDMpLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgMiwgMl1cbiAgICAgKlxuICAgICAqIF8uZmlsbChbNCwgNiwgOCwgMTBdLCAnKicsIDEsIDMpO1xuICAgICAqIC8vID0+IFs0LCAnKicsICcqJywgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHZhbHVlLCBzdGFydCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdiYXJuZXknOyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ3BlYmJsZXMnOyB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0SW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4IDwgMFxuICAgICAgICAgID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKVxuICAgICAgICAgIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmxhdHRlbnMgYGFycmF5YCBhIHNpbmdsZSBsZXZlbCBkZWVwLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCAxKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlZXAoWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNCwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVlcChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCBJTkZJTklUWSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVuIGBhcnJheWAgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIFsyLCBbMywgWzRdXSwgNV1dO1xuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZXB0aChhcnJheSwgZGVwdGgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8udG9QYWlyc2A7IHRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkXG4gICAgICogZnJvbSBrZXktdmFsdWUgYHBhaXJzYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mcm9tUGFpcnMoW1snYScsIDFdLCBbJ2InLCAyXV0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21QYWlycyhwYWlycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICByZXN1bHRbcGFpclswXV0gPSBwYWlyWzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZmlyc3RcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5oZWFkKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5oZWFkKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoZWFkKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgdmFsdWVgIGlzIGZvdW5kIGluIGBhcnJheWBcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhcyB0aGVcbiAgICAgKiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRpYWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDAsIC0xKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBhbGwgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMl1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZClcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgaWYgKGl0ZXJhdGVlID09PSBsYXN0KG1hcHBlZCkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzXG4gICAgICogb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFsbCBlbGVtZW50cyBpbiBgYXJyYXlgIGludG8gYSBzdHJpbmcgc2VwYXJhdGVkIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzZXBhcmF0b3I9JywnXSBUaGUgZWxlbWVudCBzZXBhcmF0b3IuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgam9pbmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5qb2luKFsnYScsICdiJywgJ2MnXSwgJ34nKTtcbiAgICAgKiAvLyA9PiAnYX5ifmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gam9pbihhcnJheSwgc2VwYXJhdG9yKSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/ICcnIDogbmF0aXZlSm9pbi5jYWxsKGFycmF5LCBzZXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgYXJyYXlgIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCkgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgICA/IHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpXG4gICAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZWxlbWVudCBhdCBpbmRleCBgbmAgb2YgYGFycmF5YC4gSWYgYG5gIGlzIG5lZ2F0aXZlLCB0aGUgbnRoXG4gICAgICogZWxlbWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAtMik7XG4gICAgICogLy8gPT4gJ2MnO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aChhcnJheSwgbikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZU50aChhcnJheSwgdG9JbnRlZ2VyKG4pKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBnaXZlbiB2YWx1ZXMgZnJvbSBgYXJyYXlgIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLndpdGhvdXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5yZW1vdmVgXG4gICAgICogdG8gcmVtb3ZlIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgcHJlZGljYXRlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGwoYXJyYXksICdhJywgJ2MnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIHZhciBwdWxsID0gYmFzZVJlc3QocHVsbEFsbCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGwoYXJyYXksIFsnYScsICdjJ10pO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbChhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZUJ5YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDMgfSwgeyAneCc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxCeShhcnJheSwgW3sgJ3gnOiAxIH0sIHsgJ3gnOiAzIH1dLCAneCcpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsQnkoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VXaXRoYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAzLCAneSc6IDQgfSwgeyAneCc6IDUsICd5JzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbFdpdGgoYXJyYXksIFt7ICd4JzogMywgJ3knOiA0IH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogNSwgJ3knOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbFdpdGgoYXJyYXksIHZhbHVlcywgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZWxlbWVudHMgZnJvbSBgYXJyYXlgIGNvcnJlc3BvbmRpbmcgdG8gYGluZGV4ZXNgIGFuZCByZXR1cm5zIGFuXG4gICAgICogYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uYXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IFtpbmRleGVzXSBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICogdmFyIHB1bGxlZCA9IF8ucHVsbEF0KGFycmF5LCBbMSwgM10pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdjJ11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKHB1bGxlZCk7XG4gICAgICogLy8gPT4gWydiJywgJ2QnXVxuICAgICAqL1xuICAgIHZhciBwdWxsQXQgPSBmbGF0UmVzdChmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGJhc2VBdChhcnJheSwgaW5kZXhlcyk7XG5cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGFycmF5TWFwKGluZGV4ZXMsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBpc0luZGV4KGluZGV4LCBsZW5ndGgpID8gK2luZGV4IDogaW5kZXg7XG4gICAgICB9KS5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gYGFycmF5YCB0aGF0IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByZW1vdmVkIGVsZW1lbnRzLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5maWx0ZXJgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5wdWxsYFxuICAgICAqIHRvIHB1bGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XTtcbiAgICAgKiB2YXIgZXZlbnMgPSBfLnJlbW92ZShhcnJheSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhldmVucyk7XG4gICAgICogLy8gPT4gWzIsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIGBhcnJheWAgc28gdGhhdCB0aGUgZmlyc3QgZWxlbWVudCBiZWNvbWVzIHRoZSBsYXN0LCB0aGUgc2Vjb25kXG4gICAgICogZWxlbWVudCBiZWNvbWVzIHRoZSBzZWNvbmQgdG8gbGFzdCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YCBhbmQgaXMgYmFzZWQgb25cbiAgICAgKiBbYEFycmF5I3JldmVyc2VgXShodHRwczovL21kbi5pby9BcnJheS9yZXZlcnNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8ucmV2ZXJzZShhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmV2ZXJzZShhcnJheSkge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyBhcnJheSA6IG5hdGl2ZVJldmVyc2UuY2FsbChhcnJheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgdXNlZCBpbnN0ZWFkIG9mXG4gICAgICogW2BBcnJheSNzbGljZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3NsaWNlKSB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZVxuICAgICAqIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgJiYgdHlwZW9mIGVuZCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc3RhcnQsIGVuZCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIGxvd2VzdCBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWzMwLCA1MF0sIDQwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBoaWdoZXN0XG4gICAgICogaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvXG4gICAgICogbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleChbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRMYXN0SW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmxhc3RJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKSAtIDE7XG4gICAgICAgIGlmIChlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxKFsxLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXkpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxQnlgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxQnkoWzEuMSwgMS4yLCAyLjMsIDIuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjEsIDIuM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWlsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFpbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMSwgbGVuZ3RoKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2UoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuIEVsZW1lbnRzIGFyZVxuICAgICAqIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy4gRWxlbWVudHNcbiAgICAgKiBhcmUgdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tIHRoZSBmaXJzdFxuICAgICAqIGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbkJ5KFsyLjFdLCBbMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb21cbiAgICAgKiB0aGUgZmlyc3QgYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIGFuIGFycmF5LCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGVhY2ggZWxlbWVudFxuICAgICAqIGlzIGtlcHQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXJcbiAgICAgKiBpbiB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxKFsyLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGVcbiAgICAgKiBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxQnkoWzIuMSwgMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaXFCeShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pcVdpdGgob2JqZWN0cywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcVdpdGgoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgZ3JvdXBlZFxuICAgICAqIGVsZW1lbnRzIGFuZCBjcmVhdGVzIGFuIGFycmF5IHJlZ3JvdXBpbmcgdGhlIGVsZW1lbnRzIHRvIHRoZWlyIHByZS16aXBcbiAgICAgKiBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqXG4gICAgICogXy51bnppcCh6aXBwZWQpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXAoYXJyYXkpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgICBhcnJheSA9IGFycmF5RmlsdGVyKGFycmF5LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoZ3JvdXApKSB7XG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGdyb3VwLmxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYmFzZVRpbWVzKGxlbmd0aCwgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKGFycmF5LCBiYXNlUHJvcGVydHkoaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IHJlZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICByZWdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0pO1xuICAgICAqIC8vID0+IFtbMSwgMTAsIDEwMF0sIFsyLCAyMCwgMjAwXV1cbiAgICAgKlxuICAgICAqIF8udW56aXBXaXRoKHppcHBlZCwgXy5hZGQpO1xuICAgICAqIC8vID0+IFszLCAzMCwgMzAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwV2l0aChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHVuemlwKGFycmF5KTtcbiAgICAgIGlmIChpdGVyYXRlZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlNYXAocmVzdWx0LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHVuZGVmaW5lZCwgZ3JvdXApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIGdpdmVuIHZhbHVlcyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53aXRob3V0KFsyLCAxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICovXG4gICAgdmFyIHdpdGhvdXQgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGlzIHRoZVxuICAgICAqIFtzeW1tZXRyaWMgZGlmZmVyZW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3ltbWV0cmljX2RpZmZlcmVuY2UpXG4gICAgICogb2YgdGhlIGdpdmVuIGFycmF5cy4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXJcbiAgICAgKiB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLndpdGhvdXRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3IoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqL1xuICAgIHZhciB4b3IgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZFxuICAgICAqIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lXG4gICAgICogYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3JCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yLCAzLjRdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnhvckJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB4b3JCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ueG9yV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB4b3JXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLCB0aGUgZmlyc3Qgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogZmlyc3QgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgdGhlIHNlY29uZCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBzZWNvbmQgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICovXG4gICAgdmFyIHppcCA9IGJhc2VSZXN0KHVuemlwKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZnJvbVBhaXJzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIHR3byBhcnJheXMsXG4gICAgICogb25lIG9mIHByb3BlcnR5IGlkZW50aWZpZXJzIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0KFsnYScsICdiJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0KHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGFzc2lnblZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcE9iamVjdGAgZXhjZXB0IHRoYXQgaXQgc3VwcG9ydHMgcHJvcGVydHkgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0RGVlcChbJ2EuYlswXS5jJywgJ2EuYlsxXS5kJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiBbeyAnYyc6IDEgfSwgeyAnZCc6IDIgfV0gfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0RGVlcChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBiYXNlU2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIGdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwV2l0aChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdLCBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gYSArIGIgKyBjO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxMTEsIDIyMl1cbiAgICAgKi9cbiAgICB2YXIgemlwV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgaXRlcmF0ZWUgPSBsZW5ndGggPiAxID8gYXJyYXlzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpdGVyYXRlZSA9IHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nID8gKGFycmF5cy5wb3AoKSwgaXRlcmF0ZWUpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHVuemlwV2l0aChhcnJheXMsIGl0ZXJhdGVlKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHRoYXQgd3JhcHMgYHZhbHVlYCB3aXRoIGV4cGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLiBUaGUgcmVzdWx0IG9mIHN1Y2ggc2VxdWVuY2VzIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHlvdW5nZXN0ID0gX1xuICAgICAqICAgLmNoYWluKHVzZXJzKVxuICAgICAqICAgLnNvcnRCeSgnYWdlJylcbiAgICAgKiAgIC5tYXAoZnVuY3Rpb24obykge1xuICAgICAqICAgICByZXR1cm4gby51c2VyICsgJyBpcyAnICsgby5hZ2U7XG4gICAgICogICB9KVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMgaXMgMSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaGFpbih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaCh2YWx1ZSk7XG4gICAgICByZXN1bHQuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBgaW50ZXJjZXB0b3JgIGFuZCByZXR1cm5zIGB2YWx1ZWAuIFRoZSBpbnRlcmNlcHRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvXG4gICAgICogXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlIGluIG9yZGVyIHRvIG1vZGlmeSBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSlcbiAgICAgKiAgLnRhcChmdW5jdGlvbihhcnJheSkge1xuICAgICAqICAgIC8vIE11dGF0ZSBpbnB1dCBhcnJheS5cbiAgICAgKiAgICBhcnJheS5wb3AoKTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnJldmVyc2UoKVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy50YXBgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwicGFzcyB0aHJ1XCIgdmFsdWVzIHJlcGxhY2luZyBpbnRlcm1lZGlhdGVcbiAgICAgKiByZXN1bHRzIGluIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXygnICBhYmMgICcpXG4gICAgICogIC5jaGFpbigpXG4gICAgICogIC50cmltKClcbiAgICAgKiAgLnRocnUoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocnUodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICByZXR1cm4gaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8uYXRgLlxuICAgICAqXG4gICAgICogQG5hbWUgYXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXyhvYmplY3QpLmF0KFsnYVswXS5iLmMnLCAnYVsxXSddKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciB3cmFwcGVyQXQgPSBmbGF0UmVzdChmdW5jdGlvbihwYXRocykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICBzdGFydCA9IGxlbmd0aCA/IHBhdGhzWzBdIDogMCxcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbihvYmplY3QpIHsgcmV0dXJuIGJhc2VBdChvYmplY3QsIHBhdGhzKTsgfTtcblxuICAgICAgaWYgKGxlbmd0aCA+IDEgfHwgdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGggfHxcbiAgICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHx8ICFpc0luZGV4KHN0YXJ0KSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2Uoc3RhcnQsICtzdGFydCArIChsZW5ndGggPyAxIDogMCkpO1xuICAgICAgdmFsdWUuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLFxuICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUsIHRoaXMuX19jaGFpbl9fKS50aHJ1KGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIGlmIChsZW5ndGggJiYgIWFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgIGFycmF5LnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHdpdGggZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQG5hbWUgY2hhaW5cbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRob3V0IGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpLmhlYWQoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGggZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycylcbiAgICAgKiAgIC5jaGFpbigpXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAucGljaygndXNlcicpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDaGFpbigpIHtcbiAgICAgIHJldHVybiBjaGFpbih0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgYW5kIHJldHVybnMgdGhlIHdyYXBwZWQgcmVzdWx0LlxuICAgICAqXG4gICAgICogQG5hbWUgY29tbWl0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyXTtcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oYXJyYXkpLnB1c2goMyk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkID0gd3JhcHBlZC5jb21taXQoKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLmxhc3QoKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNvbW1pdCgpIHtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih0aGlzLnZhbHVlKCksIHRoaXMuX19jaGFpbl9fKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuZXh0IHZhbHVlIG9uIGEgd3JhcHBlZCBvYmplY3QgZm9sbG93aW5nIHRoZVxuICAgICAqIFtpdGVyYXRvciBwcm90b2NvbF0oaHR0cHM6Ly9tZG4uaW8vaXRlcmF0aW9uX3Byb3RvY29scyNpdGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAbmFtZSBuZXh0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV4dCBpdGVyYXRvciB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDEgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAyIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiB0cnVlLCAndmFsdWUnOiB1bmRlZmluZWQgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJOZXh0KCkge1xuICAgICAgaWYgKHRoaXMuX192YWx1ZXNfXyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHRvQXJyYXkodGhpcy52YWx1ZSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciBkb25lID0gdGhpcy5fX2luZGV4X18gPj0gdGhpcy5fX3ZhbHVlc19fLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IGRvbmUgPyB1bmRlZmluZWQgOiB0aGlzLl9fdmFsdWVzX19bdGhpcy5fX2luZGV4X18rK107XG5cbiAgICAgIHJldHVybiB7ICdkb25lJzogZG9uZSwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSB3cmFwcGVyIHRvIGJlIGl0ZXJhYmxlLlxuICAgICAqXG4gICAgICogQG5hbWUgU3ltYm9sLml0ZXJhdG9yXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZFtTeW1ib2wuaXRlcmF0b3JdKCkgPT09IHdyYXBwZWQ7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogQXJyYXkuZnJvbSh3cmFwcGVkKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVG9JdGVyYXRvcigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgY2hhaW4gc2VxdWVuY2UgcGxhbnRpbmcgYHZhbHVlYCBhcyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHBsYW50XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGxhbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSkubWFwKHNxdWFyZSk7XG4gICAgICogdmFyIG90aGVyID0gd3JhcHBlZC5wbGFudChbMywgNF0pO1xuICAgICAqXG4gICAgICogb3RoZXIudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbOSwgMTZdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclBsYW50KHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIHBhcmVudCA9IHRoaXM7XG5cbiAgICAgIHdoaWxlIChwYXJlbnQgaW5zdGFuY2VvZiBiYXNlTG9kYXNoKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHdyYXBwZXJDbG9uZShwYXJlbnQpO1xuICAgICAgICBjbG9uZS5fX2luZGV4X18gPSAwO1xuICAgICAgICBjbG9uZS5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSBjbG9uZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBjbG9uZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldmlvdXMgPSBjbG9uZTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50Ll9fd3JhcHBlZF9fO1xuICAgICAgfVxuICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5yZXZlcnNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIHRoZSB3cmFwcGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfKGFycmF5KS5yZXZlcnNlKCkudmFsdWUoKVxuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJSZXZlcnNlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXztcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHZhciB3cmFwcGVkID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkge1xuICAgICAgICAgIHdyYXBwZWQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQucmV2ZXJzZSgpO1xuICAgICAgICB3cmFwcGVkLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgICAnYXJncyc6IFtyZXZlcnNlXSxcbiAgICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZWQsIHRoaXMuX19jaGFpbl9fKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRocnUocmV2ZXJzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgdG9KU09OLCB2YWx1ZU9mXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJWYWx1ZSgpIHtcbiAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKHRoaXMuX193cmFwcGVkX18sIHRoaXMuX19hY3Rpb25zX18pO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcmV0dXJuZWQgYnkgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb3VudEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogMiwgJzUnOiAxIH1cbiAgICAgKi9cbiAgICB2YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgKytyZXN1bHRba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYWxsKiogZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogW2VtcHR5IGNvbGxlY3Rpb25zXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FbXB0eV9zZXQpIGJlY2F1c2VcbiAgICAgKiBbZXZlcnl0aGluZyBpcyB0cnVlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WYWN1b3VzX3RydXRoKSBvZlxuICAgICAqIGVsZW1lbnRzIG9mIGVtcHR5IGNvbGxlY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ldmVyeShbdHJ1ZSwgMSwgbnVsbCwgJ3llcyddLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFdmVyeSA6IGJhc2VFdmVyeTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8ucmVqZWN0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gQ29tYmluaW5nIHNldmVyYWwgcHJlZGljYXRlcyB1c2luZyBgXy5vdmVyRXZlcnlgIG9yIGBfLm92ZXJTb21lYC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5vdmVyU29tZShbeyAnYWdlJzogMzYgfSwgWydhZ2UnLCA0MF1dKSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9Y29sbGVjdGlvbi5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChmaW5kTGFzdEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYFxuICAgICAqIHRocnUgYGl0ZXJhdGVlYCBhbmQgZmxhdHRlbmluZyB0aGUgbWFwcGVkIHJlc3VsdHMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbbiwgbl07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlZXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZWVwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgSU5GSU5JVFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlcHRoKFsxLCAyXSwgZHVwbGljYXRlLCAyKTtcbiAgICAgKiAvLyA9PiBbWzEsIDFdLCBbMiwgMl1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlcHRoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBkZXB0aCkge1xuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAgICAgKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckVhY2hgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaFJpZ2h0KFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAyYCB0aGVuIGAxYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaFJpZ2h0IDogYmFzZUVhY2hSaWdodDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBvcmRlciBvZiBncm91cGVkIHZhbHVlc1xuICAgICAqIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gYGNvbGxlY3Rpb25gLiBUaGUgY29ycmVzcG9uZGluZ1xuICAgICAqIHZhbHVlIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZVxuICAgICAqIGtleS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjNdIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBhIHN0cmluZywgaXQnc1xuICAgICAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogaXMgdXNlZCBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXNcbiAgICAgKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyh7ICdhJzogMSwgJ2InOiAyIH0sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoJ2FiY2QnLCAnYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgIGNvbGxlY3Rpb24gPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pXG4gICAgICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICogYXJlIHByb3ZpZGVkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBwYXRoYCBpcyBhIGZ1bmN0aW9uLCBpdCdzIGludm9rZWRcbiAgICAgKiBmb3IsIGFuZCBgdGhpc2AgYm91bmQgdG8sIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvclxuICAgICAqICB0aGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGVhY2ggbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgdmFyIGludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXNGdW5jID8gYXBwbHkocGF0aCwgdmFsdWUsIGFyZ3MpIDogYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtcbiAgICAgKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICAgICAqICAgeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCBmdW5jdGlvbihvKSB7XG4gICAgICogICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvLmNvZGUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqL1xuICAgIHZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICAgICAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICAgICAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdXG4gICAgICpcbiAgICAgKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgYWxsb3dzIHNwZWNpZnlpbmcgdGhlIHNvcnRcbiAgICAgKiBvcmRlcnMgb2YgdGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlc1xuICAgICAqIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yXG4gICAgICogZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlciBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXlbXXxGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBTb3J0IGJ5IGB1c2VyYCBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kIGJ5IGBhZ2VgIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogXy5vcmRlckJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10sIFsnYXNjJywgJ2Rlc2MnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KGl0ZXJhdGVlcykpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGwgPyBbXSA6IFtpdGVyYXRlZXNdO1xuICAgICAgfVxuICAgICAgb3JkZXJzID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBvcmRlcnM7XG4gICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICBvcmRlcnMgPSBvcmRlcnMgPT0gbnVsbCA/IFtdIDogW29yZGVyc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byB0d28gZ3JvdXBzLCB0aGUgZmlyc3Qgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IsIHRoZSBzZWNvbmQgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleSBmb3IuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydwZWJibGVzJ10sIFsnYmFybmV5JywgJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsICdwZWJibGVzJ10sIFsnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKi9cbiAgICB2YXIgcGFydGl0aW9uID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXkgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7IHJldHVybiBbW10sIFtdXTsgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gICAgICogaXMgbm90IGdpdmVuLCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICAgICAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gICAgICogYW5kIGBzb3J0QnlgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICAgICAqICAgcmV0dXJuIHN1bSArIG47XG4gICAgICogfSwgMCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICpcbiAgICAgKiBfLnJlZHVjZVJpZ2h0KGFycmF5LCBmdW5jdGlvbihmbGF0dGVuZWQsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChvdGhlcik7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2VSaWdodCA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2hSaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmZpbHRlcmA7IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYFxuICAgICAqIHRoYXQgYHByZWRpY2F0ZWAgZG9lcyAqKm5vdCoqIHJldHVybiB0cnV0aHkgZm9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5maWx0ZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5yZWplY3QodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZSA6IGJhc2VTYW1wbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGBuYCByYW5kb20gZWxlbWVudHMgYXQgdW5pcXVlIGtleXMgZnJvbSBgY29sbGVjdGlvbmAgdXAgdG8gdGhlXG4gICAgICogc2l6ZSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzMsIDFdXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZVNpemUgOiBiYXNlU2FtcGxlU2l6ZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlXG4gICAgICogW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IFs0LCAxLCAzLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTaHVmZmxlIDogYmFzZVNodWZmbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICAgICAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIHNpemUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSgncGViYmxlcycpO1xuICAgICAqIC8vID0+IDdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gc3RyaW5nU2l6ZShjb2xsZWN0aW9uKSA6IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlS2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U29tZSA6IGJhc2VTb21lO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuICAgICAqIHBlcmZvcm1zIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZlxuICAgICAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDMwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCAzMF1dXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNF0sIFsnYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCAzMF0sIFsnZnJlZCcsIDQ4XV1cbiAgICAgKi9cbiAgICB2YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBpdGVyYXRlZXNbMl0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcywgMSksIFtdKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICAgICAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IERhdGVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gICAgICogfSwgXy5ub3coKSk7XG4gICAgICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgbm93ID0gY3R4Tm93IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmJlZm9yZWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiBgZnVuY2Agb25jZSBpdCdzIGNhbGxlZCBgbmAgb3IgbW9yZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYmVmb3JlIGBmdW5jYCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddO1xuICAgICAqXG4gICAgICogdmFyIGRvbmUgPSBfLmFmdGVyKHNhdmVzLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnZG9uZSBzYXZpbmchJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgKiAgIGFzeW5jU2F2ZSh7ICd0eXBlJzogdHlwZSwgJ2NvbXBsZXRlJzogZG9uZSB9KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdkb25lIHNhdmluZyEnIGFmdGVyIHRoZSB0d28gYXN5bmMgc2F2ZXMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gICAgICogaWdub3JpbmcgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgY2FwLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLmFyeShwYXJzZUludCwgMSkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnkoZnVuYywgbiwgZ3VhcmQpIHtcbiAgICAgIG4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IG47XG4gICAgICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQVJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHNcbiAgICAgKiBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hpbGUgaXQncyBjYWxsZWQgbGVzcyB0aGFuIGBuYCB0aW1lcy4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBhdCB3aGljaCBgZnVuY2AgaXMgbm8gbG9uZ2VyIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uYmVmb3JlKDUsIGFkZENvbnRhY3RUb0xpc3QpKTtcbiAgICAgKiAvLyA9PiBBbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmVmb3JlKG4sIGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgICAgZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgbmF0aXZlIGBGdW5jdGlvbiNiaW5kYCwgdGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmQpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gIHdpdGggYHBhcnRpYWxzYFxuICAgICAqIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIGBfLmJpbmRgIGJ5IGFsbG93aW5nIGJvdW5kIGZ1bmN0aW9ucyB0byByZWZlcmVuY2VcbiAgICAgKiBtZXRob2RzIHRoYXQgbWF5IGJlIHJlZGVmaW5lZCBvciBkb24ndCB5ZXQgZXhpc3QuIFNlZVxuICAgICAqIFtQZXRlciBNaWNoYXV4J3MgYXJ0aWNsZV0oaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4pXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kS2V5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52b2tlIHRoZSBtZXRob2Qgb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAndXNlcic6ICdmcmVkJyxcbiAgICAgKiAgICdncmVldCc6IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiBvYmplY3QuZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICd5YSAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kS2V5ID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZEtleSkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIG9mIGBmdW5jYCBhbmQgZWl0aGVyIGludm9rZXNcbiAgICAgKiBgZnVuY2AgcmV0dXJuaW5nIGl0cyByZXN1bHQsIGlmIGF0IGxlYXN0IGBhcml0eWAgbnVtYmVyIG9mIGFyZ3VtZW50cyBoYXZlXG4gICAgICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICAgICAqIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIG1heSBiZSBzcGVjaWZpZWQgaWYgYGZ1bmMubGVuZ3RoYFxuICAgICAqIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMSkoXywgMykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnkoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jdXJyeWAgZXhjZXB0IHRoYXQgYXJndW1lbnRzIGFyZSBhcHBsaWVkIHRvIGBmdW5jYFxuICAgICAqIGluIHRoZSBtYW5uZXIgb2YgYF8ucGFydGlhbFJpZ2h0YCBpbnN0ZWFkIG9mIGBfLnBhcnRpYWxgLlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5UmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnlSaWdodChhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgzKSgyKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMiwgMykoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDMpKDEsIF8pKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5UmlnaHQoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAgICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICAgKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gICAgICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gICAgICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gICAgICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICAgICAqIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICAgICAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAgICogICAnbGVhZGluZyc6IHRydWUsXG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gICAgICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxhc3RBcmdzLFxuICAgICAgICAgIGxhc3RUaGlzLFxuICAgICAgICAgIG1heFdhaXQsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHRpbWVySWQsXG4gICAgICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgICAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgICAgICByZXR1cm4gbWF4aW5nXG4gICAgICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgICAgIDogdGltZVdhaXRpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICAgICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAgICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gICAgICByZXR1cm4gZGVib3VuY2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmVycyBpbnZva2luZyB0aGUgYGZ1bmNgIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuIEFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWZlci5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAnZGVmZXJyZWQnKTtcbiAgICAgKiAvLyA9PiBMb2dzICdkZWZlcnJlZCcgYWZ0ZXIgb25lIG1pbGxpc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWZlciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgMSwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGBmdW5jYCBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBMb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVsYXkgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIHRvTnVtYmVyKHdhaXQpIHx8IDAsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgcmV2ZXJzZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBmbGlwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxpcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZsaXBwZWQgPSBfLmZsaXAoZnVuY3Rpb24oKSB7XG4gICAgICogICByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBmbGlwcGVkKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gWydkJywgJ2MnLCAnYicsICdhJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGlwKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfRkxJUF9GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICAgICAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAgICAgKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICAgICAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICAgICAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gICAgICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAgICAgKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICAgICAqXG4gICAgICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YWx1ZXMob3RoZXIpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqXG4gICAgICogb2JqZWN0LmEgPSAyO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gICAgICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKlxuICAgICAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gICAgICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgYE1hcENhY2hlYC5cbiAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBuZWdhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHByZWRpY2F0ZSBgZnVuY2AuIFRoZVxuICAgICAqIGBmdW5jYCBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBuZWdhdGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbmVnYXRlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNFdmVuKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGludm9raW5nIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHNcbiAgICAgKiB0byB0aGUgZnVuY3Rpb24gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW52b2NhdGlvbi4gVGhlIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIC8vID0+IGBjcmVhdGVBcHBsaWNhdGlvbmAgaXMgaW52b2tlZCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmVmb3JlKDIsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50cyB0cmFuc2Zvcm1lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFt0cmFuc2Zvcm1zPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGFyZ3VtZW50IHRyYW5zZm9ybXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGRvdWJsZWQobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJBcmdzKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiBbeCwgeV07XG4gICAgICogfSwgW3NxdWFyZSwgZG91YmxlZF0pO1xuICAgICAqXG4gICAgICogZnVuYyg5LCAzKTtcbiAgICAgKiAvLyA9PiBbODEsIDZdXG4gICAgICpcbiAgICAgKiBmdW5jKDEwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTAwLCAxMF1cbiAgICAgKi9cbiAgICB2YXIgb3ZlckFyZ3MgPSBjYXN0UmVzdChmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB0cmFuc2Zvcm1zID0gKHRyYW5zZm9ybXMubGVuZ3RoID09IDEgJiYgaXNBcnJheSh0cmFuc2Zvcm1zWzBdKSlcbiAgICAgICAgPyBhcnJheU1hcCh0cmFuc2Zvcm1zWzBdLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpXG4gICAgICAgIDogYXJyYXlNYXAoYmFzZUZsYXR0ZW4odHJhbnNmb3JtcywgMSksIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciBmdW5jc0xlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oYXJncy5sZW5ndGgsIGZ1bmNzTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gdHJhbnNmb3Jtc1tpbmRleF0uY2FsbCh0aGlzLCBhcmdzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpdCByZWNlaXZlcy4gVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqXG4gICAgICogYWx0ZXIgdGhlIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWwoZ3JlZXQsICdoZWxsbycpO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWwoZ3JlZXQsIF8sICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsKSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50c1xuICAgICAqIGFyZSBhcHBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWxSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2hlbGxvJywgXyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsUmlnaHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWxSaWdodCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBgaW5kZXhlc2Agd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBmaXJzdCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBzZWNvbmQgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcmd1bWVudCBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcmVhcmdlZCA9IF8ucmVhcmcoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9LCBbMiwgMCwgMV0pO1xuICAgICAqXG4gICAgICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIHZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUkVBUkdfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5kZXhlcyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIGFuZCBhcmd1bWVudHMgZnJvbSBgc3RhcnRgIGFuZCBiZXlvbmQgcHJvdmlkZWQgYXNcbiAgICAgKiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbcmVzdCBwYXJhbWV0ZXJdKGh0dHBzOi8vbWRuLmlvL3Jlc3RfcGFyYW1ldGVycykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8ucmVzdChmdW5jdGlvbih3aGF0LCBuYW1lcykge1xuICAgICAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICAgICAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jLCBzdGFydCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlIGZ1bmN0aW9uIGFuZCBhbiBhcnJheSBvZiBhcmd1bWVudHMgbXVjaCBsaWtlXG4gICAgICogW2BGdW5jdGlvbiNhcHBseWBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtzcHJlYWQgb3BlcmF0b3JdKGh0dHBzOi8vbWRuLmlvL3NwcmVhZF9vcGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNwcmVhZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8uc3ByZWFkKGZ1bmN0aW9uKHdobywgd2hhdCkge1xuICAgICAqICAgcmV0dXJuIHdobyArICcgc2F5cyAnICsgd2hhdDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheShbJ2ZyZWQnLCAnaGVsbG8nXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQgc2F5cyBoZWxsbydcbiAgICAgKlxuICAgICAqIHZhciBudW1iZXJzID0gUHJvbWlzZS5hbGwoW1xuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDQwKSxcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSgzNilcbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIG51bWJlcnMudGhlbihfLnNwcmVhZChmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4geCArIHk7XG4gICAgICogfSkpO1xuICAgICAqIC8vID0+IGEgUHJvbWlzZSBvZiA3NlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwcmVhZChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IG5hdGl2ZU1heCh0b0ludGVnZXIoc3RhcnQpLCAwKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFyZ3Nbc3RhcnRdLFxuICAgICAgICAgICAgb3RoZXJBcmdzID0gY2FzdFNsaWNlKGFyZ3MsIDAsIHN0YXJ0KTtcblxuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBhcnJheVB1c2gob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gICAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICAgKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gICAgICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gICAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICAgICAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAgICAgKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gICAgICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gICAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAgICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIG9uZSBhcmd1bWVudCwgaWdub3JpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8udW5hcnkocGFyc2VJbnQpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5hcnkoZnVuYykge1xuICAgICAgcmV0dXJuIGFyeShmdW5jLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIGB3cmFwcGVyYCBhcyBpdHMgZmlyc3RcbiAgICAgKiBhcmd1bWVudC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmUgYXBwZW5kZWRcbiAgICAgKiB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgYHdyYXBwZXJgLiBUaGUgd3JhcHBlciBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFt3cmFwcGVyPWlkZW50aXR5XSBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICc8cD5mcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXM8L3A+J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXAodmFsdWUsIHdyYXBwZXIpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsKGNhc3RGdW5jdGlvbih3cmFwcGVyKSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgYXMgYW4gYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoMSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbbnVsbF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKiBjb25zb2xlLmxvZyhfLmNhc3RBcnJheShhcnJheSkgPT09IGFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5KCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAgICAgKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gICAgICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAgICAgKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gICAgICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgKiBjbG9uaW5nIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHVwIHRvIGZvdXIgYXJndW1lbnRzOyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lV2l0aGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVEZWVwV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgb2JqZWN0YCBjb25mb3JtcyB0byBgc291cmNlYCBieSBpbnZva2luZyB0aGUgcHJlZGljYXRlXG4gICAgICogcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMjsgfSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2UgPT0gbnVsbCB8fCBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKE5hTiwgTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5ndCgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUd0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheUJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheUJ1ZmZlciA9IG5vZGVJc0FycmF5QnVmZmVyID8gYmFzZVVuYXJ5KG5vZGVJc0FycmF5QnVmZmVyKSA6IGJhc2VJc0FycmF5QnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICAgICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAgICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gICAgICogaXMgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJvb2xlYW4sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4oZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBEYXRlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUobmV3IERhdGUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKCdNb24gQXByaWwgMjMgMjAxMicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzRGF0ZSA9IG5vZGVJc0RhdGUgPyBiYXNlVW5hcnkobm9kZUlzRGF0ZSkgOiBiYXNlSXNEYXRlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgRE9NIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoJzxib2R5PicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAgICAgKlxuICAgICAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAgICAgKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gICAgICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkodHJ1ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gICAgICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICAgICAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gICAgICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gICAgICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogb2JqZWN0ID09PSBvdGhlcjtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzRXF1YWxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCB1cCB0b1xuICAgICAqIHNpeCBhcmd1bWVudHM6IChvYmpWYWx1ZSwgb3RoVmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIG90aGVyLCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcob3RoVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddO1xuICAgICAqIHZhciBvdGhlciA9IFsnaGknLCAnZ29vZGJ5ZSddO1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsV2l0aChhcnJheSwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCB1bmRlZmluZWQsIGN1c3RvbWl6ZXIpIDogISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAgICAgKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IoRXJyb3IpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZXJyb3JUYWcgfHwgdGFnID09IGRvbUV4Y1RhZyB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBwcmltaXRpdmUgbnVtYmVyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNGaW5pdGVgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNGaW5pdGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiBuYXRpdmVJc0Zpbml0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gICAgICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gICAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgICAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3Qoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gICAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBgb2JqZWN0YCBhbmQgYHNvdXJjZWAgdG9cbiAgICAgKiBkZXRlcm1pbmUgaWYgYG9iamVjdGAgY29udGFpbnMgZXF1aXZhbGVudCBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5tYXRjaGVzYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc01hdGNoYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggZml2ZVxuICAgICAqIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwgaW5kZXh8a2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcoc3JjVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdncmVldGluZyc6ICdoZWxsbycgfTtcbiAgICAgKiB2YXIgc291cmNlID0geyAnZ3JlZXRpbmcnOiAnaGknIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAgICAgKiBnbG9iYWwgW2Bpc05hTmBdKGh0dHBzOi8vbWRuLmlvL2lzTmFOKSB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBgdW5kZWZpbmVkYCBhbmQgb3RoZXIgbm9uLW51bWJlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4oTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgICAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGB0b1N0cmluZ1RhZ2AgY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZVxuICAgICAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcmlzdGluZSBuYXRpdmUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgY2FuJ3QgcmVsaWFibHkgZGV0ZWN0IG5hdGl2ZSBmdW5jdGlvbnMgaW4gdGhlIHByZXNlbmNlXG4gICAgICogb2YgdGhlIGNvcmUtanMgcGFja2FnZSBiZWNhdXNlIGNvcmUtanMgY2lyY3VtdmVudHMgdGhpcyBraW5kIG9mIGRldGVjdGlvbi5cbiAgICAgKiBEZXNwaXRlIG11bHRpcGxlIHJlcXVlc3RzLCB0aGUgY29yZS1qcyBtYWludGFpbmVyIGhhcyBtYWRlIGl0IGNsZWFyOiBhbnlcbiAgICAgKiBhdHRlbXB0IHRvIGZpeCB0aGUgZGV0ZWN0aW9uIHdpbGwgYmUgb2JzdHJ1Y3RlZC4gQXMgYSByZXN1bHQsIHdlJ3JlIGxlZnRcbiAgICAgKiB3aXRoIGxpdHRsZSBjaG9pY2UgYnV0IHRvIHRocm93IGFuIGVycm9yLiBVbmZvcnR1bmF0ZWx5LCB0aGlzIGFsc28gYWZmZWN0c1xuICAgICAqIHBhY2thZ2VzLCBsaWtlIFtiYWJlbC1wb2x5ZmlsbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmFiZWwtcG9seWZpbGwpLFxuICAgICAqIHdoaWNoIHJlbHkgb24gY29yZS1qcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShfKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoaXNNYXNrYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKENPUkVfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh2b2lkIDApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBudWxsaXNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICAgICAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuOC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICAgICAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gICAgICogZG91YmxlIHByZWNpc2lvbiBudW1iZXIgd2hpY2ggaXNuJ3QgdGhlIHJlc3VsdCBvZiBhIHJvdW5kZWQgdW5zYWZlIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc1NhZmVJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzU2FmZUludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gd2Vha01hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHdlYWtTZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0KDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHQgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VMdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDw9IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0FycmF5KHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KDEpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHN0cmluZ1RvQXJyYXkodmFsdWUpIDogY29weUFycmF5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheSh2YWx1ZVtzeW1JdGVyYXRvcl0oKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICBmdW5jID0gdGFnID09IG1hcFRhZyA/IG1hcFRvQXJyYXkgOiAodGFnID09IHNldFRhZyA/IHNldFRvQXJyYXkgOiB2YWx1ZXMpO1xuXG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMi4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAgICAgKiBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDQyOTQ5NjcyOTVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b051bWJlcigzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IEluZmluaXR5XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IGJhc2VUcmltKHZhbHVlKTtcbiAgICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICAgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAgICAgKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHNhZmUgaW50ZWdlci4gQSBzYWZlIGludGVnZXIgY2FuIGJlIGNvbXBhcmVkIGFuZFxuICAgICAqIHJlcHJlc2VudGVkIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gOTAwNzE5OTI1NDc0MDk5MVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAgICAgKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKG51bGwpO1xuICAgICAqIC8vID0+ICcnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKC0wKTtcbiAgICAgKiAvLyA9PiAnLTAnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BPYmplY3QuYXNzaWduYF0oaHR0cHM6Ly9tZG4uaW8vT2JqZWN0L2Fzc2lnbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBpZiAoaXNQcm90b3R5cGUoc291cmNlKSB8fCBpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBzb3VyY2UgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbkluKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMywgJ2QnOiA0IH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW4gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRXaXRoXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gYHBhdGhzYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXy5hdChvYmplY3QsIFsnYVswXS5iLmMnLCAnYVsxXSddKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgYXQgPSBmbGF0UmVzdChiYXNlQXQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBgcHJvdG90eXBlYCBvYmplY3QuIElmIGFcbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0IGlzIGdpdmVuLCBpdHMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXNcbiAgICAgKiBhcmUgYXNzaWduZWQgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwge1xuICAgICAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA9PSBudWxsID8gcmVzdWx0IDogYmFzZUFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2VcbiAgICAgKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAgICAgKiByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogT25jZSBhIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCB2YWx1ZXMgb2YgdGhlIHNhbWUgcHJvcGVydHkgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gICAgICB2YXIgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXNJbihzb3VyY2UpO1xuICAgICAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgICAgICB2YXIgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsrcHJvcHNJbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICAgICAqIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0c0RlZXAoeyAnYSc6IHsgJ2InOiAyIH0gfSwgeyAnYSc6IHsgJ2InOiAxLCAnYyc6IDMgfSB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IDIsICdjJzogMyB9IH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHNEZWVwID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgYXJncy5wdXNoKHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSk7XG4gICAgICByZXR1cm4gYXBwbHkobWVyZ2VXaXRoLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiByZXR1cm5zICdwZWJibGVzJyBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93blJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW5cbiAgICAgKiBvYmplY3QgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3Iob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2MnLCAnYicsIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvckluYCBsb2dzICdhJywgJ2InLCB0aGVuICdjJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3JSaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmRcbiAgICAgKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gICAgICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yT3duYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdiJyB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JPd25gIGxvZ3MgJ2EnIHRoZW4gJ2InLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93blJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAqIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc0luXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9ucyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGFuZCBpbmhlcml0ZWRcbiAgICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9uc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9uc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gICAgICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICogSWYgYG9iamVjdGAgY29udGFpbnMgZHVwbGljYXRlIHZhbHVlcywgc3Vic2VxdWVudCB2YWx1ZXMgb3ZlcndyaXRlXG4gICAgICogcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnQob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogJ2MnLCAnMic6ICdiJyB9XG4gICAgICovXG4gICAgdmFyIGludmVydCA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludmVydGAgZXhjZXB0IHRoYXQgdGhlIGludmVydGVkIG9iamVjdCBpcyBnZW5lcmF0ZWRcbiAgICAgKiBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogY29ycmVzcG9uZGluZyBpbnZlcnRlZCB2YWx1ZSBvZiBlYWNoIGludmVydGVkIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzXG4gICAgICogcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGludmVydGVkIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAnZ3JvdXAnICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZ3JvdXAxJzogWydhJywgJ2MnXSwgJ2dyb3VwMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0QnkgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXS5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbdmFsdWVdID0gW2tleV07XG4gICAgICB9XG4gICAgfSwgZ2V0SXRlcmF0ZWUpO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IFsxLCAyLCAzLCA0XSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmludm9rZShvYmplY3QsICdhWzBdLmIuYy5zbGljZScsIDEsIDMpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIHZhciBpbnZva2UgPSBiYXNlUmVzdChiYXNlSW52b2tlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICAgKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5cyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLmtleXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1hcFZhbHVlc2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICogc2FtZSB2YWx1ZXMgYXMgYG9iamVjdGAgYW5kIGtleXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZVxuICAgICAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcFZhbHVlc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAgICAgKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBLZXlzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICAgICAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICAgICAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gICAgICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gICAgICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVyZ2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBtZXJnZWQgdmFsdWVzIG9mIHRoZSBkZXN0aW5hdGlvbiBhbmQgc291cmNlXG4gICAgICogcHJvcGVydGllcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIG1lcmdpbmcgaXMgaGFuZGxlZCBieSB0aGVcbiAgICAgKiBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggc2l4IGFyZ3VtZW50czpcbiAgICAgKiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiBvYmpWYWx1ZS5jb25jYXQoc3JjVmFsdWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogWzFdLCAnYic6IFsyXSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiBbM10sICdiJzogWzRdIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlV2l0aChvYmplY3QsIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogWzEsIDNdLCAnYic6IFsyLCA0XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgcGF0aHMgb2YgYG9iamVjdGAgdGhhdCBhcmUgbm90IG9taXR0ZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gb21pdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIHZhciBvbWl0ID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gICAgICBwYXRocyA9IGFycmF5TWFwKHBhdGhzLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfSk7XG4gICAgICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJlc3VsdCA9IGJhc2VDbG9uZShyZXN1bHQsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tCeWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mXG4gICAgICogdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYG9iamVjdGAgdGhhdFxuICAgICAqIGBwcmVkaWNhdGVgIGRvZXNuJ3QgcmV0dXJuIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3b1xuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXRCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9taXRCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHBpY2tCeShvYmplY3QsIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBgb2JqZWN0YCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBgb2JqZWN0YCBwcm9wZXJ0aWVzIGBwcmVkaWNhdGVgIHJldHVybnNcbiAgICAgKiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGlja0J5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0gYXJyYXlNYXAoZ2V0QWxsS2V5c0luKG9iamVjdCksIGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICAgIH0pO1xuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlKTtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5nZXRgIGV4Y2VwdCB0aGF0IGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhXG4gICAgICogZnVuY3Rpb24gaXQncyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGl0cyBwYXJlbnQgb2JqZWN0IGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYzEnOiAzLCAnYzInOiBfLmNvbnN0YW50KDQpIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMScpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMicpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCBfLmNvbnN0YW50KCdkZWZhdWx0JykpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGxvb3AgaXMgZW50ZXJlZCB3aGVuIHBhdGggaXMgZW1wdHkuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICBvYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFt0b0tleShwYXRoW2luZGV4XSldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IGlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYCBkb2Vzbid0IGV4aXN0LFxuICAgICAqIGl0J3MgY3JlYXRlZC4gQXJyYXlzIGFyZSBjcmVhdGVkIGZvciBtaXNzaW5nIGluZGV4IHByb3BlcnRpZXMgd2hpbGUgb2JqZWN0c1xuICAgICAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gICAgICogYHBhdGhgIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCAnYVswXS5iLmMnLCA0KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnNldFdpdGgob2JqZWN0LCAnWzBdWzFdJywgJ2EnLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdpdGgob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGBcbiAgICAgKiB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXAgb3Igc2V0LCBpdHNcbiAgICAgKiBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlycyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzID0gY3JlYXRlVG9QYWlycyhrZXlzKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnNcbiAgICAgKiBmb3IgYG9iamVjdGAgd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwXG4gICAgICogb3Igc2V0LCBpdHMgZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc0luXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlyc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl0sIFsnYycsIDNdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzSW4gPSBjcmVhdGVUb1BhaXJzKGtleXNJbik7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICAgICAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAgICAgKiBwcm92aWRlZCwgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgYFtbUHJvdG90eXBlXV1gIHdpbGwgYmUgdXNlZC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICAgICAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgOV1cbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBpc0Fyckxpa2UgPSBpc0FyciB8fCBpc0J1ZmZlcihvYmplY3QpIHx8IGlzVHlwZWRBcnJheShvYmplY3QpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KTtcbiAgICAgIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvcGVydHkgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogNyB9IH1dIH07XG4gICAgICogXy51bnNldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udW5zZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdHJ1ZSA6IGJhc2VVbnNldChvYmplY3QsIHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBhY2NlcHRzIGB1cGRhdGVyYCB0byBwcm9kdWNlIHRoZVxuICAgICAqIHZhbHVlIHRvIHNldC4gVXNlIGBfLnVwZGF0ZVdpdGhgIHRvIGN1c3RvbWl6ZSBgcGF0aGAgY3JlYXRpb24uIFRoZSBgdXBkYXRlcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ2FbMF0uYi5jJywgZnVuY3Rpb24obikgeyByZXR1cm4gbiAqIG47IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gOVxuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAneFswXS55LnonLCBmdW5jdGlvbihuKSB7IHJldHVybiBuID8gbiArIDEgOiAwOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVwZGF0ZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlV2l0aChvYmplY3QsICdbMF1bMV0nLCBfLmNvbnN0YW50KCdhJyksIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV2l0aChvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlciksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKCdoaScpO1xuICAgICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5XG4gICAgICogdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDbGFtcHMgYG51bWJlcmAgd2l0aGluIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNsYW1wKC0xMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IC01XG4gICAgICpcbiAgICAgKiBfLmNsYW1wKDEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgICAgICB1cHBlciA9IHVwcGVyID09PSB1cHBlciA/IHVwcGVyIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gdG9OdW1iZXIobG93ZXIpO1xuICAgICAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlQ2xhbXAodG9OdW1iZXIobnVtYmVyKSwgbG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gSWZcbiAgICAgKiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICogSWYgYHN0YXJ0YCBpcyBncmVhdGVyIHRoYW4gYGVuZGAgdGhlIHBhcmFtcyBhcmUgc3dhcHBlZCB0byBzdXBwb3J0XG4gICAgICogbmVnYXRpdmUgcmFuZ2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLnJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCA4KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgyLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDEuMiwgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDUuMiwgNCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgtMywgLTIsIC02KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgfVxuICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgIHJldHVybiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICogSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXJcbiAgICAgKiBpcyByZXR1cm5lZC4gSWYgYGZsb2F0aW5nYCBpcyBgdHJ1ZWAsIG9yIGVpdGhlciBgbG93ZXJgIG9yIGB1cHBlcmAgYXJlXG4gICAgICogZmxvYXRzLCBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyPTBdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3VwcGVyPTFdIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZ10gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMCwgNSk7XG4gICAgICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUpO1xuICAgICAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUsIHRydWUpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMS4yLCA1LjIpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5kb20obG93ZXIsIHVwcGVyLCBmbG9hdGluZykge1xuICAgICAgaWYgKGZsb2F0aW5nICYmIHR5cGVvZiBmbG9hdGluZyAhPSAnYm9vbGVhbicgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsIHVwcGVyLCBmbG9hdGluZykpIHtcbiAgICAgICAgdXBwZXIgPSBmbG9hdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBwZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSB1cHBlcjtcbiAgICAgICAgICB1cHBlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG93ZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQgJiYgdXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIHVwcGVyID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsb3dlciA9IHRvRmluaXRlKGxvd2VyKTtcbiAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cHBlciA9IHRvRmluaXRlKHVwcGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID4gdXBwZXIpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1cHBlcjtcbiAgICAgICAgdXBwZXIgPSB0ZW1wO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nIHx8IGxvd2VyICUgMSB8fCB1cHBlciAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIChyYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArICcnKS5sZW5ndGggLSAxKSkpKSwgdXBwZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICovXG4gICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UgYW5kIHRoZSByZW1haW5pbmdcbiAgICAgKiB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgICAgcmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAgICAgKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAgICAgKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gICAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICAgICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICAgICAqIC8vID0+ICdkZWphIHZ1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBlbmRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGVuZ3RoXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBlbmQgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIGVuZCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICAgICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAgICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICAgICAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAgICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAgICAgKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICAgICAqIFhTUyB2ZWN0b3JzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIHRoZSBgUmVnRXhwYCBzcGVjaWFsIGNoYXJhY3RlcnMgXCJeXCIsIFwiJFwiLCBcIlxcXCIsIFwiLlwiLCBcIipcIiwgXCIrXCIsXG4gICAgICogXCI/XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIGFuZCBcInxcIiBpbiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICAgICAqIC8vID0+ICdcXFtsb2Rhc2hcXF1cXChodHRwczovL2xvZGFzaFxcLmNvbS9cXCknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzUmVnRXhwQ2hhci50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBba2ViYWIgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3BlY2lhbF9jYXNlX3N0eWxlcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKi9cbiAgICB2YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGcmVkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnZlJFRCdcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9Mb3dlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLlxuICAgICAqIFBhZGRpbmcgY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgY2FuJ3QgYmUgZXZlbmx5IGRpdmlkZWQgYnkgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgpO1xuICAgICAqIC8vID0+ICcgIGFiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1hYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc3RyTGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG1pZCA9IChsZW5ndGggLSBzdHJMZW5ndGgpIC8gMjtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlRmxvb3IobWlkKSwgY2hhcnMpICtcbiAgICAgICAgc3RyaW5nICtcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVDZWlsKG1pZCksIGNoYXJzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSByaWdodCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRFbmQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChzdHJpbmcgKyBjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJyAgIGFiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdfLV9hYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSArIHN0cmluZylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIHJhZGl4LiBJZiBgcmFkaXhgIGlzXG4gICAgICogYHVuZGVmaW5lZGAgb3IgYDBgLCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyBgdmFsdWVgIGlzIGFcbiAgICAgKiBoZXhhZGVjaW1hbCwgaW4gd2hpY2ggY2FzZSBhIGByYWRpeGAgb2YgYDE2YCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFsaWducyB3aXRoIHRoZVxuICAgICAqIFtFUzUgaW1wbGVtZW50YXRpb25dKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4yKSBvZiBgcGFyc2VJbnRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXg9MTBdIFRoZSByYWRpeCB0byBpbnRlcnByZXQgYHZhbHVlYCBieS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnNlSW50KCcwOCcpO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICcwOCcsICcxMCddLCBfLnBhcnNlSW50KTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCB8fCByYWRpeCA9PSBudWxsKSB7XG4gICAgICAgIHJhZGl4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocmFkaXgpIHtcbiAgICAgICAgcmFkaXggPSArcmFkaXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQodG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyksIHJhZGl4IHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGVhdHMgdGhlIGdpdmVuIHN0cmluZyBgbmAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnKicsIDMpO1xuICAgICAqIC8vID0+ICcqKionXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMik7XG4gICAgICogLy8gPT4gJ2FiY2FiYydcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAwKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmVwZWF0KHRvU3RyaW5nKHN0cmluZyksIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG1hdGNoZXMgZm9yIGBwYXR0ZXJuYCBpbiBgc3RyaW5nYCB3aXRoIGByZXBsYWNlbWVudGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNyZXBsYWNlYF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3JlcGxhY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gcmVwbGFjZW1lbnQgVGhlIG1hdGNoIHJlcGxhY2VtZW50LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBsYWNlKCdIaSBGcmVkJywgJ0ZyZWQnLCAnQmFybmV5Jyk7XG4gICAgICogLy8gPT4gJ0hpIEJhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoYXJnc1swXSk7XG5cbiAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA8IDMgPyBzdHJpbmcgOiBzdHJpbmcucmVwbGFjZShhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqL1xuICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNzcGxpdGBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9zcGxpdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHNwbGl0IGJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdIFRoZSBsZW5ndGggdG8gdHJ1bmNhdGUgcmVzdWx0cyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zcGxpdCgnYS1iLWMnLCAnLScsIDIpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcGxpdChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCAmJiB0eXBlb2YgbGltaXQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBsaW1pdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGxpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9BUlJBWV9MRU5HVEggOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmICghbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKFxuICAgICAgICAgICAgdHlwZW9mIHNlcGFyYXRvciA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgKHNlcGFyYXRvciAhPSBudWxsICYmICFpc1JlZ0V4cChzZXBhcmF0b3IpKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gYmFzZVRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgICAgIGlmICghc2VwYXJhdG9yICYmIGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShzdHJpbmcpLCAwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0YXJ0IGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgdXBwZXJGaXJzdCh3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj0wXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09IG51bGxcbiAgICAgICAgPyAwXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIHN0cmluZy5sZW5ndGgpO1xuXG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAgICAgKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICAgICAqIFwiZXNjYXBlXCIgZGVsaW1pdGVycywgYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdCBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy4gRGF0YVxuICAgICAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gICAgICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICAgKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAgICAgKiBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gICAgICogW2xvZGFzaCdzIGN1c3RvbSBidWlsZHMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHMpLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gICAgICogW0Nocm9tZSdzIGV4dGVuc2lvbnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHRlbXBsYXRlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gICAgICogIFRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gICAgICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzPV8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXVxuICAgICAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gICAgICogIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICAgICAqICBUaGUgc291cmNlVVJMIG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gICAgICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyIHRvIGVzY2FwZSBkYXRhIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIF8uZm9yRWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEVTIHRlbXBsYXRlIGxpdGVyYWwgZGVsaW1pdGVyIGFzIGFuIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0LlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnPCUtIHZhbHVlICU+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICAgICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICAgICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqIC8vICAgcmV0dXJuIF9fcDtcbiAgICAgKiAvLyB9XG4gICAgICpcbiAgICAgKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gICAgICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnanN0LmpzJyksICdcXFxuICAgICAqICAgdmFyIEpTVCA9IHtcXFxuICAgICAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICAgICAqICAgfTtcXFxuICAgICAqICcpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRlbXBsYXRlKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpIHtcbiAgICAgIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QpLlxuICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICAgICAgdmFyIGltcG9ydHMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cywgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICAgICAgdmFyIGlzRXNjYXBpbmcsXG4gICAgICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cChcbiAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgICAgICwgJ2cnKTtcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgLy8gVGhlIHNvdXJjZVVSTCBnZXRzIGluamVjdGVkIGludG8gdGhlIHNvdXJjZSB0aGF0J3MgZXZhbC1lZCwgc28gYmUgY2FyZWZ1bFxuICAgICAgLy8gdG8gbm9ybWFsaXplIGFsbCBraW5kcyBvZiB3aGl0ZXNwYWNlLCBzbyBlLmcuIG5ld2xpbmVzIChhbmQgdW5pY29kZSB2ZXJzaW9ucyBvZiBpdCkgY2FuJ3Qgc25lYWsgaW5cbiAgICAgIC8vIGFuZCBlc2NhcGUgdGhlIGNvbW1lbnQsIHRodXMgaW5qZWN0aW5nIGNvZGUgdGhhdCBnZXRzIGV2YWxlZC5cbiAgICAgIHZhciBzb3VyY2VVUkwgPSAnLy8jIHNvdXJjZVVSTD0nICtcbiAgICAgICAgKGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3NvdXJjZVVSTCcpXG4gICAgICAgICAgPyAob3B0aW9ucy5zb3VyY2VVUkwgKyAnJykucmVwbGFjZSgvXFxzL2csICcgJylcbiAgICAgICAgICA6ICgnbG9kYXNoLnRlbXBsYXRlU291cmNlc1snICsgKCsrdGVtcGxhdGVDb3VudGVyKSArICddJylcbiAgICAgICAgKSArICdcXG4nO1xuXG4gICAgICBzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW4ndCBiZSBpbmNsdWRlZCBpbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICAgIHNvdXJjZSArPSBzdHJpbmcuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShyZVVuZXNjYXBlZFN0cmluZywgZXNjYXBlU3RyaW5nQ2hhcik7XG5cbiAgICAgICAgLy8gUmVwbGFjZSBkZWxpbWl0ZXJzIHdpdGggc25pcHBldHMuXG4gICAgICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICAgIC8vIFRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgbmVlZHMgYG1hdGNoYCByZXR1cm5lZCBpblxuICAgICAgICAvLyBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcblxuICAgICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgICAgLy8gSWYgYHZhcmlhYmxlYCBpcyBub3Qgc3BlY2lmaWVkIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAgICAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluLlxuICAgICAgdmFyIHZhcmlhYmxlID0gaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAndmFyaWFibGUnKSAmJiBvcHRpb25zLnZhcmlhYmxlO1xuICAgICAgaWYgKCF2YXJpYWJsZSkge1xuICAgICAgICBzb3VyY2UgPSAnd2l0aCAob2JqKSB7XFxuJyArIHNvdXJjZSArICdcXG59XFxuJztcbiAgICAgIH1cbiAgICAgIC8vIFRocm93IGFuIGVycm9yIGlmIGEgZm9yYmlkZGVuIGNoYXJhY3RlciB3YXMgZm91bmQgaW4gYHZhcmlhYmxlYCwgdG8gcHJldmVudFxuICAgICAgLy8gcG90ZW50aWFsIGNvbW1hbmQgaW5qZWN0aW9uIGF0dGFja3MuXG4gICAgICBlbHNlIGlmIChyZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycy50ZXN0KHZhcmlhYmxlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9URU1QTF9WQVJfRVJST1JfVEVYVCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFudXAgY29kZSBieSBzdHJpcHBpbmcgZW1wdHkgc3RyaW5ncy5cbiAgICAgIHNvdXJjZSA9IChpc0V2YWx1YXRpbmcgPyBzb3VyY2UucmVwbGFjZShyZUVtcHR5U3RyaW5nTGVhZGluZywgJycpIDogc291cmNlKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nTWlkZGxlLCAnJDEnKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nVHJhaWxpbmcsICckMTsnKTtcblxuICAgICAgLy8gRnJhbWUgY29kZSBhcyB0aGUgZnVuY3Rpb24gYm9keS5cbiAgICAgIHNvdXJjZSA9ICdmdW5jdGlvbignICsgKHZhcmlhYmxlIHx8ICdvYmonKSArICcpIHtcXG4nICtcbiAgICAgICAgKHZhcmlhYmxlXG4gICAgICAgICAgPyAnJ1xuICAgICAgICAgIDogJ29iaiB8fCAob2JqID0ge30pO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIFwidmFyIF9fdCwgX19wID0gJydcIiArXG4gICAgICAgIChpc0VzY2FwaW5nXG4gICAgICAgICAgID8gJywgX19lID0gXy5lc2NhcGUnXG4gICAgICAgICAgIDogJydcbiAgICAgICAgKSArXG4gICAgICAgIChpc0V2YWx1YXRpbmdcbiAgICAgICAgICA/ICcsIF9faiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xcbicgK1xuICAgICAgICAgICAgXCJmdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cXG5cIlxuICAgICAgICAgIDogJztcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBzb3VyY2UgK1xuICAgICAgICAncmV0dXJuIF9fcFxcbn0nO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYXR0ZW1wdChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uKGltcG9ydHNLZXlzLCBzb3VyY2VVUkwgKyAncmV0dXJuICcgKyBzb3VyY2UpXG4gICAgICAgICAgLmFwcGx5KHVuZGVmaW5lZCwgaW1wb3J0c1ZhbHVlcyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24ncyBzb3VyY2UgYnkgaXRzIGB0b1N0cmluZ2AgbWV0aG9kIG9yXG4gICAgICAvLyB0aGUgYHNvdXJjZWAgcHJvcGVydHkgYXMgYSBjb252ZW5pZW5jZSBmb3IgaW5saW5pbmcgY29tcGlsZWQgdGVtcGxhdGVzLlxuICAgICAgcmVzdWx0LnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIGlmIChpc0Vycm9yKHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gbG93ZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvTG93ZXJDYXNlXShodHRwczovL21kbi5pby90b0xvd2VyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1mb28tYmFyLS0nXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29iYXInXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ19fZm9vX2Jhcl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTG93ZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gdXBwZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvVXBwZXJDYXNlXShodHRwczovL21kbi5pby90b1VwcGVyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1GT08tQkFSLS0nXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGT09CQVInXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ19fRk9PX0JBUl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvVXBwZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9VcHBlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy5tYXAoWycgIGZvbyAgJywgJyAgYmFyICAnXSwgXy50cmltKTtcbiAgICAgKiAvLyA9PiBbJ2ZvbycsICdiYXInXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW0oc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gYmFzZVRyaW0oc3RyaW5nKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRW5kKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMtXy0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/IHRvSW50ZWdlcihvcHRpb25zLmxlbmd0aCkgOiBsZW5ndGg7XG4gICAgICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBlbmQgPSBsZW5ndGggLSBzdHJpbmdTaXplKG9taXNzaW9uKTtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJylcbiAgICAgICAgOiBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgIGVuZCArPSAocmVzdWx0Lmxlbmd0aCAtIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdWJzdHJpbmcpKSkge1xuICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09PSB1bmRlZmluZWQgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpLCBlbmQpICE9IGVuZCkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYDsgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIEhUTUwgZW50aXRpZXMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNi4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBtZXRob2ROYW1lcyBUaGUgb2JqZWN0IG1ldGhvZCBuYW1lcyB0byBiaW5kLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ2NsaWNrJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdjbGlja2VkICcgKyB0aGlzLmxhYmVsKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcsIFsnY2xpY2snXSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHZpZXcuY2xpY2spO1xuICAgICAqIC8vID0+IExvZ3MgJ2NsaWNrZWQgZG9jcycgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBtZXRob2ROYW1lcykge1xuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAga2V5ID0gdG9LZXkoa2V5KTtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBiaW5kKG9iamVjdFtrZXldLCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIG92ZXIgYHBhaXJzYCBhbmQgaW52b2tlcyB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAqIGZ1bmN0aW9uIG9mIHRoZSBmaXJzdCBwcmVkaWNhdGUgdG8gcmV0dXJuIHRydXRoeS4gVGhlIHByZWRpY2F0ZS1mdW5jdGlvblxuICAgICAqIHBhaXJzIGFyZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIHByZWRpY2F0ZS1mdW5jdGlvbiBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5jb25kKFtcbiAgICAgKiAgIFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksICAgICAgICAgICBfLmNvbnN0YW50KCdtYXRjaGVzIEEnKV0sXG4gICAgICogICBbXy5jb25mb3Jtcyh7ICdiJzogXy5pc051bWJlciB9KSwgXy5jb25zdGFudCgnbWF0Y2hlcyBCJyldLFxuICAgICAqICAgW18uc3R1YlRydWUsICAgICAgICAgICAgICAgICAgICAgIF8uY29uc3RhbnQoJ25vIG1hdGNoJyldXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQSdcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDAsICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBCJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogJzEnLCAnYic6ICcyJyB9KTtcbiAgICAgKiAvLyA9PiAnbm8gbWF0Y2gnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZChwYWlycykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHRvSXRlcmF0ZWUgPSBnZXRJdGVyYXRlZSgpO1xuXG4gICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFpclsxXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdG9JdGVyYXRlZShwYWlyWzBdKSwgcGFpclsxXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGFwcGx5KHBhaXJbMF0sIHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBwcmVkaWNhdGUgcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCByZXR1cm5pbmcgYHRydWVgIGlmXG4gICAgICogYWxsIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNUb2Agd2l0aFxuICAgICAqIGBzb3VyY2VgIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDIsICdiJzogMSB9LFxuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8uY29uZm9ybXMoeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGB2YWx1ZWAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZCBpblxuICAgICAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93UmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KFtfLmFkZCwgc3F1YXJlXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoW3NxdWFyZSwgXy5hZGRdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgZXF1aXZhbGVudFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoWyd1c2VyJywgJ2ZyZWQnXSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAgICAgKiAgIHJldHVybiAhXy5pc1JlZ0V4cChmdW5jKSA/IGl0ZXJhdGVlKGZ1bmMpIDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gICAgICogLy8gPT4gWydkZWYnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW5cbiAgICAgKiBvYmplY3QgYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmlzTWF0Y2hgIHdpdGggYHNvdXJjZWBcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5tYXRjaGVzKHsgJ2EnOiA0LCAnYyc6IDYgfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgXy5tYXRjaGVzKHsgJ2EnOiA0IH0pXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdGhlXG4gICAgICogdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0IHRvIGBzcmNWYWx1ZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlXG4gICAgICogb2JqZWN0IHZhbHVlIGlzIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdFxuICAgICAqIGBzcmNWYWx1ZWAgdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWVcbiAgICAgKiBgXy5pc0VxdWFsYCBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKG9iamVjdHMsIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCkpO1xuICAgICAqIC8vID0+IHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICpcbiAgICAgKiAvLyBDaGVja2luZyBmb3Igc2V2ZXJhbCBwb3NzaWJsZSB2YWx1ZXNcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm92ZXJTb21lKFtfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDEpLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBiYXNlQ2xvbmUoc3JjVmFsdWUsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgyKSB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMSkgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZChbJ2EnLCAnYiddKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWV0aG9kYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIHRoZSBtZXRob2QgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IF8udGltZXMoMywgXy5jb25zdGFudCksXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kT2YgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbGwgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIGZ1bmN0aW9uIHByb3BlcnRpZXMgb2YgYSBzb3VyY2VcbiAgICAgKiBvYmplY3QgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4gSWYgYG9iamVjdGAgaXMgYSBmdW5jdGlvbiwgdGhlbiBtZXRob2RzXG4gICAgICogYXJlIGFkZGVkIHRvIGl0cyBwcm90b3R5cGUgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVc2UgYF8ucnVuSW5Db250ZXh0YCB0byBjcmVhdGUgYSBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB0b1xuICAgICAqIGF2b2lkIGNvbmZsaWN0cyBjYXVzZWQgYnkgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IFtvYmplY3Q9bG9kYXNoXSBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hhaW49dHJ1ZV0gU3BlY2lmeSB3aGV0aGVyIG1peGlucyBhcmUgY2hhaW5hYmxlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHZvd2VscyhzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBfLmZpbHRlcihzdHJpbmcsIGZ1bmN0aW9uKHYpIHtcbiAgICAgKiAgICAgcmV0dXJuIC9bYWVpb3VdL2kudGVzdCh2KTtcbiAgICAgKiAgIH0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0pO1xuICAgICAqIF8udm93ZWxzKCdmcmVkJyk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9LCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1peGluKG9iamVjdCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSksXG4gICAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwgcHJvcHMpO1xuXG4gICAgICBpZiAob3B0aW9ucyA9PSBudWxsICYmXG4gICAgICAgICAgIShpc09iamVjdChzb3VyY2UpICYmIChtZXRob2ROYW1lcy5sZW5ndGggfHwgIXByb3BzLmxlbmd0aCkpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBzb3VyY2U7XG4gICAgICAgIHNvdXJjZSA9IG9iamVjdDtcbiAgICAgICAgb2JqZWN0ID0gdGhpcztcbiAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGFpbiA9ICEoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NoYWluJyBpbiBvcHRpb25zKSB8fCAhIW9wdGlvbnMuY2hhaW4sXG4gICAgICAgICAgaXNGdW5jID0gaXNGdW5jdGlvbihvYmplY3QpO1xuXG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBzb3VyY2VbbWV0aG9kTmFtZV07XG4gICAgICAgIG9iamVjdFttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICBvYmplY3QucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXztcbiAgICAgICAgICAgIGlmIChjaGFpbiB8fCBjaGFpbkFsbCkge1xuICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0KHRoaXMuX193cmFwcGVkX18pLFxuICAgICAgICAgICAgICAgICAgYWN0aW9ucyA9IHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcblxuICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goeyAnZnVuYyc6IGZ1bmMsICdhcmdzJzogYXJndW1lbnRzLCAndGhpc0FyZyc6IG9iamVjdCB9KTtcbiAgICAgICAgICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IGNoYWluQWxsO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqZWN0LCBhcnJheVB1c2goW3RoaXMudmFsdWUoKV0sIGFyZ3VtZW50cykpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVydHMgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG9cbiAgICAgKiB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBsb2Rhc2ggPSBfLm5vQ29uZmxpY3QoKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub0NvbmZsaWN0KCkge1xuICAgICAgaWYgKHJvb3QuXyA9PT0gdGhpcykge1xuICAgICAgICByb290Ll8gPSBvbGREYXNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgYXJndW1lbnQgYXQgaW5kZXggYG5gLiBJZiBgbmAgaXMgbmVnYXRpdmUsXG4gICAgICogdGhlIG50aCBhcmd1bWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGFyZ3VtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXNzLXRocnUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoMSk7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygtMik7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aEFyZyhuKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VOdGgoYXJncywgbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBpdGVyYXRlZXNgIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlc1xuICAgICAqIGFuZCByZXR1cm5zIHRoZWlyIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyKFtNYXRoLm1heCwgTWF0aC5taW5dKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoMSwgMiwgMywgNCk7XG4gICAgICogLy8gPT4gWzQsIDFdXG4gICAgICovXG4gICAgdmFyIG92ZXIgPSBjcmVhdGVPdmVyKGFycmF5TWFwKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFsbCoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBGb2xsb3dpbmcgc2hvcnRoYW5kcyBhcmUgcG9zc2libGUgZm9yIHByb3ZpZGluZyBwcmVkaWNhdGVzLlxuICAgICAqIFBhc3MgYW4gYE9iamVjdGAgYW5kIGl0IHdpbGwgYmUgdXNlZCBhcyBhbiBwYXJhbWV0ZXIgZm9yIGBfLm1hdGNoZXNgIHRvIGNyZWF0ZSB0aGUgcHJlZGljYXRlLlxuICAgICAqIFBhc3MgYW4gYEFycmF5YCBvZiBwYXJhbWV0ZXJzIGZvciBgXy5tYXRjaGVzUHJvcGVydHlgIGFuZCB0aGUgcHJlZGljYXRlIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGVtLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJFdmVyeShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlckV2ZXJ5ID0gY3JlYXRlT3ZlcihhcnJheUV2ZXJ5KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFueSoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBGb2xsb3dpbmcgc2hvcnRoYW5kcyBhcmUgcG9zc2libGUgZm9yIHByb3ZpZGluZyBwcmVkaWNhdGVzLlxuICAgICAqIFBhc3MgYW4gYE9iamVjdGAgYW5kIGl0IHdpbGwgYmUgdXNlZCBhcyBhbiBwYXJhbWV0ZXIgZm9yIGBfLm1hdGNoZXNgIHRvIGNyZWF0ZSB0aGUgcHJlZGljYXRlLlxuICAgICAqIFBhc3MgYW4gYEFycmF5YCBvZiBwYXJhbWV0ZXJzIGZvciBgXy5tYXRjaGVzUHJvcGVydHlgIGFuZCB0aGUgcHJlZGljYXRlIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGVtLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJTb21lKFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgbWF0Y2hlc0Z1bmMgPSBfLm92ZXJTb21lKFt7ICdhJzogMSB9LCB7ICdhJzogMiB9XSlcbiAgICAgKiB2YXIgbWF0Y2hlc1Byb3BlcnR5RnVuYyA9IF8ub3ZlclNvbWUoW1snYScsIDFdLCBbJ2EnLCAyXV0pXG4gICAgICovXG4gICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAgICAgKiBgc3RhcnRgIGlzIHNwZWNpZmllZCB3aXRob3V0IGFuIGBlbmRgIG9yIGBzdGVwYC4gSWYgYGVuZGAgaXMgbm90IHNwZWNpZmllZCxcbiAgICAgKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKC00KTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yYW5nZWAgZXhjZXB0IHRoYXQgaXQgcG9wdWxhdGVzIHZhbHVlcyBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDQpO1xuICAgICAqIC8vID0+IFszLCAyLCAxLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KC00KTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA1KTtcbiAgICAgKiAvLyA9PiBbNCwgMywgMiwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzE1LCAxMCwgNSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlUmlnaHQgPSBjcmVhdGVSYW5nZSh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAgICAgKiAvLyA9PiBbW10sIFtdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgICAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uc3R1Yk9iamVjdCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbe30sIHt9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlN0cmluZyk7XG4gICAgICogLy8gPT4gWycnLCAnJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlRydWUpO1xuICAgICAqIC8vID0+IFt0cnVlLCB0cnVlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBlYWNoIGludm9jYXRpb24uIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJywgJzInXVxuICAgICAqXG4gICAgICogIF8udGltZXMoNCwgXy5jb25zdGFudCgwKSk7XG4gICAgICogLy8gPT4gWzAsIDAsIDAsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpO1xuICAgICAgbiAtPSBNQVhfQVJSQVlfTEVOR1RIO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgZ2l2ZW4sIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXg9JyddIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhdWdlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRvdGFsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFkZCg2LCA0KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIHZhciBhZGQgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gYXVnZW5kICsgYWRkZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB1cCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCB1cC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgdXAgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNC4wMDYpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2LjAwNCwgMik7XG4gICAgICogLy8gPT4gNi4wMVxuICAgICAqXG4gICAgICogXy5jZWlsKDYwNDAsIC0yKTtcbiAgICAgKiAvLyA9PiA2MTAwXG4gICAgICovXG4gICAgdmFyIGNlaWwgPSBjcmVhdGVSb3VuZCgnY2VpbCcpO1xuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aWRlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpc29yIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcXVvdGllbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGl2aWRlKDYsIDQpO1xuICAgICAqIC8vID0+IDEuNVxuICAgICAqL1xuICAgIHZhciBkaXZpZGUgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCBkb3duIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIGRvd24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCBkb3duIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgZG93biBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoMC4wNDYsIDIpO1xuICAgICAqIC8vID0+IDAuMDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQwMDBcbiAgICAgKi9cbiAgICB2YXIgZmxvb3IgPSBjcmVhdGVSb3VuZCgnZmxvb3InKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4QnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWVhbiBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tZWFuKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgaWRlbnRpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVhbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIGF2ZXJhZ2VkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIgVGhlIGZpcnN0IG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWNhbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwcm9kdWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm11bHRpcGx5KDYsIDQpO1xuICAgICAqIC8vID0+IDI0XG4gICAgICovXG4gICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgIHJldHVybiBtdWx0aXBsaWVyICogbXVsdGlwbGljYW5kO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbnVlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJ0cmFoZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdWJ0cmFjdCg2LCA0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICByZXR1cm4gbWludWVuZCAtIHN1YnRyYWhlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VtKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zdW1gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBzdW1tZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guYXNzaWduSW5XaXRoID0gYXNzaWduSW5XaXRoO1xuICAgIGxvZGFzaC5hc3NpZ25XaXRoID0gYXNzaWduV2l0aDtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYXN0QXJyYXkgPSBjYXN0QXJyYXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgbG9kYXNoLmNvbmQgPSBjb25kO1xuICAgIGxvZGFzaC5jb25mb3JtcyA9IGNvbmZvcm1zO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZUJ5ID0gZGlmZmVyZW5jZUJ5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgIGxvZGFzaC5kcm9wID0gZHJvcDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0ID0gZHJvcFJpZ2h0O1xuICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgIGxvZGFzaC5kcm9wV2hpbGUgPSBkcm9wV2hpbGU7XG4gICAgbG9kYXNoLmZpbGwgPSBmaWxsO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXRNYXAgPSBmbGF0TWFwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVlcCA9IGZsYXRNYXBEZWVwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgbG9kYXNoLmZsaXAgPSBmbGlwO1xuICAgIGxvZGFzaC5mbG93ID0gZmxvdztcbiAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5mcm9tUGFpcnMgPSBmcm9tUGFpcnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbkJ5ID0gaW50ZXJzZWN0aW9uQnk7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbldpdGggPSBpbnRlcnNlY3Rpb25XaXRoO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludmVydEJ5ID0gaW52ZXJ0Qnk7XG4gICAgbG9kYXNoLmludm9rZU1hcCA9IGludm9rZU1hcDtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICBsb2Rhc2gua2V5QnkgPSBrZXlCeTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBsb2Rhc2gubnRoQXJnID0gbnRoQXJnO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gub3JkZXJCeSA9IG9yZGVyQnk7XG4gICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgIGxvZGFzaC5vdmVyQXJncyA9IG92ZXJBcmdzO1xuICAgIGxvZGFzaC5vdmVyRXZlcnkgPSBvdmVyRXZlcnk7XG4gICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBpY2tCeSA9IHBpY2tCeTtcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICBsb2Rhc2gucHVsbEFsbEJ5ID0gcHVsbEFsbEJ5O1xuICAgIGxvZGFzaC5wdWxsQWxsV2l0aCA9IHB1bGxBbGxXaXRoO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJhbmdlUmlnaHQgPSByYW5nZVJpZ2h0O1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJldmVyc2UgPSByZXZlcnNlO1xuICAgIGxvZGFzaC5zYW1wbGVTaXplID0gc2FtcGxlU2l6ZTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zZXRXaXRoID0gc2V0V2l0aDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcSA9IHNvcnRlZFVuaXE7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICBsb2Rhc2guc3BsaXQgPSBzcGxpdDtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLnRvUGFpcnNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2gudG9QYXRoID0gdG9QYXRoO1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmFyeSA9IHVuYXJ5O1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlvbkJ5ID0gdW5pb25CeTtcbiAgICBsb2Rhc2gudW5pb25XaXRoID0gdW5pb25XaXRoO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW5pcUJ5ID0gdW5pcUJ5O1xuICAgIGxvZGFzaC51bmlxV2l0aCA9IHVuaXFXaXRoO1xuICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgIGxvZGFzaC51bnppcCA9IHVuemlwO1xuICAgIGxvZGFzaC51bnppcFdpdGggPSB1bnppcFdpdGg7XG4gICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICBsb2Rhc2gudXBkYXRlV2l0aCA9IHVwZGF0ZVdpdGg7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnhvckJ5ID0geG9yQnk7XG4gICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC5lbnRyaWVzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xhbXAgPSBjbGFtcDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jbG9uZURlZXBXaXRoID0gY2xvbmVEZWVwV2l0aDtcbiAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgIGxvZGFzaC5jb25mb3Jtc1RvID0gY29uZm9ybXNUbztcbiAgICBsb2Rhc2guZGVidXJyID0gZGVidXJyO1xuICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgbG9kYXNoLmRpdmlkZSA9IGRpdmlkZTtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICBsb2Rhc2guaGVhZCA9IGhlYWQ7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3Q7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICBsb2Rhc2guaXNFcnJvciA9IGlzRXJyb3I7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc0ludGVnZXIgPSBpc0ludGVnZXI7XG4gICAgbG9kYXNoLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG4gICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc01hdGNoV2l0aCA9IGlzTWF0Y2hXaXRoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc05pbCA9IGlzTmlsO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc1NldCA9IGlzU2V0O1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBsb2Rhc2guaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuICAgIGxvZGFzaC5qb2luID0gam9pbjtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgIGxvZGFzaC5sb3dlckZpcnN0ID0gbG93ZXJGaXJzdDtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1heEJ5ID0gbWF4Qnk7XG4gICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgIGxvZGFzaC5tZWFuQnkgPSBtZWFuQnk7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICBsb2Rhc2guc3R1YkFycmF5ID0gc3R1YkFycmF5O1xuICAgIGxvZGFzaC5zdHViRmFsc2UgPSBzdHViRmFsc2U7XG4gICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgIGxvZGFzaC5zdHViU3RyaW5nID0gc3R1YlN0cmluZztcbiAgICBsb2Rhc2guc3R1YlRydWUgPSBzdHViVHJ1ZTtcbiAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICBsb2Rhc2gubnRoID0gbnRoO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFkID0gcGFkO1xuICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgbG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtcbiAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgbG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgbG9kYXNoLnN1bSA9IHN1bTtcbiAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICBsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO1xuICAgIGxvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO1xuICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICBsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtcbiAgICBsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgbG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgbG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtcbiAgICBsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcbiAgICBsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO1xuICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5maXJzdCA9IGhlYWQ7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICBuID0gbiA9PT0gdW5kZWZpbmVkID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSAodGhpcy5fX2ZpbHRlcmVkX18gJiYgIWluZGV4KVxuICAgICAgICAgID8gbmV3IExhenlXcmFwcGVyKHRoaXMpXG4gICAgICAgICAgOiB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihuLCByZXN1bHQuX190YWtlQ291bnRfXyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICdzaXplJzogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAnaXRlcmF0ZWUnOiBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksXG4gICAgICAgICAgJ3R5cGUnOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5oZWFkYCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnaGVhZCcsICdsYXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdGFrZU5hbWUgPSAndGFrZScgKyAoaW5kZXggPyAnUmlnaHQnIDogJycpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaW5pdGlhbGAgYW5kIGBfLnRhaWxgLlxuICAgIGFycmF5RWFjaChbJ2luaXRpYWwnLCAndGFpbCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIGRyb3BOYW1lID0gJ2Ryb3AnICsgKGluZGV4ID8gJycgOiAnUmlnaHQnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyZWRfXyA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKSA6IHRoaXNbZHJvcE5hbWVdKDEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHByZWRpY2F0ZSkuaGVhZCgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSkucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgaXNUYWtlciA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV0sXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gaXNUYWtlciB8fCAvXmZpbmQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICAgIHJldHVybiAoaXNUYWtlciAmJiBjaGFpbkFsbCkgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVzZUxhenkgJiYgY2hlY2tJdGVyYXRlZSAmJiB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiBpdGVyYXRlZS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxhenkgdXNlIGlmIHRoZSBpdGVyYXRlZSBoYXMgYSBcImxlbmd0aFwiIHZhbHVlIG90aGVyIHRoYW4gYDFgLlxuICAgICAgICAgIGlzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzVW53cmFwcGVkID0gcmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxcbiAgICAgICAgICAgIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcblxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgICAgcmV0dXJuIGlzVW53cmFwcGVkID8gKGlzVGFrZXIgPyByZXN1bHQudmFsdWUoKVswXSA6IHJlc3VsdC52YWx1ZSgpKSA6IHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBhcnJheUVhY2goWydwb3AnLCAncHVzaCcsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlQcm90b1ttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OnBvcHxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBNYXAgbWluaWZpZWQgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IGxvZGFzaEZ1bmMubmFtZSArICcnO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCBrZXkpKSB7XG4gICAgICAgICAgcmVhbE5hbWVzW2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZWFsTmFtZXNba2V5XS5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkKHVuZGVmaW5lZCwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAnbmFtZSc6ICd3cmFwcGVyJyxcbiAgICAgICdmdW5jJzogdW5kZWZpbmVkXG4gICAgfV07XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGF6eVdyYXBwZXJgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbiBzZXF1ZW5jZSBtZXRob2RzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7XG5cbiAgICAvLyBBZGQgbGF6eSBhbGlhc2VzLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuZmlyc3QgPSBsb2Rhc2gucHJvdG90eXBlLmhlYWQ7XG5cbiAgICBpZiAoc3ltSXRlcmF0b3IpIHtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbc3ltSXRlcmF0b3JdID0gd3JhcHBlclRvSXRlcmF0b3I7XG4gICAgfVxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH0pO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEV4cG9ydCBsb2Rhc2guXG4gIHZhciBfID0gcnVuSW5Db250ZXh0KCk7XG5cbiAgLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2U6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBMb2Rhc2ggb24gdGhlIGdsb2JhbCBvYmplY3QgdG8gcHJldmVudCBlcnJvcnMgd2hlbiBMb2Rhc2ggaXNcbiAgICAvLyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTUQgbG9hZGVyLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2Vycm9ycy5odG1sI21pc21hdGNoIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy8gVXNlIGBfLm5vQ29uZmxpY3RgIHRvIHJlbW92ZSBMb2Rhc2ggZnJvbSB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuXG4gICAgLy8gRGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmVcbiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSBcInVuZGVyc2NvcmVcIiBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgaXQuXG4gIGVsc2UgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMuXG4gICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsIi8qKlxuICogT3dsIENhcm91c2VsIHYyLjMuNFxuICogQ29weXJpZ2h0IDIwMTMtMjAxOCBEYXZpZCBEZXV0c2NoXG4gKiBMaWNlbnNlZCB1bmRlcjogU0VFIExJQ0VOU0UgSU4gaHR0cHM6Ly9naXRodWIuY29tL093bENhcm91c2VsMi9Pd2xDYXJvdXNlbDIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG4vKipcbiAqIE93bCBjYXJvdXNlbFxuICogQHZlcnNpb24gMi4zLjRcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQHRvZG8gTGF6eSBMb2FkIEljb25cbiAqIEB0b2RvIHByZXZlbnQgYW5pbWF0aW9uZW5kIGJ1YmxpbmdcbiAqIEB0b2RvIGl0ZW1zU2NhbGVVcFxuICogQHRvZG8gVGVzdCBaZXB0b1xuICogQHRvZG8gc3RhZ2VQYWRkaW5nIGNhbGN1bGF0ZSB3cm9uZyBhY3RpdmUgY2xhc3Nlc1xuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgY2Fyb3VzZWwuXG5cdCAqIEBjbGFzcyBUaGUgT3dsIENhcm91c2VsLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8alF1ZXJ5fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgdG8gY3JlYXRlIHRoZSBjYXJvdXNlbCBmb3IuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBUaGUgb3B0aW9uc1xuXHQgKi9cblx0ZnVuY3Rpb24gT3dsKGVsZW1lbnQsIG9wdGlvbnMpIHtcblxuXHRcdC8qKlxuXHRcdCAqIEN1cnJlbnQgc2V0dGluZ3MgZm9yIHRoZSBjYXJvdXNlbC5cblx0XHQgKiBAcHVibGljXG5cdFx0ICovXG5cdFx0dGhpcy5zZXR0aW5ncyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBDdXJyZW50IG9wdGlvbnMgc2V0IGJ5IHRoZSBjYWxsZXIgaW5jbHVkaW5nIGRlZmF1bHRzLlxuXHRcdCAqIEBwdWJsaWNcblx0XHQgKi9cblx0XHR0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgT3dsLkRlZmF1bHRzLCBvcHRpb25zKTtcblxuXHRcdC8qKlxuXHRcdCAqIFBsdWdpbiBlbGVtZW50LlxuXHRcdCAqIEBwdWJsaWNcblx0XHQgKi9cblx0XHR0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcblxuXHRcdC8qKlxuXHRcdCAqIFByb3hpZWQgZXZlbnQgaGFuZGxlcnMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX2hhbmRsZXJzID0ge307XG5cblx0XHQvKipcblx0XHQgKiBSZWZlcmVuY2VzIHRvIHRoZSBydW5uaW5nIHBsdWdpbnMgb2YgdGhpcyBjYXJvdXNlbC5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fcGx1Z2lucyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudGx5IHN1cHByZXNzZWQgZXZlbnRzIHRvIHByZXZlbnQgdGhlbSBmcm9tIGJlaW5nIHJldHJpZ2dlcmVkLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9zdXByZXNzID0ge307XG5cblx0XHQvKipcblx0XHQgKiBBYnNvbHV0ZSBjdXJyZW50IHBvc2l0aW9uLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9jdXJyZW50ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEFuaW1hdGlvbiBzcGVlZCBpbiBtaWxsaXNlY29uZHMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX3NwZWVkID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIENvb3JkaW5hdGVzIG9mIGFsbCBpdGVtcyBpbiBwaXhlbC5cblx0XHQgKiBAdG9kbyBUaGUgbmFtZSBvZiB0aGlzIG1lbWJlciBpcyBtaXNzbGVhZGluZy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fY29vcmRpbmF0ZXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIEN1cnJlbnQgYnJlYWtwb2ludC5cblx0XHQgKiBAdG9kbyBSZWFsIG1lZGlhIHF1ZXJpZXMgd291bGQgYmUgbmljZS5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fYnJlYWtwb2ludCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBDdXJyZW50IHdpZHRoIG9mIHRoZSBwbHVnaW4gZWxlbWVudC5cblx0XHQgKi9cblx0XHR0aGlzLl93aWR0aCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBbGwgcmVhbCBpdGVtcy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5faXRlbXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIEFsbCBjbG9uZWQgaXRlbXMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX2Nsb25lcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogTWVyZ2UgdmFsdWVzIG9mIGFsbCBpdGVtcy5cblx0XHQgKiBAdG9kbyBNYXliZSB0aGlzIGNvdWxkIGJlIHBhcnQgb2YgYSBwbHVnaW4uXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX21lcmdlcnMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFdpZHRocyBvZiBhbGwgaXRlbXMuXG5cdFx0ICovXG5cdFx0dGhpcy5fd2lkdGhzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBJbnZhbGlkYXRlZCBwYXJ0cyB3aXRoaW4gdGhlIHVwZGF0ZSBwcm9jZXNzLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9pbnZhbGlkYXRlZCA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogT3JkZXJlZCBsaXN0IG9mIHdvcmtlcnMgZm9yIHRoZSB1cGRhdGUgcHJvY2Vzcy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fcGlwZSA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCBzdGF0ZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGRyYWcgb3BlcmF0aW9uLlxuXHRcdCAqIEB0b2RvICMyNjFcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fZHJhZyA9IHtcblx0XHRcdHRpbWU6IG51bGwsXG5cdFx0XHR0YXJnZXQ6IG51bGwsXG5cdFx0XHRwb2ludGVyOiBudWxsLFxuXHRcdFx0c3RhZ2U6IHtcblx0XHRcdFx0c3RhcnQ6IG51bGwsXG5cdFx0XHRcdGN1cnJlbnQ6IG51bGxcblx0XHRcdH0sXG5cdFx0XHRkaXJlY3Rpb246IG51bGxcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCBzdGF0ZSBpbmZvcm1hdGlvbiBhbmQgdGhlaXIgdGFncy5cblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9zdGF0ZXMgPSB7XG5cdFx0XHRjdXJyZW50OiB7fSxcblx0XHRcdHRhZ3M6IHtcblx0XHRcdFx0J2luaXRpYWxpemluZyc6IFsgJ2J1c3knIF0sXG5cdFx0XHRcdCdhbmltYXRpbmcnOiBbICdidXN5JyBdLFxuXHRcdFx0XHQnZHJhZ2dpbmcnOiBbICdpbnRlcmFjdGluZycgXVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQkLmVhY2goWyAnb25SZXNpemUnLCAnb25UaHJvdHRsZWRSZXNpemUnIF0sICQucHJveHkoZnVuY3Rpb24oaSwgaGFuZGxlcikge1xuXHRcdFx0dGhpcy5faGFuZGxlcnNbaGFuZGxlcl0gPSAkLnByb3h5KHRoaXNbaGFuZGxlcl0sIHRoaXMpO1xuXHRcdH0sIHRoaXMpKTtcblxuXHRcdCQuZWFjaChPd2wuUGx1Z2lucywgJC5wcm94eShmdW5jdGlvbihrZXksIHBsdWdpbikge1xuXHRcdFx0dGhpcy5fcGx1Z2luc1trZXkuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSldXG5cdFx0XHRcdD0gbmV3IHBsdWdpbih0aGlzKTtcblx0XHR9LCB0aGlzKSk7XG5cblx0XHQkLmVhY2goT3dsLldvcmtlcnMsICQucHJveHkoZnVuY3Rpb24ocHJpb3JpdHksIHdvcmtlcikge1xuXHRcdFx0dGhpcy5fcGlwZS5wdXNoKHtcblx0XHRcdFx0J2ZpbHRlcic6IHdvcmtlci5maWx0ZXIsXG5cdFx0XHRcdCdydW4nOiAkLnByb3h5KHdvcmtlci5ydW4sIHRoaXMpXG5cdFx0XHR9KTtcblx0XHR9LCB0aGlzKSk7XG5cblx0XHR0aGlzLnNldHVwKCk7XG5cdFx0dGhpcy5pbml0aWFsaXplKCk7XG5cdH1cblxuXHQvKipcblx0ICogRGVmYXVsdCBvcHRpb25zIGZvciB0aGUgY2Fyb3VzZWwuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdE93bC5EZWZhdWx0cyA9IHtcblx0XHRpdGVtczogMyxcblx0XHRsb29wOiBmYWxzZSxcblx0XHRjZW50ZXI6IGZhbHNlLFxuXHRcdHJld2luZDogZmFsc2UsXG5cdFx0Y2hlY2tWaXNpYmlsaXR5OiB0cnVlLFxuXG5cdFx0bW91c2VEcmFnOiB0cnVlLFxuXHRcdHRvdWNoRHJhZzogdHJ1ZSxcblx0XHRwdWxsRHJhZzogdHJ1ZSxcblx0XHRmcmVlRHJhZzogZmFsc2UsXG5cblx0XHRtYXJnaW46IDAsXG5cdFx0c3RhZ2VQYWRkaW5nOiAwLFxuXG5cdFx0bWVyZ2U6IGZhbHNlLFxuXHRcdG1lcmdlRml0OiB0cnVlLFxuXHRcdGF1dG9XaWR0aDogZmFsc2UsXG5cblx0XHRzdGFydFBvc2l0aW9uOiAwLFxuXHRcdHJ0bDogZmFsc2UsXG5cblx0XHRzbWFydFNwZWVkOiAyNTAsXG5cdFx0Zmx1aWRTcGVlZDogZmFsc2UsXG5cdFx0ZHJhZ0VuZFNwZWVkOiBmYWxzZSxcblxuXHRcdHJlc3BvbnNpdmU6IHt9LFxuXHRcdHJlc3BvbnNpdmVSZWZyZXNoUmF0ZTogMjAwLFxuXHRcdHJlc3BvbnNpdmVCYXNlRWxlbWVudDogd2luZG93LFxuXG5cdFx0ZmFsbGJhY2tFYXNpbmc6ICdzd2luZycsXG5cdFx0c2xpZGVUcmFuc2l0aW9uOiAnJyxcblxuXHRcdGluZm86IGZhbHNlLFxuXG5cdFx0bmVzdGVkSXRlbVNlbGVjdG9yOiBmYWxzZSxcblx0XHRpdGVtRWxlbWVudDogJ2RpdicsXG5cdFx0c3RhZ2VFbGVtZW50OiAnZGl2JyxcblxuXHRcdHJlZnJlc2hDbGFzczogJ293bC1yZWZyZXNoJyxcblx0XHRsb2FkZWRDbGFzczogJ293bC1sb2FkZWQnLFxuXHRcdGxvYWRpbmdDbGFzczogJ293bC1sb2FkaW5nJyxcblx0XHRydGxDbGFzczogJ293bC1ydGwnLFxuXHRcdHJlc3BvbnNpdmVDbGFzczogJ293bC1yZXNwb25zaXZlJyxcblx0XHRkcmFnQ2xhc3M6ICdvd2wtZHJhZycsXG5cdFx0aXRlbUNsYXNzOiAnb3dsLWl0ZW0nLFxuXHRcdHN0YWdlQ2xhc3M6ICdvd2wtc3RhZ2UnLFxuXHRcdHN0YWdlT3V0ZXJDbGFzczogJ293bC1zdGFnZS1vdXRlcicsXG5cdFx0Z3JhYkNsYXNzOiAnb3dsLWdyYWInXG5cdH07XG5cblx0LyoqXG5cdCAqIEVudW1lcmF0aW9uIGZvciB3aWR0aC5cblx0ICogQHB1YmxpY1xuXHQgKiBAcmVhZG9ubHlcblx0ICogQGVudW0ge1N0cmluZ31cblx0ICovXG5cdE93bC5XaWR0aCA9IHtcblx0XHREZWZhdWx0OiAnZGVmYXVsdCcsXG5cdFx0SW5uZXI6ICdpbm5lcicsXG5cdFx0T3V0ZXI6ICdvdXRlcidcblx0fTtcblxuXHQvKipcblx0ICogRW51bWVyYXRpb24gZm9yIHR5cGVzLlxuXHQgKiBAcHVibGljXG5cdCAqIEByZWFkb25seVxuXHQgKiBAZW51bSB7U3RyaW5nfVxuXHQgKi9cblx0T3dsLlR5cGUgPSB7XG5cdFx0RXZlbnQ6ICdldmVudCcsXG5cdFx0U3RhdGU6ICdzdGF0ZSdcblx0fTtcblxuXHQvKipcblx0ICogQ29udGFpbnMgYWxsIHJlZ2lzdGVyZWQgcGx1Z2lucy5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0T3dsLlBsdWdpbnMgPSB7fTtcblxuXHQvKipcblx0ICogTGlzdCBvZiB3b3JrZXJzIGludm9sdmVkIGluIHRoZSB1cGRhdGUgcHJvY2Vzcy5cblx0ICovXG5cdE93bC5Xb3JrZXJzID0gWyB7XG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdzZXR0aW5ncycgXSxcblx0XHRydW46IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5fd2lkdGggPSB0aGlzLiRlbGVtZW50LndpZHRoKCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcblx0XHRydW46IGZ1bmN0aW9uKGNhY2hlKSB7XG5cdFx0XHRjYWNoZS5jdXJyZW50ID0gdGhpcy5faXRlbXMgJiYgdGhpcy5faXRlbXNbdGhpcy5yZWxhdGl2ZSh0aGlzLl9jdXJyZW50KV07XG5cdFx0fVxuXHR9LCB7XG5cdFx0ZmlsdGVyOiBbICdpdGVtcycsICdzZXR0aW5ncycgXSxcblx0XHRydW46IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oJy5jbG9uZWQnKS5yZW1vdmUoKTtcblx0XHR9XG5cdH0sIHtcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxuXHRcdHJ1bjogZnVuY3Rpb24oY2FjaGUpIHtcblx0XHRcdHZhciBtYXJnaW4gPSB0aGlzLnNldHRpbmdzLm1hcmdpbiB8fCAnJyxcblx0XHRcdFx0Z3JpZCA9ICF0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCxcblx0XHRcdFx0cnRsID0gdGhpcy5zZXR0aW5ncy5ydGwsXG5cdFx0XHRcdGNzcyA9IHtcblx0XHRcdFx0XHQnd2lkdGgnOiAnYXV0bycsXG5cdFx0XHRcdFx0J21hcmdpbi1sZWZ0JzogcnRsID8gbWFyZ2luIDogJycsXG5cdFx0XHRcdFx0J21hcmdpbi1yaWdodCc6IHJ0bCA/ICcnIDogbWFyZ2luXG5cdFx0XHRcdH07XG5cblx0XHRcdCFncmlkICYmIHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuY3NzKGNzcyk7XG5cblx0XHRcdGNhY2hlLmNzcyA9IGNzcztcblx0XHR9XG5cdH0sIHtcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxuXHRcdHJ1bjogZnVuY3Rpb24oY2FjaGUpIHtcblx0XHRcdHZhciB3aWR0aCA9ICh0aGlzLndpZHRoKCkgLyB0aGlzLnNldHRpbmdzLml0ZW1zKS50b0ZpeGVkKDMpIC0gdGhpcy5zZXR0aW5ncy5tYXJnaW4sXG5cdFx0XHRcdG1lcmdlID0gbnVsbCxcblx0XHRcdFx0aXRlcmF0b3IgPSB0aGlzLl9pdGVtcy5sZW5ndGgsXG5cdFx0XHRcdGdyaWQgPSAhdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsXG5cdFx0XHRcdHdpZHRocyA9IFtdO1xuXG5cdFx0XHRjYWNoZS5pdGVtcyA9IHtcblx0XHRcdFx0bWVyZ2U6IGZhbHNlLFxuXHRcdFx0XHR3aWR0aDogd2lkdGhcblx0XHRcdH07XG5cblx0XHRcdHdoaWxlIChpdGVyYXRvci0tKSB7XG5cdFx0XHRcdG1lcmdlID0gdGhpcy5fbWVyZ2Vyc1tpdGVyYXRvcl07XG5cdFx0XHRcdG1lcmdlID0gdGhpcy5zZXR0aW5ncy5tZXJnZUZpdCAmJiBNYXRoLm1pbihtZXJnZSwgdGhpcy5zZXR0aW5ncy5pdGVtcykgfHwgbWVyZ2U7XG5cblx0XHRcdFx0Y2FjaGUuaXRlbXMubWVyZ2UgPSBtZXJnZSA+IDEgfHwgY2FjaGUuaXRlbXMubWVyZ2U7XG5cblx0XHRcdFx0d2lkdGhzW2l0ZXJhdG9yXSA9ICFncmlkID8gdGhpcy5faXRlbXNbaXRlcmF0b3JdLndpZHRoKCkgOiB3aWR0aCAqIG1lcmdlO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl93aWR0aHMgPSB3aWR0aHM7XG5cdFx0fVxuXHR9LCB7XG5cdFx0ZmlsdGVyOiBbICdpdGVtcycsICdzZXR0aW5ncycgXSxcblx0XHRydW46IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsb25lcyA9IFtdLFxuXHRcdFx0XHRpdGVtcyA9IHRoaXMuX2l0ZW1zLFxuXHRcdFx0XHRzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3MsXG5cdFx0XHRcdC8vIFRPRE86IFNob3VsZCBiZSBjb21wdXRlZCBmcm9tIG51bWJlciBvZiBtaW4gd2lkdGggaXRlbXMgaW4gc3RhZ2Vcblx0XHRcdFx0dmlldyA9IE1hdGgubWF4KHNldHRpbmdzLml0ZW1zICogMiwgNCksXG5cdFx0XHRcdHNpemUgPSBNYXRoLmNlaWwoaXRlbXMubGVuZ3RoIC8gMikgKiAyLFxuXHRcdFx0XHRyZXBlYXQgPSBzZXR0aW5ncy5sb29wICYmIGl0ZW1zLmxlbmd0aCA/IHNldHRpbmdzLnJld2luZCA/IHZpZXcgOiBNYXRoLm1heCh2aWV3LCBzaXplKSA6IDAsXG5cdFx0XHRcdGFwcGVuZCA9ICcnLFxuXHRcdFx0XHRwcmVwZW5kID0gJyc7XG5cblx0XHRcdHJlcGVhdCAvPSAyO1xuXG5cdFx0XHR3aGlsZSAocmVwZWF0ID4gMCkge1xuXHRcdFx0XHQvLyBTd2l0Y2ggdG8gb25seSB1c2luZyBhcHBlbmRlZCBjbG9uZXNcblx0XHRcdFx0Y2xvbmVzLnB1c2godGhpcy5ub3JtYWxpemUoY2xvbmVzLmxlbmd0aCAvIDIsIHRydWUpKTtcblx0XHRcdFx0YXBwZW5kID0gYXBwZW5kICsgaXRlbXNbY2xvbmVzW2Nsb25lcy5sZW5ndGggLSAxXV1bMF0ub3V0ZXJIVE1MO1xuXHRcdFx0XHRjbG9uZXMucHVzaCh0aGlzLm5vcm1hbGl6ZShpdGVtcy5sZW5ndGggLSAxIC0gKGNsb25lcy5sZW5ndGggLSAxKSAvIDIsIHRydWUpKTtcblx0XHRcdFx0cHJlcGVuZCA9IGl0ZW1zW2Nsb25lc1tjbG9uZXMubGVuZ3RoIC0gMV1dWzBdLm91dGVySFRNTCArIHByZXBlbmQ7XG5cdFx0XHRcdHJlcGVhdCAtPSAxO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9jbG9uZXMgPSBjbG9uZXM7XG5cblx0XHRcdCQoYXBwZW5kKS5hZGRDbGFzcygnY2xvbmVkJykuYXBwZW5kVG8odGhpcy4kc3RhZ2UpO1xuXHRcdFx0JChwcmVwZW5kKS5hZGRDbGFzcygnY2xvbmVkJykucHJlcGVuZFRvKHRoaXMuJHN0YWdlKTtcblx0XHR9XG5cdH0sIHtcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcnRsID0gdGhpcy5zZXR0aW5ncy5ydGwgPyAxIDogLTEsXG5cdFx0XHRcdHNpemUgPSB0aGlzLl9jbG9uZXMubGVuZ3RoICsgdGhpcy5faXRlbXMubGVuZ3RoLFxuXHRcdFx0XHRpdGVyYXRvciA9IC0xLFxuXHRcdFx0XHRwcmV2aW91cyA9IDAsXG5cdFx0XHRcdGN1cnJlbnQgPSAwLFxuXHRcdFx0XHRjb29yZGluYXRlcyA9IFtdO1xuXG5cdFx0XHR3aGlsZSAoKytpdGVyYXRvciA8IHNpemUpIHtcblx0XHRcdFx0cHJldmlvdXMgPSBjb29yZGluYXRlc1tpdGVyYXRvciAtIDFdIHx8IDA7XG5cdFx0XHRcdGN1cnJlbnQgPSB0aGlzLl93aWR0aHNbdGhpcy5yZWxhdGl2ZShpdGVyYXRvcildICsgdGhpcy5zZXR0aW5ncy5tYXJnaW47XG5cdFx0XHRcdGNvb3JkaW5hdGVzLnB1c2gocHJldmlvdXMgKyBjdXJyZW50ICogcnRsKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY29vcmRpbmF0ZXMgPSBjb29yZGluYXRlcztcblx0XHR9XG5cdH0sIHtcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcGFkZGluZyA9IHRoaXMuc2V0dGluZ3Muc3RhZ2VQYWRkaW5nLFxuXHRcdFx0XHRjb29yZGluYXRlcyA9IHRoaXMuX2Nvb3JkaW5hdGVzLFxuXHRcdFx0XHRjc3MgPSB7XG5cdFx0XHRcdFx0J3dpZHRoJzogTWF0aC5jZWlsKE1hdGguYWJzKGNvb3JkaW5hdGVzW2Nvb3JkaW5hdGVzLmxlbmd0aCAtIDFdKSkgKyBwYWRkaW5nICogMixcblx0XHRcdFx0XHQncGFkZGluZy1sZWZ0JzogcGFkZGluZyB8fCAnJyxcblx0XHRcdFx0XHQncGFkZGluZy1yaWdodCc6IHBhZGRpbmcgfHwgJydcblx0XHRcdFx0fTtcblxuXHRcdFx0dGhpcy4kc3RhZ2UuY3NzKGNzcyk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcblx0XHRydW46IGZ1bmN0aW9uKGNhY2hlKSB7XG5cdFx0XHR2YXIgaXRlcmF0b3IgPSB0aGlzLl9jb29yZGluYXRlcy5sZW5ndGgsXG5cdFx0XHRcdGdyaWQgPSAhdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsXG5cdFx0XHRcdGl0ZW1zID0gdGhpcy4kc3RhZ2UuY2hpbGRyZW4oKTtcblxuXHRcdFx0aWYgKGdyaWQgJiYgY2FjaGUuaXRlbXMubWVyZ2UpIHtcblx0XHRcdFx0d2hpbGUgKGl0ZXJhdG9yLS0pIHtcblx0XHRcdFx0XHRjYWNoZS5jc3Mud2lkdGggPSB0aGlzLl93aWR0aHNbdGhpcy5yZWxhdGl2ZShpdGVyYXRvcildO1xuXHRcdFx0XHRcdGl0ZW1zLmVxKGl0ZXJhdG9yKS5jc3MoY2FjaGUuY3NzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChncmlkKSB7XG5cdFx0XHRcdGNhY2hlLmNzcy53aWR0aCA9IGNhY2hlLml0ZW1zLndpZHRoO1xuXHRcdFx0XHRpdGVtcy5jc3MoY2FjaGUuY3NzKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sIHtcblx0XHRmaWx0ZXI6IFsgJ2l0ZW1zJyBdLFxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl9jb29yZGluYXRlcy5sZW5ndGggPCAxICYmIHRoaXMuJHN0YWdlLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcblx0XHRydW46IGZ1bmN0aW9uKGNhY2hlKSB7XG5cdFx0XHRjYWNoZS5jdXJyZW50ID0gY2FjaGUuY3VycmVudCA/IHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuaW5kZXgoY2FjaGUuY3VycmVudCkgOiAwO1xuXHRcdFx0Y2FjaGUuY3VycmVudCA9IE1hdGgubWF4KHRoaXMubWluaW11bSgpLCBNYXRoLm1pbih0aGlzLm1heGltdW0oKSwgY2FjaGUuY3VycmVudCkpO1xuXHRcdFx0dGhpcy5yZXNldChjYWNoZS5jdXJyZW50KTtcblx0XHR9XG5cdH0sIHtcblx0XHRmaWx0ZXI6IFsgJ3Bvc2l0aW9uJyBdLFxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmFuaW1hdGUodGhpcy5jb29yZGluYXRlcyh0aGlzLl9jdXJyZW50KSk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdwb3NpdGlvbicsICdpdGVtcycsICdzZXR0aW5ncycgXSxcblx0XHRydW46IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHJ0bCA9IHRoaXMuc2V0dGluZ3MucnRsID8gMSA6IC0xLFxuXHRcdFx0XHRwYWRkaW5nID0gdGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcgKiAyLFxuXHRcdFx0XHRiZWdpbiA9IHRoaXMuY29vcmRpbmF0ZXModGhpcy5jdXJyZW50KCkpICsgcGFkZGluZyxcblx0XHRcdFx0ZW5kID0gYmVnaW4gKyB0aGlzLndpZHRoKCkgKiBydGwsXG5cdFx0XHRcdGlubmVyLCBvdXRlciwgbWF0Y2hlcyA9IFtdLCBpLCBuO1xuXG5cdFx0XHRmb3IgKGkgPSAwLCBuID0gdGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdGlubmVyID0gdGhpcy5fY29vcmRpbmF0ZXNbaSAtIDFdIHx8IDA7XG5cdFx0XHRcdG91dGVyID0gTWF0aC5hYnModGhpcy5fY29vcmRpbmF0ZXNbaV0pICsgcGFkZGluZyAqIHJ0bDtcblxuXHRcdFx0XHRpZiAoKHRoaXMub3AoaW5uZXIsICc8PScsIGJlZ2luKSAmJiAodGhpcy5vcChpbm5lciwgJz4nLCBlbmQpKSlcblx0XHRcdFx0XHR8fCAodGhpcy5vcChvdXRlciwgJzwnLCBiZWdpbikgJiYgdGhpcy5vcChvdXRlciwgJz4nLCBlbmQpKSkge1xuXHRcdFx0XHRcdG1hdGNoZXMucHVzaChpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbignLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcblx0XHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCc6ZXEoJyArIG1hdGNoZXMuam9pbignKSwgOmVxKCcpICsgJyknKS5hZGRDbGFzcygnYWN0aXZlJyk7XG5cblx0XHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCcuY2VudGVyJykucmVtb3ZlQ2xhc3MoJ2NlbnRlcicpO1xuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuY2VudGVyKSB7XG5cdFx0XHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuZXEodGhpcy5jdXJyZW50KCkpLmFkZENsYXNzKCdjZW50ZXInKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gXTtcblxuXHQvKipcblx0ICogQ3JlYXRlIHRoZSBzdGFnZSBET00gZWxlbWVudFxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5pbml0aWFsaXplU3RhZ2UgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLiRzdGFnZSA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLicgKyB0aGlzLnNldHRpbmdzLnN0YWdlQ2xhc3MpO1xuXG5cdFx0Ly8gaWYgdGhlIHN0YWdlIGlzIGFscmVhZHkgaW4gdGhlIERPTSwgZ3JhYiBpdCBhbmQgc2tpcCBzdGFnZSBpbml0aWFsaXphdGlvblxuXHRcdGlmICh0aGlzLiRzdGFnZS5sZW5ndGgpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5sb2FkaW5nQ2xhc3MpO1xuXG5cdFx0Ly8gY3JlYXRlIHN0YWdlXG5cdFx0dGhpcy4kc3RhZ2UgPSAkKCc8JyArIHRoaXMuc2V0dGluZ3Muc3RhZ2VFbGVtZW50ICsgJz4nLCB7XG5cdFx0XHRcImNsYXNzXCI6IHRoaXMuc2V0dGluZ3Muc3RhZ2VDbGFzc1xuXHRcdH0pLndyYXAoICQoICc8ZGl2Lz4nLCB7XG5cdFx0XHRcImNsYXNzXCI6IHRoaXMuc2V0dGluZ3Muc3RhZ2VPdXRlckNsYXNzXG5cdFx0fSkpO1xuXG5cdFx0Ly8gYXBwZW5kIHN0YWdlXG5cdFx0dGhpcy4kZWxlbWVudC5hcHBlbmQodGhpcy4kc3RhZ2UucGFyZW50KCkpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBDcmVhdGUgaXRlbSBET00gZWxlbWVudHNcblx0ICovXG5cdE93bC5wcm90b3R5cGUuaW5pdGlhbGl6ZUl0ZW1zID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyICRpdGVtcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLm93bC1pdGVtJyk7XG5cblx0XHQvLyBpZiB0aGUgaXRlbXMgYXJlIGFscmVhZHkgaW4gdGhlIERPTSwgZ3JhYiB0aGVtIGFuZCBza2lwIGl0ZW0gaW5pdGlhbGl6YXRpb25cblx0XHRpZiAoJGl0ZW1zLmxlbmd0aCkge1xuXHRcdFx0dGhpcy5faXRlbXMgPSAkaXRlbXMuZ2V0KCkubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdFx0cmV0dXJuICQoaXRlbSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5fbWVyZ2VycyA9IHRoaXMuX2l0ZW1zLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5yZWZyZXNoKCk7XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBhcHBlbmQgY29udGVudFxuXHRcdHRoaXMucmVwbGFjZSh0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCkubm90KHRoaXMuJHN0YWdlLnBhcmVudCgpKSk7XG5cblx0XHQvLyBjaGVjayB2aXNpYmlsaXR5XG5cdFx0aWYgKHRoaXMuaXNWaXNpYmxlKCkpIHtcblx0XHRcdC8vIHVwZGF0ZSB2aWV3XG5cdFx0XHR0aGlzLnJlZnJlc2goKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gaW52YWxpZGF0ZSB3aWR0aFxuXHRcdFx0dGhpcy5pbnZhbGlkYXRlKCd3aWR0aCcpO1xuXHRcdH1cblxuXHRcdHRoaXMuJGVsZW1lbnRcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGluZ0NsYXNzKVxuXHRcdFx0LmFkZENsYXNzKHRoaXMub3B0aW9ucy5sb2FkZWRDbGFzcyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHRoZSBjYXJvdXNlbC5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5lbnRlcignaW5pdGlhbGl6aW5nJyk7XG5cdFx0dGhpcy50cmlnZ2VyKCdpbml0aWFsaXplJyk7XG5cblx0XHR0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMuc2V0dGluZ3MucnRsQ2xhc3MsIHRoaXMuc2V0dGluZ3MucnRsKTtcblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCAmJiAhdGhpcy5pcygncHJlLWxvYWRpbmcnKSkge1xuXHRcdFx0dmFyIGltZ3MsIG5lc3RlZFNlbGVjdG9yLCB3aWR0aDtcblx0XHRcdGltZ3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2ltZycpO1xuXHRcdFx0bmVzdGVkU2VsZWN0b3IgPSB0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3RvciA/ICcuJyArIHRoaXMuc2V0dGluZ3MubmVzdGVkSXRlbVNlbGVjdG9yIDogdW5kZWZpbmVkO1xuXHRcdFx0d2lkdGggPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKG5lc3RlZFNlbGVjdG9yKS53aWR0aCgpO1xuXG5cdFx0XHRpZiAoaW1ncy5sZW5ndGggJiYgd2lkdGggPD0gMCkge1xuXHRcdFx0XHR0aGlzLnByZWxvYWRBdXRvV2lkdGhJbWFnZXMoaW1ncyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5pbml0aWFsaXplU3RhZ2UoKTtcblx0XHR0aGlzLmluaXRpYWxpemVJdGVtcygpO1xuXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnRIYW5kbGVycygpO1xuXG5cdFx0dGhpcy5sZWF2ZSgnaW5pdGlhbGl6aW5nJyk7XG5cdFx0dGhpcy50cmlnZ2VyKCdpbml0aWFsaXplZCcpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn0gdmlzaWJpbGl0eSBvZiAkZWxlbWVudFxuXHQgKiAgICAgICAgICAgICAgICAgICAgaWYgeW91IGtub3cgdGhlIGNhcm91c2VsIHdpbGwgYWx3YXlzIGJlIHZpc2libGUgeW91IGNhbiBzZXQgYGNoZWNrVmlzaWJpbGl0eWAgdG8gYGZhbHNlYCB0b1xuXHQgKiAgICAgICAgICAgICAgICAgICAgcHJldmVudCB0aGUgZXhwZW5zaXZlIGJyb3dzZXIgbGF5b3V0IGZvcmNlZCByZWZsb3cgdGhlICRlbGVtZW50LmlzKCc6dmlzaWJsZScpIGRvZXNcblx0ICovXG5cdE93bC5wcm90b3R5cGUuaXNWaXNpYmxlID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0dGluZ3MuY2hlY2tWaXNpYmlsaXR5XG5cdFx0XHQ/IHRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJylcblx0XHRcdDogdHJ1ZTtcblx0fTtcblxuXHQvKipcblx0ICogU2V0dXBzIHRoZSBjdXJyZW50IHNldHRpbmdzLlxuXHQgKiBAdG9kbyBSZW1vdmUgcmVzcG9uc2l2ZSBjbGFzc2VzLiBXaHkgc2hvdWxkIGFkYXB0aXZlIGRlc2lnbnMgYmUgYnJvdWdodCBpbnRvIElFOD9cblx0ICogQHRvZG8gU3VwcG9ydCBmb3IgbWVkaWEgcXVlcmllcyBieSB1c2luZyBgbWF0Y2hNZWRpYWAgd291bGQgYmUgbmljZS5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5zZXR1cCA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2aWV3cG9ydCA9IHRoaXMudmlld3BvcnQoKSxcblx0XHRcdG92ZXJ3cml0ZXMgPSB0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZSxcblx0XHRcdG1hdGNoID0gLTEsXG5cdFx0XHRzZXR0aW5ncyA9IG51bGw7XG5cblx0XHRpZiAoIW92ZXJ3cml0ZXMpIHtcblx0XHRcdHNldHRpbmdzID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCQuZWFjaChvdmVyd3JpdGVzLCBmdW5jdGlvbihicmVha3BvaW50KSB7XG5cdFx0XHRcdGlmIChicmVha3BvaW50IDw9IHZpZXdwb3J0ICYmIGJyZWFrcG9pbnQgPiBtYXRjaCkge1xuXHRcdFx0XHRcdG1hdGNoID0gTnVtYmVyKGJyZWFrcG9pbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0c2V0dGluZ3MgPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCBvdmVyd3JpdGVzW21hdGNoXSk7XG5cdFx0XHRpZiAodHlwZW9mIHNldHRpbmdzLnN0YWdlUGFkZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRzZXR0aW5ncy5zdGFnZVBhZGRpbmcgPSBzZXR0aW5ncy5zdGFnZVBhZGRpbmcoKTtcblx0XHRcdH1cblx0XHRcdGRlbGV0ZSBzZXR0aW5ncy5yZXNwb25zaXZlO1xuXG5cdFx0XHQvLyByZXNwb25zaXZlIGNsYXNzXG5cdFx0XHRpZiAoc2V0dGluZ3MucmVzcG9uc2l2ZUNsYXNzKSB7XG5cdFx0XHRcdHRoaXMuJGVsZW1lbnQuYXR0cignY2xhc3MnLFxuXHRcdFx0XHRcdHRoaXMuJGVsZW1lbnQuYXR0cignY2xhc3MnKS5yZXBsYWNlKG5ldyBSZWdFeHAoJygnICsgdGhpcy5vcHRpb25zLnJlc3BvbnNpdmVDbGFzcyArICctKVxcXFxTK1xcXFxzJywgJ2cnKSwgJyQxJyArIG1hdGNoKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMudHJpZ2dlcignY2hhbmdlJywgeyBwcm9wZXJ0eTogeyBuYW1lOiAnc2V0dGluZ3MnLCB2YWx1ZTogc2V0dGluZ3MgfSB9KTtcblx0XHR0aGlzLl9icmVha3BvaW50ID0gbWF0Y2g7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuXHRcdHRoaXMuaW52YWxpZGF0ZSgnc2V0dGluZ3MnKTtcblx0XHR0aGlzLnRyaWdnZXIoJ2NoYW5nZWQnLCB7IHByb3BlcnR5OiB7IG5hbWU6ICdzZXR0aW5ncycsIHZhbHVlOiB0aGlzLnNldHRpbmdzIH0gfSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgb3B0aW9uIGxvZ2ljIGlmIG5lY2Vzc2VyeS5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5vcHRpb25zTG9naWMgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgpIHtcblx0XHRcdHRoaXMuc2V0dGluZ3Muc3RhZ2VQYWRkaW5nID0gZmFsc2U7XG5cdFx0XHR0aGlzLnNldHRpbmdzLm1lcmdlID0gZmFsc2U7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBQcmVwYXJlcyBhbiBpdGVtIGJlZm9yZSBhZGQuXG5cdCAqIEB0b2RvIFJlbmFtZSBldmVudCBwYXJhbWV0ZXIgYGNvbnRlbnRgIHRvIGBpdGVtYC5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcmV0dXJucyB7alF1ZXJ5fEhUTUxFbGVtZW50fSAtIFRoZSBpdGVtIGNvbnRhaW5lci5cblx0ICovXG5cdE93bC5wcm90b3R5cGUucHJlcGFyZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHR2YXIgZXZlbnQgPSB0aGlzLnRyaWdnZXIoJ3ByZXBhcmUnLCB7IGNvbnRlbnQ6IGl0ZW0gfSk7XG5cblx0XHRpZiAoIWV2ZW50LmRhdGEpIHtcblx0XHRcdGV2ZW50LmRhdGEgPSAkKCc8JyArIHRoaXMuc2V0dGluZ3MuaXRlbUVsZW1lbnQgKyAnLz4nKVxuXHRcdFx0XHQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLml0ZW1DbGFzcykuYXBwZW5kKGl0ZW0pXG5cdFx0fVxuXG5cdFx0dGhpcy50cmlnZ2VyKCdwcmVwYXJlZCcsIHsgY29udGVudDogZXZlbnQuZGF0YSB9KTtcblxuXHRcdHJldHVybiBldmVudC5kYXRhO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSB2aWV3LlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdG4gPSB0aGlzLl9waXBlLmxlbmd0aCxcblx0XHRcdGZpbHRlciA9ICQucHJveHkoZnVuY3Rpb24ocCkgeyByZXR1cm4gdGhpc1twXSB9LCB0aGlzLl9pbnZhbGlkYXRlZCksXG5cdFx0XHRjYWNoZSA9IHt9O1xuXG5cdFx0d2hpbGUgKGkgPCBuKSB7XG5cdFx0XHRpZiAodGhpcy5faW52YWxpZGF0ZWQuYWxsIHx8ICQuZ3JlcCh0aGlzLl9waXBlW2ldLmZpbHRlciwgZmlsdGVyKS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHRoaXMuX3BpcGVbaV0ucnVuKGNhY2hlKTtcblx0XHRcdH1cblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHR0aGlzLl9pbnZhbGlkYXRlZCA9IHt9O1xuXG5cdFx0IXRoaXMuaXMoJ3ZhbGlkJykgJiYgdGhpcy5lbnRlcigndmFsaWQnKTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyB0aGUgd2lkdGggb2YgdGhlIHZpZXcuXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtPd2wuV2lkdGh9IFtkaW1lbnNpb249T3dsLldpZHRoLkRlZmF1bHRdIC0gVGhlIGRpbWVuc2lvbiB0byByZXR1cm4uXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIHdpZHRoIG9mIHRoZSB2aWV3IGluIHBpeGVsLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS53aWR0aCA9IGZ1bmN0aW9uKGRpbWVuc2lvbikge1xuXHRcdGRpbWVuc2lvbiA9IGRpbWVuc2lvbiB8fCBPd2wuV2lkdGguRGVmYXVsdDtcblx0XHRzd2l0Y2ggKGRpbWVuc2lvbikge1xuXHRcdFx0Y2FzZSBPd2wuV2lkdGguSW5uZXI6XG5cdFx0XHRjYXNlIE93bC5XaWR0aC5PdXRlcjpcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3dpZHRoO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3dpZHRoIC0gdGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcgKiAyICsgdGhpcy5zZXR0aW5ncy5tYXJnaW47XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZWZyZXNoZXMgdGhlIGNhcm91c2VsIHByaW1hcmlseSBmb3IgYWRhcHRpdmUgcHVycG9zZXMuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdE93bC5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZW50ZXIoJ3JlZnJlc2hpbmcnKTtcblx0XHR0aGlzLnRyaWdnZXIoJ3JlZnJlc2gnKTtcblxuXHRcdHRoaXMuc2V0dXAoKTtcblxuXHRcdHRoaXMub3B0aW9uc0xvZ2ljKCk7XG5cblx0XHR0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5yZWZyZXNoQ2xhc3MpO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHRcdHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnJlZnJlc2hDbGFzcyk7XG5cblx0XHR0aGlzLmxlYXZlKCdyZWZyZXNoaW5nJyk7XG5cdFx0dGhpcy50cmlnZ2VyKCdyZWZyZXNoZWQnKTtcblx0fTtcblxuXHQvKipcblx0ICogQ2hlY2tzIHdpbmRvdyBgcmVzaXplYCBldmVudC5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5vblRocm90dGxlZFJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lcik7XG5cdFx0dGhpcy5yZXNpemVUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuX2hhbmRsZXJzLm9uUmVzaXplLCB0aGlzLnNldHRpbmdzLnJlc3BvbnNpdmVSZWZyZXNoUmF0ZSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIENoZWNrcyB3aW5kb3cgYHJlc2l6ZWAgZXZlbnQuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdE93bC5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIXRoaXMuX2l0ZW1zLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLl93aWR0aCA9PT0gdGhpcy4kZWxlbWVudC53aWR0aCgpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLmlzVmlzaWJsZSgpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dGhpcy5lbnRlcigncmVzaXppbmcnKTtcblxuXHRcdGlmICh0aGlzLnRyaWdnZXIoJ3Jlc2l6ZScpLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG5cdFx0XHR0aGlzLmxlYXZlKCdyZXNpemluZycpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHRoaXMuaW52YWxpZGF0ZSgnd2lkdGgnKTtcblxuXHRcdHRoaXMucmVmcmVzaCgpO1xuXG5cdFx0dGhpcy5sZWF2ZSgncmVzaXppbmcnKTtcblx0XHR0aGlzLnRyaWdnZXIoJ3Jlc2l6ZWQnKTtcblx0fTtcblxuXHQvKipcblx0ICogUmVnaXN0ZXJzIGV2ZW50IGhhbmRsZXJzLlxuXHQgKiBAdG9kbyBDaGVjayBgbXNQb2ludGVyRW5hYmxlZGBcblx0ICogQHRvZG8gIzI2MVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnJlZ2lzdGVyRXZlbnRIYW5kbGVycyA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICgkLnN1cHBvcnQudHJhbnNpdGlvbikge1xuXHRcdFx0dGhpcy4kc3RhZ2Uub24oJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kICsgJy5vd2wuY29yZScsICQucHJveHkodGhpcy5vblRyYW5zaXRpb25FbmQsIHRoaXMpKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5zZXR0aW5ncy5yZXNwb25zaXZlICE9PSBmYWxzZSkge1xuXHRcdFx0dGhpcy5vbih3aW5kb3csICdyZXNpemUnLCB0aGlzLl9oYW5kbGVycy5vblRocm90dGxlZFJlc2l6ZSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MubW91c2VEcmFnKSB7XG5cdFx0XHR0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5kcmFnQ2xhc3MpO1xuXHRcdFx0dGhpcy4kc3RhZ2Uub24oJ21vdXNlZG93bi5vd2wuY29yZScsICQucHJveHkodGhpcy5vbkRyYWdTdGFydCwgdGhpcykpO1xuXHRcdFx0dGhpcy4kc3RhZ2Uub24oJ2RyYWdzdGFydC5vd2wuY29yZSBzZWxlY3RzdGFydC5vd2wuY29yZScsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2UgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MudG91Y2hEcmFnKXtcblx0XHRcdHRoaXMuJHN0YWdlLm9uKCd0b3VjaHN0YXJ0Lm93bC5jb3JlJywgJC5wcm94eSh0aGlzLm9uRHJhZ1N0YXJ0LCB0aGlzKSk7XG5cdFx0XHR0aGlzLiRzdGFnZS5vbigndG91Y2hjYW5jZWwub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25EcmFnRW5kLCB0aGlzKSk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBIYW5kbGVzIGB0b3VjaHN0YXJ0YCBhbmQgYG1vdXNlZG93bmAgZXZlbnRzLlxuXHQgKiBAdG9kbyBIb3Jpem9udGFsIHN3aXBlIHRocmVzaG9sZCBhcyBvcHRpb25cblx0ICogQHRvZG8gIzI2MVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cblx0ICovXG5cdE93bC5wcm90b3R5cGUub25EcmFnU3RhcnQgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciBzdGFnZSA9IG51bGw7XG5cblx0XHRpZiAoZXZlbnQud2hpY2ggPT09IDMpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoJC5zdXBwb3J0LnRyYW5zZm9ybSkge1xuXHRcdFx0c3RhZ2UgPSB0aGlzLiRzdGFnZS5jc3MoJ3RyYW5zZm9ybScpLnJlcGxhY2UoLy4qXFwofFxcKXwgL2csICcnKS5zcGxpdCgnLCcpO1xuXHRcdFx0c3RhZ2UgPSB7XG5cdFx0XHRcdHg6IHN0YWdlW3N0YWdlLmxlbmd0aCA9PT0gMTYgPyAxMiA6IDRdLFxuXHRcdFx0XHR5OiBzdGFnZVtzdGFnZS5sZW5ndGggPT09IDE2ID8gMTMgOiA1XVxuXHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3RhZ2UgPSB0aGlzLiRzdGFnZS5wb3NpdGlvbigpO1xuXHRcdFx0c3RhZ2UgPSB7XG5cdFx0XHRcdHg6IHRoaXMuc2V0dGluZ3MucnRsID9cblx0XHRcdFx0XHRzdGFnZS5sZWZ0ICsgdGhpcy4kc3RhZ2Uud2lkdGgoKSAtIHRoaXMud2lkdGgoKSArIHRoaXMuc2V0dGluZ3MubWFyZ2luIDpcblx0XHRcdFx0XHRzdGFnZS5sZWZ0LFxuXHRcdFx0XHR5OiBzdGFnZS50b3Bcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuaXMoJ2FuaW1hdGluZycpKSB7XG5cdFx0XHQkLnN1cHBvcnQudHJhbnNmb3JtID8gdGhpcy5hbmltYXRlKHN0YWdlLngpIDogdGhpcy4kc3RhZ2Uuc3RvcCgpXG5cdFx0XHR0aGlzLmludmFsaWRhdGUoJ3Bvc2l0aW9uJyk7XG5cdFx0fVxuXG5cdFx0dGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLm9wdGlvbnMuZ3JhYkNsYXNzLCBldmVudC50eXBlID09PSAnbW91c2Vkb3duJyk7XG5cblx0XHR0aGlzLnNwZWVkKDApO1xuXG5cdFx0dGhpcy5fZHJhZy50aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdFx0dGhpcy5fZHJhZy50YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG5cdFx0dGhpcy5fZHJhZy5zdGFnZS5zdGFydCA9IHN0YWdlO1xuXHRcdHRoaXMuX2RyYWcuc3RhZ2UuY3VycmVudCA9IHN0YWdlO1xuXHRcdHRoaXMuX2RyYWcucG9pbnRlciA9IHRoaXMucG9pbnRlcihldmVudCk7XG5cblx0XHQkKGRvY3VtZW50KS5vbignbW91c2V1cC5vd2wuY29yZSB0b3VjaGVuZC5vd2wuY29yZScsICQucHJveHkodGhpcy5vbkRyYWdFbmQsIHRoaXMpKTtcblxuXHRcdCQoZG9jdW1lbnQpLm9uZSgnbW91c2Vtb3ZlLm93bC5jb3JlIHRvdWNobW92ZS5vd2wuY29yZScsICQucHJveHkoZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdHZhciBkZWx0YSA9IHRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnBvaW50ZXIsIHRoaXMucG9pbnRlcihldmVudCkpO1xuXG5cdFx0XHQkKGRvY3VtZW50KS5vbignbW91c2Vtb3ZlLm93bC5jb3JlIHRvdWNobW92ZS5vd2wuY29yZScsICQucHJveHkodGhpcy5vbkRyYWdNb3ZlLCB0aGlzKSk7XG5cblx0XHRcdGlmIChNYXRoLmFicyhkZWx0YS54KSA8IE1hdGguYWJzKGRlbHRhLnkpICYmIHRoaXMuaXMoJ3ZhbGlkJykpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHR0aGlzLmVudGVyKCdkcmFnZ2luZycpO1xuXHRcdFx0dGhpcy50cmlnZ2VyKCdkcmFnJyk7XG5cdFx0fSwgdGhpcykpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBIYW5kbGVzIHRoZSBgdG91Y2htb3ZlYCBhbmQgYG1vdXNlbW92ZWAgZXZlbnRzLlxuXHQgKiBAdG9kbyAjMjYxXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgYXJndW1lbnRzLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5vbkRyYWdNb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgbWluaW11bSA9IG51bGwsXG5cdFx0XHRtYXhpbXVtID0gbnVsbCxcblx0XHRcdHB1bGwgPSBudWxsLFxuXHRcdFx0ZGVsdGEgPSB0aGlzLmRpZmZlcmVuY2UodGhpcy5fZHJhZy5wb2ludGVyLCB0aGlzLnBvaW50ZXIoZXZlbnQpKSxcblx0XHRcdHN0YWdlID0gdGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcuc3RhZ2Uuc3RhcnQsIGRlbHRhKTtcblxuXHRcdGlmICghdGhpcy5pcygnZHJhZ2dpbmcnKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRpZiAodGhpcy5zZXR0aW5ncy5sb29wKSB7XG5cdFx0XHRtaW5pbXVtID0gdGhpcy5jb29yZGluYXRlcyh0aGlzLm1pbmltdW0oKSk7XG5cdFx0XHRtYXhpbXVtID0gdGhpcy5jb29yZGluYXRlcyh0aGlzLm1heGltdW0oKSArIDEpIC0gbWluaW11bTtcblx0XHRcdHN0YWdlLnggPSAoKChzdGFnZS54IC0gbWluaW11bSkgJSBtYXhpbXVtICsgbWF4aW11bSkgJSBtYXhpbXVtKSArIG1pbmltdW07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1pbmltdW0gPSB0aGlzLnNldHRpbmdzLnJ0bCA/IHRoaXMuY29vcmRpbmF0ZXModGhpcy5tYXhpbXVtKCkpIDogdGhpcy5jb29yZGluYXRlcyh0aGlzLm1pbmltdW0oKSk7XG5cdFx0XHRtYXhpbXVtID0gdGhpcy5zZXR0aW5ncy5ydGwgPyB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWluaW11bSgpKSA6IHRoaXMuY29vcmRpbmF0ZXModGhpcy5tYXhpbXVtKCkpO1xuXHRcdFx0cHVsbCA9IHRoaXMuc2V0dGluZ3MucHVsbERyYWcgPyAtMSAqIGRlbHRhLnggLyA1IDogMDtcblx0XHRcdHN0YWdlLnggPSBNYXRoLm1heChNYXRoLm1pbihzdGFnZS54LCBtaW5pbXVtICsgcHVsbCksIG1heGltdW0gKyBwdWxsKTtcblx0XHR9XG5cblx0XHR0aGlzLl9kcmFnLnN0YWdlLmN1cnJlbnQgPSBzdGFnZTtcblxuXHRcdHRoaXMuYW5pbWF0ZShzdGFnZS54KTtcblx0fTtcblxuXHQvKipcblx0ICogSGFuZGxlcyB0aGUgYHRvdWNoZW5kYCBhbmQgYG1vdXNldXBgIGV2ZW50cy5cblx0ICogQHRvZG8gIzI2MVxuXHQgKiBAdG9kbyBUaHJlc2hvbGQgZm9yIGNsaWNrIGV2ZW50XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgYXJndW1lbnRzLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5vbkRyYWdFbmQgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciBkZWx0YSA9IHRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnBvaW50ZXIsIHRoaXMucG9pbnRlcihldmVudCkpLFxuXHRcdFx0c3RhZ2UgPSB0aGlzLl9kcmFnLnN0YWdlLmN1cnJlbnQsXG5cdFx0XHRkaXJlY3Rpb24gPSBkZWx0YS54ID4gMCBeIHRoaXMuc2V0dGluZ3MucnRsID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuXHRcdCQoZG9jdW1lbnQpLm9mZignLm93bC5jb3JlJyk7XG5cblx0XHR0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ncmFiQ2xhc3MpO1xuXG5cdFx0aWYgKGRlbHRhLnggIT09IDAgJiYgdGhpcy5pcygnZHJhZ2dpbmcnKSB8fCAhdGhpcy5pcygndmFsaWQnKSkge1xuXHRcdFx0dGhpcy5zcGVlZCh0aGlzLnNldHRpbmdzLmRyYWdFbmRTcGVlZCB8fCB0aGlzLnNldHRpbmdzLnNtYXJ0U3BlZWQpO1xuXHRcdFx0dGhpcy5jdXJyZW50KHRoaXMuY2xvc2VzdChzdGFnZS54LCBkZWx0YS54ICE9PSAwID8gZGlyZWN0aW9uIDogdGhpcy5fZHJhZy5kaXJlY3Rpb24pKTtcblx0XHRcdHRoaXMuaW52YWxpZGF0ZSgncG9zaXRpb24nKTtcblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cblx0XHRcdHRoaXMuX2RyYWcuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuXG5cdFx0XHRpZiAoTWF0aC5hYnMoZGVsdGEueCkgPiAzIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGhpcy5fZHJhZy50aW1lID4gMzAwKSB7XG5cdFx0XHRcdHRoaXMuX2RyYWcudGFyZ2V0Lm9uZSgnY2xpY2sub3dsLmNvcmUnLCBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuaXMoJ2RyYWdnaW5nJykpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmxlYXZlKCdkcmFnZ2luZycpO1xuXHRcdHRoaXMudHJpZ2dlcignZHJhZ2dlZCcpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBjbG9zZXN0IGl0ZW0gZm9yIGEgY29vcmRpbmF0ZS5cblx0ICogQHRvZG8gU2V0dGluZyBgZnJlZURyYWdgIG1ha2VzIGBjbG9zZXN0YCBub3QgcmV1c2FibGUuIFNlZSAjMTY1LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb29yZGluYXRlIC0gVGhlIGNvb3JkaW5hdGUgaW4gcGl4ZWwuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkaXJlY3Rpb24gLSBUaGUgZGlyZWN0aW9uIHRvIGNoZWNrIGZvciB0aGUgY2xvc2VzdCBpdGVtLiBFdGhlciBgbGVmdGAgb3IgYHJpZ2h0YC5cblx0ICogQHJldHVybiB7TnVtYmVyfSAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgY2xvc2VzdCBpdGVtLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5jbG9zZXN0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZSwgZGlyZWN0aW9uKSB7XG5cdFx0dmFyIHBvc2l0aW9uID0gLTEsXG5cdFx0XHRwdWxsID0gMzAsXG5cdFx0XHR3aWR0aCA9IHRoaXMud2lkdGgoKSxcblx0XHRcdGNvb3JkaW5hdGVzID0gdGhpcy5jb29yZGluYXRlcygpO1xuXG5cdFx0aWYgKCF0aGlzLnNldHRpbmdzLmZyZWVEcmFnKSB7XG5cdFx0XHQvLyBjaGVjayBjbG9zZXN0IGl0ZW1cblx0XHRcdCQuZWFjaChjb29yZGluYXRlcywgJC5wcm94eShmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcblx0XHRcdFx0Ly8gb24gYSBsZWZ0IHB1bGwsIGNoZWNrIG9uIGN1cnJlbnQgaW5kZXhcblx0XHRcdFx0aWYgKGRpcmVjdGlvbiA9PT0gJ2xlZnQnICYmIGNvb3JkaW5hdGUgPiB2YWx1ZSAtIHB1bGwgJiYgY29vcmRpbmF0ZSA8IHZhbHVlICsgcHVsbCkge1xuXHRcdFx0XHRcdHBvc2l0aW9uID0gaW5kZXg7XG5cdFx0XHRcdC8vIG9uIGEgcmlnaHQgcHVsbCwgY2hlY2sgb24gcHJldmlvdXMgaW5kZXhcblx0XHRcdFx0Ly8gdG8gZG8gc28sIHN1YnRyYWN0IHdpZHRoIGZyb20gdmFsdWUgYW5kIHNldCBwb3NpdGlvbiA9IGluZGV4ICsgMVxuXHRcdFx0XHR9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyAmJiBjb29yZGluYXRlID4gdmFsdWUgLSB3aWR0aCAtIHB1bGwgJiYgY29vcmRpbmF0ZSA8IHZhbHVlIC0gd2lkdGggKyBwdWxsKSB7XG5cdFx0XHRcdFx0cG9zaXRpb24gPSBpbmRleCArIDE7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5vcChjb29yZGluYXRlLCAnPCcsIHZhbHVlKVxuXHRcdFx0XHRcdCYmIHRoaXMub3AoY29vcmRpbmF0ZSwgJz4nLCBjb29yZGluYXRlc1tpbmRleCArIDFdICE9PSB1bmRlZmluZWQgPyBjb29yZGluYXRlc1tpbmRleCArIDFdIDogdmFsdWUgLSB3aWR0aCkpIHtcblx0XHRcdFx0XHRwb3NpdGlvbiA9IGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gaW5kZXggKyAxIDogaW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uID09PSAtMTtcblx0XHRcdH0sIHRoaXMpKTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuc2V0dGluZ3MubG9vcCkge1xuXHRcdFx0Ly8gbm9uIGxvb3AgYm91bmRyaWVzXG5cdFx0XHRpZiAodGhpcy5vcChjb29yZGluYXRlLCAnPicsIGNvb3JkaW5hdGVzW3RoaXMubWluaW11bSgpXSkpIHtcblx0XHRcdFx0cG9zaXRpb24gPSBjb29yZGluYXRlID0gdGhpcy5taW5pbXVtKCk7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMub3AoY29vcmRpbmF0ZSwgJzwnLCBjb29yZGluYXRlc1t0aGlzLm1heGltdW0oKV0pKSB7XG5cdFx0XHRcdHBvc2l0aW9uID0gY29vcmRpbmF0ZSA9IHRoaXMubWF4aW11bSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBwb3NpdGlvbjtcblx0fTtcblxuXHQvKipcblx0ICogQW5pbWF0ZXMgdGhlIHN0YWdlLlxuXHQgKiBAdG9kbyAjMjcwXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGNvb3JkaW5hdGUgLSBUaGUgY29vcmRpbmF0ZSBpbiBwaXhlbHMuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmFuaW1hdGUgPSBmdW5jdGlvbihjb29yZGluYXRlKSB7XG5cdFx0dmFyIGFuaW1hdGUgPSB0aGlzLnNwZWVkKCkgPiAwO1xuXG5cdFx0dGhpcy5pcygnYW5pbWF0aW5nJykgJiYgdGhpcy5vblRyYW5zaXRpb25FbmQoKTtcblxuXHRcdGlmIChhbmltYXRlKSB7XG5cdFx0XHR0aGlzLmVudGVyKCdhbmltYXRpbmcnKTtcblx0XHRcdHRoaXMudHJpZ2dlcigndHJhbnNsYXRlJyk7XG5cdFx0fVxuXG5cdFx0aWYgKCQuc3VwcG9ydC50cmFuc2Zvcm0zZCAmJiAkLnN1cHBvcnQudHJhbnNpdGlvbikge1xuXHRcdFx0dGhpcy4kc3RhZ2UuY3NzKHtcblx0XHRcdFx0dHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoJyArIGNvb3JkaW5hdGUgKyAncHgsMHB4LDBweCknLFxuXHRcdFx0XHR0cmFuc2l0aW9uOiAodGhpcy5zcGVlZCgpIC8gMTAwMCkgKyAncycgKyAoXG5cdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy5zbGlkZVRyYW5zaXRpb24gPyAnICcgKyB0aGlzLnNldHRpbmdzLnNsaWRlVHJhbnNpdGlvbiA6ICcnXG5cdFx0XHRcdClcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAoYW5pbWF0ZSkge1xuXHRcdFx0dGhpcy4kc3RhZ2UuYW5pbWF0ZSh7XG5cdFx0XHRcdGxlZnQ6IGNvb3JkaW5hdGUgKyAncHgnXG5cdFx0XHR9LCB0aGlzLnNwZWVkKCksIHRoaXMuc2V0dGluZ3MuZmFsbGJhY2tFYXNpbmcsICQucHJveHkodGhpcy5vblRyYW5zaXRpb25FbmQsIHRoaXMpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy4kc3RhZ2UuY3NzKHtcblx0XHRcdFx0bGVmdDogY29vcmRpbmF0ZSArICdweCdcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQ2hlY2tzIHdoZXRoZXIgdGhlIGNhcm91c2VsIGlzIGluIGEgc3BlY2lmaWMgc3RhdGUgb3Igbm90LlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RhdGUgLSBUaGUgc3RhdGUgdG8gY2hlY2suXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSAtIFRoZSBmbGFnIHdoaWNoIGluZGljYXRlcyBpZiB0aGUgY2Fyb3VzZWwgaXMgYnVzeS5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuaXMgPSBmdW5jdGlvbihzdGF0ZSkge1xuXHRcdHJldHVybiB0aGlzLl9zdGF0ZXMuY3VycmVudFtzdGF0ZV0gJiYgdGhpcy5fc3RhdGVzLmN1cnJlbnRbc3RhdGVdID4gMDtcblx0fTtcblxuXHQvKipcblx0ICogU2V0cyB0aGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgaXRlbS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uXSAtIFRoZSBuZXcgYWJzb2x1dGUgcG9zaXRpb24gb3Igbm90aGluZyB0byBsZWF2ZSBpdCB1bmNoYW5nZWQuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBjdXJyZW50IGl0ZW0uXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmN1cnJlbnQgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fY3VycmVudDtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5faXRlbXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24pO1xuXG5cdFx0aWYgKHRoaXMuX2N1cnJlbnQgIT09IHBvc2l0aW9uKSB7XG5cdFx0XHR2YXIgZXZlbnQgPSB0aGlzLnRyaWdnZXIoJ2NoYW5nZScsIHsgcHJvcGVydHk6IHsgbmFtZTogJ3Bvc2l0aW9uJywgdmFsdWU6IHBvc2l0aW9uIH0gfSk7XG5cblx0XHRcdGlmIChldmVudC5kYXRhICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShldmVudC5kYXRhKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY3VycmVudCA9IHBvc2l0aW9uO1xuXG5cdFx0XHR0aGlzLmludmFsaWRhdGUoJ3Bvc2l0aW9uJyk7XG5cblx0XHRcdHRoaXMudHJpZ2dlcignY2hhbmdlZCcsIHsgcHJvcGVydHk6IHsgbmFtZTogJ3Bvc2l0aW9uJywgdmFsdWU6IHRoaXMuX2N1cnJlbnQgfSB9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fY3VycmVudDtcblx0fTtcblxuXHQvKipcblx0ICogSW52YWxpZGF0ZXMgdGhlIGdpdmVuIHBhcnQgb2YgdGhlIHVwZGF0ZSByb3V0aW5lLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gW3BhcnRdIC0gVGhlIHBhcnQgdG8gaW52YWxpZGF0ZS5cblx0ICogQHJldHVybnMge0FycmF5LjxTdHJpbmc+fSAtIFRoZSBpbnZhbGlkYXRlZCBwYXJ0cy5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uKHBhcnQpIHtcblx0XHRpZiAoJC50eXBlKHBhcnQpID09PSAnc3RyaW5nJykge1xuXHRcdFx0dGhpcy5faW52YWxpZGF0ZWRbcGFydF0gPSB0cnVlO1xuXHRcdFx0dGhpcy5pcygndmFsaWQnKSAmJiB0aGlzLmxlYXZlKCd2YWxpZCcpO1xuXHRcdH1cblx0XHRyZXR1cm4gJC5tYXAodGhpcy5faW52YWxpZGF0ZWQsIGZ1bmN0aW9uKHYsIGkpIHsgcmV0dXJuIGkgfSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJlc2V0cyB0aGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgaXRlbS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIG5ldyBpdGVtLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbik7XG5cblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX3NwZWVkID0gMDtcblx0XHR0aGlzLl9jdXJyZW50ID0gcG9zaXRpb247XG5cblx0XHR0aGlzLnN1cHByZXNzKFsgJ3RyYW5zbGF0ZScsICd0cmFuc2xhdGVkJyBdKTtcblxuXHRcdHRoaXMuYW5pbWF0ZSh0aGlzLmNvb3JkaW5hdGVzKHBvc2l0aW9uKSk7XG5cblx0XHR0aGlzLnJlbGVhc2UoWyAndHJhbnNsYXRlJywgJ3RyYW5zbGF0ZWQnIF0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBOb3JtYWxpemVzIGFuIGFic29sdXRlIG9yIGEgcmVsYXRpdmUgcG9zaXRpb24gb2YgYW4gaXRlbS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgb3IgcmVsYXRpdmUgcG9zaXRpb24gdG8gbm9ybWFsaXplLlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtyZWxhdGl2ZT1mYWxzZV0gLSBXaGV0aGVyIHRoZSBnaXZlbiBwb3NpdGlvbiBpcyByZWxhdGl2ZSBvciBub3QuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIG5vcm1hbGl6ZWQgcG9zaXRpb24uXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHBvc2l0aW9uLCByZWxhdGl2ZSkge1xuXHRcdHZhciBuID0gdGhpcy5faXRlbXMubGVuZ3RoLFxuXHRcdFx0bSA9IHJlbGF0aXZlID8gMCA6IHRoaXMuX2Nsb25lcy5sZW5ndGg7XG5cblx0XHRpZiAoIXRoaXMuaXNOdW1lcmljKHBvc2l0aW9uKSB8fCBuIDwgMSkge1xuXHRcdFx0cG9zaXRpb24gPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gbiArIG0pIHtcblx0XHRcdHBvc2l0aW9uID0gKChwb3NpdGlvbiAtIG0gLyAyKSAlIG4gKyBuKSAlIG4gKyBtIC8gMjtcblx0XHR9XG5cblx0XHRyZXR1cm4gcG9zaXRpb247XG5cdH07XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGFuIGFic29sdXRlIHBvc2l0aW9uIG9mIGFuIGl0ZW0gaW50byBhIHJlbGF0aXZlIG9uZS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gdG8gY29udmVydC5cblx0ICogQHJldHVybnMge051bWJlcn0gLSBUaGUgY29udmVydGVkIHBvc2l0aW9uLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5yZWxhdGl2ZSA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cdFx0cG9zaXRpb24gLT0gdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDI7XG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKHBvc2l0aW9uLCB0cnVlKTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyB0aGUgbWF4aW11bSBwb3NpdGlvbiBmb3IgdGhlIGN1cnJlbnQgaXRlbS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtyZWxhdGl2ZT1mYWxzZV0gLSBXaGV0aGVyIHRvIHJldHVybiBhbiBhYnNvbHV0ZSBwb3NpdGlvbiBvciBhIHJlbGF0aXZlIHBvc2l0aW9uLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5tYXhpbXVtID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcblx0XHR2YXIgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzLFxuXHRcdFx0bWF4aW11bSA9IHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aCxcblx0XHRcdGl0ZXJhdG9yLFxuXHRcdFx0cmVjaXByb2NhbEl0ZW1zV2lkdGgsXG5cdFx0XHRlbGVtZW50V2lkdGg7XG5cblx0XHRpZiAoc2V0dGluZ3MubG9vcCkge1xuXHRcdFx0bWF4aW11bSA9IHRoaXMuX2Nsb25lcy5sZW5ndGggLyAyICsgdGhpcy5faXRlbXMubGVuZ3RoIC0gMTtcblx0XHR9IGVsc2UgaWYgKHNldHRpbmdzLmF1dG9XaWR0aCB8fCBzZXR0aW5ncy5tZXJnZSkge1xuXHRcdFx0aXRlcmF0b3IgPSB0aGlzLl9pdGVtcy5sZW5ndGg7XG5cdFx0XHRpZiAoaXRlcmF0b3IpIHtcblx0XHRcdFx0cmVjaXByb2NhbEl0ZW1zV2lkdGggPSB0aGlzLl9pdGVtc1stLWl0ZXJhdG9yXS53aWR0aCgpO1xuXHRcdFx0XHRlbGVtZW50V2lkdGggPSB0aGlzLiRlbGVtZW50LndpZHRoKCk7XG5cdFx0XHRcdHdoaWxlIChpdGVyYXRvci0tKSB7XG5cdFx0XHRcdFx0cmVjaXByb2NhbEl0ZW1zV2lkdGggKz0gdGhpcy5faXRlbXNbaXRlcmF0b3JdLndpZHRoKCkgKyB0aGlzLnNldHRpbmdzLm1hcmdpbjtcblx0XHRcdFx0XHRpZiAocmVjaXByb2NhbEl0ZW1zV2lkdGggPiBlbGVtZW50V2lkdGgpIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWF4aW11bSA9IGl0ZXJhdG9yICsgMTtcblx0XHR9IGVsc2UgaWYgKHNldHRpbmdzLmNlbnRlcikge1xuXHRcdFx0bWF4aW11bSA9IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1heGltdW0gPSB0aGlzLl9pdGVtcy5sZW5ndGggLSBzZXR0aW5ncy5pdGVtcztcblx0XHR9XG5cblx0XHRpZiAocmVsYXRpdmUpIHtcblx0XHRcdG1heGltdW0gLT0gdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIE1hdGgubWF4KG1heGltdW0sIDApO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBtaW5pbXVtIHBvc2l0aW9uIGZvciB0aGUgY3VycmVudCBpdGVtLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW3JlbGF0aXZlPWZhbHNlXSAtIFdoZXRoZXIgdG8gcmV0dXJuIGFuIGFic29sdXRlIHBvc2l0aW9uIG9yIGEgcmVsYXRpdmUgcG9zaXRpb24uXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9XG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm1pbmltdW0gPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuXHRcdHJldHVybiByZWxhdGl2ZSA/IDAgOiB0aGlzLl9jbG9uZXMubGVuZ3RoIC8gMjtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyBhbiBpdGVtIGF0IHRoZSBzcGVjaWZpZWQgcmVsYXRpdmUgcG9zaXRpb24uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXG5cdCAqIEByZXR1cm4ge2pRdWVyeXxBcnJheS48alF1ZXJ5Pn0gLSBUaGUgaXRlbSBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gb3IgYWxsIGl0ZW1zIGlmIG5vIHBvc2l0aW9uIHdhcyBnaXZlbi5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuaXRlbXMgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5faXRlbXMuc2xpY2UoKTtcblx0XHR9XG5cblx0XHRwb3NpdGlvbiA9IHRoaXMubm9ybWFsaXplKHBvc2l0aW9uLCB0cnVlKTtcblx0XHRyZXR1cm4gdGhpcy5faXRlbXNbcG9zaXRpb25dO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIGFuIGl0ZW0gYXQgdGhlIHNwZWNpZmllZCByZWxhdGl2ZSBwb3NpdGlvbi5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uXSAtIFRoZSByZWxhdGl2ZSBwb3NpdGlvbiBvZiB0aGUgaXRlbS5cblx0ICogQHJldHVybiB7alF1ZXJ5fEFycmF5LjxqUXVlcnk+fSAtIFRoZSBpdGVtIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBvciBhbGwgaXRlbXMgaWYgbm8gcG9zaXRpb24gd2FzIGdpdmVuLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5tZXJnZXJzID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX21lcmdlcnMuc2xpY2UoKTtcblx0XHR9XG5cblx0XHRwb3NpdGlvbiA9IHRoaXMubm9ybWFsaXplKHBvc2l0aW9uLCB0cnVlKTtcblx0XHRyZXR1cm4gdGhpcy5fbWVyZ2Vyc1twb3NpdGlvbl07XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGFic29sdXRlIHBvc2l0aW9ucyBvZiBjbG9uZXMgZm9yIGFuIGl0ZW0uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXG5cdCAqIEByZXR1cm5zIHtBcnJheS48TnVtYmVyPn0gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb25zIG9mIGNsb25lcyBmb3IgdGhlIGl0ZW0gb3IgYWxsIGlmIG5vIHBvc2l0aW9uIHdhcyBnaXZlbi5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuY2xvbmVzID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblx0XHR2YXIgb2RkID0gdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDIsXG5cdFx0XHRldmVuID0gb2RkICsgdGhpcy5faXRlbXMubGVuZ3RoLFxuXHRcdFx0bWFwID0gZnVuY3Rpb24oaW5kZXgpIHsgcmV0dXJuIGluZGV4ICUgMiA9PT0gMCA/IGV2ZW4gKyBpbmRleCAvIDIgOiBvZGQgLSAoaW5kZXggKyAxKSAvIDIgfTtcblxuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gJC5tYXAodGhpcy5fY2xvbmVzLCBmdW5jdGlvbih2LCBpKSB7IHJldHVybiBtYXAoaSkgfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICQubWFwKHRoaXMuX2Nsb25lcywgZnVuY3Rpb24odiwgaSkgeyByZXR1cm4gdiA9PT0gcG9zaXRpb24gPyBtYXAoaSkgOiBudWxsIH0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBzcGVlZC5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSBhbmltYXRpb24gc3BlZWQgaW4gbWlsbGlzZWNvbmRzIG9yIG5vdGhpbmcgdG8gbGVhdmUgaXQgdW5jaGFuZ2VkLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSBjdXJyZW50IGFuaW1hdGlvbiBzcGVlZCBpbiBtaWxsaXNlY29uZHMuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnNwZWVkID0gZnVuY3Rpb24oc3BlZWQpIHtcblx0XHRpZiAoc3BlZWQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5fc3BlZWQgPSBzcGVlZDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fc3BlZWQ7XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGNvb3JkaW5hdGUgb2YgYW4gaXRlbS5cblx0ICogQHRvZG8gVGhlIG5hbWUgb2YgdGhpcyBtZXRob2QgaXMgbWlzc2xlYW5kaW5nLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgaXRlbSB3aXRoaW4gYG1pbmltdW0oKWAgYW5kIGBtYXhpbXVtKClgLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfEFycmF5LjxOdW1iZXI+fSAtIFRoZSBjb29yZGluYXRlIG9mIHRoZSBpdGVtIGluIHBpeGVsIG9yIGFsbCBjb29yZGluYXRlcy5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuY29vcmRpbmF0ZXMgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdHZhciBtdWx0aXBsaWVyID0gMSxcblx0XHRcdG5ld1Bvc2l0aW9uID0gcG9zaXRpb24gLSAxLFxuXHRcdFx0Y29vcmRpbmF0ZTtcblxuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gJC5tYXAodGhpcy5fY29vcmRpbmF0ZXMsICQucHJveHkoZnVuY3Rpb24oY29vcmRpbmF0ZSwgaW5kZXgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29vcmRpbmF0ZXMoaW5kZXgpO1xuXHRcdFx0fSwgdGhpcykpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmNlbnRlcikge1xuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MucnRsKSB7XG5cdFx0XHRcdG11bHRpcGxpZXIgPSAtMTtcblx0XHRcdFx0bmV3UG9zaXRpb24gPSBwb3NpdGlvbiArIDE7XG5cdFx0XHR9XG5cblx0XHRcdGNvb3JkaW5hdGUgPSB0aGlzLl9jb29yZGluYXRlc1twb3NpdGlvbl07XG5cdFx0XHRjb29yZGluYXRlICs9ICh0aGlzLndpZHRoKCkgLSBjb29yZGluYXRlICsgKHRoaXMuX2Nvb3JkaW5hdGVzW25ld1Bvc2l0aW9uXSB8fCAwKSkgLyAyICogbXVsdGlwbGllcjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29vcmRpbmF0ZSA9IHRoaXMuX2Nvb3JkaW5hdGVzW25ld1Bvc2l0aW9uXSB8fCAwO1xuXHRcdH1cblxuXHRcdGNvb3JkaW5hdGUgPSBNYXRoLmNlaWwoY29vcmRpbmF0ZSk7XG5cblx0XHRyZXR1cm4gY29vcmRpbmF0ZTtcblx0fTtcblxuXHQvKipcblx0ICogQ2FsY3VsYXRlcyB0aGUgc3BlZWQgZm9yIGEgdHJhbnNsYXRpb24uXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGZyb20gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIHN0YXJ0IGl0ZW0uXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB0byAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgdGFyZ2V0IGl0ZW0uXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbZmFjdG9yPXVuZGVmaW5lZF0gLSBUaGUgdGltZSBmYWN0b3IgaW4gbWlsbGlzZWNvbmRzLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zbGF0aW9uLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKGZyb20sIHRvLCBmYWN0b3IpIHtcblx0XHRpZiAoZmFjdG9yID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgoTWF0aC5hYnModG8gLSBmcm9tKSwgMSksIDYpICogTWF0aC5hYnMoKGZhY3RvciB8fCB0aGlzLnNldHRpbmdzLnNtYXJ0U3BlZWQpKTtcblx0fTtcblxuXHQvKipcblx0ICogU2xpZGVzIHRvIHRoZSBzcGVjaWZpZWQgaXRlbS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWRdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cblx0ICovXG5cdE93bC5wcm90b3R5cGUudG8gPSBmdW5jdGlvbihwb3NpdGlvbiwgc3BlZWQpIHtcblx0XHR2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudCgpLFxuXHRcdFx0cmV2ZXJ0ID0gbnVsbCxcblx0XHRcdGRpc3RhbmNlID0gcG9zaXRpb24gLSB0aGlzLnJlbGF0aXZlKGN1cnJlbnQpLFxuXHRcdFx0ZGlyZWN0aW9uID0gKGRpc3RhbmNlID4gMCkgLSAoZGlzdGFuY2UgPCAwKSxcblx0XHRcdGl0ZW1zID0gdGhpcy5faXRlbXMubGVuZ3RoLFxuXHRcdFx0bWluaW11bSA9IHRoaXMubWluaW11bSgpLFxuXHRcdFx0bWF4aW11bSA9IHRoaXMubWF4aW11bSgpO1xuXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MubG9vcCkge1xuXHRcdFx0aWYgKCF0aGlzLnNldHRpbmdzLnJld2luZCAmJiBNYXRoLmFicyhkaXN0YW5jZSkgPiBpdGVtcyAvIDIpIHtcblx0XHRcdFx0ZGlzdGFuY2UgKz0gZGlyZWN0aW9uICogLTEgKiBpdGVtcztcblx0XHRcdH1cblxuXHRcdFx0cG9zaXRpb24gPSBjdXJyZW50ICsgZGlzdGFuY2U7XG5cdFx0XHRyZXZlcnQgPSAoKHBvc2l0aW9uIC0gbWluaW11bSkgJSBpdGVtcyArIGl0ZW1zKSAlIGl0ZW1zICsgbWluaW11bTtcblxuXHRcdFx0aWYgKHJldmVydCAhPT0gcG9zaXRpb24gJiYgcmV2ZXJ0IC0gZGlzdGFuY2UgPD0gbWF4aW11bSAmJiByZXZlcnQgLSBkaXN0YW5jZSA+IDApIHtcblx0XHRcdFx0Y3VycmVudCA9IHJldmVydCAtIGRpc3RhbmNlO1xuXHRcdFx0XHRwb3NpdGlvbiA9IHJldmVydDtcblx0XHRcdFx0dGhpcy5yZXNldChjdXJyZW50KTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHRoaXMuc2V0dGluZ3MucmV3aW5kKSB7XG5cdFx0XHRtYXhpbXVtICs9IDE7XG5cdFx0XHRwb3NpdGlvbiA9IChwb3NpdGlvbiAlIG1heGltdW0gKyBtYXhpbXVtKSAlIG1heGltdW07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBvc2l0aW9uID0gTWF0aC5tYXgobWluaW11bSwgTWF0aC5taW4obWF4aW11bSwgcG9zaXRpb24pKTtcblx0XHR9XG5cblx0XHR0aGlzLnNwZWVkKHRoaXMuZHVyYXRpb24oY3VycmVudCwgcG9zaXRpb24sIHNwZWVkKSk7XG5cdFx0dGhpcy5jdXJyZW50KHBvc2l0aW9uKTtcblxuXHRcdGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogU2xpZGVzIHRvIHRoZSBuZXh0IGl0ZW0uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oc3BlZWQpIHtcblx0XHRzcGVlZCA9IHNwZWVkIHx8IGZhbHNlO1xuXHRcdHRoaXMudG8odGhpcy5yZWxhdGl2ZSh0aGlzLmN1cnJlbnQoKSkgKyAxLCBzcGVlZCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFNsaWRlcyB0byB0aGUgcHJldmlvdXMgaXRlbS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbihzcGVlZCkge1xuXHRcdHNwZWVkID0gc3BlZWQgfHwgZmFsc2U7XG5cdFx0dGhpcy50byh0aGlzLnJlbGF0aXZlKHRoaXMuY3VycmVudCgpKSAtIDEsIHNwZWVkKTtcblx0fTtcblxuXHQvKipcblx0ICogSGFuZGxlcyB0aGUgZW5kIG9mIGFuIGFuaW1hdGlvbi5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBhcmd1bWVudHMuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cblx0XHQvLyBpZiBjc3MyIGFuaW1hdGlvbiB0aGVuIGV2ZW50IG9iamVjdCBpcyB1bmRlZmluZWRcblx0XHRpZiAoZXZlbnQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cblx0XHRcdC8vIENhdGNoIG9ubHkgb3dsLXN0YWdlIHRyYW5zaXRpb25FbmQgZXZlbnRcblx0XHRcdGlmICgoZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQgfHwgZXZlbnQub3JpZ2luYWxUYXJnZXQpICE9PSB0aGlzLiRzdGFnZS5nZXQoMCkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMubGVhdmUoJ2FuaW1hdGluZycpO1xuXHRcdHRoaXMudHJpZ2dlcigndHJhbnNsYXRlZCcpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHZpZXdwb3J0IHdpZHRoLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEByZXR1cm4ge051bWJlcn0gLSBUaGUgd2lkdGggaW4gcGl4ZWwuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnZpZXdwb3J0ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHdpZHRoO1xuXHRcdGlmICh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUJhc2VFbGVtZW50ICE9PSB3aW5kb3cpIHtcblx0XHRcdHdpZHRoID0gJCh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUJhc2VFbGVtZW50KS53aWR0aCgpO1xuXHRcdH0gZWxzZSBpZiAod2luZG93LmlubmVyV2lkdGgpIHtcblx0XHRcdHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG5cdFx0fSBlbHNlIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKSB7XG5cdFx0XHR3aWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKCdDYW4gbm90IGRldGVjdCB2aWV3cG9ydCB3aWR0aC4nKTtcblx0XHR9XG5cdFx0cmV0dXJuIHdpZHRoO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZXBsYWNlcyB0aGUgY3VycmVudCBjb250ZW50LlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8alF1ZXJ5fFN0cmluZ30gY29udGVudCAtIFRoZSBuZXcgY29udGVudC5cblx0ICovXG5cdE93bC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHR0aGlzLiRzdGFnZS5lbXB0eSgpO1xuXHRcdHRoaXMuX2l0ZW1zID0gW107XG5cblx0XHRpZiAoY29udGVudCkge1xuXHRcdFx0Y29udGVudCA9IChjb250ZW50IGluc3RhbmNlb2YgalF1ZXJ5KSA/IGNvbnRlbnQgOiAkKGNvbnRlbnQpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3Rvcikge1xuXHRcdFx0Y29udGVudCA9IGNvbnRlbnQuZmluZCgnLicgKyB0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3Rvcik7XG5cdFx0fVxuXG5cdFx0Y29udGVudC5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5ub2RlVHlwZSA9PT0gMTtcblx0XHR9KS5lYWNoKCQucHJveHkoZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcblx0XHRcdGl0ZW0gPSB0aGlzLnByZXBhcmUoaXRlbSk7XG5cdFx0XHR0aGlzLiRzdGFnZS5hcHBlbmQoaXRlbSk7XG5cdFx0XHR0aGlzLl9pdGVtcy5wdXNoKGl0ZW0pO1xuXHRcdFx0dGhpcy5fbWVyZ2Vycy5wdXNoKGl0ZW0uZmluZCgnW2RhdGEtbWVyZ2VdJykuYWRkQmFjaygnW2RhdGEtbWVyZ2VdJykuYXR0cignZGF0YS1tZXJnZScpICogMSB8fCAxKTtcblx0XHR9LCB0aGlzKSk7XG5cblx0XHR0aGlzLnJlc2V0KHRoaXMuaXNOdW1lcmljKHRoaXMuc2V0dGluZ3Muc3RhcnRQb3NpdGlvbikgPyB0aGlzLnNldHRpbmdzLnN0YXJ0UG9zaXRpb24gOiAwKTtcblxuXHRcdHRoaXMuaW52YWxpZGF0ZSgnaXRlbXMnKTtcblx0fTtcblxuXHQvKipcblx0ICogQWRkcyBhbiBpdGVtLlxuXHQgKiBAdG9kbyBVc2UgYGl0ZW1gIGluc3RlYWQgb2YgYGNvbnRlbnRgIGZvciB0aGUgZXZlbnQgYXJndW1lbnRzLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8alF1ZXJ5fFN0cmluZ30gY29udGVudCAtIFRoZSBpdGVtIGNvbnRlbnQgdG8gYWRkLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uXSAtIFRoZSByZWxhdGl2ZSBwb3NpdGlvbiBhdCB3aGljaCB0byBpbnNlcnQgdGhlIGl0ZW0gb3RoZXJ3aXNlIHRoZSBpdGVtIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVuZC5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oY29udGVudCwgcG9zaXRpb24pIHtcblx0XHR2YXIgY3VycmVudCA9IHRoaXMucmVsYXRpdmUodGhpcy5fY3VycmVudCk7XG5cblx0XHRwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWQgPyB0aGlzLl9pdGVtcy5sZW5ndGggOiB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XG5cdFx0Y29udGVudCA9IGNvbnRlbnQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZW50IDogJChjb250ZW50KTtcblxuXHRcdHRoaXMudHJpZ2dlcignYWRkJywgeyBjb250ZW50OiBjb250ZW50LCBwb3NpdGlvbjogcG9zaXRpb24gfSk7XG5cblx0XHRjb250ZW50ID0gdGhpcy5wcmVwYXJlKGNvbnRlbnQpO1xuXG5cdFx0aWYgKHRoaXMuX2l0ZW1zLmxlbmd0aCA9PT0gMCB8fCBwb3NpdGlvbiA9PT0gdGhpcy5faXRlbXMubGVuZ3RoKSB7XG5cdFx0XHR0aGlzLl9pdGVtcy5sZW5ndGggPT09IDAgJiYgdGhpcy4kc3RhZ2UuYXBwZW5kKGNvbnRlbnQpO1xuXHRcdFx0dGhpcy5faXRlbXMubGVuZ3RoICE9PSAwICYmIHRoaXMuX2l0ZW1zW3Bvc2l0aW9uIC0gMV0uYWZ0ZXIoY29udGVudCk7XG5cdFx0XHR0aGlzLl9pdGVtcy5wdXNoKGNvbnRlbnQpO1xuXHRcdFx0dGhpcy5fbWVyZ2Vycy5wdXNoKGNvbnRlbnQuZmluZCgnW2RhdGEtbWVyZ2VdJykuYWRkQmFjaygnW2RhdGEtbWVyZ2VdJykuYXR0cignZGF0YS1tZXJnZScpICogMSB8fCAxKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5faXRlbXNbcG9zaXRpb25dLmJlZm9yZShjb250ZW50KTtcblx0XHRcdHRoaXMuX2l0ZW1zLnNwbGljZShwb3NpdGlvbiwgMCwgY29udGVudCk7XG5cdFx0XHR0aGlzLl9tZXJnZXJzLnNwbGljZShwb3NpdGlvbiwgMCwgY29udGVudC5maW5kKCdbZGF0YS1tZXJnZV0nKS5hZGRCYWNrKCdbZGF0YS1tZXJnZV0nKS5hdHRyKCdkYXRhLW1lcmdlJykgKiAxIHx8IDEpO1xuXHRcdH1cblxuXHRcdHRoaXMuX2l0ZW1zW2N1cnJlbnRdICYmIHRoaXMucmVzZXQodGhpcy5faXRlbXNbY3VycmVudF0uaW5kZXgoKSk7XG5cblx0XHR0aGlzLmludmFsaWRhdGUoJ2l0ZW1zJyk7XG5cblx0XHR0aGlzLnRyaWdnZXIoJ2FkZGVkJywgeyBjb250ZW50OiBjb250ZW50LCBwb3NpdGlvbjogcG9zaXRpb24gfSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgYW4gaXRlbSBieSBpdHMgcG9zaXRpb24uXG5cdCAqIEB0b2RvIFVzZSBgaXRlbWAgaW5zdGVhZCBvZiBgY29udGVudGAgZm9yIHRoZSBldmVudCBhcmd1bWVudHMuXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBpdGVtIHRvIHJlbW92ZS5cblx0ICovXG5cdE93bC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblx0XHRwb3NpdGlvbiA9IHRoaXMubm9ybWFsaXplKHBvc2l0aW9uLCB0cnVlKTtcblxuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy50cmlnZ2VyKCdyZW1vdmUnLCB7IGNvbnRlbnQ6IHRoaXMuX2l0ZW1zW3Bvc2l0aW9uXSwgcG9zaXRpb246IHBvc2l0aW9uIH0pO1xuXG5cdFx0dGhpcy5faXRlbXNbcG9zaXRpb25dLnJlbW92ZSgpO1xuXHRcdHRoaXMuX2l0ZW1zLnNwbGljZShwb3NpdGlvbiwgMSk7XG5cdFx0dGhpcy5fbWVyZ2Vycy5zcGxpY2UocG9zaXRpb24sIDEpO1xuXG5cdFx0dGhpcy5pbnZhbGlkYXRlKCdpdGVtcycpO1xuXG5cdFx0dGhpcy50cmlnZ2VyKCdyZW1vdmVkJywgeyBjb250ZW50OiBudWxsLCBwb3NpdGlvbjogcG9zaXRpb24gfSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFByZWxvYWRzIGltYWdlcyB3aXRoIGF1dG8gd2lkdGguXG5cdCAqIEB0b2RvIFJlcGxhY2UgYnkgYSBtb3JlIGdlbmVyaWMgYXBwcm9hY2hcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5wcmVsb2FkQXV0b1dpZHRoSW1hZ2VzID0gZnVuY3Rpb24oaW1hZ2VzKSB7XG5cdFx0aW1hZ2VzLmVhY2goJC5wcm94eShmdW5jdGlvbihpLCBlbGVtZW50KSB7XG5cdFx0XHR0aGlzLmVudGVyKCdwcmUtbG9hZGluZycpO1xuXHRcdFx0ZWxlbWVudCA9ICQoZWxlbWVudCk7XG5cdFx0XHQkKG5ldyBJbWFnZSgpKS5vbmUoJ2xvYWQnLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0ZWxlbWVudC5hdHRyKCdzcmMnLCBlLnRhcmdldC5zcmMpO1xuXHRcdFx0XHRlbGVtZW50LmNzcygnb3BhY2l0eScsIDEpO1xuXHRcdFx0XHR0aGlzLmxlYXZlKCdwcmUtbG9hZGluZycpO1xuXHRcdFx0XHQhdGhpcy5pcygncHJlLWxvYWRpbmcnKSAmJiAhdGhpcy5pcygnaW5pdGlhbGl6aW5nJykgJiYgdGhpcy5yZWZyZXNoKCk7XG5cdFx0XHR9LCB0aGlzKSkuYXR0cignc3JjJywgZWxlbWVudC5hdHRyKCdzcmMnKSB8fCBlbGVtZW50LmF0dHIoJ2RhdGEtc3JjJykgfHwgZWxlbWVudC5hdHRyKCdkYXRhLXNyYy1yZXRpbmEnKSk7XG5cdFx0fSwgdGhpcykpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgY2Fyb3VzZWwuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdE93bC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0dGhpcy4kZWxlbWVudC5vZmYoJy5vd2wuY29yZScpO1xuXHRcdHRoaXMuJHN0YWdlLm9mZignLm93bC5jb3JlJyk7XG5cdFx0JChkb2N1bWVudCkub2ZmKCcub3dsLmNvcmUnKTtcblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLnJlc3BvbnNpdmUgIT09IGZhbHNlKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVGltZXIpO1xuXHRcdFx0dGhpcy5vZmYod2luZG93LCAncmVzaXplJywgdGhpcy5faGFuZGxlcnMub25UaHJvdHRsZWRSZXNpemUpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgaW4gdGhpcy5fcGx1Z2lucykge1xuXHRcdFx0dGhpcy5fcGx1Z2luc1tpXS5kZXN0cm95KCk7XG5cdFx0fVxuXG5cdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oJy5jbG9uZWQnKS5yZW1vdmUoKTtcblxuXHRcdHRoaXMuJHN0YWdlLnVud3JhcCgpO1xuXHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuY29udGVudHMoKS51bndyYXAoKTtcblx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbigpLnVud3JhcCgpO1xuXHRcdHRoaXMuJHN0YWdlLnJlbW92ZSgpO1xuXHRcdHRoaXMuJGVsZW1lbnRcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMucmVmcmVzaENsYXNzKVxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sb2FkaW5nQ2xhc3MpXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRlZENsYXNzKVxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ydGxDbGFzcylcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZHJhZ0NsYXNzKVxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ncmFiQ2xhc3MpXG5cdFx0XHQuYXR0cignY2xhc3MnLCB0aGlzLiRlbGVtZW50LmF0dHIoJ2NsYXNzJykucmVwbGFjZShuZXcgUmVnRXhwKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlQ2xhc3MgKyAnLVxcXFxTK1xcXFxzJywgJ2cnKSwgJycpKVxuXHRcdFx0LnJlbW92ZURhdGEoJ293bC5jYXJvdXNlbCcpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBPcGVyYXRvcnMgdG8gY2FsY3VsYXRlIHJpZ2h0LXRvLWxlZnQgYW5kIGxlZnQtdG8tcmlnaHQuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFthXSAtIFRoZSBsZWZ0IHNpZGUgb3BlcmFuZC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IFtvXSAtIFRoZSBvcGVyYXRvci5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtiXSAtIFRoZSByaWdodCBzaWRlIG9wZXJhbmQuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm9wID0gZnVuY3Rpb24oYSwgbywgYikge1xuXHRcdHZhciBydGwgPSB0aGlzLnNldHRpbmdzLnJ0bDtcblx0XHRzd2l0Y2ggKG8pIHtcblx0XHRcdGNhc2UgJzwnOlxuXHRcdFx0XHRyZXR1cm4gcnRsID8gYSA+IGIgOiBhIDwgYjtcblx0XHRcdGNhc2UgJz4nOlxuXHRcdFx0XHRyZXR1cm4gcnRsID8gYSA8IGIgOiBhID4gYjtcblx0XHRcdGNhc2UgJz49Jzpcblx0XHRcdFx0cmV0dXJuIHJ0bCA/IGEgPD0gYiA6IGEgPj0gYjtcblx0XHRcdGNhc2UgJzw9Jzpcblx0XHRcdFx0cmV0dXJuIHJ0bCA/IGEgPj0gYiA6IGEgPD0gYjtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQXR0YWNoZXMgdG8gYW4gaW50ZXJuYWwgZXZlbnQuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBldmVudCBzb3VyY2UuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCAtIFRoZSBldmVudCBuYW1lLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBldmVudCBoYW5kbGVyIHRvIGF0dGFjaC5cblx0ICogQHBhcmFtIHtCb29sZWFufSBjYXB0dXJlIC0gV2V0aGVyIHRoZSBldmVudCBzaG91bGQgYmUgaGFuZGxlZCBhdCB0aGUgY2FwdHVyaW5nIHBoYXNlIG9yIG5vdC5cblx0ICovXG5cdE93bC5wcm90b3R5cGUub24gPSBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcblx0XHRpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG5cdFx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBjYXB0dXJlKTtcblx0XHR9IGVsc2UgaWYgKGVsZW1lbnQuYXR0YWNoRXZlbnQpIHtcblx0XHRcdGVsZW1lbnQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXRhY2hlcyBmcm9tIGFuIGludGVybmFsIGV2ZW50LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZXZlbnQgc291cmNlLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQgbmFtZS5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgLSBUaGUgYXR0YWNoZWQgZXZlbnQgaGFuZGxlciB0byBkZXRhY2guXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gY2FwdHVyZSAtIFdldGhlciB0aGUgYXR0YWNoZWQgZXZlbnQgaGFuZGxlciB3YXMgcmVnaXN0ZXJlZCBhcyBhIGNhcHR1cmluZyBsaXN0ZW5lciBvciBub3QuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBsaXN0ZW5lciwgY2FwdHVyZSkge1xuXHRcdGlmIChlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcblx0XHRcdGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuXHRcdH0gZWxzZSBpZiAoZWxlbWVudC5kZXRhY2hFdmVudCkge1xuXHRcdFx0ZWxlbWVudC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFRyaWdnZXJzIGEgcHVibGljIGV2ZW50LlxuXHQgKiBAdG9kbyBSZW1vdmUgYHN0YXR1c2AsIGByZWxhdGVkVGFyZ2V0YCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gVGhlIGV2ZW50IG5hbWUuXG5cdCAqIEBwYXJhbSB7Kn0gW2RhdGE9bnVsbF0gLSBUaGUgZXZlbnQgZGF0YS5cblx0ICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2U9Y2Fyb3VzZWxdIC0gVGhlIGV2ZW50IG5hbWVzcGFjZS5cblx0ICogQHBhcmFtIHtTdHJpbmd9IFtzdGF0ZV0gLSBUaGUgc3RhdGUgd2hpY2ggaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBldmVudC5cblx0ICogQHBhcmFtIHtCb29sZWFufSBbZW50ZXI9ZmFsc2VdIC0gSW5kaWNhdGVzIGlmIHRoZSBjYWxsIGVudGVycyB0aGUgc3BlY2lmaWVkIHN0YXRlIG9yIG5vdC5cblx0ICogQHJldHVybnMge0V2ZW50fSAtIFRoZSBldmVudCBhcmd1bWVudHMuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbihuYW1lLCBkYXRhLCBuYW1lc3BhY2UsIHN0YXRlLCBlbnRlcikge1xuXHRcdHZhciBzdGF0dXMgPSB7XG5cdFx0XHRpdGVtOiB7IGNvdW50OiB0aGlzLl9pdGVtcy5sZW5ndGgsIGluZGV4OiB0aGlzLmN1cnJlbnQoKSB9XG5cdFx0fSwgaGFuZGxlciA9ICQuY2FtZWxDYXNlKFxuXHRcdFx0JC5ncmVwKFsgJ29uJywgbmFtZSwgbmFtZXNwYWNlIF0sIGZ1bmN0aW9uKHYpIHsgcmV0dXJuIHYgfSlcblx0XHRcdFx0LmpvaW4oJy0nKS50b0xvd2VyQ2FzZSgpXG5cdFx0KSwgZXZlbnQgPSAkLkV2ZW50KFxuXHRcdFx0WyBuYW1lLCAnb3dsJywgbmFtZXNwYWNlIHx8ICdjYXJvdXNlbCcgXS5qb2luKCcuJykudG9Mb3dlckNhc2UoKSxcblx0XHRcdCQuZXh0ZW5kKHsgcmVsYXRlZFRhcmdldDogdGhpcyB9LCBzdGF0dXMsIGRhdGEpXG5cdFx0KTtcblxuXHRcdGlmICghdGhpcy5fc3VwcmVzc1tuYW1lXSkge1xuXHRcdFx0JC5lYWNoKHRoaXMuX3BsdWdpbnMsIGZ1bmN0aW9uKG5hbWUsIHBsdWdpbikge1xuXHRcdFx0XHRpZiAocGx1Z2luLm9uVHJpZ2dlcikge1xuXHRcdFx0XHRcdHBsdWdpbi5vblRyaWdnZXIoZXZlbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5yZWdpc3Rlcih7IHR5cGU6IE93bC5UeXBlLkV2ZW50LCBuYW1lOiBuYW1lIH0pO1xuXHRcdFx0dGhpcy4kZWxlbWVudC50cmlnZ2VyKGV2ZW50KTtcblxuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MgJiYgdHlwZW9mIHRoaXMuc2V0dGluZ3NbaGFuZGxlcl0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0dGhpcy5zZXR0aW5nc1toYW5kbGVyXS5jYWxsKHRoaXMsIGV2ZW50KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQ7XG5cdH07XG5cblx0LyoqXG5cdCAqIEVudGVycyBhIHN0YXRlLlxuXHQgKiBAcGFyYW0gbmFtZSAtIFRoZSBzdGF0ZSBuYW1lLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5lbnRlciA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0XHQkLmVhY2goWyBuYW1lIF0uY29uY2F0KHRoaXMuX3N0YXRlcy50YWdzW25hbWVdIHx8IFtdKSwgJC5wcm94eShmdW5jdGlvbihpLCBuYW1lKSB7XG5cdFx0XHRpZiAodGhpcy5fc3RhdGVzLmN1cnJlbnRbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aGlzLl9zdGF0ZXMuY3VycmVudFtuYW1lXSA9IDA7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3N0YXRlcy5jdXJyZW50W25hbWVdKys7XG5cdFx0fSwgdGhpcykpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBMZWF2ZXMgYSBzdGF0ZS5cblx0ICogQHBhcmFtIG5hbWUgLSBUaGUgc3RhdGUgbmFtZS5cblx0ICovXG5cdE93bC5wcm90b3R5cGUubGVhdmUgPSBmdW5jdGlvbihuYW1lKSB7XG5cdFx0JC5lYWNoKFsgbmFtZSBdLmNvbmNhdCh0aGlzLl9zdGF0ZXMudGFnc1tuYW1lXSB8fCBbXSksICQucHJveHkoZnVuY3Rpb24oaSwgbmFtZSkge1xuXHRcdFx0dGhpcy5fc3RhdGVzLmN1cnJlbnRbbmFtZV0tLTtcblx0XHR9LCB0aGlzKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJlZ2lzdGVycyBhbiBldmVudCBvciBzdGF0ZS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IC0gVGhlIGV2ZW50IG9yIHN0YXRlIHRvIHJlZ2lzdGVyLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uKG9iamVjdCkge1xuXHRcdGlmIChvYmplY3QudHlwZSA9PT0gT3dsLlR5cGUuRXZlbnQpIHtcblx0XHRcdGlmICghJC5ldmVudC5zcGVjaWFsW29iamVjdC5uYW1lXSkge1xuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdID0ge307XG5cdFx0XHR9XG5cblx0XHRcdGlmICghJC5ldmVudC5zcGVjaWFsW29iamVjdC5uYW1lXS5vd2wpIHtcblx0XHRcdFx0dmFyIF9kZWZhdWx0ID0gJC5ldmVudC5zcGVjaWFsW29iamVjdC5uYW1lXS5fZGVmYXVsdDtcblx0XHRcdFx0JC5ldmVudC5zcGVjaWFsW29iamVjdC5uYW1lXS5fZGVmYXVsdCA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRpZiAoX2RlZmF1bHQgJiYgX2RlZmF1bHQuYXBwbHkgJiYgKCFlLm5hbWVzcGFjZSB8fCBlLm5hbWVzcGFjZS5pbmRleE9mKCdvd2wnKSA9PT0gLTEpKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gX2RlZmF1bHQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGUubmFtZXNwYWNlICYmIGUubmFtZXNwYWNlLmluZGV4T2YoJ293bCcpID4gLTE7XG5cdFx0XHRcdH07XG5cdFx0XHRcdCQuZXZlbnQuc3BlY2lhbFtvYmplY3QubmFtZV0ub3dsID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKG9iamVjdC50eXBlID09PSBPd2wuVHlwZS5TdGF0ZSkge1xuXHRcdFx0aWYgKCF0aGlzLl9zdGF0ZXMudGFnc1tvYmplY3QubmFtZV0pIHtcblx0XHRcdFx0dGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdID0gb2JqZWN0LnRhZ3M7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9zdGF0ZXMudGFnc1tvYmplY3QubmFtZV0gPSB0aGlzLl9zdGF0ZXMudGFnc1tvYmplY3QubmFtZV0uY29uY2F0KG9iamVjdC50YWdzKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdID0gJC5ncmVwKHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSwgJC5wcm94eShmdW5jdGlvbih0YWcsIGkpIHtcblx0XHRcdFx0cmV0dXJuICQuaW5BcnJheSh0YWcsIHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSkgPT09IGk7XG5cdFx0XHR9LCB0aGlzKSk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBTdXBwcmVzc2VzIGV2ZW50cy5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBldmVudHMgLSBUaGUgZXZlbnRzIHRvIHN1cHByZXNzLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5zdXBwcmVzcyA9IGZ1bmN0aW9uKGV2ZW50cykge1xuXHRcdCQuZWFjaChldmVudHMsICQucHJveHkoZnVuY3Rpb24oaW5kZXgsIGV2ZW50KSB7XG5cdFx0XHR0aGlzLl9zdXByZXNzW2V2ZW50XSA9IHRydWU7XG5cdFx0fSwgdGhpcykpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZWxlYXNlcyBzdXBwcmVzc2VkIGV2ZW50cy5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBldmVudHMgLSBUaGUgZXZlbnRzIHRvIHJlbGVhc2UuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnJlbGVhc2UgPSBmdW5jdGlvbihldmVudHMpIHtcblx0XHQkLmVhY2goZXZlbnRzLCAkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBldmVudCkge1xuXHRcdFx0ZGVsZXRlIHRoaXMuX3N1cHJlc3NbZXZlbnRdO1xuXHRcdH0sIHRoaXMpKTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyB1bmlmaWVkIHBvaW50ZXIgY29vcmRpbmF0ZXMgZnJvbSBldmVudC5cblx0ICogQHRvZG8gIzI2MVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7RXZlbnR9IC0gVGhlIGBtb3VzZWRvd25gIG9yIGB0b3VjaHN0YXJ0YCBldmVudC5cblx0ICogQHJldHVybnMge09iamVjdH0gLSBDb250YWlucyBgeGAgYW5kIGB5YCBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvaW50ZXIgcG9zaXRpb24uXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnBvaW50ZXIgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciByZXN1bHQgPSB7IHg6IG51bGwsIHk6IG51bGwgfTtcblxuXHRcdGV2ZW50ID0gZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XG5cblx0XHRldmVudCA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggP1xuXHRcdFx0ZXZlbnQudG91Y2hlc1swXSA6IGV2ZW50LmNoYW5nZWRUb3VjaGVzICYmIGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA/XG5cdFx0XHRcdGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdIDogZXZlbnQ7XG5cblx0XHRpZiAoZXZlbnQucGFnZVgpIHtcblx0XHRcdHJlc3VsdC54ID0gZXZlbnQucGFnZVg7XG5cdFx0XHRyZXN1bHQueSA9IGV2ZW50LnBhZ2VZO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQueCA9IGV2ZW50LmNsaWVudFg7XG5cdFx0XHRyZXN1bHQueSA9IGV2ZW50LmNsaWVudFk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHQvKipcblx0ICogRGV0ZXJtaW5lcyBpZiB0aGUgaW5wdXQgaXMgYSBOdW1iZXIgb3Igc29tZXRoaW5nIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gYSBOdW1iZXJcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd8T2JqZWN0fEFycmF5fEJvb2xlYW58UmVnRXhwfEZ1bmN0aW9ufFN5bWJvbH0gLSBUaGUgaW5wdXQgdG8gYmUgdGVzdGVkXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSAtIEFuIGluZGljYXRpb24gaWYgdGhlIGlucHV0IGlzIGEgTnVtYmVyIG9yIGNhbiBiZSBjb2VyY2VkIHRvIGEgTnVtYmVyXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmlzTnVtZXJpYyA9IGZ1bmN0aW9uKG51bWJlcikge1xuXHRcdHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChudW1iZXIpKTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyB0aGUgZGlmZmVyZW5jZSBvZiB0d28gdmVjdG9ycy5cblx0ICogQHRvZG8gIzI2MVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSAtIFRoZSBmaXJzdCB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSAtIFRoZSBzZWNvbmQgdmVjdG9yLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSAtIFRoZSBkaWZmZXJlbmNlLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5kaWZmZXJlbmNlID0gZnVuY3Rpb24oZmlyc3QsIHNlY29uZCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiBmaXJzdC54IC0gc2Vjb25kLngsXG5cdFx0XHR5OiBmaXJzdC55IC0gc2Vjb25kLnlcblx0XHR9O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBUaGUgalF1ZXJ5IFBsdWdpbiBmb3IgdGhlIE93bCBDYXJvdXNlbFxuXHQgKiBAdG9kbyBOYXZpZ2F0aW9uIHBsdWdpbiBgbmV4dGAgYW5kIGBwcmV2YFxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHQkLmZuLm93bENhcm91c2VsID0gZnVuY3Rpb24ob3B0aW9uKSB7XG5cdFx0dmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciAkdGhpcyA9ICQodGhpcyksXG5cdFx0XHRcdGRhdGEgPSAkdGhpcy5kYXRhKCdvd2wuY2Fyb3VzZWwnKTtcblxuXHRcdFx0aWYgKCFkYXRhKSB7XG5cdFx0XHRcdGRhdGEgPSBuZXcgT3dsKHRoaXMsIHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uKTtcblx0XHRcdFx0JHRoaXMuZGF0YSgnb3dsLmNhcm91c2VsJywgZGF0YSk7XG5cblx0XHRcdFx0JC5lYWNoKFtcblx0XHRcdFx0XHQnbmV4dCcsICdwcmV2JywgJ3RvJywgJ2Rlc3Ryb3knLCAncmVmcmVzaCcsICdyZXBsYWNlJywgJ2FkZCcsICdyZW1vdmUnXG5cdFx0XHRcdF0sIGZ1bmN0aW9uKGksIGV2ZW50KSB7XG5cdFx0XHRcdFx0ZGF0YS5yZWdpc3Rlcih7IHR5cGU6IE93bC5UeXBlLkV2ZW50LCBuYW1lOiBldmVudCB9KTtcblx0XHRcdFx0XHRkYXRhLiRlbGVtZW50Lm9uKGV2ZW50ICsgJy5vd2wuY2Fyb3VzZWwuY29yZScsICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucmVsYXRlZFRhcmdldCAhPT0gdGhpcykge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnN1cHByZXNzKFsgZXZlbnQgXSk7XG5cdFx0XHRcdFx0XHRcdGRhdGFbZXZlbnRdLmFwcGx5KHRoaXMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG5cdFx0XHRcdFx0XHRcdHRoaXMucmVsZWFzZShbIGV2ZW50IF0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sIGRhdGEpKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnICYmIG9wdGlvbi5jaGFyQXQoMCkgIT09ICdfJykge1xuXHRcdFx0XHRkYXRhW29wdGlvbl0uYXBwbHkoZGF0YSwgYXJncyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIGpRdWVyeSBQbHVnaW5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3RvciA9IE93bDtcblxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xuXG4vKipcbiAqIEF1dG9SZWZyZXNoIFBsdWdpblxuICogQHZlcnNpb24gMi4zLjRcbiAqIEBhdXRob3IgQXJ0dXMgS29sYW5vd3NraVxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqL1xuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgYXV0byByZWZyZXNoIHBsdWdpbi5cblx0ICogQGNsYXNzIFRoZSBBdXRvIFJlZnJlc2ggUGx1Z2luXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcblx0ICovXG5cdHZhciBBdXRvUmVmcmVzaCA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XG5cdFx0LyoqXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBjb3JlLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T3dsfVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcblxuXHRcdC8qKlxuXHRcdCAqIFJlZnJlc2ggaW50ZXJ2YWwuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgZWxlbWVudCBpcyBjdXJyZW50bHkgdmlzaWJsZSBvciBub3QuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtCb29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMuX3Zpc2libGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsIGV2ZW50IGhhbmRsZXJzLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvUmVmcmVzaCkge1xuXHRcdFx0XHRcdHRoaXMud2F0Y2goKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcylcblx0XHR9O1xuXG5cdFx0Ly8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBdXRvUmVmcmVzaC5EZWZhdWx0cywgdGhpcy5fY29yZS5vcHRpb25zKTtcblxuXHRcdC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXG5cdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0QXV0b1JlZnJlc2guRGVmYXVsdHMgPSB7XG5cdFx0YXV0b1JlZnJlc2g6IHRydWUsXG5cdFx0YXV0b1JlZnJlc2hJbnRlcnZhbDogNTAwXG5cdH07XG5cblx0LyoqXG5cdCAqIFdhdGNoZXMgdGhlIGVsZW1lbnQuXG5cdCAqL1xuXHRBdXRvUmVmcmVzaC5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbigpIHtcblx0XHRpZiAodGhpcy5faW50ZXJ2YWwpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl92aXNpYmxlID0gdGhpcy5fY29yZS5pc1Zpc2libGUoKTtcblx0XHR0aGlzLl9pbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCgkLnByb3h5KHRoaXMucmVmcmVzaCwgdGhpcyksIHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b1JlZnJlc2hJbnRlcnZhbCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJlZnJlc2hlcyB0aGUgZWxlbWVudC5cblx0ICovXG5cdEF1dG9SZWZyZXNoLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHRoaXMuX2NvcmUuaXNWaXNpYmxlKCkgPT09IHRoaXMuX3Zpc2libGUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl92aXNpYmxlID0gIXRoaXMuX3Zpc2libGU7XG5cblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50LnRvZ2dsZUNsYXNzKCdvd2wtaGlkZGVuJywgIXRoaXMuX3Zpc2libGUpO1xuXG5cdFx0dGhpcy5fdmlzaWJsZSAmJiAodGhpcy5fY29yZS5pbnZhbGlkYXRlKCd3aWR0aCcpICYmIHRoaXMuX2NvcmUucmVmcmVzaCgpKTtcblx0fTtcblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhlIHBsdWdpbi5cblx0ICovXG5cdEF1dG9SZWZyZXNoLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xuXG5cdFx0d2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XG5cdFx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XG5cdFx0fVxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xuXHRcdH1cblx0fTtcblxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQXV0b1JlZnJlc2ggPSBBdXRvUmVmcmVzaDtcblxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xuXG4vKipcbiAqIExhenkgUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjMuNFxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKi9cbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdGhlIGxhenkgcGx1Z2luLlxuXHQgKiBAY2xhc3MgVGhlIExhenkgUGx1Z2luXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcblx0ICovXG5cdHZhciBMYXp5ID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcblxuXHRcdC8qKlxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge093bH1cblx0XHQgKi9cblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XG5cblx0XHQvKipcblx0XHQgKiBBbHJlYWR5IGxvYWRlZCBpdGVtcy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge0FycmF5LjxqUXVlcnk+fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2xvYWRlZCA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogRXZlbnQgaGFuZGxlcnMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XG5cdFx0XHQnaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsIGNoYW5nZS5vd2wuY2Fyb3VzZWwgcmVzaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKCFlLm5hbWVzcGFjZSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghdGhpcy5fY29yZS5zZXR0aW5ncyB8fCAhdGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICgoZS5wcm9wZXJ0eSAmJiBlLnByb3BlcnR5Lm5hbWUgPT0gJ3Bvc2l0aW9uJykgfHwgZS50eXBlID09ICdpbml0aWFsaXplZCcpIHtcblx0XHRcdFx0XHR2YXIgc2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzLFxuXHRcdFx0XHRcdFx0biA9IChzZXR0aW5ncy5jZW50ZXIgJiYgTWF0aC5jZWlsKHNldHRpbmdzLml0ZW1zIC8gMikgfHwgc2V0dGluZ3MuaXRlbXMpLFxuXHRcdFx0XHRcdFx0aSA9ICgoc2V0dGluZ3MuY2VudGVyICYmIG4gKiAtMSkgfHwgMCksXG5cdFx0XHRcdFx0XHRwb3NpdGlvbiA9IChlLnByb3BlcnR5ICYmIGUucHJvcGVydHkudmFsdWUgIT09IHVuZGVmaW5lZCA/IGUucHJvcGVydHkudmFsdWUgOiB0aGlzLl9jb3JlLmN1cnJlbnQoKSkgKyBpLFxuXHRcdFx0XHRcdFx0Y2xvbmVzID0gdGhpcy5fY29yZS5jbG9uZXMoKS5sZW5ndGgsXG5cdFx0XHRcdFx0XHRsb2FkID0gJC5wcm94eShmdW5jdGlvbihpLCB2KSB7IHRoaXMubG9hZCh2KSB9LCB0aGlzKTtcblx0XHRcdFx0XHQvL1RPRE86IE5lZWQgZG9jdW1lbnRhdGlvbiBmb3IgdGhpcyBuZXcgb3B0aW9uXG5cdFx0XHRcdFx0aWYgKHNldHRpbmdzLmxhenlMb2FkRWFnZXIgPiAwKSB7XG5cdFx0XHRcdFx0XHRuICs9IHNldHRpbmdzLmxhenlMb2FkRWFnZXI7XG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgY2Fyb3VzZWwgaXMgbG9vcGluZyBhbHNvIHByZWxvYWQgaW1hZ2VzIHRoYXQgYXJlIHRvIHRoZSBcImxlZnRcIlxuXHRcdFx0XHRcdFx0aWYgKHNldHRpbmdzLmxvb3ApIHtcbiAgICAgICAgICAgICAgcG9zaXRpb24gLT0gc2V0dGluZ3MubGF6eUxvYWRFYWdlcjtcbiAgICAgICAgICAgICAgbisrO1xuICAgICAgICAgICAgfVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHdoaWxlIChpKysgPCBuKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmxvYWQoY2xvbmVzIC8gMiArIHRoaXMuX2NvcmUucmVsYXRpdmUocG9zaXRpb24pKTtcblx0XHRcdFx0XHRcdGNsb25lcyAmJiAkLmVhY2godGhpcy5fY29yZS5jbG9uZXModGhpcy5fY29yZS5yZWxhdGl2ZShwb3NpdGlvbikpLCBsb2FkKTtcblx0XHRcdFx0XHRcdHBvc2l0aW9uKys7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKVxuXHRcdH07XG5cblx0XHQvLyBzZXQgdGhlIGRlZmF1bHQgb3B0aW9uc1xuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBMYXp5LkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xuXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlclxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdExhenkuRGVmYXVsdHMgPSB7XG5cdFx0bGF6eUxvYWQ6IGZhbHNlLFxuXHRcdGxhenlMb2FkRWFnZXI6IDBcblx0fTtcblxuXHQvKipcblx0ICogTG9hZHMgYWxsIHJlc291cmNlcyBvZiBhbiBpdGVtIGF0IHRoZSBzcGVjaWZpZWQgcG9zaXRpb24uXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgaXRlbS5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0TGF6eS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cdFx0dmFyICRpdGVtID0gdGhpcy5fY29yZS4kc3RhZ2UuY2hpbGRyZW4oKS5lcShwb3NpdGlvbiksXG5cdFx0XHQkZWxlbWVudHMgPSAkaXRlbSAmJiAkaXRlbS5maW5kKCcub3dsLWxhenknKTtcblxuXHRcdGlmICghJGVsZW1lbnRzIHx8ICQuaW5BcnJheSgkaXRlbS5nZXQoMCksIHRoaXMuX2xvYWRlZCkgPiAtMSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdCRlbGVtZW50cy5lYWNoKCQucHJveHkoZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcblx0XHRcdHZhciAkZWxlbWVudCA9ICQoZWxlbWVudCksIGltYWdlLFxuICAgICAgICAgICAgICAgIHVybCA9ICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDEgJiYgJGVsZW1lbnQuYXR0cignZGF0YS1zcmMtcmV0aW5hJykpIHx8ICRlbGVtZW50LmF0dHIoJ2RhdGEtc3JjJykgfHwgJGVsZW1lbnQuYXR0cignZGF0YS1zcmNzZXQnKTtcblxuXHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdsb2FkJywgeyBlbGVtZW50OiAkZWxlbWVudCwgdXJsOiB1cmwgfSwgJ2xhenknKTtcblxuXHRcdFx0aWYgKCRlbGVtZW50LmlzKCdpbWcnKSkge1xuXHRcdFx0XHQkZWxlbWVudC5vbmUoJ2xvYWQub3dsLmxhenknLCAkLnByb3h5KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCRlbGVtZW50LmNzcygnb3BhY2l0eScsIDEpO1xuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcignbG9hZGVkJywgeyBlbGVtZW50OiAkZWxlbWVudCwgdXJsOiB1cmwgfSwgJ2xhenknKTtcblx0XHRcdFx0fSwgdGhpcykpLmF0dHIoJ3NyYycsIHVybCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCRlbGVtZW50LmlzKCdzb3VyY2UnKSkge1xuICAgICAgICAgICAgICAgICRlbGVtZW50Lm9uZSgnbG9hZC5vd2wubGF6eScsICQucHJveHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvcmUudHJpZ2dlcignbG9hZGVkJywgeyBlbGVtZW50OiAkZWxlbWVudCwgdXJsOiB1cmwgfSwgJ2xhenknKTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKSkuYXR0cignc3Jjc2V0JywgdXJsKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGltYWdlID0gbmV3IEltYWdlKCk7XG5cdFx0XHRcdGltYWdlLm9ubG9hZCA9ICQucHJveHkoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0JGVsZW1lbnQuY3NzKHtcblx0XHRcdFx0XHRcdCdiYWNrZ3JvdW5kLWltYWdlJzogJ3VybChcIicgKyB1cmwgKyAnXCIpJyxcblx0XHRcdFx0XHRcdCdvcGFjaXR5JzogJzEnXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdsb2FkZWQnLCB7IGVsZW1lbnQ6ICRlbGVtZW50LCB1cmw6IHVybCB9LCAnbGF6eScpO1xuXHRcdFx0XHR9LCB0aGlzKTtcblx0XHRcdFx0aW1hZ2Uuc3JjID0gdXJsO1xuXHRcdFx0fVxuXHRcdH0sIHRoaXMpKTtcblxuXHRcdHRoaXMuX2xvYWRlZC5wdXNoKCRpdGVtLmdldCgwKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdExhenkucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaGFuZGxlciwgcHJvcGVydHk7XG5cblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5oYW5kbGVycykge1xuXHRcdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5oYW5kbGVyc1toYW5kbGVyXSk7XG5cdFx0fVxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xuXHRcdH1cblx0fTtcblxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuTGF6eSA9IExhenk7XG5cbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcblxuLyoqXG4gKiBBdXRvSGVpZ2h0IFBsdWdpblxuICogQHZlcnNpb24gMi4zLjRcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSBhdXRvIGhlaWdodCBwbHVnaW4uXG5cdCAqIEBjbGFzcyBUaGUgQXV0byBIZWlnaHQgUGx1Z2luXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcblx0ICovXG5cdHZhciBBdXRvSGVpZ2h0ID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcblx0XHQvKipcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPd2x9XG5cdFx0ICovXG5cdFx0dGhpcy5fY29yZSA9IGNhcm91c2VsO1xuXG5cdFx0dGhpcy5fcHJldmlvdXNIZWlnaHQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsIGV2ZW50IGhhbmRsZXJzLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCByZWZyZXNoZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHQpIHtcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0ICYmIGUucHJvcGVydHkubmFtZSA9PT0gJ3Bvc2l0aW9uJyl7XG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQnbG9hZGVkLm93bC5sYXp5JzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHRcblx0XHRcdFx0XHQmJiBlLmVsZW1lbnQuY2xvc2VzdCgnLicgKyB0aGlzLl9jb3JlLnNldHRpbmdzLml0ZW1DbGFzcykuaW5kZXgoKSA9PT0gdGhpcy5fY29yZS5jdXJyZW50KCkpIHtcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKVxuXHRcdH07XG5cblx0XHQvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG5cdFx0dGhpcy5fY29yZS5vcHRpb25zID0gJC5leHRlbmQoe30sIEF1dG9IZWlnaHQuRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XG5cblx0XHQvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xuXHRcdHRoaXMuX2ludGVydmFsSWQgPSBudWxsO1xuXHRcdHZhciByZWZUaGlzID0gdGhpcztcblxuXHRcdC8vIFRoZXNlIGNoYW5nZXMgaGF2ZSBiZWVuIHRha2VuIGZyb20gYSBQUiBieSBnYXZyb2NoZWxlZ25vdSBwcm9wb3NlZCBpbiAjMTU3NVxuXHRcdC8vIGFuZCBoYXZlIGJlZW4gbWFkZSBjb21wYXRpYmxlIHdpdGggdGhlIGxhdGVzdCBqUXVlcnkgdmVyc2lvblxuXHRcdCQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKHJlZlRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCkge1xuXHRcdFx0XHRyZWZUaGlzLnVwZGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gQXV0b3Jlc2l6ZSB0aGUgaGVpZ2h0IG9mIHRoZSBjYXJvdXNlbCB3aGVuIHdpbmRvdyBpcyByZXNpemVkXG5cdFx0Ly8gV2hlbiBjYXJvdXNlbCBoYXMgaW1hZ2VzLCB0aGUgaGVpZ2h0IGlzIGRlcGVuZGVudCBvbiB0aGUgd2lkdGhcblx0XHQvLyBhbmQgc2hvdWxkIGFsc28gY2hhbmdlIG9uIHJlc2l6ZVxuXHRcdCQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAocmVmVGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0KSB7XG5cdFx0XHRcdGlmIChyZWZUaGlzLl9pbnRlcnZhbElkICE9IG51bGwpIHtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQocmVmVGhpcy5faW50ZXJ2YWxJZCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZWZUaGlzLl9pbnRlcnZhbElkID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZWZUaGlzLnVwZGF0ZSgpO1xuXHRcdFx0XHR9LCAyNTApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0QXV0b0hlaWdodC5EZWZhdWx0cyA9IHtcblx0XHRhdXRvSGVpZ2h0OiBmYWxzZSxcblx0XHRhdXRvSGVpZ2h0Q2xhc3M6ICdvd2wtaGVpZ2h0J1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSB2aWV3LlxuXHQgKi9cblx0QXV0b0hlaWdodC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHN0YXJ0ID0gdGhpcy5fY29yZS5fY3VycmVudCxcblx0XHRcdGVuZCA9IHN0YXJ0ICsgdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtcyxcblx0XHRcdGxhenlMb2FkRW5hYmxlZCA9IHRoaXMuX2NvcmUuc2V0dGluZ3MubGF6eUxvYWQsXG5cdFx0XHR2aXNpYmxlID0gdGhpcy5fY29yZS4kc3RhZ2UuY2hpbGRyZW4oKS50b0FycmF5KCkuc2xpY2Uoc3RhcnQsIGVuZCksXG5cdFx0XHRoZWlnaHRzID0gW10sXG5cdFx0XHRtYXhoZWlnaHQgPSAwO1xuXG5cdFx0JC5lYWNoKHZpc2libGUsIGZ1bmN0aW9uKGluZGV4LCBpdGVtKSB7XG5cdFx0XHRoZWlnaHRzLnB1c2goJChpdGVtKS5oZWlnaHQoKSk7XG5cdFx0fSk7XG5cblx0XHRtYXhoZWlnaHQgPSBNYXRoLm1heC5hcHBseShudWxsLCBoZWlnaHRzKTtcblxuXHRcdGlmIChtYXhoZWlnaHQgPD0gMSAmJiBsYXp5TG9hZEVuYWJsZWQgJiYgdGhpcy5fcHJldmlvdXNIZWlnaHQpIHtcblx0XHRcdG1heGhlaWdodCA9IHRoaXMuX3ByZXZpb3VzSGVpZ2h0O1xuXHRcdH1cblxuXHRcdHRoaXMuX3ByZXZpb3VzSGVpZ2h0ID0gbWF4aGVpZ2h0O1xuXG5cdFx0dGhpcy5fY29yZS4kc3RhZ2UucGFyZW50KClcblx0XHRcdC5oZWlnaHQobWF4aGVpZ2h0KVxuXHRcdFx0LmFkZENsYXNzKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodENsYXNzKTtcblx0fTtcblxuXHRBdXRvSGVpZ2h0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xuXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XG5cdFx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XG5cdFx0fVxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcblx0XHR9XG5cdH07XG5cblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkF1dG9IZWlnaHQgPSBBdXRvSGVpZ2h0O1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG5cbi8qKlxuICogVmlkZW8gUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjMuNFxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKi9cbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdGhlIHZpZGVvIHBsdWdpbi5cblx0ICogQGNsYXNzIFRoZSBWaWRlbyBQbHVnaW5cblx0ICogQHBhcmFtIHtPd2x9IGNhcm91c2VsIC0gVGhlIE93bCBDYXJvdXNlbFxuXHQgKi9cblx0dmFyIFZpZGVvID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcblx0XHQvKipcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPd2x9XG5cdFx0ICovXG5cdFx0dGhpcy5fY29yZSA9IGNhcm91c2VsO1xuXG5cdFx0LyoqXG5cdFx0ICogQ2FjaGUgYWxsIHZpZGVvIFVSTHMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5fdmlkZW9zID0ge307XG5cblx0XHQvKipcblx0XHQgKiBDdXJyZW50IHBsYXlpbmcgaXRlbS5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge2pRdWVyeX1cblx0XHQgKi9cblx0XHR0aGlzLl9wbGF5aW5nID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEFsbCBldmVudCBoYW5kbGVycy5cblx0XHQgKiBAdG9kbyBUaGUgY2xvbmVkIGNvbnRlbnQgcmVtb3ZhbGUgaXMgdG9vIGxhdGVcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlKSB7XG5cdFx0XHRcdFx0dGhpcy5fY29yZS5yZWdpc3Rlcih7IHR5cGU6ICdzdGF0ZScsIG5hbWU6ICdwbGF5aW5nJywgdGFnczogWyAnaW50ZXJhY3RpbmcnIF0gfSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J3Jlc2l6ZS5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MudmlkZW8gJiYgdGhpcy5pc0luRnVsbFNjcmVlbigpKSB7XG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdyZWZyZXNoZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLmlzKCdyZXNpemluZycpKSB7XG5cdFx0XHRcdFx0dGhpcy5fY29yZS4kc3RhZ2UuZmluZCgnLmNsb25lZCAub3dsLXZpZGVvLWZyYW1lJykucmVtb3ZlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J2NoYW5nZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiBlLnByb3BlcnR5Lm5hbWUgPT09ICdwb3NpdGlvbicgJiYgdGhpcy5fcGxheWluZykge1xuXHRcdFx0XHRcdHRoaXMuc3RvcCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdwcmVwYXJlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKCFlLm5hbWVzcGFjZSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciAkZWxlbWVudCA9ICQoZS5jb250ZW50KS5maW5kKCcub3dsLXZpZGVvJyk7XG5cblx0XHRcdFx0aWYgKCRlbGVtZW50Lmxlbmd0aCkge1xuXHRcdFx0XHRcdCRlbGVtZW50LmNzcygnZGlzcGxheScsICdub25lJyk7XG5cdFx0XHRcdFx0dGhpcy5mZXRjaCgkZWxlbWVudCwgJChlLmNvbnRlbnQpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcylcblx0XHR9O1xuXG5cdFx0Ly8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBWaWRlby5EZWZhdWx0cywgdGhpcy5fY29yZS5vcHRpb25zKTtcblxuXHRcdC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXG5cdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XG5cblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKCdjbGljay5vd2wudmlkZW8nLCAnLm93bC12aWRlby1wbGF5LWljb24nLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdHRoaXMucGxheShlKTtcblx0XHR9LCB0aGlzKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0VmlkZW8uRGVmYXVsdHMgPSB7XG5cdFx0dmlkZW86IGZhbHNlLFxuXHRcdHZpZGVvSGVpZ2h0OiBmYWxzZSxcblx0XHR2aWRlb1dpZHRoOiBmYWxzZVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSB2aWRlbyBJRCBhbmQgdGhlIHR5cGUgKFlvdVR1YmUvVmltZW8vdnphYXIgb25seSkuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtqUXVlcnl9IHRhcmdldCAtIFRoZSB0YXJnZXQgY29udGFpbmluZyB0aGUgdmlkZW8gZGF0YS5cblx0ICogQHBhcmFtIHtqUXVlcnl9IGl0ZW0gLSBUaGUgaXRlbSBjb250YWluaW5nIHRoZSB2aWRlby5cblx0ICovXG5cdFZpZGVvLnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uKHRhcmdldCwgaXRlbSkge1xuXHRcdFx0dmFyIHR5cGUgPSAoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKHRhcmdldC5hdHRyKCdkYXRhLXZpbWVvLWlkJykpIHtcblx0XHRcdFx0XHRcdHJldHVybiAndmltZW8nO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodGFyZ2V0LmF0dHIoJ2RhdGEtdnphYXItaWQnKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICd2emFhcidcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuICd5b3V0dWJlJztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pKCksXG5cdFx0XHRcdGlkID0gdGFyZ2V0LmF0dHIoJ2RhdGEtdmltZW8taWQnKSB8fCB0YXJnZXQuYXR0cignZGF0YS15b3V0dWJlLWlkJykgfHwgdGFyZ2V0LmF0dHIoJ2RhdGEtdnphYXItaWQnKSxcblx0XHRcdFx0d2lkdGggPSB0YXJnZXQuYXR0cignZGF0YS13aWR0aCcpIHx8IHRoaXMuX2NvcmUuc2V0dGluZ3MudmlkZW9XaWR0aCxcblx0XHRcdFx0aGVpZ2h0ID0gdGFyZ2V0LmF0dHIoJ2RhdGEtaGVpZ2h0JykgfHwgdGhpcy5fY29yZS5zZXR0aW5ncy52aWRlb0hlaWdodCxcblx0XHRcdFx0dXJsID0gdGFyZ2V0LmF0dHIoJ2hyZWYnKTtcblxuXHRcdGlmICh1cmwpIHtcblxuXHRcdFx0Lypcblx0XHRcdFx0XHRQYXJzZXMgdGhlIGlkJ3Mgb3V0IG9mIHRoZSBmb2xsb3dpbmcgdXJscyAoYW5kIHByb2JhYmx5IG1vcmUpOlxuXHRcdFx0XHRcdGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OmlkXG5cdFx0XHRcdFx0aHR0cHM6Ly95b3V0dS5iZS86aWRcblx0XHRcdFx0XHRodHRwczovL3ZpbWVvLmNvbS86aWRcblx0XHRcdFx0XHRodHRwczovL3ZpbWVvLmNvbS9jaGFubmVscy86Y2hhbm5lbC86aWRcblx0XHRcdFx0XHRodHRwczovL3ZpbWVvLmNvbS9ncm91cHMvOmdyb3VwL3ZpZGVvcy86aWRcblx0XHRcdFx0XHRodHRwczovL2FwcC52emFhci5jb20vdmlkZW9zLzppZFxuXG5cdFx0XHRcdFx0VmlzdWFsIGV4YW1wbGU6IGh0dHBzOi8vcmVnZXhwZXIuY29tLyMoaHR0cCUzQSU3Q2h0dHBzJTNBJTdDKSU1QyUyRiU1QyUyRihwbGF5ZXIuJTdDd3d3LiU3Q2FwcC4pJTNGKHZpbWVvJTVDLmNvbSU3Q3lvdXR1KGJlJTVDLmNvbSU3QyU1Qy5iZSU3Q2JlJTVDLmdvb2dsZWFwaXMlNUMuY29tKSU3Q3Z6YWFyJTVDLmNvbSklNUMlMkYodmlkZW8lNUMlMkYlN0N2aWRlb3MlNUMlMkYlN0NlbWJlZCU1QyUyRiU3Q2NoYW5uZWxzJTVDJTJGLiUyQiU1QyUyRiU3Q2dyb3VwcyU1QyUyRi4lMkIlNUMlMkYlN0N3YXRjaCU1QyUzRnYlM0QlN0N2JTVDJTJGKSUzRiglNUJBLVphLXowLTkuXyUyNS0lNUQqKSglNUMlMjYlNUNTJTJCKSUzRlxuXHRcdFx0Ki9cblxuXHRcdFx0aWQgPSB1cmwubWF0Y2goLyhodHRwOnxodHRwczp8KVxcL1xcLyhwbGF5ZXIufHd3dy58YXBwLik/KHZpbWVvXFwuY29tfHlvdXR1KGJlXFwuY29tfFxcLmJlfGJlXFwuZ29vZ2xlYXBpc1xcLmNvbXxiZVxcLW5vY29va2llXFwuY29tKXx2emFhclxcLmNvbSlcXC8odmlkZW9cXC98dmlkZW9zXFwvfGVtYmVkXFwvfGNoYW5uZWxzXFwvLitcXC98Z3JvdXBzXFwvLitcXC98d2F0Y2hcXD92PXx2XFwvKT8oW0EtWmEtejAtOS5fJS1dKikoXFwmXFxTKyk/Lyk7XG5cblx0XHRcdGlmIChpZFszXS5pbmRleE9mKCd5b3V0dScpID4gLTEpIHtcblx0XHRcdFx0dHlwZSA9ICd5b3V0dWJlJztcblx0XHRcdH0gZWxzZSBpZiAoaWRbM10uaW5kZXhPZigndmltZW8nKSA+IC0xKSB7XG5cdFx0XHRcdHR5cGUgPSAndmltZW8nO1xuXHRcdFx0fSBlbHNlIGlmIChpZFszXS5pbmRleE9mKCd2emFhcicpID4gLTEpIHtcblx0XHRcdFx0dHlwZSA9ICd2emFhcic7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1ZpZGVvIFVSTCBub3Qgc3VwcG9ydGVkLicpO1xuXHRcdFx0fVxuXHRcdFx0aWQgPSBpZFs2XTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHZpZGVvIFVSTC4nKTtcblx0XHR9XG5cblx0XHR0aGlzLl92aWRlb3NbdXJsXSA9IHtcblx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRpZDogaWQsXG5cdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0XHRoZWlnaHQ6IGhlaWdodFxuXHRcdH07XG5cblx0XHRpdGVtLmF0dHIoJ2RhdGEtdmlkZW8nLCB1cmwpO1xuXG5cdFx0dGhpcy50aHVtYm5haWwodGFyZ2V0LCB0aGlzLl92aWRlb3NbdXJsXSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdmlkZW8gdGh1bWJuYWlsLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7alF1ZXJ5fSB0YXJnZXQgLSBUaGUgdGFyZ2V0IGNvbnRhaW5pbmcgdGhlIHZpZGVvIGRhdGEuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBpbmZvIC0gVGhlIHZpZGVvIGluZm8gb2JqZWN0LlxuXHQgKiBAc2VlIGBmZXRjaGBcblx0ICovXG5cdFZpZGVvLnByb3RvdHlwZS50aHVtYm5haWwgPSBmdW5jdGlvbih0YXJnZXQsIHZpZGVvKSB7XG5cdFx0dmFyIHRuTGluayxcblx0XHRcdGljb24sXG5cdFx0XHRwYXRoLFxuXHRcdFx0ZGltZW5zaW9ucyA9IHZpZGVvLndpZHRoICYmIHZpZGVvLmhlaWdodCA/ICd3aWR0aDonICsgdmlkZW8ud2lkdGggKyAncHg7aGVpZ2h0OicgKyB2aWRlby5oZWlnaHQgKyAncHg7JyA6ICcnLFxuXHRcdFx0Y3VzdG9tVG4gPSB0YXJnZXQuZmluZCgnaW1nJyksXG5cdFx0XHRzcmNUeXBlID0gJ3NyYycsXG5cdFx0XHRsYXp5Q2xhc3MgPSAnJyxcblx0XHRcdHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncyxcblx0XHRcdGNyZWF0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcblx0XHRcdFx0aWNvbiA9ICc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXBsYXktaWNvblwiPjwvZGl2Pic7XG5cblx0XHRcdFx0aWYgKHNldHRpbmdzLmxhenlMb2FkKSB7XG5cdFx0XHRcdFx0dG5MaW5rID0gJCgnPGRpdi8+Jyx7XG5cdFx0XHRcdFx0XHRcImNsYXNzXCI6ICdvd2wtdmlkZW8tdG4gJyArIGxhenlDbGFzcyxcblx0XHRcdFx0XHRcdFwic3JjVHlwZVwiOiBwYXRoXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dG5MaW5rID0gJCggJzxkaXYvPicsIHtcblx0XHRcdFx0XHRcdFwiY2xhc3NcIjogXCJvd2wtdmlkZW8tdG5cIixcblx0XHRcdFx0XHRcdFwic3R5bGVcIjogJ29wYWNpdHk6MTtiYWNrZ3JvdW5kLWltYWdlOnVybCgnICsgcGF0aCArICcpJ1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRhcmdldC5hZnRlcih0bkxpbmspO1xuXHRcdFx0XHR0YXJnZXQuYWZ0ZXIoaWNvbik7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gd3JhcCB2aWRlbyBjb250ZW50IGludG8gb3dsLXZpZGVvLXdyYXBwZXIgZGl2XG5cdFx0dGFyZ2V0LndyYXAoICQoICc8ZGl2Lz4nLCB7XG5cdFx0XHRcImNsYXNzXCI6IFwib3dsLXZpZGVvLXdyYXBwZXJcIixcblx0XHRcdFwic3R5bGVcIjogZGltZW5zaW9uc1xuXHRcdH0pKTtcblxuXHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmxhenlMb2FkKSB7XG5cdFx0XHRzcmNUeXBlID0gJ2RhdGEtc3JjJztcblx0XHRcdGxhenlDbGFzcyA9ICdvd2wtbGF6eSc7XG5cdFx0fVxuXG5cdFx0Ly8gY3VzdG9tIHRodW1ibmFpbFxuXHRcdGlmIChjdXN0b21Ubi5sZW5ndGgpIHtcblx0XHRcdGNyZWF0ZShjdXN0b21Ubi5hdHRyKHNyY1R5cGUpKTtcblx0XHRcdGN1c3RvbVRuLnJlbW92ZSgpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmICh2aWRlby50eXBlID09PSAneW91dHViZScpIHtcblx0XHRcdHBhdGggPSBcIi8vaW1nLnlvdXR1YmUuY29tL3ZpL1wiICsgdmlkZW8uaWQgKyBcIi9ocWRlZmF1bHQuanBnXCI7XG5cdFx0XHRjcmVhdGUocGF0aCk7XG5cdFx0fSBlbHNlIGlmICh2aWRlby50eXBlID09PSAndmltZW8nKSB7XG5cdFx0XHQkLmFqYXgoe1xuXHRcdFx0XHR0eXBlOiAnR0VUJyxcblx0XHRcdFx0dXJsOiAnLy92aW1lby5jb20vYXBpL3YyL3ZpZGVvLycgKyB2aWRlby5pZCArICcuanNvbicsXG5cdFx0XHRcdGpzb25wOiAnY2FsbGJhY2snLFxuXHRcdFx0XHRkYXRhVHlwZTogJ2pzb25wJyxcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHRcdHBhdGggPSBkYXRhWzBdLnRodW1ibmFpbF9sYXJnZTtcblx0XHRcdFx0XHRjcmVhdGUocGF0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAodmlkZW8udHlwZSA9PT0gJ3Z6YWFyJykge1xuXHRcdFx0JC5hamF4KHtcblx0XHRcdFx0dHlwZTogJ0dFVCcsXG5cdFx0XHRcdHVybDogJy8vdnphYXIuY29tL2FwaS92aWRlb3MvJyArIHZpZGVvLmlkICsgJy5qc29uJyxcblx0XHRcdFx0anNvbnA6ICdjYWxsYmFjaycsXG5cdFx0XHRcdGRhdGFUeXBlOiAnanNvbnAnLFxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcdFx0cGF0aCA9IGRhdGEuZnJhbWVncmFiX3VybDtcblx0XHRcdFx0XHRjcmVhdGUocGF0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogU3RvcHMgdGhlIGN1cnJlbnQgdmlkZW8uXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdFZpZGVvLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdzdG9wJywgbnVsbCwgJ3ZpZGVvJyk7XG5cdFx0dGhpcy5fcGxheWluZy5maW5kKCcub3dsLXZpZGVvLWZyYW1lJykucmVtb3ZlKCk7XG5cdFx0dGhpcy5fcGxheWluZy5yZW1vdmVDbGFzcygnb3dsLXZpZGVvLXBsYXlpbmcnKTtcblx0XHR0aGlzLl9wbGF5aW5nID0gbnVsbDtcblx0XHR0aGlzLl9jb3JlLmxlYXZlKCdwbGF5aW5nJyk7XG5cdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdzdG9wcGVkJywgbnVsbCwgJ3ZpZGVvJyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFN0YXJ0cyB0aGUgY3VycmVudCB2aWRlby5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBhcmd1bWVudHMuXG5cdCAqL1xuXHRWaWRlby5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KSxcblx0XHRcdGl0ZW0gPSB0YXJnZXQuY2xvc2VzdCgnLicgKyB0aGlzLl9jb3JlLnNldHRpbmdzLml0ZW1DbGFzcyksXG5cdFx0XHR2aWRlbyA9IHRoaXMuX3ZpZGVvc1tpdGVtLmF0dHIoJ2RhdGEtdmlkZW8nKV0sXG5cdFx0XHR3aWR0aCA9IHZpZGVvLndpZHRoIHx8ICcxMDAlJyxcblx0XHRcdGhlaWdodCA9IHZpZGVvLmhlaWdodCB8fCB0aGlzLl9jb3JlLiRzdGFnZS5oZWlnaHQoKSxcblx0XHRcdGh0bWwsXG5cdFx0XHRpZnJhbWU7XG5cblx0XHRpZiAodGhpcy5fcGxheWluZykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX2NvcmUuZW50ZXIoJ3BsYXlpbmcnKTtcblx0XHR0aGlzLl9jb3JlLnRyaWdnZXIoJ3BsYXknLCBudWxsLCAndmlkZW8nKTtcblxuXHRcdGl0ZW0gPSB0aGlzLl9jb3JlLml0ZW1zKHRoaXMuX2NvcmUucmVsYXRpdmUoaXRlbS5pbmRleCgpKSk7XG5cblx0XHR0aGlzLl9jb3JlLnJlc2V0KGl0ZW0uaW5kZXgoKSk7XG5cblx0XHRodG1sID0gJCggJzxpZnJhbWUgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuIG1vemFsbG93ZnVsbHNjcmVlbiB3ZWJraXRBbGxvd0Z1bGxTY3JlZW4gPjwvaWZyYW1lPicgKTtcblx0XHRodG1sLmF0dHIoICdoZWlnaHQnLCBoZWlnaHQgKTtcblx0XHRodG1sLmF0dHIoICd3aWR0aCcsIHdpZHRoICk7XG5cdFx0aWYgKHZpZGVvLnR5cGUgPT09ICd5b3V0dWJlJykge1xuXHRcdFx0aHRtbC5hdHRyKCAnc3JjJywgJy8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLycgKyB2aWRlby5pZCArICc/YXV0b3BsYXk9MSZyZWw9MCZ2PScgKyB2aWRlby5pZCApO1xuXHRcdH0gZWxzZSBpZiAodmlkZW8udHlwZSA9PT0gJ3ZpbWVvJykge1xuXHRcdFx0aHRtbC5hdHRyKCAnc3JjJywgJy8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8nICsgdmlkZW8uaWQgKyAnP2F1dG9wbGF5PTEnICk7XG5cdFx0fSBlbHNlIGlmICh2aWRlby50eXBlID09PSAndnphYXInKSB7XG5cdFx0XHRodG1sLmF0dHIoICdzcmMnLCAnLy92aWV3LnZ6YWFyLmNvbS8nICsgdmlkZW8uaWQgKyAnL3BsYXllcj9hdXRvcGxheT10cnVlJyApO1xuXHRcdH1cblxuXHRcdGlmcmFtZSA9ICQoaHRtbCkud3JhcCggJzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tZnJhbWVcIiAvPicgKS5pbnNlcnRBZnRlcihpdGVtLmZpbmQoJy5vd2wtdmlkZW8nKSk7XG5cblx0XHR0aGlzLl9wbGF5aW5nID0gaXRlbS5hZGRDbGFzcygnb3dsLXZpZGVvLXBsYXlpbmcnKTtcblx0fTtcblxuXHQvKipcblx0ICogQ2hlY2tzIHdoZXRoZXIgYW4gdmlkZW8gaXMgY3VycmVudGx5IGluIGZ1bGwgc2NyZWVuIG1vZGUgb3Igbm90LlxuXHQgKiBAdG9kbyBCYWQgc3R5bGUgYmVjYXVzZSBsb29rcyBsaWtlIGEgcmVhZG9ubHkgbWV0aG9kIGJ1dCBjaGFuZ2VzIG1lbWJlcnMuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAqL1xuXHRWaWRlby5wcm90b3R5cGUuaXNJbkZ1bGxTY3JlZW4gPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbWVudCA9IGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50IHx8XG5cdFx0XHRcdGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50O1xuXG5cdFx0cmV0dXJuIGVsZW1lbnQgJiYgJChlbGVtZW50KS5wYXJlbnQoKS5oYXNDbGFzcygnb3dsLXZpZGVvLWZyYW1lJyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXG5cdCAqL1xuXHRWaWRlby5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcblxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKCdjbGljay5vd2wudmlkZW8nKTtcblxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xuXHRcdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5faGFuZGxlcnNbaGFuZGxlcl0pO1xuXHRcdH1cblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcblx0XHR9XG5cdH07XG5cblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLlZpZGVvID0gVmlkZW87XG5cbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcblxuLyoqXG4gKiBBbmltYXRlIFBsdWdpblxuICogQHZlcnNpb24gMi4zLjRcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSBhbmltYXRlIHBsdWdpbi5cblx0ICogQGNsYXNzIFRoZSBOYXZpZ2F0aW9uIFBsdWdpblxuXHQgKiBAcGFyYW0ge093bH0gc2NvcGUgLSBUaGUgT3dsIENhcm91c2VsXG5cdCAqL1xuXHR2YXIgQW5pbWF0ZSA9IGZ1bmN0aW9uKHNjb3BlKSB7XG5cdFx0dGhpcy5jb3JlID0gc2NvcGU7XG5cdFx0dGhpcy5jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQW5pbWF0ZS5EZWZhdWx0cywgdGhpcy5jb3JlLm9wdGlvbnMpO1xuXHRcdHRoaXMuc3dhcHBpbmcgPSB0cnVlO1xuXHRcdHRoaXMucHJldmlvdXMgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5uZXh0ID0gdW5kZWZpbmVkO1xuXG5cdFx0dGhpcy5oYW5kbGVycyA9IHtcblx0XHRcdCdjaGFuZ2Uub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiBlLnByb3BlcnR5Lm5hbWUgPT0gJ3Bvc2l0aW9uJykge1xuXHRcdFx0XHRcdHRoaXMucHJldmlvdXMgPSB0aGlzLmNvcmUuY3VycmVudCgpO1xuXHRcdFx0XHRcdHRoaXMubmV4dCA9IGUucHJvcGVydHkudmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J2RyYWcub3dsLmNhcm91c2VsIGRyYWdnZWQub3dsLmNhcm91c2VsIHRyYW5zbGF0ZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSkge1xuXHRcdFx0XHRcdHRoaXMuc3dhcHBpbmcgPSBlLnR5cGUgPT0gJ3RyYW5zbGF0ZWQnO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCd0cmFuc2xhdGUub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLnN3YXBwaW5nICYmICh0aGlzLmNvcmUub3B0aW9ucy5hbmltYXRlT3V0IHx8IHRoaXMuY29yZS5vcHRpb25zLmFuaW1hdGVJbikpIHtcblx0XHRcdFx0XHR0aGlzLnN3YXAoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcylcblx0XHR9O1xuXG5cdFx0dGhpcy5jb3JlLiRlbGVtZW50Lm9uKHRoaXMuaGFuZGxlcnMpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdEFuaW1hdGUuRGVmYXVsdHMgPSB7XG5cdFx0YW5pbWF0ZU91dDogZmFsc2UsXG5cdFx0YW5pbWF0ZUluOiBmYWxzZVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBUb2dnbGVzIHRoZSBhbmltYXRpb24gY2xhc3NlcyB3aGVuZXZlciBhbiB0cmFuc2xhdGlvbnMgc3RhcnRzLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufHVuZGVmaW5lZH1cblx0ICovXG5cdEFuaW1hdGUucHJvdG90eXBlLnN3YXAgPSBmdW5jdGlvbigpIHtcblxuXHRcdGlmICh0aGlzLmNvcmUuc2V0dGluZ3MuaXRlbXMgIT09IDEpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoISQuc3VwcG9ydC5hbmltYXRpb24gfHwgISQuc3VwcG9ydC50cmFuc2l0aW9uKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5jb3JlLnNwZWVkKDApO1xuXG5cdFx0dmFyIGxlZnQsXG5cdFx0XHRjbGVhciA9ICQucHJveHkodGhpcy5jbGVhciwgdGhpcyksXG5cdFx0XHRwcmV2aW91cyA9IHRoaXMuY29yZS4kc3RhZ2UuY2hpbGRyZW4oKS5lcSh0aGlzLnByZXZpb3VzKSxcblx0XHRcdG5leHQgPSB0aGlzLmNvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEodGhpcy5uZXh0KSxcblx0XHRcdGluY29taW5nID0gdGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVJbixcblx0XHRcdG91dGdvaW5nID0gdGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVPdXQ7XG5cblx0XHRpZiAodGhpcy5jb3JlLmN1cnJlbnQoKSA9PT0gdGhpcy5wcmV2aW91cykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChvdXRnb2luZykge1xuXHRcdFx0bGVmdCA9IHRoaXMuY29yZS5jb29yZGluYXRlcyh0aGlzLnByZXZpb3VzKSAtIHRoaXMuY29yZS5jb29yZGluYXRlcyh0aGlzLm5leHQpO1xuXHRcdFx0cHJldmlvdXMub25lKCQuc3VwcG9ydC5hbmltYXRpb24uZW5kLCBjbGVhcilcblx0XHRcdFx0LmNzcyggeyAnbGVmdCc6IGxlZnQgKyAncHgnIH0gKVxuXHRcdFx0XHQuYWRkQ2xhc3MoJ2FuaW1hdGVkIG93bC1hbmltYXRlZC1vdXQnKVxuXHRcdFx0XHQuYWRkQ2xhc3Mob3V0Z29pbmcpO1xuXHRcdH1cblxuXHRcdGlmIChpbmNvbWluZykge1xuXHRcdFx0bmV4dC5vbmUoJC5zdXBwb3J0LmFuaW1hdGlvbi5lbmQsIGNsZWFyKVxuXHRcdFx0XHQuYWRkQ2xhc3MoJ2FuaW1hdGVkIG93bC1hbmltYXRlZC1pbicpXG5cdFx0XHRcdC5hZGRDbGFzcyhpbmNvbWluZyk7XG5cdFx0fVxuXHR9O1xuXG5cdEFuaW1hdGUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oZSkge1xuXHRcdCQoZS50YXJnZXQpLmNzcyggeyAnbGVmdCc6ICcnIH0gKVxuXHRcdFx0LnJlbW92ZUNsYXNzKCdhbmltYXRlZCBvd2wtYW5pbWF0ZWQtb3V0IG93bC1hbmltYXRlZC1pbicpXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVJbilcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZU91dCk7XG5cdFx0dGhpcy5jb3JlLm9uVHJhbnNpdGlvbkVuZCgpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRBbmltYXRlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xuXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuaGFuZGxlcnMpIHtcblx0XHRcdHRoaXMuY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5oYW5kbGVyc1toYW5kbGVyXSk7XG5cdFx0fVxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xuXHRcdH1cblx0fTtcblxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQW5pbWF0ZSA9IEFuaW1hdGU7XG5cbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcblxuLyoqXG4gKiBBdXRvcGxheSBQbHVnaW5cbiAqIEB2ZXJzaW9uIDIuMy40XG4gKiBAYXV0aG9yIEJhcnRvc3ogV29qY2llY2hvd3NraVxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBhdXRob3IgVG9tIERlIENhbHV3w6lcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSBhdXRvcGxheSBwbHVnaW4uXG5cdCAqIEBjbGFzcyBUaGUgQXV0b3BsYXkgUGx1Z2luXG5cdCAqIEBwYXJhbSB7T3dsfSBzY29wZSAtIFRoZSBPd2wgQ2Fyb3VzZWxcblx0ICovXG5cdHZhciBBdXRvcGxheSA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XG5cdFx0LyoqXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBjb3JlLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T3dsfVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhdXRvcGxheSB0aW1lb3V0IGlkLlxuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5fY2FsbCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBEZXBlbmRpbmcgb24gdGhlIHN0YXRlIG9mIHRoZSBwbHVnaW4sIHRoaXMgdmFyaWFibGUgY29udGFpbnMgZWl0aGVyXG5cdFx0ICogdGhlIHN0YXJ0IHRpbWUgb2YgdGhlIHRpbWVyIG9yIHRoZSBjdXJyZW50IHRpbWVyIHZhbHVlIGlmIGl0J3Ncblx0XHQgKiBwYXVzZWQuIFNpbmNlIHdlIHN0YXJ0IGluIGEgcGF1c2VkIHN0YXRlIHdlIGluaXRpYWxpemUgdGhlIHRpbWVyXG5cdFx0ICogdmFsdWUuXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLl90aW1lID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFN0b3JlcyB0aGUgdGltZW91dCBjdXJyZW50bHkgdXNlZC5cblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuX3RpbWVvdXQgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogSW5kaWNhdGVzIHdoZW5ldmVyIHRoZSBhdXRvcGxheSBpcyBwYXVzZWQuXG5cdFx0ICogQHR5cGUge0Jvb2xlYW59XG5cdFx0ICovXG5cdFx0dGhpcy5fcGF1c2VkID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIEFsbCBldmVudCBoYW5kbGVycy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcblx0XHRcdCdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgZS5wcm9wZXJ0eS5uYW1lID09PSAnc2V0dGluZ3MnKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXkpIHtcblx0XHRcdFx0XHRcdHRoaXMucGxheSgpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnN0b3AoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoZS5uYW1lc3BhY2UgJiYgZS5wcm9wZXJ0eS5uYW1lID09PSAncG9zaXRpb24nICYmIHRoaXMuX3BhdXNlZCkge1xuXHRcdFx0XHRcdC8vIFJlc2V0IHRoZSB0aW1lci4gVGhpcyBjb2RlIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBwb3NpdGlvblxuXHRcdFx0XHRcdC8vIG9mIHRoZSBjYXJvdXNlbCB3YXMgY2hhbmdlZCB0aHJvdWdoIHVzZXIgaW50ZXJhY3Rpb24uXG5cdFx0XHRcdFx0dGhpcy5fdGltZSA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheSkge1xuXHRcdFx0XHRcdHRoaXMucGxheSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdwbGF5Lm93bC5hdXRvcGxheSc6ICQucHJveHkoZnVuY3Rpb24oZSwgdCwgcykge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UpIHtcblx0XHRcdFx0XHR0aGlzLnBsYXkodCwgcyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J3N0b3Aub3dsLmF1dG9wbGF5JzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSkge1xuXHRcdFx0XHRcdHRoaXMuc3RvcCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdtb3VzZW92ZXIub3dsLmF1dG9wbGF5JzogJC5wcm94eShmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlICYmIHRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcblx0XHRcdFx0XHR0aGlzLnBhdXNlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J21vdXNlbGVhdmUub3dsLmF1dG9wbGF5JzogJC5wcm94eShmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlICYmIHRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcblx0XHRcdFx0XHR0aGlzLnBsYXkoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQndG91Y2hzdGFydC5vd2wuY29yZSc6ICQucHJveHkoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSAmJiB0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXVzZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCd0b3VjaGVuZC5vd2wuY29yZSc6ICQucHJveHkoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSkge1xuXHRcdFx0XHRcdHRoaXMucGxheSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKVxuXHRcdH07XG5cblx0XHQvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xuXG5cdFx0Ly8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBdXRvcGxheS5EZWZhdWx0cywgdGhpcy5fY29yZS5vcHRpb25zKTtcblx0fTtcblxuXHQvKipcblx0ICogRGVmYXVsdCBvcHRpb25zLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRBdXRvcGxheS5EZWZhdWx0cyA9IHtcblx0XHRhdXRvcGxheTogZmFsc2UsXG5cdFx0YXV0b3BsYXlUaW1lb3V0OiA1MDAwLFxuXHRcdGF1dG9wbGF5SG92ZXJQYXVzZTogZmFsc2UsXG5cdFx0YXV0b3BsYXlTcGVlZDogZmFsc2Vcblx0fTtcblxuXHQvKipcblx0ICogVHJhbnNpdGlvbiB0byB0aGUgbmV4dCBzbGlkZSBhbmQgc2V0IGEgdGltZW91dCBmb3IgdGhlIG5leHQgdHJhbnNpdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgYW5pbWF0aW9uIHNwZWVkIGZvciB0aGUgYW5pbWF0aW9ucy5cblx0ICovXG5cdEF1dG9wbGF5LnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uKHNwZWVkKSB7XG5cdFx0dGhpcy5fY2FsbCA9IHdpbmRvdy5zZXRUaW1lb3V0KFxuXHRcdFx0JC5wcm94eSh0aGlzLl9uZXh0LCB0aGlzLCBzcGVlZCksXG5cdFx0XHR0aGlzLl90aW1lb3V0ICogKE1hdGgucm91bmQodGhpcy5yZWFkKCkgLyB0aGlzLl90aW1lb3V0KSArIDEpIC0gdGhpcy5yZWFkKClcblx0XHQpO1xuXG5cdFx0aWYgKHRoaXMuX2NvcmUuaXMoJ2ludGVyYWN0aW5nJykgfHwgZG9jdW1lbnQuaGlkZGVuKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuX2NvcmUubmV4dChzcGVlZCB8fCB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5U3BlZWQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlYWRzIHRoZSBjdXJyZW50IHRpbWVyIHZhbHVlIHdoZW4gdGhlIHRpbWVyIGlzIHBsYXlpbmcuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdEF1dG9wbGF5LnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGhpcy5fdGltZTtcblx0fTtcblxuXHQvKipcblx0ICogU3RhcnRzIHRoZSBhdXRvcGxheS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3RpbWVvdXRdIC0gVGhlIGludGVydmFsIGJlZm9yZSB0aGUgbmV4dCBhbmltYXRpb24gc3RhcnRzLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSBhbmltYXRpb24gc3BlZWQgZm9yIHRoZSBhbmltYXRpb25zLlxuXHQgKi9cblx0QXV0b3BsYXkucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbih0aW1lb3V0LCBzcGVlZCkge1xuXHRcdHZhciBlbGFwc2VkO1xuXG5cdFx0aWYgKCF0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XG5cdFx0XHR0aGlzLl9jb3JlLmVudGVyKCdyb3RhdGluZycpO1xuXHRcdH1cblxuXHRcdHRpbWVvdXQgPSB0aW1lb3V0IHx8IHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlUaW1lb3V0O1xuXG5cdFx0Ly8gQ2FsY3VsYXRlIHRoZSBlbGFwc2VkIHRpbWUgc2luY2UgdGhlIGxhc3QgdHJhbnNpdGlvbi4gSWYgdGhlIGNhcm91c2VsXG5cdFx0Ly8gd2Fzbid0IHBsYXlpbmcgdGhpcyBjYWxjdWxhdGlvbiB3aWxsIHlpZWxkIHplcm8uXG5cdFx0ZWxhcHNlZCA9IE1hdGgubWluKHRoaXMuX3RpbWUgJSAodGhpcy5fdGltZW91dCB8fCB0aW1lb3V0KSwgdGltZW91dCk7XG5cblx0XHRpZiAodGhpcy5fcGF1c2VkKSB7XG5cdFx0XHQvLyBTdGFydCB0aGUgY2xvY2suXG5cdFx0XHR0aGlzLl90aW1lID0gdGhpcy5yZWFkKCk7XG5cdFx0XHR0aGlzLl9wYXVzZWQgPSBmYWxzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gQ2xlYXIgdGhlIGFjdGl2ZSB0aW1lb3V0IHRvIGFsbG93IHJlcGxhY2VtZW50LlxuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9jYWxsKTtcblx0XHR9XG5cblx0XHQvLyBBZGp1c3QgdGhlIG9yaWdpbiBvZiB0aGUgdGltZXIgdG8gbWF0Y2ggdGhlIG5ldyB0aW1lb3V0IHZhbHVlLlxuXHRcdHRoaXMuX3RpbWUgKz0gdGhpcy5yZWFkKCkgJSB0aW1lb3V0IC0gZWxhcHNlZDtcblxuXHRcdHRoaXMuX3RpbWVvdXQgPSB0aW1lb3V0O1xuXHRcdHRoaXMuX2NhbGwgPSB3aW5kb3cuc2V0VGltZW91dCgkLnByb3h5KHRoaXMuX25leHQsIHRoaXMsIHNwZWVkKSwgdGltZW91dCAtIGVsYXBzZWQpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTdG9wcyB0aGUgYXV0b3BsYXkuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdEF1dG9wbGF5LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcblx0XHRcdC8vIFJlc2V0IHRoZSBjbG9jay5cblx0XHRcdHRoaXMuX3RpbWUgPSAwO1xuXHRcdFx0dGhpcy5fcGF1c2VkID0gdHJ1ZTtcblxuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9jYWxsKTtcblx0XHRcdHRoaXMuX2NvcmUubGVhdmUoJ3JvdGF0aW5nJyk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBQYXVzZXMgdGhlIGF1dG9wbGF5LlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRBdXRvcGxheS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAodGhpcy5fY29yZS5pcygncm90YXRpbmcnKSAmJiAhdGhpcy5fcGF1c2VkKSB7XG5cdFx0XHQvLyBQYXVzZSB0aGUgY2xvY2suXG5cdFx0XHR0aGlzLl90aW1lID0gdGhpcy5yZWFkKCk7XG5cdFx0XHR0aGlzLl9wYXVzZWQgPSB0cnVlO1xuXG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX2NhbGwpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhlIHBsdWdpbi5cblx0ICovXG5cdEF1dG9wbGF5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xuXG5cdFx0dGhpcy5zdG9wKCk7XG5cblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5faGFuZGxlcnMpIHtcblx0XHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcblx0XHR9XG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XG5cdFx0fVxuXHR9O1xuXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5hdXRvcGxheSA9IEF1dG9wbGF5O1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG5cbi8qKlxuICogTmF2aWdhdGlvbiBQbHVnaW5cbiAqIEB2ZXJzaW9uIDIuMy40XG4gKiBAYXV0aG9yIEFydHVzIEtvbGFub3dza2lcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKi9cbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgbmF2aWdhdGlvbiBwbHVnaW4uXG5cdCAqIEBjbGFzcyBUaGUgTmF2aWdhdGlvbiBQbHVnaW5cblx0ICogQHBhcmFtIHtPd2x9IGNhcm91c2VsIC0gVGhlIE93bCBDYXJvdXNlbC5cblx0ICovXG5cdHZhciBOYXZpZ2F0aW9uID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcblx0XHQvKipcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPd2x9XG5cdFx0ICovXG5cdFx0dGhpcy5fY29yZSA9IGNhcm91c2VsO1xuXG5cdFx0LyoqXG5cdFx0ICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHBsdWdpbiBpcyBpbml0aWFsaXplZCBvciBub3QuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtCb29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY3VycmVudCBwYWdpbmcgaW5kZXhlcy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge0FycmF5fVxuXHRcdCAqL1xuXHRcdHRoaXMuX3BhZ2VzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBBbGwgRE9NIGVsZW1lbnRzIG9mIHRoZSB1c2VyIGludGVyZmFjZS5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLl9jb250cm9scyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogTWFya3VwIGZvciBhbiBpbmRpY2F0b3IuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtBcnJheS48U3RyaW5nPn1cblx0XHQgKi9cblx0XHR0aGlzLl90ZW1wbGF0ZXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjYXJvdXNlbCBlbGVtZW50LlxuXHRcdCAqIEB0eXBlIHtqUXVlcnl9XG5cdFx0ICovXG5cdFx0dGhpcy4kZWxlbWVudCA9IHRoaXMuX2NvcmUuJGVsZW1lbnQ7XG5cblx0XHQvKipcblx0XHQgKiBPdmVycmlkZGVuIG1ldGhvZHMgb2YgdGhlIGNhcm91c2VsLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX292ZXJyaWRlcyA9IHtcblx0XHRcdG5leHQ6IHRoaXMuX2NvcmUubmV4dCxcblx0XHRcdHByZXY6IHRoaXMuX2NvcmUucHJldixcblx0XHRcdHRvOiB0aGlzLl9jb3JlLnRvXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEFsbCBldmVudCBoYW5kbGVycy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcblx0XHRcdCdwcmVwYXJlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuZG90c0RhdGEpIHtcblx0XHRcdFx0XHR0aGlzLl90ZW1wbGF0ZXMucHVzaCgnPGRpdiBjbGFzcz1cIicgKyB0aGlzLl9jb3JlLnNldHRpbmdzLmRvdENsYXNzICsgJ1wiPicgK1xuXHRcdFx0XHRcdFx0JChlLmNvbnRlbnQpLmZpbmQoJ1tkYXRhLWRvdF0nKS5hZGRCYWNrKCdbZGF0YS1kb3RdJykuYXR0cignZGF0YS1kb3QnKSArICc8L2Rpdj4nKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQnYWRkZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmRvdHNEYXRhKSB7XG5cdFx0XHRcdFx0dGhpcy5fdGVtcGxhdGVzLnNwbGljZShlLnBvc2l0aW9uLCAwLCB0aGlzLl90ZW1wbGF0ZXMucG9wKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdyZW1vdmUub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmRvdHNEYXRhKSB7XG5cdFx0XHRcdFx0dGhpcy5fdGVtcGxhdGVzLnNwbGljZShlLnBvc2l0aW9uLCAxKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQnY2hhbmdlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PSAncG9zaXRpb24nKSB7XG5cdFx0XHRcdFx0dGhpcy5kcmF3KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgIXRoaXMuX2luaXRpYWxpemVkKSB7XG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdpbml0aWFsaXplJywgbnVsbCwgJ25hdmlnYXRpb24nKTtcblx0XHRcdFx0XHR0aGlzLmluaXRpYWxpemUoKTtcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0XHRcdHRoaXMuZHJhdygpO1xuXHRcdFx0XHRcdHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcblx0XHRcdFx0XHR0aGlzLl9jb3JlLnRyaWdnZXIoJ2luaXRpYWxpemVkJywgbnVsbCwgJ25hdmlnYXRpb24nKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQncmVmcmVzaGVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5faW5pdGlhbGl6ZWQpIHtcblx0XHRcdFx0XHR0aGlzLl9jb3JlLnRyaWdnZXIoJ3JlZnJlc2gnLCBudWxsLCAnbmF2aWdhdGlvbicpO1xuXHRcdFx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHRcdFx0dGhpcy5kcmF3KCk7XG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdyZWZyZXNoZWQnLCBudWxsLCAnbmF2aWdhdGlvbicpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKVxuXHRcdH07XG5cblx0XHQvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG5cdFx0dGhpcy5fY29yZS5vcHRpb25zID0gJC5leHRlbmQoe30sIE5hdmlnYXRpb24uRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XG5cblx0XHQvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xuXHRcdHRoaXMuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXG5cdCAqIEBwdWJsaWNcblx0ICogQHRvZG8gUmVuYW1lIGBzbGlkZUJ5YCB0byBgbmF2QnlgXG5cdCAqL1xuXHROYXZpZ2F0aW9uLkRlZmF1bHRzID0ge1xuXHRcdG5hdjogZmFsc2UsXG5cdFx0bmF2VGV4dDogW1xuXHRcdFx0JzxzcGFuIGFyaWEtbGFiZWw9XCInICsgJ1ByZXZpb3VzJyArICdcIj4mI3gyMDM5Ozwvc3Bhbj4nLFxuXHRcdFx0JzxzcGFuIGFyaWEtbGFiZWw9XCInICsgJ05leHQnICsgJ1wiPiYjeDIwM2E7PC9zcGFuPidcblx0XHRdLFxuXHRcdG5hdlNwZWVkOiBmYWxzZSxcblx0XHRuYXZFbGVtZW50OiAnYnV0dG9uIHR5cGU9XCJidXR0b25cIiByb2xlPVwicHJlc2VudGF0aW9uXCInLFxuXHRcdG5hdkNvbnRhaW5lcjogZmFsc2UsXG5cdFx0bmF2Q29udGFpbmVyQ2xhc3M6ICdvd2wtbmF2Jyxcblx0XHRuYXZDbGFzczogW1xuXHRcdFx0J293bC1wcmV2Jyxcblx0XHRcdCdvd2wtbmV4dCdcblx0XHRdLFxuXHRcdHNsaWRlQnk6IDEsXG5cdFx0ZG90Q2xhc3M6ICdvd2wtZG90Jyxcblx0XHRkb3RzQ2xhc3M6ICdvd2wtZG90cycsXG5cdFx0ZG90czogdHJ1ZSxcblx0XHRkb3RzRWFjaDogZmFsc2UsXG5cdFx0ZG90c0RhdGE6IGZhbHNlLFxuXHRcdGRvdHNTcGVlZDogZmFsc2UsXG5cdFx0ZG90c0NvbnRhaW5lcjogZmFsc2Vcblx0fTtcblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGxheW91dCBvZiB0aGUgcGx1Z2luIGFuZCBleHRlbmRzIHRoZSBjYXJvdXNlbC5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0TmF2aWdhdGlvbi5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvdmVycmlkZSxcblx0XHRcdHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncztcblxuXHRcdC8vIGNyZWF0ZSBET00gc3RydWN0dXJlIGZvciByZWxhdGl2ZSBuYXZpZ2F0aW9uXG5cdFx0dGhpcy5fY29udHJvbHMuJHJlbGF0aXZlID0gKHNldHRpbmdzLm5hdkNvbnRhaW5lciA/ICQoc2V0dGluZ3MubmF2Q29udGFpbmVyKVxuXHRcdFx0OiAkKCc8ZGl2PicpLmFkZENsYXNzKHNldHRpbmdzLm5hdkNvbnRhaW5lckNsYXNzKS5hcHBlbmRUbyh0aGlzLiRlbGVtZW50KSkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cblx0XHR0aGlzLl9jb250cm9scy4kcHJldmlvdXMgPSAkKCc8JyArIHNldHRpbmdzLm5hdkVsZW1lbnQgKyAnPicpXG5cdFx0XHQuYWRkQ2xhc3Moc2V0dGluZ3MubmF2Q2xhc3NbMF0pXG5cdFx0XHQuaHRtbChzZXR0aW5ncy5uYXZUZXh0WzBdKVxuXHRcdFx0LnByZXBlbmRUbyh0aGlzLl9jb250cm9scy4kcmVsYXRpdmUpXG5cdFx0XHQub24oJ2NsaWNrJywgJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdHRoaXMucHJldihzZXR0aW5ncy5uYXZTcGVlZCk7XG5cdFx0XHR9LCB0aGlzKSk7XG5cdFx0dGhpcy5fY29udHJvbHMuJG5leHQgPSAkKCc8JyArIHNldHRpbmdzLm5hdkVsZW1lbnQgKyAnPicpXG5cdFx0XHQuYWRkQ2xhc3Moc2V0dGluZ3MubmF2Q2xhc3NbMV0pXG5cdFx0XHQuaHRtbChzZXR0aW5ncy5uYXZUZXh0WzFdKVxuXHRcdFx0LmFwcGVuZFRvKHRoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZSlcblx0XHRcdC5vbignY2xpY2snLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0dGhpcy5uZXh0KHNldHRpbmdzLm5hdlNwZWVkKTtcblx0XHRcdH0sIHRoaXMpKTtcblxuXHRcdC8vIGNyZWF0ZSBET00gc3RydWN0dXJlIGZvciBhYnNvbHV0ZSBuYXZpZ2F0aW9uXG5cdFx0aWYgKCFzZXR0aW5ncy5kb3RzRGF0YSkge1xuXHRcdFx0dGhpcy5fdGVtcGxhdGVzID0gWyAkKCc8YnV0dG9uIHJvbGU9XCJidXR0b25cIj4nKVxuXHRcdFx0XHQuYWRkQ2xhc3Moc2V0dGluZ3MuZG90Q2xhc3MpXG5cdFx0XHRcdC5hcHBlbmQoJCgnPHNwYW4+JykpXG5cdFx0XHRcdC5wcm9wKCdvdXRlckhUTUwnKSBdO1xuXHRcdH1cblxuXHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZSA9IChzZXR0aW5ncy5kb3RzQ29udGFpbmVyID8gJChzZXR0aW5ncy5kb3RzQ29udGFpbmVyKVxuXHRcdFx0OiAkKCc8ZGl2PicpLmFkZENsYXNzKHNldHRpbmdzLmRvdHNDbGFzcykuYXBwZW5kVG8odGhpcy4kZWxlbWVudCkpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuXG5cdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLm9uKCdjbGljaycsICdidXR0b24nLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBpbmRleCA9ICQoZS50YXJnZXQpLnBhcmVudCgpLmlzKHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZSlcblx0XHRcdFx0PyAkKGUudGFyZ2V0KS5pbmRleCgpIDogJChlLnRhcmdldCkucGFyZW50KCkuaW5kZXgoKTtcblxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHR0aGlzLnRvKGluZGV4LCBzZXR0aW5ncy5kb3RzU3BlZWQpO1xuXHRcdH0sIHRoaXMpKTtcblxuXHRcdC8qJGVsLm9uKCdmb2N1c2luJywgZnVuY3Rpb24oKSB7XG5cdFx0XHQkKGRvY3VtZW50KS5vZmYoXCIuY2Fyb3VzZWxcIik7XG5cblx0XHRcdCQoZG9jdW1lbnQpLm9uKCdrZXlkb3duLmNhcm91c2VsJywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZihlLmtleUNvZGUgPT0gMzcpIHtcblx0XHRcdFx0XHQkZWwudHJpZ2dlcigncHJldi5vd2wnKVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGUua2V5Q29kZSA9PSAzOSkge1xuXHRcdFx0XHRcdCRlbC50cmlnZ2VyKCduZXh0Lm93bCcpXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pOyovXG5cblx0XHQvLyBvdmVycmlkZSBwdWJsaWMgbWV0aG9kcyBvZiB0aGUgY2Fyb3VzZWxcblx0XHRmb3IgKG92ZXJyaWRlIGluIHRoaXMuX292ZXJyaWRlcykge1xuXHRcdFx0dGhpcy5fY29yZVtvdmVycmlkZV0gPSAkLnByb3h5KHRoaXNbb3ZlcnJpZGVdLCB0aGlzKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaGFuZGxlciwgY29udHJvbCwgcHJvcGVydHksIG92ZXJyaWRlLCBzZXR0aW5ncztcblx0XHRzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3M7XG5cblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5faGFuZGxlcnMpIHtcblx0XHRcdHRoaXMuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcblx0XHR9XG5cdFx0Zm9yIChjb250cm9sIGluIHRoaXMuX2NvbnRyb2xzKSB7XG5cdFx0XHRpZiAoY29udHJvbCA9PT0gJyRyZWxhdGl2ZScgJiYgc2V0dGluZ3MubmF2Q29udGFpbmVyKSB7XG5cdFx0XHRcdHRoaXMuX2NvbnRyb2xzW2NvbnRyb2xdLmh0bWwoJycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fY29udHJvbHNbY29udHJvbF0ucmVtb3ZlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvciAob3ZlcnJpZGUgaW4gdGhpcy5vdmVyaWRlcykge1xuXHRcdFx0dGhpcy5fY29yZVtvdmVycmlkZV0gPSB0aGlzLl9vdmVycmlkZXNbb3ZlcnJpZGVdO1xuXHRcdH1cblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGludGVybmFsIHN0YXRlLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaSwgaiwgayxcblx0XHRcdGxvd2VyID0gdGhpcy5fY29yZS5jbG9uZXMoKS5sZW5ndGggLyAyLFxuXHRcdFx0dXBwZXIgPSBsb3dlciArIHRoaXMuX2NvcmUuaXRlbXMoKS5sZW5ndGgsXG5cdFx0XHRtYXhpbXVtID0gdGhpcy5fY29yZS5tYXhpbXVtKHRydWUpLFxuXHRcdFx0c2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzLFxuXHRcdFx0c2l6ZSA9IHNldHRpbmdzLmNlbnRlciB8fCBzZXR0aW5ncy5hdXRvV2lkdGggfHwgc2V0dGluZ3MuZG90c0RhdGFcblx0XHRcdFx0PyAxIDogc2V0dGluZ3MuZG90c0VhY2ggfHwgc2V0dGluZ3MuaXRlbXM7XG5cblx0XHRpZiAoc2V0dGluZ3Muc2xpZGVCeSAhPT0gJ3BhZ2UnKSB7XG5cdFx0XHRzZXR0aW5ncy5zbGlkZUJ5ID0gTWF0aC5taW4oc2V0dGluZ3Muc2xpZGVCeSwgc2V0dGluZ3MuaXRlbXMpO1xuXHRcdH1cblxuXHRcdGlmIChzZXR0aW5ncy5kb3RzIHx8IHNldHRpbmdzLnNsaWRlQnkgPT0gJ3BhZ2UnKSB7XG5cdFx0XHR0aGlzLl9wYWdlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKGkgPSBsb3dlciwgaiA9IDAsIGsgPSAwOyBpIDwgdXBwZXI7IGkrKykge1xuXHRcdFx0XHRpZiAoaiA+PSBzaXplIHx8IGogPT09IDApIHtcblx0XHRcdFx0XHR0aGlzLl9wYWdlcy5wdXNoKHtcblx0XHRcdFx0XHRcdHN0YXJ0OiBNYXRoLm1pbihtYXhpbXVtLCBpIC0gbG93ZXIpLFxuXHRcdFx0XHRcdFx0ZW5kOiBpIC0gbG93ZXIgKyBzaXplIC0gMVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGlmIChNYXRoLm1pbihtYXhpbXVtLCBpIC0gbG93ZXIpID09PSBtYXhpbXVtKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aiA9IDAsICsraztcblx0XHRcdFx0fVxuXHRcdFx0XHRqICs9IHRoaXMuX2NvcmUubWVyZ2Vycyh0aGlzLl9jb3JlLnJlbGF0aXZlKGkpKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIERyYXdzIHRoZSB1c2VyIGludGVyZmFjZS5cblx0ICogQHRvZG8gVGhlIG9wdGlvbiBgZG90c0RhdGFgIHdvbnQgd29yay5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0TmF2aWdhdGlvbi5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkaWZmZXJlbmNlLFxuXHRcdFx0c2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzLFxuXHRcdFx0ZGlzYWJsZWQgPSB0aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoIDw9IHNldHRpbmdzLml0ZW1zLFxuXHRcdFx0aW5kZXggPSB0aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKSxcblx0XHRcdGxvb3AgPSBzZXR0aW5ncy5sb29wIHx8IHNldHRpbmdzLnJld2luZDtcblxuXHRcdHRoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZS50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCAhc2V0dGluZ3MubmF2IHx8IGRpc2FibGVkKTtcblxuXHRcdGlmIChzZXR0aW5ncy5uYXYpIHtcblx0XHRcdHRoaXMuX2NvbnRyb2xzLiRwcmV2aW91cy50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCAhbG9vcCAmJiBpbmRleCA8PSB0aGlzLl9jb3JlLm1pbmltdW0odHJ1ZSkpO1xuXHRcdFx0dGhpcy5fY29udHJvbHMuJG5leHQudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgIWxvb3AgJiYgaW5kZXggPj0gdGhpcy5fY29yZS5tYXhpbXVtKHRydWUpKTtcblx0XHR9XG5cblx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgIXNldHRpbmdzLmRvdHMgfHwgZGlzYWJsZWQpO1xuXG5cdFx0aWYgKHNldHRpbmdzLmRvdHMpIHtcblx0XHRcdGRpZmZlcmVuY2UgPSB0aGlzLl9wYWdlcy5sZW5ndGggLSB0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuY2hpbGRyZW4oKS5sZW5ndGg7XG5cblx0XHRcdGlmIChzZXR0aW5ncy5kb3RzRGF0YSAmJiBkaWZmZXJlbmNlICE9PSAwKSB7XG5cdFx0XHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5odG1sKHRoaXMuX3RlbXBsYXRlcy5qb2luKCcnKSk7XG5cdFx0XHR9IGVsc2UgaWYgKGRpZmZlcmVuY2UgPiAwKSB7XG5cdFx0XHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5hcHBlbmQobmV3IEFycmF5KGRpZmZlcmVuY2UgKyAxKS5qb2luKHRoaXMuX3RlbXBsYXRlc1swXSkpO1xuXHRcdFx0fSBlbHNlIGlmIChkaWZmZXJlbmNlIDwgMCkge1xuXHRcdFx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuY2hpbGRyZW4oKS5zbGljZShkaWZmZXJlbmNlKS5yZW1vdmUoKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdFx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuY2hpbGRyZW4oKS5lcSgkLmluQXJyYXkodGhpcy5jdXJyZW50KCksIHRoaXMuX3BhZ2VzKSkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogRXh0ZW5kcyBldmVudCBkYXRhLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IG9iamVjdCB3aGljaCBnZXRzIHRocm93bi5cblx0ICovXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLm9uVHJpZ2dlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncztcblxuXHRcdGV2ZW50LnBhZ2UgPSB7XG5cdFx0XHRpbmRleDogJC5pbkFycmF5KHRoaXMuY3VycmVudCgpLCB0aGlzLl9wYWdlcyksXG5cdFx0XHRjb3VudDogdGhpcy5fcGFnZXMubGVuZ3RoLFxuXHRcdFx0c2l6ZTogc2V0dGluZ3MgJiYgKHNldHRpbmdzLmNlbnRlciB8fCBzZXR0aW5ncy5hdXRvV2lkdGggfHwgc2V0dGluZ3MuZG90c0RhdGFcblx0XHRcdFx0PyAxIDogc2V0dGluZ3MuZG90c0VhY2ggfHwgc2V0dGluZ3MuaXRlbXMpXG5cdFx0fTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyB0aGUgY3VycmVudCBwYWdlIHBvc2l0aW9uIG9mIHRoZSBjYXJvdXNlbC5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxuXHQgKi9cblx0TmF2aWdhdGlvbi5wcm90b3R5cGUuY3VycmVudCA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjdXJyZW50ID0gdGhpcy5fY29yZS5yZWxhdGl2ZSh0aGlzLl9jb3JlLmN1cnJlbnQoKSk7XG5cdFx0cmV0dXJuICQuZ3JlcCh0aGlzLl9wYWdlcywgJC5wcm94eShmdW5jdGlvbihwYWdlLCBpbmRleCkge1xuXHRcdFx0cmV0dXJuIHBhZ2Uuc3RhcnQgPD0gY3VycmVudCAmJiBwYWdlLmVuZCA+PSBjdXJyZW50O1xuXHRcdH0sIHRoaXMpKS5wb3AoKTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyB0aGUgY3VycmVudCBzdWNjZXNvci9wcmVkZWNlc3NvciBwb3NpdGlvbi5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxuXHQgKi9cblx0TmF2aWdhdGlvbi5wcm90b3R5cGUuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbihzdWNjZXNzb3IpIHtcblx0XHR2YXIgcG9zaXRpb24sIGxlbmd0aCxcblx0XHRcdHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncztcblxuXHRcdGlmIChzZXR0aW5ncy5zbGlkZUJ5ID09ICdwYWdlJykge1xuXHRcdFx0cG9zaXRpb24gPSAkLmluQXJyYXkodGhpcy5jdXJyZW50KCksIHRoaXMuX3BhZ2VzKTtcblx0XHRcdGxlbmd0aCA9IHRoaXMuX3BhZ2VzLmxlbmd0aDtcblx0XHRcdHN1Y2Nlc3NvciA/ICsrcG9zaXRpb24gOiAtLXBvc2l0aW9uO1xuXHRcdFx0cG9zaXRpb24gPSB0aGlzLl9wYWdlc1soKHBvc2l0aW9uICUgbGVuZ3RoKSArIGxlbmd0aCkgJSBsZW5ndGhdLnN0YXJ0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwb3NpdGlvbiA9IHRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpO1xuXHRcdFx0bGVuZ3RoID0gdGhpcy5fY29yZS5pdGVtcygpLmxlbmd0aDtcblx0XHRcdHN1Y2Nlc3NvciA/IHBvc2l0aW9uICs9IHNldHRpbmdzLnNsaWRlQnkgOiBwb3NpdGlvbiAtPSBzZXR0aW5ncy5zbGlkZUJ5O1xuXHRcdH1cblxuXHRcdHJldHVybiBwb3NpdGlvbjtcblx0fTtcblxuXHQvKipcblx0ICogU2xpZGVzIHRvIHRoZSBuZXh0IGl0ZW0gb3IgcGFnZS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkPWZhbHNlXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXG5cdCAqL1xuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oc3BlZWQpIHtcblx0XHQkLnByb3h5KHRoaXMuX292ZXJyaWRlcy50bywgdGhpcy5fY29yZSkodGhpcy5nZXRQb3NpdGlvbih0cnVlKSwgc3BlZWQpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTbGlkZXMgdG8gdGhlIHByZXZpb3VzIGl0ZW0gb3IgcGFnZS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkPWZhbHNlXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXG5cdCAqL1xuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24oc3BlZWQpIHtcblx0XHQkLnByb3h5KHRoaXMuX292ZXJyaWRlcy50bywgdGhpcy5fY29yZSkodGhpcy5nZXRQb3NpdGlvbihmYWxzZSksIHNwZWVkKTtcblx0fTtcblxuXHQvKipcblx0ICogU2xpZGVzIHRvIHRoZSBzcGVjaWZpZWQgaXRlbSBvciBwYWdlLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgaXRlbSBvciBwYWdlLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW3N0YW5kYXJkPWZhbHNlXSAtIFdoZXRoZXIgdG8gdXNlIHRoZSBzdGFuZGFyZCBiZWhhdmlvdXIgb3Igbm90LlxuXHQgKi9cblx0TmF2aWdhdGlvbi5wcm90b3R5cGUudG8gPSBmdW5jdGlvbihwb3NpdGlvbiwgc3BlZWQsIHN0YW5kYXJkKSB7XG5cdFx0dmFyIGxlbmd0aDtcblxuXHRcdGlmICghc3RhbmRhcmQgJiYgdGhpcy5fcGFnZXMubGVuZ3RoKSB7XG5cdFx0XHRsZW5ndGggPSB0aGlzLl9wYWdlcy5sZW5ndGg7XG5cdFx0XHQkLnByb3h5KHRoaXMuX292ZXJyaWRlcy50bywgdGhpcy5fY29yZSkodGhpcy5fcGFnZXNbKChwb3NpdGlvbiAlIGxlbmd0aCkgKyBsZW5ndGgpICUgbGVuZ3RoXS5zdGFydCwgc3BlZWQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkLnByb3h5KHRoaXMuX292ZXJyaWRlcy50bywgdGhpcy5fY29yZSkocG9zaXRpb24sIHNwZWVkKTtcblx0XHR9XG5cdH07XG5cblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLk5hdmlnYXRpb24gPSBOYXZpZ2F0aW9uO1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG5cbi8qKlxuICogSGFzaCBQbHVnaW5cbiAqIEB2ZXJzaW9uIDIuMy40XG4gKiBAYXV0aG9yIEFydHVzIEtvbGFub3dza2lcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKi9cbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgaGFzaCBwbHVnaW4uXG5cdCAqIEBjbGFzcyBUaGUgSGFzaCBQbHVnaW5cblx0ICogQHBhcmFtIHtPd2x9IGNhcm91c2VsIC0gVGhlIE93bCBDYXJvdXNlbFxuXHQgKi9cblx0dmFyIEhhc2ggPSBmdW5jdGlvbihjYXJvdXNlbCkge1xuXHRcdC8qKlxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge093bH1cblx0XHQgKi9cblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XG5cblx0XHQvKipcblx0XHQgKiBIYXNoIGluZGV4IGZvciB0aGUgaXRlbXMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5faGFzaGVzID0ge307XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2Fyb3VzZWwgZWxlbWVudC5cblx0XHQgKiBAdHlwZSB7alF1ZXJ5fVxuXHRcdCAqL1xuXHRcdHRoaXMuJGVsZW1lbnQgPSB0aGlzLl9jb3JlLiRlbGVtZW50O1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsIGV2ZW50IGhhbmRsZXJzLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5zdGFydFBvc2l0aW9uID09PSAnVVJMSGFzaCcpIHtcblx0XHRcdFx0XHQkKHdpbmRvdykudHJpZ2dlcignaGFzaGNoYW5nZS5vd2wubmF2aWdhdGlvbicpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdwcmVwYXJlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlKSB7XG5cdFx0XHRcdFx0dmFyIGhhc2ggPSAkKGUuY29udGVudCkuZmluZCgnW2RhdGEtaGFzaF0nKS5hZGRCYWNrKCdbZGF0YS1oYXNoXScpLmF0dHIoJ2RhdGEtaGFzaCcpO1xuXG5cdFx0XHRcdFx0aWYgKCFoYXNoKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5faGFzaGVzW2hhc2hdID0gZS5jb250ZW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgZS5wcm9wZXJ0eS5uYW1lID09PSAncG9zaXRpb24nKSB7XG5cdFx0XHRcdFx0dmFyIGN1cnJlbnQgPSB0aGlzLl9jb3JlLml0ZW1zKHRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpKSxcblx0XHRcdFx0XHRcdGhhc2ggPSAkLm1hcCh0aGlzLl9oYXNoZXMsIGZ1bmN0aW9uKGl0ZW0sIGhhc2gpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGl0ZW0gPT09IGN1cnJlbnQgPyBoYXNoIDogbnVsbDtcblx0XHRcdFx0XHRcdH0pLmpvaW4oKTtcblxuXHRcdFx0XHRcdGlmICghaGFzaCB8fCB3aW5kb3cubG9jYXRpb24uaGFzaC5zbGljZSgxKSA9PT0gaGFzaCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcylcblx0XHR9O1xuXG5cdFx0Ly8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBIYXNoLkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xuXG5cdFx0Ly8gcmVnaXN0ZXIgdGhlIGV2ZW50IGhhbmRsZXJzXG5cdFx0dGhpcy4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XG5cblx0XHQvLyByZWdpc3RlciBldmVudCBsaXN0ZW5lciBmb3IgaGFzaCBuYXZpZ2F0aW9uXG5cdFx0JCh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlLm93bC5uYXZpZ2F0aW9uJywgJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKSxcblx0XHRcdFx0aXRlbXMgPSB0aGlzLl9jb3JlLiRzdGFnZS5jaGlsZHJlbigpLFxuXHRcdFx0XHRwb3NpdGlvbiA9IHRoaXMuX2hhc2hlc1toYXNoXSAmJiBpdGVtcy5pbmRleCh0aGlzLl9oYXNoZXNbaGFzaF0pO1xuXG5cdFx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbiA9PT0gdGhpcy5fY29yZS5jdXJyZW50KCkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9jb3JlLnRvKHRoaXMuX2NvcmUucmVsYXRpdmUocG9zaXRpb24pLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0fSwgdGhpcykpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdEhhc2guRGVmYXVsdHMgPSB7XG5cdFx0VVJMaGFzaExpc3RlbmVyOiBmYWxzZVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRIYXNoLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xuXG5cdFx0JCh3aW5kb3cpLm9mZignaGFzaGNoYW5nZS5vd2wubmF2aWdhdGlvbicpO1xuXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XG5cdFx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XG5cdFx0fVxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xuXHRcdH1cblx0fTtcblxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuSGFzaCA9IEhhc2g7XG5cbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcblxuLyoqXG4gKiBTdXBwb3J0IFBsdWdpblxuICpcbiAqIEB2ZXJzaW9uIDIuMy40XG4gKiBAYXV0aG9yIFZpdmlkIFBsYW5ldCBTb2Z0d2FyZSBHbWJIXG4gKiBAYXV0aG9yIEFydHVzIEtvbGFub3dza2lcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKi9cbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cblx0dmFyIHN0eWxlID0gJCgnPHN1cHBvcnQ+JykuZ2V0KDApLnN0eWxlLFxuXHRcdHByZWZpeGVzID0gJ1dlYmtpdCBNb3ogTyBtcycuc3BsaXQoJyAnKSxcblx0XHRldmVudHMgPSB7XG5cdFx0XHR0cmFuc2l0aW9uOiB7XG5cdFx0XHRcdGVuZDoge1xuXHRcdFx0XHRcdFdlYmtpdFRyYW5zaXRpb246ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcblx0XHRcdFx0XHRNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG5cdFx0XHRcdFx0T1RyYW5zaXRpb246ICdvVHJhbnNpdGlvbkVuZCcsXG5cdFx0XHRcdFx0dHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRhbmltYXRpb246IHtcblx0XHRcdFx0ZW5kOiB7XG5cdFx0XHRcdFx0V2Via2l0QW5pbWF0aW9uOiAnd2Via2l0QW5pbWF0aW9uRW5kJyxcblx0XHRcdFx0XHRNb3pBbmltYXRpb246ICdhbmltYXRpb25lbmQnLFxuXHRcdFx0XHRcdE9BbmltYXRpb246ICdvQW5pbWF0aW9uRW5kJyxcblx0XHRcdFx0XHRhbmltYXRpb246ICdhbmltYXRpb25lbmQnXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdHRlc3RzID0ge1xuXHRcdFx0Y3NzdHJhbnNmb3JtczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIXRlc3QoJ3RyYW5zZm9ybScpO1xuXHRcdFx0fSxcblx0XHRcdGNzc3RyYW5zZm9ybXMzZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIXRlc3QoJ3BlcnNwZWN0aXZlJyk7XG5cdFx0XHR9LFxuXHRcdFx0Y3NzdHJhbnNpdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISF0ZXN0KCd0cmFuc2l0aW9uJyk7XG5cdFx0XHR9LFxuXHRcdFx0Y3NzYW5pbWF0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIXRlc3QoJ2FuaW1hdGlvbicpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0ZnVuY3Rpb24gdGVzdChwcm9wZXJ0eSwgcHJlZml4ZWQpIHtcblx0XHR2YXIgcmVzdWx0ID0gZmFsc2UsXG5cdFx0XHR1cHBlciA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cblx0XHQkLmVhY2goKHByb3BlcnR5ICsgJyAnICsgcHJlZml4ZXMuam9pbih1cHBlciArICcgJykgKyB1cHBlcikuc3BsaXQoJyAnKSwgZnVuY3Rpb24oaSwgcHJvcGVydHkpIHtcblx0XHRcdGlmIChzdHlsZVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRyZXN1bHQgPSBwcmVmaXhlZCA/IHByb3BlcnR5IDogdHJ1ZTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdGZ1bmN0aW9uIHByZWZpeGVkKHByb3BlcnR5KSB7XG5cdFx0cmV0dXJuIHRlc3QocHJvcGVydHksIHRydWUpO1xuXHR9XG5cblx0aWYgKHRlc3RzLmNzc3RyYW5zaXRpb25zKCkpIHtcblx0XHQvKiBqc2hpbnQgLVcwNTMgKi9cblx0XHQkLnN1cHBvcnQudHJhbnNpdGlvbiA9IG5ldyBTdHJpbmcocHJlZml4ZWQoJ3RyYW5zaXRpb24nKSlcblx0XHQkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQgPSBldmVudHMudHJhbnNpdGlvbi5lbmRbICQuc3VwcG9ydC50cmFuc2l0aW9uIF07XG5cdH1cblxuXHRpZiAodGVzdHMuY3NzYW5pbWF0aW9ucygpKSB7XG5cdFx0LyoganNoaW50IC1XMDUzICovXG5cdFx0JC5zdXBwb3J0LmFuaW1hdGlvbiA9IG5ldyBTdHJpbmcocHJlZml4ZWQoJ2FuaW1hdGlvbicpKVxuXHRcdCQuc3VwcG9ydC5hbmltYXRpb24uZW5kID0gZXZlbnRzLmFuaW1hdGlvbi5lbmRbICQuc3VwcG9ydC5hbmltYXRpb24gXTtcblx0fVxuXG5cdGlmICh0ZXN0cy5jc3N0cmFuc2Zvcm1zKCkpIHtcblx0XHQvKiBqc2hpbnQgLVcwNTMgKi9cblx0XHQkLnN1cHBvcnQudHJhbnNmb3JtID0gbmV3IFN0cmluZyhwcmVmaXhlZCgndHJhbnNmb3JtJykpO1xuXHRcdCQuc3VwcG9ydC50cmFuc2Zvcm0zZCA9IHRlc3RzLmNzc3RyYW5zZm9ybXMzZCgpO1xuXHR9XG5cbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcbiIsIlxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgQ29udHJvbCwgSUNvbnRyb2xEZWZpbml0aW9uIH0gZnJvbSAnLi9Db250cm9sJztcblxuaW50ZXJmYWNlIElBY3Rpb25Db250cm9sRGVmaW5pdGlvbiBleHRlbmRzIElDb250cm9sRGVmaW5pdGlvblxue1xufVxuXG5hYnN0cmFjdCBjbGFzcyBBY3Rpb25Db250cm9sPFQgZXh0ZW5kcyBJQWN0aW9uQ29udHJvbERlZmluaXRpb24+IGV4dGVuZHMgQ29udHJvbDxUPlxue1xuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXQgRW5hYmxlZCgpOiBib29sZWFuO1xuXG4gICAgcHJvdGVjdGVkIEdldERlZmF1bHREZWZpbml0aW9uKCk6IFRcbiAgICB7XG4gICAgICAgIHJldHVybiBfLmV4dGVuZCh7fSwgc3VwZXIuR2V0RGVmYXVsdERlZmluaXRpb24oKSwge1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFxuICAgIHB1YmxpYyBhYnN0cmFjdCBFeGVjdXRlKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFjdGlvbkNvbnRyb2w7XG5leHBvcnQgeyBJQWN0aW9uQ29udHJvbERlZmluaXRpb24sIEFjdGlvbkNvbnRyb2wgfTsiLCJpbXBvcnQgeyBDb250YWluZXIsIElDb250YWluZXJEZWZpbml0aW9uIH0gZnJvbSAnLi9Db250YWluZXInO1xuXG5pbnRlcmZhY2UgSUFjdGlvbkNvbnRhaW5lckRlZmluaXRpb24gZXh0ZW5kcyBJQ29udGFpbmVyRGVmaW5pdGlvblxue1xufVxuXG5jbGFzcyBBY3Rpb25Db250YWluZXIgZXh0ZW5kcyBDb250YWluZXI8SUFjdGlvbkNvbnRhaW5lckRlZmluaXRpb24+XG57ICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCBBY3Rpb25Db250YWluZXI7XG5leHBvcnQgeyBJQWN0aW9uQ29udGFpbmVyRGVmaW5pdGlvbiwgQWN0aW9uQ29udGFpbmVyIH07IiwiXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEFjdGlvbkNvbnRyb2wsIHsgSUFjdGlvbkNvbnRyb2xEZWZpbml0aW9uIH0gZnJvbSAnLi9BY3Rpb24nO1xuXG5pbXBvcnQgeyBDb250cm9sLCBJQ29udHJvbERlZmluaXRpb24gfSBmcm9tICcuL0NvbnRyb2wnO1xuXG5pbnRlcmZhY2UgSUJ1dHRvbkNvbnRyb2xEZWZpbml0aW9uIGV4dGVuZHMgSUNvbnRyb2xEZWZpbml0aW9uXG57XG4gICAgVGl0bGU6IHN0cmluZyxcbiAgICBUeXBlPzogc3RyaW5nLFxuICAgIEFjdGlvbklkPzogc3RyaW5nLFxufVxuXG5jbGFzcyBCdXR0b25Db250cm9sIGV4dGVuZHMgQ29udHJvbDxJQnV0dG9uQ29udHJvbERlZmluaXRpb24+XG57XG4gICAgcHJpdmF0ZSBfdGVtcGxhdGU6c3RyaW5nOyBcblxuICAgIHByaXZhdGUgZ2V0IF9hY3Rpb24oKTpBY3Rpb25Db250cm9sPElBY3Rpb25Db250cm9sRGVmaW5pdGlvbj5cbiAgICB7XG4gICAgICAgIGlmKCEhISh0aGlzLl9vcHRpb25zLkFjdGlvbklkID8/ICcnKSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWlkPVwiJHt0aGlzLl9vcHRpb25zLkFjdGlvbklkfVwiXWApO1xuXG4gICAgICAgIGlmKCEhIWFjdGlvbilcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChhY3Rpb24gYXMgYW55KS5Db250cm9sIGFzIEFjdGlvbkNvbnRyb2w8SUFjdGlvbkNvbnRyb2xEZWZpbml0aW9uPjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IEVuYWJsZWQoKTogYm9vbGVhblxuICAgIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IHRoaXMuX2FjdGlvbjtcblxuICAgICAgICBpZighISFhY3Rpb24pXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY3Rpb24uRW5hYmxlZDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgR2V0RGVmYXVsdERlZmluaXRpb24oKTogSUJ1dHRvbkNvbnRyb2xEZWZpbml0aW9uXG4gICAge1xuICAgICAgICByZXR1cm4gXy5leHRlbmQoe30sIHN1cGVyLkdldERlZmF1bHREZWZpbml0aW9uKCksIHtcbiAgICAgICAgICAgIFRpdGxlOiBcInRleHRcIixcbiAgICAgICAgICAgIFBsYWNlSG9sZGVyOiBcInRleHRcIixcbiAgICAgICAgICAgIEFyaWFMYWJlbDogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBSZWFkT25seTogZmFsc2UsXG4gICAgICAgICAgICBUeXBlOiAnYnV0dG9uJ1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHVibGljIEJ1aWxkKCk6dm9pZFxuICAgIHtcbiAgICAgICAgdGhpcy5fdGVtcGxhdGUgPSBgPGJ1dHRvbiB0eXBlPVwiJHt0aGlzLl9vcHRpb25zLlR5cGUgPz8gJ2J1dHRvbid9XCIgY2xhc3M9XCJidG4gYnRuLWJsb2NrIGJ0bi1wcmltYXJ5XCI+JHt0aGlzLl9vcHRpb25zLlRpdGxlfTwvYnV0dG9uPmA7XG4gICAgfVxuXG4gICAgcHVibGljIFJlbmRlcih3cmFwcGVyOiBIVE1MRWxlbWVudCk6IHZvaWRcbiAgICB7XG4gICAgICAgIHN1cGVyLlJlbmRlcih3cmFwcGVyKTtcblxuICAgICAgICB0aGlzLl93cmFwcGVyLmlubmVySFRNTCA9IHRoaXMuX3RlbXBsYXRlO1xuICAgIH1cblxuICAgIHB1YmxpYyBCaW5kKCk6IHZvaWRcbiAgICB7XG4gICAgICAgIHZhciBidXR0b25FbGVtZW50ID0gdGhpcy5fd3JhcHBlci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdidG4nKVswXSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcblxuICAgICAgICBidXR0b25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgeCA9PlxuICAgICAgICB7XG4gICAgICAgICAgICB4LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB4LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICBpZighdGhpcy5FbmFibGVkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHRoaXMuX2FjdGlvbjtcblxuICAgICAgICAgICAgaWYoIWFjdGlvbilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFjdGlvbi5FeGVjdXRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uQ29udHJvbDtcbmV4cG9ydCB7IElCdXR0b25Db250cm9sRGVmaW5pdGlvbiwgQnV0dG9uQ29udHJvbCB9OyIsImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IENvbnRhaW5lciwgSUNvbnRhaW5lckRlZmluaXRpb24gfSBmcm9tICcuL0NvbnRhaW5lcic7XG5cbmludGVyZmFjZSBJQ29sdW1uQ29udGFpbmVyRGVmaW5pdGlvbiBleHRlbmRzIElDb250YWluZXJEZWZpbml0aW9uXG57XG4gICAgV2lkdGg6IG51bWJlcixcbiAgICBXaWR0aERlc2t0b3A/OiBudW1iZXIsXG59XG5cbmNsYXNzIENvbHVtbkNvbnRhaW5lciBleHRlbmRzIENvbnRhaW5lcjxJQ29sdW1uQ29udGFpbmVyRGVmaW5pdGlvbj5cbntcbiAgICBwcm90ZWN0ZWQgR2V0RGVmYXVsdERlZmluaXRpb24oKTogSUNvbHVtbkNvbnRhaW5lckRlZmluaXRpb25cbiAgICB7XG4gICAgICAgIHJldHVybiBfLmV4dGVuZCh7fSwgc3VwZXIuR2V0RGVmYXVsdERlZmluaXRpb24oKSwge1xuICAgICAgICAgICAgICAgIFdpZHRoOiAxMixcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgUmVuZGVyKHdyYXBwZXI6IEhUTUxFbGVtZW50KTogdm9pZFxuICAgIHtcbiAgICAgICAgc3VwZXIuUmVuZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHRoaXMuX3dyYXBwZXIuY2xhc3NMaXN0LmFkZChgY29sLSR7dGhpcy5fb3B0aW9ucy5XaWR0aH1gKTtcbiAgICAgICAgXG4gICAgICAgIGlmKCh0aGlzLl9vcHRpb25zLldpZHRoRGVza3RvcCA/PyAtMSkgPiAwKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl93cmFwcGVyLmNsYXNzTGlzdC5hZGQoYGNvbC1sZy0ke3RoaXMuX29wdGlvbnMuV2lkdGhEZXNrdG9wfWApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5Db250YWluZXI7XG5leHBvcnQgeyBJQ29sdW1uQ29udGFpbmVyRGVmaW5pdGlvbiwgQ29sdW1uQ29udGFpbmVyIH07IiwiaW1wb3J0IEd1aWQgZnJvbSAnLi9HdWlkJztcbmltcG9ydCB7IENvbnRyb2wsIElDb250cm9sRGVmaW5pdGlvbiB9IGZyb20gJy4vQ29udHJvbCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG50eXBlIEZ1bmM8VEFyZ3MgZXh0ZW5kcyBhbnlbXSwgVFJlc3VsdD4gPSAoLi4uYXJnczogVEFyZ3MpID0+IFRSZXN1bHQ7IFxudHlwZSBBY3Rpb248VEFyZ3MgZXh0ZW5kcyBhbnlbXT4gPSBGdW5jPFRBcmdzLCB1bmRlZmluZWQ+OyBcblxuaW50ZXJmYWNlIElDb250YWluZXJEZWZpbml0aW9uIGV4dGVuZHMgSUNvbnRyb2xEZWZpbml0aW9uXG57XG4gICAgQ2hpbGRyZW46IENvbnRyb2w8SUNvbnRyb2xEZWZpbml0aW9uPltdO1xufVxuXG5hYnN0cmFjdCBjbGFzcyBDb250YWluZXI8VCBleHRlbmRzIElDb250YWluZXJEZWZpbml0aW9uPiBleHRlbmRzIENvbnRyb2w8VD5cbntcbiAgICBwdWJsaWMgQnVpbGQoKTp2b2lkXG4gICAge1xuICAgICAgICB0aGlzLl9vcHRpb25zLkNoaWxkcmVuLmZvckVhY2goeCA9PiB4LkJ1aWxkKCkpO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgUmVuZGVyKHdyYXBwZXI6IEhUTUxFbGVtZW50KTogdm9pZFxuICAgIHtcbiAgICAgICAgc3VwZXIuUmVuZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHRoaXMuX29wdGlvbnMuQ2hpbGRyZW4uZm9yRWFjaCh4ID0+IHguUmVuZGVyKHRoaXMuX3dyYXBwZXIpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgQmluZCgpOiB2b2lkXG4gICAge1xuICAgICAgICB0aGlzLl9vcHRpb25zLkNoaWxkcmVuLmZvckVhY2goeCA9PiB4LkJpbmQoKSk7XG4gICAgfVxuXG4gICAgcHVibGljIEZpbmRDb250cm9sKHByZWRpY2F0ZTogRnVuYzxbQ29udHJvbDxJQ29udHJvbERlZmluaXRpb24+XSwgYm9vbGVhbj4pOiBDb250cm9sPElDb250cm9sRGVmaW5pdGlvbj5cbiAgICB7XG4gICAgICAgIGlmKHByZWRpY2F0ZSh0aGlzKSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzdWx0ID0gXy5maW5kKHRoaXMuX29wdGlvbnMuQ2hpbGRyZW4sIHggPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmKHByZWRpY2F0ZSh4KSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBpZighIXJlc3VsdClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcih2YXIgY2hpbGQgaW4gdGhpcy5fb3B0aW9ucy5DaGlsZHJlbilcbiAgICAgICAge1xuICAgICAgICAgICAgaWYoISgoY2hpbGQgYXMgYW55KS5GaW5kQ29udHJvbCA9PT0gJ2Z1bmN0aW9uJykpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc3VsdCA9IChjaGlsZCBhcyBhbnkpLkZpbmRDb250cm9sKHByZWRpY2F0ZSk7XG5cbiAgICAgICAgICAgIGlmKCEhcmVzdWx0KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGFpbmVyO1xuZXhwb3J0IHsgQ29udGFpbmVyLCBJQ29udGFpbmVyRGVmaW5pdGlvbiB9OyIsImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCBHdWlkIGZyb20gJy4vR3VpZCc7XG5pbXBvcnQgeyBEYXRhQ29udGV4dCB9IGZyb20gJy4vRGF0YUNvbnRleHQnO1xuXG5pbnRlcmZhY2UgSUNvbnRyb2xEZWZpbml0aW9uXG57XG4gICAgSWQ6IHN0cmluZyxcbiAgICBFbGVtZW50VHlwZT86IHN0cmluZyxcbiAgICBDc3NDbGFzc2VzPzogc3RyaW5nW10sXG59XG5cbmNsYXNzIENvbnRyb2w8VCBleHRlbmRzIElDb250cm9sRGVmaW5pdGlvbj5cbntcbiAgICBwcm90ZWN0ZWQgX29wdGlvbnM6VDtcbiAgICBwcm90ZWN0ZWQgX3dyYXBwZXI6IEhUTUxFbGVtZW50OyBcbiAgICBwcm90ZWN0ZWQgX2RhdGFDb250ZXh0OiBEYXRhQ29udGV4dDtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFQsIGRhdGFDb250ZXh0OiBEYXRhQ29udGV4dClcbiAgICB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfLmV4dGVuZCh7fSwgdGhpcy5HZXREZWZhdWx0RGVmaW5pdGlvbigpLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fZGF0YUNvbnRleHQgPSBkYXRhQ29udGV4dDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgR2V0RGVmYXVsdERlZmluaXRpb24oKTogVFxuICAgIHtcbiAgICAgICAgcmV0dXJuIF8uZXh0ZW5kKHt9LHtcbiAgICAgICAgICAgIElkOiBHdWlkLk5ld0d1aWQoKSxcbiAgICAgICAgICAgIEVsZW1lbnRUeXBlOiAnZGl2J1xuICAgICAgICB9KSBhcyBUO1xuICAgIH07XG5cbiAgICBwdWJsaWMgQnVpbGQoKTogdm9pZFxuICAgIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgUmVuZGVyKHdyYXBwZXI6IEhUTUxFbGVtZW50KTogdm9pZFxuICAgIHtcbiAgICAgICAgdGhpcy5fd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy5fb3B0aW9ucy5FbGVtZW50VHlwZSk7XG4gICAgICAgIHRoaXMuX3dyYXBwZXIuc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgdGhpcy5fb3B0aW9ucy5JZCk7XG4gICAgICAgICh0aGlzLl93cmFwcGVyIGFzIGFueSkuQ29udHJvbCA9IHRoaXM7XG4gICAgICAgIFxuICAgICAgICAodGhpcy5fb3B0aW9ucy5Dc3NDbGFzc2VzID8/IFtdKS5mb3JFYWNoKHggPT4gdGhpcy5fd3JhcHBlci5jbGFzc0xpc3QuYWRkKHgpKTtcblxuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuX3dyYXBwZXIpO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgQmluZCgpOiB2b2lkXG4gICAge1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQ29udHJvbCwgSUNvbnRyb2xEZWZpbml0aW9uIH07IiwiaW1wb3J0IERhdGFTb3VyY2UgZnJvbSAnLi9EYXRhU291cmNlJztcblxuZXhwb3J0IGNsYXNzIERhdGFDb250ZXh0IFxue1xuICAgIHByaXZhdGUgX2RhdGFTb3VyY2VzOiBNYXA8c3RyaW5nLCBEYXRhU291cmNlPjtcblxuICAgIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIHRoaXMuX2RhdGFTb3VyY2VzID0gbmV3IE1hcDxzdHJpbmcsIERhdGFTb3VyY2U+KCk7XG4gICAgfVxuXG4gICAgcHVibGljIEFkZERhdGFTb3VyY2UoZGF0YVNvdXJjZTogRGF0YVNvdXJjZSk6IHZvaWRcbiAgICB7XG4gICAgICAgIGlmICh0aGlzLl9kYXRhU291cmNlcy5oYXMoZGF0YVNvdXJjZS5OYW1lKSkgXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQW4gaXRlbSBoYXMgYWxyZWFkeSBiZSBhZGRlZCB0byB0aGUgY29sbGVjdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZGF0YVNvdXJjZXMuc2V0KGRhdGFTb3VyY2UuTmFtZSwgZGF0YVNvdXJjZSk7XG4gICAgfVxuXG4gICAgcHVibGljIEdldChkYXRhU291cmNlTmFtZTogc3RyaW5nKVxuICAgIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhU291cmNlcy5oYXMoZGF0YVNvdXJjZU5hbWUpKSBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhU291cmNlIG5vdCBmb3VuZCBpbiB0aGUgYmFja2luZyBzdG9yZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhU291cmNlcy5nZXQoZGF0YVNvdXJjZU5hbWUpO1xuICAgIH1cbn0iLCJpbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgT2JzZXJ2YWJsZSBmcm9tIFwiLi9PYnNlcnZhYmxlXCI7XG5cbmNsYXNzIERhdGFTb3VyY2VcbntcbiAgICBwcml2YXRlIF9fZGF0YTogT2JzZXJ2YWJsZTtcbiAgICBwcml2YXRlIF9fbmFtZTogc3RyaW5nO1xuXG4gICAgcHVibGljIGdldCBEYXRhKCk6IEFycmF5PE9ic2VydmFibGU+XG4gICAge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIFxuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLl9fZGF0YSkuZm9yRWFjaChwcm9wZXJ0eU5hbWUgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX19kYXRhW3Byb3BlcnR5TmFtZV07XG5cbiAgICAgICAgICAgIGlmKHZhbHVlIGluc3RhbmNlb2YgT2JzZXJ2YWJsZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBOYW1lKCk6IHN0cmluZ1xuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19uYW1lLnNsaWNlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBIYXNDaGFuZ2VzKCk6IGJvb2xlYW5cbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZGF0YS5IYXNDaGFuZ2VzO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgZGF0YTogQXJyYXk8YW55PilcbiAgICB7XG4gICAgICAgIHRoaXMuX19uYW1lID0gbmFtZTtcblxuICAgICAgICBpZighKGRhdGEgaW5zdGFuY2VvZiBBcnJheSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBPcGVyYXRpb24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX19kYXRhID0gbmV3IE9ic2VydmFibGUoZGF0YSk7XG4gICAgfVxuXG4gICAgcHVibGljIERpc2NhcmRDaGFuZ2VzKCk6IHZvaWRcbiAgICB7XG4gICAgICAgIHRoaXMuX19kYXRhLkRpc2NhcmRDaGFuZ2VzKCk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFTb3VyY2U7IiwiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgQ29udGFpbmVyLCBJQ29udGFpbmVyRGVmaW5pdGlvbiB9IGZyb20gJy4vQ29udGFpbmVyJztcblxuaW50ZXJmYWNlIElGb3JtQ29udGFpbmVyRGVmaW5pdGlvbiBleHRlbmRzIElDb250YWluZXJEZWZpbml0aW9uXG57XG59XG5cbmNsYXNzIEZvcm1Db250YWluZXIgZXh0ZW5kcyBDb250YWluZXI8SUZvcm1Db250YWluZXJEZWZpbml0aW9uPlxue1xuICAgIHByaXZhdGUgX3RlbXBsYXRlOnN0cmluZztcbiAgICBcbiAgICBwcml2YXRlIGdldCBfZm9ybVdyYXBwZXIoKTogSFRNTEZvcm1FbGVtZW50XG4gICAge1xuICAgICAgICByZXR1cm4gdGhpcy5fd3JhcHBlciBhcyBIVE1MRm9ybUVsZW1lbnQ7XG4gICAgfSBcblxuICAgIHByb3RlY3RlZCBHZXREZWZhdWx0RGVmaW5pdGlvbigpOiBJRm9ybUNvbnRhaW5lckRlZmluaXRpb25cbiAgICB7XG4gICAgICAgIHJldHVybiBfLmV4dGVuZCh7fSwgc3VwZXIuR2V0RGVmYXVsdERlZmluaXRpb24oKSwge1xuICAgICAgICAgICAgRWxlbWVudFR5cGU6ICdmb3JtJyxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBSZW5kZXIod3JhcHBlcjogSFRNTEVsZW1lbnQpOiB2b2lkXG4gICAge1xuICAgICAgICBzdXBlci5SZW5kZXIod3JhcHBlcik7XG5cbiAgICAgICAgdGhpcy5fZm9ybVdyYXBwZXIuYWN0aW9uID0gJ2luZGV4LTIuaHRtbCc7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udGFpbmVyO1xuZXhwb3J0IHsgSUZvcm1Db250YWluZXJEZWZpbml0aW9uLCBGb3JtQ29udGFpbmVyIH07IiwiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgQWN0aW9uQ29udHJvbCwgSUFjdGlvbkNvbnRyb2xEZWZpbml0aW9uIH0gZnJvbSAnLi9BY3Rpb24nO1xuaW1wb3J0IEZvcm1Db250YWluZXIsIHsgSUZvcm1Db250YWluZXJEZWZpbml0aW9uIH0gZnJvbSAnLi9Gb3JtQ29udGFpbmVyJztcbmltcG9ydCBIdG1sIGZyb20gJy4vSHRtbCc7XG5cbmludGVyZmFjZSBJRm9ybVN1Ym1pdEFjdGlvbkNvbnRyb2xEZWZpbml0aW9uIGV4dGVuZHMgSUFjdGlvbkNvbnRyb2xEZWZpbml0aW9uXG57XG4gICAgRm9ybUlkPzogc3RyaW5nO1xufVxuXG5jbGFzcyBGb3JtU3VibWl0QWN0aW9uQ29udHJvbCBleHRlbmRzIEFjdGlvbkNvbnRyb2w8SUZvcm1TdWJtaXRBY3Rpb25Db250cm9sRGVmaW5pdGlvbj5cbntcbiAgICBwdWJsaWMgZ2V0IEVuYWJsZWQoKTogYm9vbGVhblxuICAgIHtcbiAgICAgICAgaWYoISEhKHRoaXMuX29wdGlvbnMuRm9ybUlkID8/ICcnKSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1pZD1cIiR7dGhpcy5fb3B0aW9ucy5Gb3JtSWR9XCJdYCkgYXMgSFRNTEZvcm1FbGVtZW50O1xuXG4gICAgICAgIHJldHVybiAhIWZvcm07XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIEdldERlZmF1bHREZWZpbml0aW9uKCk6IElGb3JtU3VibWl0QWN0aW9uQ29udHJvbERlZmluaXRpb25cbiAgICB7XG4gICAgICAgIHJldHVybiBfLmV4dGVuZCh7fSwgc3VwZXIuR2V0RGVmYXVsdERlZmluaXRpb24oKSwge1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHVibGljIEV4ZWN1dGUoKTogdm9pZFxuICAgIHtcbiAgICAgICAgaWYoISEhKHRoaXMuX29wdGlvbnMuRm9ybUlkID8/ICcnKSlcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1pZD1cIiR7dGhpcy5fb3B0aW9ucy5Gb3JtSWR9XCJdYCkgYXMgSFRNTEZvcm1FbGVtZW50O1xuXG4gICAgICAgIGlmKCEhIWZvcm0pXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm0uc3VibWl0KCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGb3JtU3VibWl0QWN0aW9uQ29udHJvbDtcbmV4cG9ydCB7IElGb3JtU3VibWl0QWN0aW9uQ29udHJvbERlZmluaXRpb24sIEZvcm1TdWJtaXRBY3Rpb25Db250cm9sIH07IiwiY2xhc3MgR3VpZCBcbntcbiAgICBzdGF0aWMgTmV3R3VpZCgpOiBzdHJpbmdcbiAgICB7XG4gICAgICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIHggPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcbiAgICAgICAgICAgIHZhciB2ID0geCA9PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR3VpZDsiLCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jbGFzcyBPYnNlcnZhYmxlXG57XG4gICAgcHJpdmF0ZSBfX2ludGVybmFsT2JqZWN0OiBPYmplY3QgfCBBcnJheTxhbnk+O1xuICAgIHByaXZhdGUgX19vcmlnaW5hbFZhbHVlczogT2JqZWN0IHwgQXJyYXk8YW55PjtcbiAgICBwcml2YXRlIF9fY3VycmVudFZhbHVlczogT2JqZWN0IHwgQXJyYXk8YW55PjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihvYmo6IE9iamVjdCB8IEFycmF5PGFueT4pXG4gICAge1xuICAgICAgICB0aGlzLl9faW50ZXJuYWxPYmplY3QgPSBvYmo7XG4gICAgICAgIFxuICAgICAgICBpZihvYmogaW5zdGFuY2VvZiBBcnJheSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fX29yaWdpbmFsVmFsdWVzID0gXy5leHRlbmQoW10sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSkpO1xuICAgICAgICAgICAgdGhpcy5fX2N1cnJlbnRWYWx1ZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBPYmplY3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX19vcmlnaW5hbFZhbHVlcyA9IF8uZXh0ZW5kKHt9LCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpKTtcbiAgICAgICAgICAgIHRoaXMuX19jdXJyZW50VmFsdWVzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgT3BlcmF0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX19pbnRlcm5hbE9iamVjdCkuZm9yRWFjaCh4ID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCB4LCBcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkdldFByb3BlcnR5KHgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuU2V0UHJvcGVydHkoeCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLlNldFByb3BlcnR5KHgsIHRoaXMuX19pbnRlcm5hbE9iamVjdFt4XSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgR2V0UHJvcGVydHkocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBhbnlcbiAgICB7XG4gICAgICAgIGlmKCEhIV8uc29tZShPYmplY3Qua2V5cyh0aGlzLl9faW50ZXJuYWxPYmplY3QpLCB4ID0+IHggPT09IHByb3BlcnR5TmFtZSkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwcm9wZXJ0eSBuYW1lICR7cHJvcGVydHlOYW1lfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX19jdXJyZW50VmFsdWVzW3Byb3BlcnR5TmFtZV07XG4gICAgfVxuXG4gICAgcHVibGljIFNldFByb3BlcnR5KHByb3BlcnR5TmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZFxuICAgIHtcbiAgICAgICAgaWYoISEhXy5zb21lKE9iamVjdC5rZXlzKHRoaXMuX19pbnRlcm5hbE9iamVjdCksIHggPT4geCA9PT0gcHJvcGVydHlOYW1lKSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHByb3BlcnR5IG5hbWUgJHtwcm9wZXJ0eU5hbWV9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZih2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9fY3VycmVudFZhbHVlc1twcm9wZXJ0eU5hbWVdID0gbmV3IE9ic2VydmFibGUodmFsdWUpO1xuXG4gICAgICAgICAgICB0aGlzLl9faW50ZXJuYWxPYmplY3RbcHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZih2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fX2N1cnJlbnRWYWx1ZXNbcHJvcGVydHlOYW1lXSA9IG5ldyBPYnNlcnZhYmxlKHZhbHVlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5fX2ludGVybmFsT2JqZWN0W3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fX2ludGVybmFsT2JqZWN0W3Byb3BlcnR5TmFtZV0gPSB0aGlzLl9fY3VycmVudFZhbHVlc1twcm9wZXJ0eU5hbWVdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBIYXNDaGFuZ2VzKCk6IGJvb2xlYW5cbiAgICB7XG4gICAgICAgIHJldHVybiBfLnNvbWUoT2JqZWN0LmtleXModGhpcy5fX2ludGVybmFsT2JqZWN0KSwgeCA9PlxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gdGhpcy5fX2N1cnJlbnRWYWx1ZXNbeF07XG5cbiAgICAgICAgICAgIGlmKGN1cnJlbnRWYWx1ZSBpbnN0YW5jZW9mIE9ic2VydmFibGUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZS5IYXNDaGFuZ2VzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlICE9PSB0aGlzLl9fb3JpZ2luYWxWYWx1ZXNbeF1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIERpc2NhcmRDaGFuZ2VzKCk6IHZvaWRcbiAgICB7XG4gICAgICAgIGlmKCF0aGlzLkhhc0NoYW5nZXMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX19pbnRlcm5hbE9iamVjdCkuZm9yRWFjaCh4ID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSB0aGlzLl9fY3VycmVudFZhbHVlc1t4XTtcblxuICAgICAgICAgICAgaWYoY3VycmVudFZhbHVlIGluc3RhbmNlb2YgT2JzZXJ2YWJsZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZihjdXJyZW50VmFsdWUuSGFzQ2hhbmdlcylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZS5EaXNjYXJkQ2hhbmdlcygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYodGhpcy5fX2N1cnJlbnRWYWx1ZXNbeF0gIT09IHRoaXMuX19vcmlnaW5hbFZhbHVlc1t4XSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLlNldFByb3BlcnR5KHgsIHRoaXMuX19vcmlnaW5hbFZhbHVlc1t4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgT2JzZXJ2YWJsZTsiLCJpbXBvcnQgeyBDb250YWluZXIsIElDb250YWluZXJEZWZpbml0aW9uIH0gZnJvbSAnLi9Db250YWluZXInO1xuXG5pbnRlcmZhY2UgSVJvd0NvbnRhaW5lckRlZmluaXRpb24gZXh0ZW5kcyBJQ29udGFpbmVyRGVmaW5pdGlvblxue1xufVxuXG5jbGFzcyBSb3dDb250YWluZXIgZXh0ZW5kcyBDb250YWluZXI8SVJvd0NvbnRhaW5lckRlZmluaXRpb24+XG57ICAgIFxuICAgIHB1YmxpYyBSZW5kZXIod3JhcHBlcjogSFRNTEVsZW1lbnQpOiB2b2lkXG4gICAge1xuICAgICAgICBzdXBlci5SZW5kZXIod3JhcHBlcik7XG5cbiAgICAgICAgdGhpcy5fd3JhcHBlci5jbGFzc0xpc3QuYWRkKCdyb3cnKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvd0NvbnRhaW5lcjtcbmV4cG9ydCB7IElSb3dDb250YWluZXJEZWZpbml0aW9uLCBSb3dDb250YWluZXIgfTsiLCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBDb250cm9sLCBJQ29udHJvbERlZmluaXRpb24gfSBmcm9tICcuL0NvbnRyb2wnO1xuaW1wb3J0IHsgSUxvb2t1cERhdGFTb3VyY2VPcHRpb25zICB9IGZyb20gJy4vRGF0YVNvdXJjZU9wdGlvbnMnO1xuXG5pbnRlcmZhY2UgSVNlbGVjdENvbnRyb2xEZWZpbml0aW9uIGV4dGVuZHMgSUNvbnRyb2xEZWZpbml0aW9uXG57XG4gICAgVGl0bGU6IHN0cmluZyxcbiAgICBBcmlhTGFiZWw6IHN0cmluZyxcbiAgICBQbGVhc2VTZWxlY3Q6IGJvb2xlYW4sXG4gICAgUmVxdWlyZWQ/OiBib29sZWFuLFxuICAgIExvb2t1cERhdGFTb3VyY2U6IElMb29rdXBEYXRhU291cmNlT3B0aW9uc1xufVxuXG5jbGFzcyBTZWxlY3RDb250cm9sIGV4dGVuZHMgQ29udHJvbDxJU2VsZWN0Q29udHJvbERlZmluaXRpb24+XG57XG4gICAgcHJpdmF0ZSBfdGVtcGxhdGU6c3RyaW5nOyBcblxuICAgIHByb3RlY3RlZCBHZXREZWZhdWx0RGVmaW5pdGlvbigpOiBJU2VsZWN0Q29udHJvbERlZmluaXRpb25cbiAgICB7XG4gICAgICAgIHJldHVybiBfLmV4dGVuZCh7fSwgc3VwZXIuR2V0RGVmYXVsdERlZmluaXRpb24oKSwge1xuICAgICAgICAgICAgVGl0bGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgQXJpYUxhYmVsOiBcInRleHRcIixcbiAgICAgICAgICAgIFBsZWFzZVNlbGVjdDogZmFsc2UsXG4gICAgICAgICAgICBSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBCdWlsZCgpOnZvaWRcbiAgICB7XG4gICAgICAgIHRoaXMuX3RlbXBsYXRlID0gYFxuPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwIG15LTNcIj5cbiAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIiBpZD1cIiR7dGhpcy5fb3B0aW9ucy5JZH0tYXRcIj4ke3RoaXMuX29wdGlvbnMuVGl0bGV9PC9zcGFuPlxuICAgIDxzZWxlY3QgY2xhc3M9XCJmb3JtLXNlbGVjdFwiIGFyaWEtbGFiZWw9XCIke3RoaXMuX29wdGlvbnMuQXJpYUxhYmVsfVwiXG4gICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCIke3RoaXMuX29wdGlvbnMuSWR9LWF0XCIgJHt0aGlzLl9vcHRpb25zLlJlcXVpcmVkID8/IGZhbHNlID8gJ3JlcXVpcmVkJzogJyd9PlxuICAgIDwvc2VsZWN0PlxuPC9kaXY+YDtcbiAgICB9XG5cbiAgICBwdWJsaWMgUmVuZGVyKHdyYXBwZXI6IEhUTUxFbGVtZW50KTogdm9pZFxuICAgIHtcbiAgICAgICAgc3VwZXIuUmVuZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHRoaXMuX3dyYXBwZXIuaW5uZXJIVE1MID0gdGhpcy5fdGVtcGxhdGU7XG4gICAgfVxuXG4gICAgcHVibGljIEJpbmQoKTogdm9pZFxuICAgIHtcbiAgICAgICAgdmFyIHNlbGVjdEVsZW1lbnQgPSB0aGlzLl93cmFwcGVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Zvcm0tc2VsZWN0JylbMF0gYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSBbXTtcbiAgICAgICAgXG4gICAgICAgIGlmKHRoaXMuX29wdGlvbnMuUGxlYXNlU2VsZWN0ID8/IGZhbHNlKVxuICAgICAgICB7XG4gICAgICAgICAgICBvcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIHRleHQ6ICfOoM6xz4HOsc66zrHOu8+OIM61z4DOr867zrXOvs61JyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRhdGFTb3VyY2UgPSB0aGlzLl9kYXRhQ29udGV4dC5HZXQodGhpcy5fb3B0aW9ucy5Mb29rdXBEYXRhU291cmNlLk5hbWUpO1xuXG4gICAgICAgIG9wdGlvbnMgPSBfLmNvbmNhdChbXSwgb3B0aW9ucywgXy5tYXAoZGF0YVNvdXJjZS5EYXRhLCAoeCwgaSkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgICAgIHRleHQ6IHguR2V0UHJvcGVydHkodGhpcy5fb3B0aW9ucy5Mb29rdXBEYXRhU291cmNlLlRleHRGaWVsZCksXG4gICAgICAgICAgICAgICAgdmFsdWU6IHguR2V0UHJvcGVydHkodGhpcy5fb3B0aW9ucy5Mb29rdXBEYXRhU291cmNlLlZhbHVlRmllbGQpLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIG9wdGlvbnMubWFwKCh4LCBpKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG5cbiAgICAgICAgICAgIG9wdGlvbi50ZXh0ID0geC50ZXh0O1xuICAgICAgICAgICAgb3B0aW9uLnZhbHVlID0geC52YWx1ZTtcbiAgICAgICAgICAgIG9wdGlvbi5kaXNhYmxlZCA9IHguZGlzYWJsZWQ7XG5cbiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGkgPT0gMDtcblxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICAgICAgfSkuZm9yRWFjaCh4ID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQuYWRkKHgpO1xuICAgICAgICB9KTtcblxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0Q29udHJvbDtcbmV4cG9ydCB7IElTZWxlY3RDb250cm9sRGVmaW5pdGlvbiwgU2VsZWN0Q29udHJvbCB9OyIsImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IENvbnRyb2wsIElDb250cm9sRGVmaW5pdGlvbiB9IGZyb20gJy4vQ29udHJvbCc7XG5cbmludGVyZmFjZSBJVGV4dEFyZWFDb250cm9sRGVmaW5pdGlvbiBleHRlbmRzIElDb250cm9sRGVmaW5pdGlvblxue1xuICAgIFRpdGxlOiBzdHJpbmcsXG4gICAgUGxhY2VIb2xkZXI6IHN0cmluZyxcbiAgICBBcmlhTGFiZWw6IHN0cmluZ1xufVxuXG5jbGFzcyBUZXh0QXJlYUNvbnRyb2wgZXh0ZW5kcyBDb250cm9sPElUZXh0QXJlYUNvbnRyb2xEZWZpbml0aW9uPlxue1xuICAgIHByaXZhdGUgX3RlbXBsYXRlOnN0cmluZztcblxuICAgIHByb3RlY3RlZCBHZXREZWZhdWx0RGVmaW5pdGlvbigpOiBJVGV4dEFyZWFDb250cm9sRGVmaW5pdGlvblxuICAgIHtcbiAgICAgICAgcmV0dXJuIF8uZXh0ZW5kKHt9LCBzdXBlci5HZXREZWZhdWx0RGVmaW5pdGlvbigpLCB7XG4gICAgICAgICAgICBUaXRsZTogXCJ0ZXh0IGFyZWFcIixcbiAgICAgICAgICAgIFBsYWNlSG9sZGVyOiBcInRleHQgYXJlYVwiLFxuICAgICAgICAgICAgQXJpYUxhYmVsOiBcInRleHQgYXJlYVwiXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwdWJsaWMgQnVpbGQoKTp2b2lkXG4gICAge1xuICAgICAgICBzdXBlci5CdWlsZCgpO1xuXG4gICAgICAgIHRoaXMuX3RlbXBsYXRlID0gYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbjxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cCBteS0zXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCIgaWQ9XCIke3RoaXMuX29wdGlvbnMuSWR9LWF0XCI+JHt0aGlzLl9vcHRpb25zLlRpdGxlfTwvc3Bhbj5cbiAgICA8dGV4dGFyZWEgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiByb3dzPVwiM1wiIHBsYWNlaG9sZGVyPVwiJHt0aGlzLl9vcHRpb25zLlBsYWNlSG9sZGVyfVwiIGFyaWEtbGFiZWw9XCIke3RoaXMuX29wdGlvbnMuQXJpYUxhYmVsfVwiXG4gICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCIke3RoaXMuX29wdGlvbnMuSWR9LWF0XCIgcmVxdWlyZWQ+PC90ZXh0YXJlYT5cbjwvZGl2PmA7XG4gICAgfVxuXG4gICAgcHVibGljIFJlbmRlcih3cmFwcGVyOiBIVE1MRWxlbWVudCk6IHZvaWRcbiAgICB7XG4gICAgICAgIHN1cGVyLlJlbmRlcih3cmFwcGVyKTtcblxuICAgICAgICB0aGlzLl93cmFwcGVyLmlubmVySFRNTCA9IHRoaXMuX3RlbXBsYXRlO1xuICAgIH1cblxuICAgIHB1YmxpYyBCaW5kKCk6IHZvaWRcbiAgICB7XG4gICAgICAgIHN1cGVyLkJpbmQoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRBcmVhQ29udHJvbDtcbmV4cG9ydCB7IElUZXh0QXJlYUNvbnRyb2xEZWZpbml0aW9uIGFzIElUZXh0QXJlYURlZmluaXRpb24sIFRleHRBcmVhQ29udHJvbCBhcyBUZXh0QXJlYSB9OyIsIlxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgQ29udHJvbCwgSUNvbnRyb2xEZWZpbml0aW9uIH0gZnJvbSAnLi9Db250cm9sJztcblxuaW50ZXJmYWNlIElUZXh0Q29udHJvbERlZmluaXRpb24gZXh0ZW5kcyBJQ29udHJvbERlZmluaXRpb25cbntcbiAgICBUaXRsZTogc3RyaW5nLFxuICAgIFBsYWNlSG9sZGVyOiBzdHJpbmcsXG4gICAgQXJpYUxhYmVsOiBzdHJpbmcsXG4gICAgUmVhZE9ubHk/OiBib29sZWFuLCBcbiAgICBSZXF1aXJlZD86IGJvb2xlYW5cbn1cblxuY2xhc3MgVGV4dENvbnRyb2wgZXh0ZW5kcyBDb250cm9sPElUZXh0Q29udHJvbERlZmluaXRpb24+XG57XG4gICAgcHJpdmF0ZSBfdGVtcGxhdGU6c3RyaW5nOyBcblxuICAgIHByb3RlY3RlZCBHZXREZWZhdWx0RGVmaW5pdGlvbigpOiBJVGV4dENvbnRyb2xEZWZpbml0aW9uXG4gICAge1xuICAgICAgICByZXR1cm4gXy5leHRlbmQoe30sIHN1cGVyLkdldERlZmF1bHREZWZpbml0aW9uKCksIHtcbiAgICAgICAgICAgIFRpdGxlOiBcInRleHRcIixcbiAgICAgICAgICAgIFBsYWNlSG9sZGVyOiBcInRleHRcIixcbiAgICAgICAgICAgIEFyaWFMYWJlbDogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBSZWFkT25seTogZmFsc2UsXG4gICAgICAgICAgICBSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHB1YmxpYyBCdWlsZCgpOnZvaWRcbiAgICB7XG4gICAgICAgIHRoaXMuX3RlbXBsYXRlID0gYFxuPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCIgaWQ9XCIke3RoaXMuX29wdGlvbnMuSWR9LWF0XCI+JHt0aGlzLl9vcHRpb25zLlRpdGxlfTwvc3Bhbj5cbjxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgcGxhY2Vob2xkZXI9XCIke3RoaXMuX29wdGlvbnMuUGxhY2VIb2xkZXJ9XCIgYXJpYS1sYWJlbD1cIiR7dGhpcy5fb3B0aW9ucy5BcmlhTGFiZWx9XCJcbiAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiJHt0aGlzLl9vcHRpb25zLklkfS1hdFwiICR7KHRoaXMuX29wdGlvbnMuUmVhZE9ubHkgPz8gZmFsc2UpID8gJ2Rpc2FibGVkJyA6ICcnfSAkeyh0aGlzLl9vcHRpb25zLlJlcXVpcmVkID8/IGZhbHNlKSA/ICdyZXF1aXJlZCcgOiAnJ30+YDtcbiAgICB9XG5cbiAgICBwdWJsaWMgUmVuZGVyKHdyYXBwZXI6IEhUTUxFbGVtZW50KTogdm9pZFxuICAgIHtcbiAgICAgICAgc3VwZXIuUmVuZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHRoaXMuX3dyYXBwZXIuY2xhc3NMaXN0LmFkZCgnaW5wdXQtZ3JvdXAnKTtcbiAgICAgICAgdGhpcy5fd3JhcHBlci5jbGFzc0xpc3QuYWRkKCdteS0zJyk7XG5cbiAgICAgICAgdGhpcy5fd3JhcHBlci5pbm5lckhUTUwgPSB0aGlzLl90ZW1wbGF0ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgQmluZCgpOiB2b2lkXG4gICAge1xuXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUZXh0Q29udHJvbDtcbmV4cG9ydCB7IElUZXh0Q29udHJvbERlZmluaXRpb24sIFRleHRDb250cm9sIH07IiwiaW1wb3J0ICQgZnJvbSBcImpxdWVyeVwiO1xuaW1wb3J0IF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0ICdvd2wuY2Fyb3VzZWwnO1xuXG5lbnVtIEdlbmRlclxue1xuICAgIE1hbGUsXG4gICAgRmVtYWxlXG59XG5cbmludGVyZmFjZSBGb3JtTW9kZWxcbntcbiAgICBOYW1lOiBzdHJpbmcsXG4gICAgU3VybmFtZTogc3RyaW5nLFxuICAgIEZhdGhlcnNOYW1lOiBzdHJpbmcsXG4gICAgR2VuZGVyOiBHZW5kZXIsXG4gICAgRGVwYXJ0bWVudDogc3RyaW5nLFxuICAgIFN0dWRlbnRJZDogc3RyaW5nLFxuICAgIERpc2FiaWxpdHk6IHN0cmluZyxcbiAgICBQaG9uZTogc3RyaW5nLFxuICAgIE1vYmlsZTogc3RyaW5nLFxuICAgIEVtYWlsOiBzdHJpbmcsXG4gICAgQWRkcmVzczogc3RyaW5nLFxuICAgIFBvc3RhbENvZGU6IHN0cmluZyxcbiAgICBRdWFsaWZpY2F0aW9uVHlwZTogc3RyaW5nLFxuICAgIFF1YWxpZmljYXRpb25UeXBlVGV4dDogc3RyaW5nLFxuICAgIFF1YWxpZmljYXRpb25ZZWFyOiBudW1iZXIsXG5cbiAgICBWaXNpb246IHN0cmluZyxcbiAgICBIZWFyaW5nOiBzdHJpbmcsXG4gICAgU3BlZWNoOiBzdHJpbmcsXG4gICAgU3RyZXRjaGluZzogc3RyaW5nLFxuICAgIERleHRlcml0eTogc3RyaW5nLFxuICAgIE1vdmVtZW50OiBzdHJpbmcsXG4gICAgVW5kZXJzdGFuZGluZzogc3RyaW5nLFxuICAgIERpc2FiaWxpdHlBcHBlYXJhbmNlWWVhcjogMCxcblxuICAgIExpYnJhcnk6IGJvb2xlYW4sXG4gICAgV2M6IGJvb2xlYW4sXG4gICAgRWxldmF0b3I6IGJvb2xlYW4sXG4gICAgQ2xhc3Nyb29tOiBib29sZWFuLFxuICAgIEFtcGhpdGhlYXRlcjogYm9vbGVhbixcbiAgICBMYWJvcmF0b3J5OiBib29sZWFuLFxuICAgIFNlY3JldGFyeTogYm9vbGVhbixcbiAgICBDYW50ZWVuOiBib29sZWFuLFxuICAgIE9yaWVudGF0aW9uOiBib29sZWFuLFxuXG4gICAgSGVhcmluZ2FpZDogYm9vbGVhbixcbiAgICBXaGVlbGNoYWlyOiBib29sZWFuLFxuICAgIFNwZWVjaGNvbXBvc2VyOiBib29sZWFuLFxuICAgIFZpcnR1YWxrZXlib2FyZDogYm9vbGVhbixcbiAgICBXd2l0Y2hlczogYm9vbGVhbixcbiAgICBTY3JlZW5yZWFkZXI6IGJvb2xlYW4sXG4gICAgQnJhaWxsZXNjcmVlbjogYm9vbGVhbixcbiAgICBQaHN5aWNhbEFpZE90aGVyVGV4dDogc3RyaW5nLFxuICAgIERpZ2l0YWxBaWRPdGhlclRleHQ6IHN0cmluZyxcblxuICAgIEtleWJvYXJkOiBib29sZWFuLFxuICAgIEtleWJvYXJkVGV4dDogc3RyaW5nLFxuICAgIE1vdXNlOiBib29sZWFuLFxuICAgIE1vdXNlVGV4dDogc3RyaW5nLFxuICAgIFNjcmVlbjogYm9vbGVhbixcbiAgICBTY3JlZW5UZXh0OiBzdHJpbmcsXG4gICAgU3BlYWtlcnM6IGJvb2xlYW4sXG4gICAgU3BlYWtlcnNUZXh0OiBzdHJpbmcsXG5cbiAgICBUZWFjaGVyU3BlZWNoOiBib29sZWFuLFxuICAgIFRlYWNoZXJTcGVlY2hUZXh0OiBzdHJpbmcsXG4gICAgVGVhY2hlcldyaXRpbmc6IGJvb2xlYW4sXG4gICAgVGVhY2hlcldyaXRpbmdUZXh0OiBzdHJpbmcsXG4gICAgVGVhY2hlclNjcmVlbjogYm9vbGVhbixcbiAgICBUZWFjaGVyU2NyZWVuVGV4dDogc3RyaW5nLFxuICAgIFN0dWRlbnROb3RlczogYm9vbGVhbixcbiAgICBTdHVkZW50Tm90ZXNUZXh0OiBzdHJpbmcsXG4gICAgU3R1ZGVudFF1ZXN0aW9uczogYm9vbGVhbixcbiAgICBTdHVkZW50UXVlc3Rpb25zVGV4dDogc3RyaW5nLFxuICAgIExlYXJuaW5nRGlmZmljdWx0eU90aGVyVGV4dDogc3RyaW5nLFxuXG4gICAgSGVscE9wdGlvbnMgOiBib29sZWFuLFxuICAgIEhlbHBPcHRpb25zVGV4dDogc3RyaW5nLFxuXG4gICAgU3R1ZHlQcm9jZXNzOiBib29sZWFuLFxuICAgIFN0dWR5UHJvY2Vzc1RleHQ6IHN0cmluZyxcblxuICAgIExhYlBhcnRpY2lwYXRpb246IGJvb2xlYW4sXG4gICAgTGFiUGFydGljaXBhdGlvblRleHQ6IHN0cmluZyxcblxuICAgIFBjVXNhZ2U6IGJvb2xlYW4sXG4gICAgUGNVc2FnZVRleHQ6IHN0cmluZyxcblxuICAgIE9yYWxFeGFtczogYm9vbGVhbixcbiAgICBEaWZmZXJlbnRRdWVzdGlvbnM6IGJvb2xlYW4sXG4gICAgQnJhaWxsZTogYm9vbGVhbixcbiAgICBDb21wdXRlcjogYm9vbGVhbixcbiAgICBFeGFtc0FpZE90aGVyVGV4dDogc3RyaW5nLFxuXG4gICAgUGFzc2VkQ291cnNlczogbnVtYmVyLFxuICAgIENvdXJzZXM6IG51bWJlcixcbiAgICBMYXN0RXhhbVBhcnRpY2lwYXRpb25ZZWFyOiBudW1iZXIsXG5cbiAgICBQYXJ0aWNpcGF0aW9uRGlmZmljdWx0eTogbnVtYmVyLFxuICAgIFN1Z2dlc3Rpb25zOiBzdHJpbmdcbn1cblxuY29uc3QgaXNDaGVja2JveCA9IGZ1bmN0aW9uIChlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50KTogYm9vbGVhblxue1xuICAgIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCAmJiBlbGVtZW50LnR5cGUgPT09ICdjaGVja2JveCc7XG59XG5cbmNvbnN0IGlzUmFkaW8gPSBmdW5jdGlvbiAoZWxlbWVudDogSFRNTElucHV0RWxlbWVudCk6IGJvb2xlYW5cbntcbiAgICByZXR1cm4gZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgJiYgZWxlbWVudC50eXBlID09PSAncmFkaW8nO1xufVxuXG5jb25zdCBpc051bWJlciA9IGZ1bmN0aW9uIChlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50KTogYm9vbGVhblxue1xuICAgIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCAmJiBlbGVtZW50LnR5cGUgPT09ICdudW1iZXInO1xufVxuXG5jb25zdCBpc1RleHQgPSBmdW5jdGlvbiAoZWxlbWVudDogSFRNTElucHV0RWxlbWVudCk6IGJvb2xlYW5cbntcbiAgICByZXR1cm4gZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgJiYgZWxlbWVudC50eXBlID09PSAndGV4dCc7XG59XG5cbmNsYXNzIEZvcm1TdG9yZVxue1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGtleTpzdHJpbmcgPSAnZm9ybSc7XG4gICAgXG4gICAgcHVibGljIEdldCgpOiBGb3JtTW9kZWxcbiAgICB7XG4gICAgICAgIGxldCBfZm9ybSA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKEZvcm1TdG9yZS5rZXkpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoX2Zvcm0pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgU2V0KG1vZGVsOiBGb3JtTW9kZWwpOiB2b2lkXG4gICAge1xuICAgICAgICBsZXQgX2Zvcm0gPSBKU09OLnN0cmluZ2lmeShtb2RlbCk7XG4gICAgICAgIFxuICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShGb3JtU3RvcmUua2V5LCBfZm9ybSk7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBSZXNldCgpOiB2b2lkXG4gICAge1xuICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShGb3JtU3RvcmUua2V5KTtcbiAgICB9XG59XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICAkKCcuZm9ybS1zZWxlY3QucG9zdGFsY29kZScpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgb3B0aW9uID0gJCgnOnNlbGVjdGVkJywgdGhpcyk7XG5cbiAgICAgICAgJCgnLmZvcm0tc2VsZWN0LmFyZWEnKS52YWwob3B0aW9uLmRhdGEoJ2FyZWEnKSk7XG4gICAgICAgICQoJy5mb3JtLXNlbGVjdC5wcmVmZWN0dXJlJykudmFsKG9wdGlvbi5kYXRhKCdwcmVmZWN0dXJlJykpO1xuXG4gICAgfSk7XG5cbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnXG5cbiAgICBjb25zdCBmb3JtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uZWVkcy12YWxpZGF0aW9uJykgYXMgYW55O1xuXG4gICAgXy5lYWNoKGZvcm1zLCBmb3JtID0+IFxuICAgIHtcbiAgICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghZm9ybS5jaGVja1ZhbGlkaXR5KCkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAkKCdmb3JtLm5lZWRzLXZhbGlkYXRpb24gOmludmFsaWQnKVswXS5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtLmNsYXNzTGlzdC5hZGQoJ3dhcy12YWxpZGF0ZWQnKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfSk7XG4gICAgXG59KSgpO1xuXG5cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnXG5cbiAgICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uZWVkcy12YWxpZGF0aW9uIGlucHV0LCAubmVlZHMtdmFsaWRhdGlvbiB0ZXh0YXJlYSwgLm5lZWRzLXZhbGlkYXRpb24gc2VsZWN0Jyk7XG5cbiAgICBsZXQgc3RvcmUgPSBuZXcgRm9ybVN0b3JlKCk7XG5cbiAgICBsZXQgZm9ybSA9IHN0b3JlLkdldCgpO1xuXG4gICAgbGV0IGRlZmF1bHRGb3JtOkZvcm1Nb2RlbCA9IHtcbiAgICAgICAgTmFtZTogJycsXG4gICAgICAgIFN1cm5hbWU6ICcnLFxuICAgICAgICBGYXRoZXJzTmFtZTogJycsXG4gICAgICAgIEdlbmRlcjogbnVsbCxcbiAgICAgICAgRGVwYXJ0bWVudDogJycsXG4gICAgICAgIFN0dWRlbnRJZDogJycsXG4gICAgICAgIERpc2FiaWxpdHk6ICcnLFxuICAgICAgICBQaG9uZTogJycsXG4gICAgICAgIE1vYmlsZTogJycsXG4gICAgICAgIEVtYWlsOiAnJyxcbiAgICAgICAgQWRkcmVzczogJycsXG4gICAgICAgIFBvc3RhbENvZGU6ICcnLFxuICAgICAgICBRdWFsaWZpY2F0aW9uVHlwZTogJycsXG4gICAgICAgIFF1YWxpZmljYXRpb25UeXBlVGV4dDogJycsXG4gICAgICAgIFF1YWxpZmljYXRpb25ZZWFyOiAwLFxuICAgICAgICBWaXNpb246ICcnLFxuICAgICAgICBIZWFyaW5nOiAnJyxcbiAgICAgICAgU3BlZWNoOiAnJyxcbiAgICAgICAgU3RyZXRjaGluZzogJycsXG4gICAgICAgIERleHRlcml0eTogJycsXG4gICAgICAgIE1vdmVtZW50OiAnJyxcbiAgICAgICAgVW5kZXJzdGFuZGluZzogJycsXG4gICAgICAgIERpc2FiaWxpdHlBcHBlYXJhbmNlWWVhcjogMCxcblxuICAgICAgICBMaWJyYXJ5OiBmYWxzZSxcbiAgICAgICAgV2M6IGZhbHNlLFxuICAgICAgICBFbGV2YXRvcjogZmFsc2UsXG4gICAgICAgIENsYXNzcm9vbTogZmFsc2UsXG4gICAgICAgIEFtcGhpdGhlYXRlcjogZmFsc2UsXG4gICAgICAgIExhYm9yYXRvcnk6IGZhbHNlLFxuICAgICAgICBTZWNyZXRhcnk6IGZhbHNlLFxuICAgICAgICBDYW50ZWVuOiBmYWxzZSxcbiAgICAgICAgT3JpZW50YXRpb246IGZhbHNlLFxuXG4gICAgICAgIEhlYXJpbmdhaWQ6IGZhbHNlLFxuICAgICAgICBXaGVlbGNoYWlyOiBmYWxzZSxcbiAgICAgICAgU3BlZWNoY29tcG9zZXI6IGZhbHNlLFxuICAgICAgICBWaXJ0dWFsa2V5Ym9hcmQ6IGZhbHNlLFxuICAgICAgICBXd2l0Y2hlczogZmFsc2UsXG4gICAgICAgIFNjcmVlbnJlYWRlcjogZmFsc2UsXG4gICAgICAgIEJyYWlsbGVzY3JlZW46IGZhbHNlLFxuICAgICAgICBQaHN5aWNhbEFpZE90aGVyVGV4dDogJycsXG4gICAgICAgIERpZ2l0YWxBaWRPdGhlclRleHQ6ICcnLFxuICAgICAgICBcbiAgICAgICAgS2V5Ym9hcmQ6IGZhbHNlLFxuICAgICAgICBLZXlib2FyZFRleHQ6ICcnLFxuICAgICAgICBNb3VzZTogZmFsc2UsXG4gICAgICAgIE1vdXNlVGV4dDogJycsXG4gICAgICAgIFNjcmVlbjogZmFsc2UsXG4gICAgICAgIFNjcmVlblRleHQ6ICcnLFxuICAgICAgICBTcGVha2VyczogZmFsc2UsXG4gICAgICAgIFNwZWFrZXJzVGV4dDogJycsXG5cbiAgICAgICAgVGVhY2hlclNwZWVjaDogZmFsc2UsXG4gICAgICAgIFRlYWNoZXJTcGVlY2hUZXh0OiAnJyxcbiAgICAgICAgVGVhY2hlcldyaXRpbmc6IGZhbHNlLFxuICAgICAgICBUZWFjaGVyV3JpdGluZ1RleHQ6ICcnLFxuICAgICAgICBUZWFjaGVyU2NyZWVuOiBmYWxzZSxcbiAgICAgICAgVGVhY2hlclNjcmVlblRleHQ6ICcnLFxuICAgICAgICBTdHVkZW50Tm90ZXM6IGZhbHNlLFxuICAgICAgICBTdHVkZW50Tm90ZXNUZXh0OiAnJyxcbiAgICAgICAgU3R1ZGVudFF1ZXN0aW9uczogZmFsc2UsXG4gICAgICAgIFN0dWRlbnRRdWVzdGlvbnNUZXh0OiAnJyxcbiAgICAgICAgTGVhcm5pbmdEaWZmaWN1bHR5T3RoZXJUZXh0OiAnJyxcblxuICAgICAgICBIZWxwT3B0aW9ucyA6IGZhbHNlLFxuICAgICAgICBIZWxwT3B0aW9uc1RleHQ6ICcnLFxuXG4gICAgICAgIFN0dWR5UHJvY2VzczogZmFsc2UsXG4gICAgICAgIFN0dWR5UHJvY2Vzc1RleHQ6ICcnLFxuXG4gICAgICAgIExhYlBhcnRpY2lwYXRpb246IGZhbHNlLFxuICAgICAgICBMYWJQYXJ0aWNpcGF0aW9uVGV4dDogJycsXG5cbiAgICAgICAgUGNVc2FnZTogZmFsc2UsXG4gICAgICAgIFBjVXNhZ2VUZXh0OiAnJyxcblxuICAgICAgICBPcmFsRXhhbXM6IGZhbHNlLFxuICAgICAgICBEaWZmZXJlbnRRdWVzdGlvbnM6IGZhbHNlLFxuICAgICAgICBCcmFpbGxlOiBmYWxzZSxcbiAgICAgICAgQ29tcHV0ZXI6IGZhbHNlLFxuICAgICAgICBFeGFtc0FpZE90aGVyVGV4dDogJycsXG5cbiAgICAgICAgUGFzc2VkQ291cnNlczogMCxcbiAgICAgICAgQ291cnNlczogMCxcbiAgICAgICAgTGFzdEV4YW1QYXJ0aWNpcGF0aW9uWWVhcjogbnVsbCxcbiAgICAgICAgXG4gICAgICAgIFBhcnRpY2lwYXRpb25EaWZmaWN1bHR5IDogMCxcbiAgICAgICAgU3VnZ2VzdGlvbnM6ICcnXG4gICAgfTtcblxuICAgIGZvcm0gPSBfLmV4dGVuZCh7fSwgZGVmYXVsdEZvcm0sIGZvcm0gfHwge30pO1xuICAgIFxuICAgIHN0b3JlLlNldChmb3JtKTtcblxuICAgIF8uZWFjaChlbGVtZW50cywgZWxlbWVudCA9PlxuICAgIHtcbiAgICAgICAgbGV0IGtleSA9IE9iamVjdC5rZXlzKGZvcm0pLmZpbmQoeCA9PiB4LnRvTG93ZXJDYXNlKCkgPT09ICgoZWxlbWVudCBhcyBhbnkpLnR5cGUgPT09ICdyYWRpbycgPyAoZWxlbWVudCBhcyBhbnkpLm5hbWUudG9Mb3dlckNhc2UoKSA6IGVsZW1lbnQuaWQudG9Mb3dlckNhc2UoKSkpO1xuXG4gICAgICAgIGlmKCFrZXkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB2YWx1ZSA9IGZvcm1ba2V5XTtcbiAgICAgICAgXG4gICAgICAgIGlmKHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nICYmICEhIXZhbHVlKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHN3aXRjaCAodHJ1ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgY2FzZSBlbGVtZW50IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQ6XG4gICAgICAgICAgICBjYXNlIGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50OlxuICAgICAgICAgICAgY2FzZSBlbGVtZW50IGluc3RhbmNlb2YgSFRNTFRleHRBcmVhRWxlbWVudDpcblxuICAgICAgICAgICAgICAgIGlmKGlzQ2hlY2tib3goZWxlbWVudCBhcyBIVE1MSW5wdXRFbGVtZW50KSkgXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAoZWxlbWVudCBhcyBhbnkpLmNoZWNrZWQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZihpc1JhZGlvKGVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudCkpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZWxlbWVudElkID0gYCR7KGVsZW1lbnQgYXMgYW55KS5uYW1lfS0ke3ZhbHVlLnRvU3RyaW5nKCl9YDtcblxuICAgICAgICAgICAgICAgICAgICAoZWxlbWVudCBhcyBhbnkpLmNoZWNrZWQgPSBlbGVtZW50LmlkID09PSBlbGVtZW50SWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIChlbGVtZW50IGFzIGFueSkudmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIChlbGVtZW50IGFzIGFueSkuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGVsZW1lbnQnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIF8uZWFjaChlbGVtZW50cywgZWxlbWVudCA9PlxuICAgIHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIChldmVudCkgPT5cbiAgICAgICAge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdpcy12YWxpZCcsICdpcy1pbnZhbGlkJyk7XG5cbiAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gKGVsZW1lbnQgYXMgYW55KS5jaGVja1ZhbGlkaXR5KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChpc1ZhbGlkID8gJ2lzLXZhbGlkJyA6ICdpcy1pbnZhbGlkJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghaXNWYWxpZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxldCBrZXkgPSBPYmplY3Qua2V5cyhmb3JtKS5maW5kKHggPT4geC50b0xvd2VyQ2FzZSgpID09PSAoKGVsZW1lbnQgYXMgYW55KS50eXBlID09PSAncmFkaW8nID8gKGVsZW1lbnQgYXMgYW55KS5uYW1lLnRvTG93ZXJDYXNlKCkgOiBlbGVtZW50LmlkLnRvTG93ZXJDYXNlKCkpKTtcbiAgICAgICAgICAgICAgICBpZigha2V5KVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWU7IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHN3aXRjaCAodHJ1ZSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MVGV4dEFyZWFFbGVtZW50OlxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpc0NoZWNrYm94KGVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAoZWxlbWVudCBhcyBhbnkpLmNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGlzUmFkaW8oZWxlbWVudCBhcyBIVE1MSW5wdXRFbGVtZW50KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWVUZXh0ID0gZWxlbWVudC5pZC5yZXBsYWNlKChlbGVtZW50IGFzIGFueSkubmFtZSwgJycpLnJlcGxhY2UoJy0nLCAnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZVRleHQgPT09ICd0cnVlJyB8fCB2YWx1ZVRleHQgPT09ICdmYWxzZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlVGV4dCA9PT0gJ3RydWUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGlzTnVtYmVyKGVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBOdW1iZXIoKGVsZW1lbnQgYXMgYW55KS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAoZWxlbWVudCBhcyBhbnkpLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBlbGVtZW50Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9ybVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc3RvcmUuU2V0KGZvcm0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9KTtcbn0pKCk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIGNvbnN0IGFwcGx5UnVsZXMgPSBmdW5jdGlvbiAoZWxlbWVudDogSFRNTFNlbGVjdEVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50KTogYm9vbGVhblxuICAgIHtcbiAgICAgICAgaWYoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50KVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmKGlzQ2hlY2tib3goZWxlbWVudCkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKGlzUmFkaW8oZWxlbWVudCkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYoIWVsZW1lbnQuY2hlY2tlZClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVUZXh0ID0gZWxlbWVudC5pZC5yZXBsYWNlKGVsZW1lbnQubmFtZSwgJycpLnJlcGxhY2UoJy0nLCAnJyk7XG4gICAgICAgICAgICAgICAgaWYoISh2YWx1ZVRleHQgPT09ICd0cnVlJyB8fCB2YWx1ZVRleHQgPT09ICdmYWxzZScpKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50IG91dCBvZiByYW5nZSBleGNlcHRpb24nKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgZ2V0Q3NzQ2xhc3MgPSBmdW5jdGlvbiAoZWxlbWVudDogSFRNTFNlbGVjdEVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50KTogc3RyaW5nIFxuICAgIHtcblxuICAgICAgICBpZihlbGVtZW50IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiAkKGVsZW1lbnQpLnZhbCgpID09PSAnb3RoZXInID8gJycgOiAnZC1ub25lJztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmKGlzQ2hlY2tib3goZWxlbWVudCkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuY2hlY2tlZCA/ICcnIDogJ2Qtbm9uZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGlzUmFkaW8oZWxlbWVudCkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlVGV4dCA9IGVsZW1lbnQuaWQucmVwbGFjZShlbGVtZW50Lm5hbWUsICcnKS5yZXBsYWNlKCctJywgJycpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICBlbGVtZW50LmNoZWNrZWQgJiYgdmFsdWVUZXh0ID09PSAndHJ1ZScgPyAnJyA6ICdkLW5vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50IG91dCBvZiByYW5nZSBleGNlcHRpb24nKTtcbiAgICAgICAgXG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBhcHBseU90aGVyRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50OiBIVE1MU2VsZWN0RWxlbWVudCB8IEhUTUxJbnB1dEVsZW1lbnQpXG4gICAge1xuXG4gICAgICAgIGxldCBvdGhlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHskKGVsZW1lbnQpLmRhdGEoJ2Zvcm0tc2VsZWN0LW90aGVyLXRleHRieScpfWApO1xuICAgICAgICBcbiAgICAgICAgaWYoISEhb3RoZXJFbGVtZW50KVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxldCBvdGhlckVsZW1lbnRXcmFwcGVyID0gb3RoZXJFbGVtZW50LmNsb3Nlc3QoJy5pbnB1dC1ncm91cCcpO1xuXG4gICAgICAgIGlmKCEhIW90aGVyRWxlbWVudFdyYXBwZXIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYoIWFwcGx5UnVsZXMoZWxlbWVudCkpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGV0IF9jbGFzcyA9IGdldENzc0NsYXNzKGVsZW1lbnQpO1xuXG4gICAgICAgIG90aGVyRWxlbWVudFdyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XG4gICAgICAgIGlmKG90aGVyRWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2hpZGRlbi1yZXF1aXJlZCcpKVxuICAgICAgICB7XG4gICAgICAgICAgICBvdGhlckVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdoaWRkZW4tcmVxdWlyZWQnKTtcbiAgICAgICAgICAgIG90aGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJywgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoISFfY2xhc3MpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmKG90aGVyRWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3JlcXVpcmVkJykpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb3RoZXJFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgncmVxdWlyZWQnKTtcbiAgICAgICAgICAgICAgICBvdGhlckVsZW1lbnQuc2V0QXR0cmlidXRlKCdoaWRkZW4tcmVxdWlyZWQnLCAnJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG90aGVyRWxlbWVudFdyYXBwZXIuY2xhc3NMaXN0LmFkZChfY2xhc3MpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50cyA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmVlZHMtdmFsaWRhdGlvbiBzZWxlY3QsIC5uZWVkcy12YWxpZGF0aW9uIGlucHV0W3R5cGU9cmFkaW9dLCAubmVlZHMtdmFsaWRhdGlvbiBpbnB1dFt0eXBlPWNoZWNrYm94XScpIGFzIGFueSkgYXMgQXJyYXk8SFRNTFNlbGVjdEVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50PjtcblxuICAgIF8uZWFjaChlbGVtZW50cywgZWxlbWVudCA9PiBcbiAgICB7XG4gICAgICAgIGlmKCEkKGVsZW1lbnQpLmRhdGEoJ2Zvcm0tc2VsZWN0LW90aGVyLXRleHRieScpKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhcHBseU90aGVyRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2ZW50KSA9PiB7IGFwcGx5T3RoZXJFbGVtZW50KGVsZW1lbnQpOyB9LGZhbHNlKTtcbiAgICB9KTtcbiAgICBcbiAgICBcbn0pKCk7XG5cbih3aW5kb3cgYXMgYW55KS5Gb3JtID0gKGZ1bmN0aW9uKGZvcm06IGFueSkge1xuICAgICd1c2Ugc3RyaWN0J1xuXG4gICAgZm9ybS5zdWJtaXQgPSBmdW5jdGlvbiAoKVxuICAgIHtcbiAgICAgICAgbGV0IHN0b3JlID0gbmV3IEZvcm1TdG9yZSgpO1xuICAgICAgICBcbiAgICAgICAgbGV0IGZvcm0gPSBzdG9yZS5HZXQoKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoZm9ybSksXG4gICAgICAgICAgICAgICAgdXJsOiBgJHsod2luZG93IGFzIGFueSkuRm9ybS5iYXNlVXJsfS9mb3JtYCxcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uIGNoYXJzZXQ9dXRmLThcIixcbiAgICAgICAgICAgICAgICBoZWFkZXJzOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb24gY2hhcnNldD11dGYtOFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdG9yZS5SZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikgXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiBmb3JtO1xuICAgIFxufSkoKHdpbmRvdyBhcyBhbnkpLkZvcm0gfHwge30pO1xuXG4oZnVuY3Rpb24gKCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgbGV0IGNhcm91c2VsV3JhcDogYW55ID0gJCgnLm93bC1jYXJvdXNlbCcpO1xuICAgIFxuICAgIGNhcm91c2VsV3JhcC5vd2xDYXJvdXNlbCh7XG4gICAgICAgIGl0ZW1zOiAxLFxuICAgICAgICBsb29wOiB0cnVlLFxuICAgICAgICBhdXRvcGxheTogdHJ1ZSxcbiAgICAgICAgZG90czogZmFsc2VcbiAgICB9KTtcbiAgICBcbn0pKCk7IiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuaW1wb3J0IEd1aWQgZnJvbSAnLi9HdWlkJztcbmltcG9ydCBUZXh0QXJlYUNvbnRyb2wgZnJvbSAnLi9UZXh0QXJlYUNvbnRyb2wnO1xuaW1wb3J0IFRleHRDb250cm9sIGZyb20gJy4vVGV4dENvbnRyb2wnO1xuaW1wb3J0IFNlbGVjdENvbnRyb2wgZnJvbSAnLi9TZWxlY3RDb250cm9sJztcbmltcG9ydCBGb3JtQ29udGFpbmVyIGZyb20gJy4vRm9ybUNvbnRhaW5lcic7XG5pbXBvcnQgUm93Q29udGFpbmVyIGZyb20gJy4vUm93Q29udGFpbmVyJztcbmltcG9ydCBDb2x1bW5Db250YWluZXIgZnJvbSAnLi9Db2x1bW5Db250YWluZXInO1xuaW1wb3J0IEJ1dHRvbkNvbnRyb2wgZnJvbSAnLi9CdXR0b25Db250cm9sJztcbmltcG9ydCBBY3Rpb25Db250YWluZXIgZnJvbSAnLi9BY3Rpb25Db250YWluZXInO1xuaW1wb3J0IEZvcm1TdWJtaXRBY3Rpb25Db250cm9sIGZyb20gJy4vRm9ybVN1Ym1pdEFjdGlvbic7XG5pbXBvcnQgRGF0YVNvdXJjZSBmcm9tICcuL0RhdGFTb3VyY2UnO1xuaW1wb3J0IHsgRGF0YUNvbnRleHQgfSBmcm9tICcuL0RhdGFDb250ZXh0JztcblxucmVxdWlyZSgnLi9jdXN0b20udHMnKTtcblxudmFyIGZvcm1JZCA9IEd1aWQuTmV3R3VpZCgpO1xudmFyIHN1Ym1pdEFjdGlvbklkID0gR3VpZC5OZXdHdWlkKCk7IFxuXG52YXIgcG9zdGFsQ29kZXMgPSBbXG5cdHsgUG9zdGFsQ29kZTogJzMwMDAxJywgQXJlYTogJ86SzpHOm86kzpkgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpPOn86lzqHOmc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6bzpXOo86Zzp3OmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOnM6Rzp3Omc6dzpEgzpLOm86ZzpbOmc6Rzp3Oqc6dIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpHOoc6czpHOoc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpHOo86kzqHOnyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOnc6Vzp/Op86pzqHOmSDOnM6VzqPOn86bzp/Ok86TzpnOn86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOm86RzpnOn86czpHOnc6Zzp3OkSAgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOlc6dzqTOkc6bzp/Ops6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOm86RzqTOkc6dzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoc6ZzpPOkc6dzpcgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOpM6hzp/Ok86TzqXOm86fzpLOn86lzp3OmSDOkc6ZzqTOqc6bL86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86RzrnPhM+JzrvOv86xzrrOsc+Bzr3Osc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMDAwMicsIEFyZWE6ICfOkc6TzpnOkSDOks6RzqHOks6RzqHOkSDOks6fzp3Omc6kzqPOl86jIM6bzpXOpc6azpHOlM6RzqMsIM6RzprOpM6Zzp8gzqDOoc6VzpLOlc6WzpHOoywgzpHOm86lzprOlc6jIM6kzp/Opc6hzpvOmc6UzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6czpzOn86lzqPOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6dzqTOqc6dzpcgzpvOlc6lzprOkc6UzpHOoywgzpLOkc6TzpnOkSDOnc6XzqPOn86jIM6bzpXOpc6azpHOlM6RzqMsIM6Szp/Onc6ZzqTOo86RIM6bzpXOpc6azpHOlM6RzqMsIM6Tzp/Opc6hzpPOn86lzpLOm86XIM6bzpXOpc6azpHOlM6RzqMsIM6UzqHOpc6czp/OoyDOm86VzqXOms6RzpTOkc6jLCDOmM6lzqHOmc6fIM6bzpXOpc6azpHOlM6RzqMsIM6azp/Ooc6gzpcgzpvOlc6lzprOkc6UzpHOoywgzp3Olc6RIM6azpHOnM6RzqHOmc6dzpEgzpvOlc6lzprOkc6UzpHOoywgzqDOkc6bzpnOkc6czqDOlc6bzpEgzpLOn86dzpnOpM6jzpfOoyDOm86VzqXOms6RzpTOkc6jLCDOoM6VzqHOkc6kzpnOkSDOm86VzqXOms6RzpTOkc6jLCDOoM6VzqTOoc6RIM6bzpXOpc6azpHOlM6RzqMsIM6gzpvOkc6TzpnOkSDOm86VzqXOms6RzpTOkc6jJywgUHJlZmVjdHVyZTogJ86RzrnPhM+JzrvOv86xzrrOsc+Bzr3Osc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMDAwMycsIEFyZWE6ICfOns6XzqHOkc6azpnOkSDOoM6Rzp3Okc6ZzqTOqc6bzpnOms6fzqUgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOkc6bzpHOmc6fzprOkc6hzqXOkSDOms6VzqHOkc6jzpXOkc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOm86RzpnOn86azpXOoc6RzqPOmc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOnc6RzpnOpM6pzpvOmc6fIM6RzpnOpM6pzpsvzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHOuc+Ez4nOu86/zrHOus6xz4HOvc6xzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzMwMDA0JywgQXJlYTogJ86RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOks6fzp3Omc6kzqPOl86jIM6bzpXOpc6azpHOlM6RzqMsIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOms6RzqTOn86lzp3Okc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzpXOpM6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOp86lzqHOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqTOn86lzp3OkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6fzpzOoM6pzqTOlyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6fzp3On86gzpnOnc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6bzp/Opc6kzqHOkc6azpkgzprOkc6kzp/Opc6dzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOpM6hzqXOps6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc65z4TPic67zr/Osc66zrHPgc69zrHOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzAwMDUnLCBBcmVhOiAnzprOkc6Zzp3On86lzqHOk86Zzp8gzpHOmc6kzqnOmy/Onc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc65z4TPic67zr/Osc66zrHPgc69zrHOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzAwMDYnLCBBcmVhOiAnzpHOk86hzpHOnM6gzpXOm86RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzqPOpM6RzprOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6SzpHOo86ZzpvOn86gzp/Opc6bzp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpLOm86ZzpbOmc6Rzp3OkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqHOkc6ZzqPOms6RzprOl86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzqHOn86UzqHOn86czp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86RzrnPhM+JzrvOv86xzrrOsc+Bzr3Osc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMDAwOCcsIEFyZWE6ICfOkc6SzpHOoc6ZzprOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzpPOmc6RIM6jzp/Ops6ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOk86ZzpEgzqTOoc6ZzpHOlM6RIM6UzqHOpc6czqnOnc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzpPOmc6fzqMgzpjOlc6fzpTOqc6hzp/OoyDOms6fzprOms6Zzp3On86SzqHOpc6jzpfOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6kzqHOmc6nzqnOnc6ZzpTOkc6jKM6azp/Onc6ZzqPOms6XzqMpIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzpXOpM6fzqDOlc6kzqHOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6czpLOoc6RzprOmc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzpzOoM6VzpvOmc6RIM6azp/Oms6azpnOnc6fzpLOoc6lzqPOl86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6Rzp3Okc6bzpfOqM6XIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6Rzp3OqSDOlM6hzqXOnM6pzp3Okc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzqHOk86lzqHOnyDOoM6XzpPOkc6UzpkgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpTOkc6mzp3OlyDOkc6czpLOoc6RzprOmc6RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpTOmc6RzqPOlc6bzpvOnyDOpM6hzpnOp86pzp3Omc6UzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOlM6ZzqDOm86RzqTOkc6dzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOlM6fzprOmc6czpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOlM6fzqPOn86lzpvOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOlM6fzqXOnc6RzpnOmc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpTOoc6lzpzOqc6dzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOmM6Vzp/OpM6fzprOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6YzpXOoc6czp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOkc6XzpzOlc6dzpEgzpHOnM6gzpXOm86ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOkc6bzpvOmc6YzpXOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzpvOn86lzpTOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqTOqSDOm86RzpzOoM6ZzqHOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqTOqSDOnM6RzprOoc6ZzpEgzpvOn86TzprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqTOqSDOp86hzqXOo86fzpLOmc6kzqPOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6bzp/OoM6fzqTOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6fzp3Omc6jzprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6fzqPOms6Zzp3Okc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azp/Opc6bzp/Opc6hzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6fzqXOpM6jzp/OnM6XzpvOmc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azp/Ops6kzqHOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOm86RzpTOmc6azp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOm86RzpzOoM6ZzqHOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOm86VzqXOms6fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6bzp/Opc6jzqTOoc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6bzp/Opc6kzqHOkSAgzpzOpc6hzqTOmc6RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOkc6azqHOmc6RIM6bzp/Ok86TzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOkc6dzpTOoc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpHOoc6RzpjOmc6RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOkc6hzpHOmM6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOkc6hzpHOmM6fzqXOm86RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpHOpc6hzp/Oks6fzqHOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpXOk86RzqMgzpTOlc6dzpTOoc6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOlc6bzpnOk86azp/Oks6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpnOo86RzpzOoM6VzpvOm86RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czqXOoc6kzpXOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOnM6lzqHOpM6ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzp3Olc6hzp/Oo86lzqHOpM6XzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzp3Olc6hzp/Op86pzqHOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6RzpvOkc6Zzp/OnM6lzpvOn86jIM6czqXOoc6kzpXOkc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOm86Zzp/Opc6hzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6RzpzOps6Zzp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOlc6hzpXOks6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOlc6kzqHOn86nzqnOoc6ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpnOnc6XIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzp/Opc6bzpnOnc6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOn86lzqHOnc6RzqHOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6hzpnOn86dzpHOmc6ZzprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoc6fzpPOk86ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOmc6kzpHOoc6RzpvOqc6dzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOoM6RzqHOpM6ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOpM6VzprOn86lzpvOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86kzqHOmc6TzpHOnc6ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqTOkc6ezpnOkc6hzqfOl86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6nzpHOm86ZzprOmSDOkc6czpLOoc6RzprOmc6RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqfOoc6lzqPOn86SzpnOpM6jzpEgzpLOn86dzpnOpM6jzpfOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOp86hzqXOo86fzpLOmc6kzqPOkSDOpM6hzpnOp86pzp3Omc6Uzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86RzrnPhM+JzrvOv86xzrrOsc+Bzr3Osc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMDAwOScsIEFyZWE6ICfOkc6TzpnOn86jIM6jzqTOlc6mzpHOnc6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOn86lzpLOkc6hzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOnM6RzqfOkc6ZzqHOkc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czqDOkc6czqDOmc6dzpcgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOkc6gzpHOlM6RzqTOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6hzpnOks6Zzp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOms6fzqXOoc6kzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOps6lzqTOlc6ZzpXOoyDOkc6ZzqTOqc6bL86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86RzrnPhM+JzrvOv86xzrrOsc+Bzr3Osc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMDAxMCcsIEFyZWE6ICfOkc6TzpnOkSDOks6RzqHOks6RzqHOkSDOoM6RzqHOkc6Szp/Om86RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOk86ZzpEgzpLOkc6hzpLOkc6hzpEgzqTOoc6ZzqfOqc6dzpnOlM6RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6gzpHOm86RzpnOn86azpHOoc6lzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6gzpHOoc6RzpLOn86bzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6dzqkgzpLOm86fzqfOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzqbOoc6RzqTOnyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOks6RzqHOlc6ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpTOn86TzqHOlyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzprOkc6SzpHOoyDOms6RzpnOnc6fzqXOoc6TzpnOn86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOoc6hzpHOmc6ZzprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqTOqSDOpM6hzpHOk86Rzp3OkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6hzqXOnyDOnc6VzqHOnyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6lzqHOkSDOks6TzpXOnc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6dzpXOoc6fzpzOkc6dzp3OkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6RzpvOkc6Zzp/Oms6RzqHOpc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOnc6kzpHOnc6RzqPOo86RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOoc6RzpLOn86bzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOlc6hzpnOo86kzpXOoc6ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpvOkc6kzpHOnc6ZzpHOoyDOoM6RzqHOkc6Szp/Om86RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOoc6fzqPOl86bzpnOkSDOpM6hzpnOp86pzp3Omc6UzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86nzp/Omc6dzpnOkc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6kzqHOkc6TzpHOnc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHOuc+Ez4nOu86/zrHOus6xz4HOvc6xzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzMwMDExJywgQXJlYTogJ86RzpPOmc6RIM6czpHOoc6Zzp3OkSDOnM6RzqTOkc6hzpHOk86azpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6dzqkgzpbOlc6lzpPOkc6hzpHOms6ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6Rzp3OqSDOms6VzqHOkc6jzp/Oks6fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6WzpXOpc6TzpHOoc6RzprOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOls6VzqXOk86RzqHOkc6azpkgzpHOoc6RzprOpc6dzpjOn86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOnM6RzqHOlc6kzqPOkc6ZzpnOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOpM6pIM6azpXOoc6RzqPOn86Szp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpvOqc6bzpXOmc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOkc6Tzp/Opc6bzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOkc6kzpHOoc6RzpPOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOm86RzpnOn86gzpvOkc6kzpHOnc6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOkc6gzqDOkc6UzpHOpM6VzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc65z4TPic67zr/Osc66zrHPgc69zrHOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzAwMTInLCBBcmVhOiAnzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6azpXOms6hzp/OoM6ZzpHOoyDOm86VzqXOms6RzpTOkc6jLCDOks6RzqHOms6fIM6bzpXOpc6azpHOlM6RzqMsIM6czp/Onc6XIM6RzpPOmc6fzqUgzpTOl86czpfOpM6hzpnOn86lIM6gzpHOm86RzpnOoc6fzqUgzpvOlc6lzprOkc6UzpHOoywgzqDOkc6bzpHOmc6hzp/OoyDOm86VzqXOms6RzpTOkc6jLCDOoM6RzpvOmc6RIM6gzpvOkc6TzpnOkSDOm86VzqXOms6RzpTOkc6jLCDOoM6VzqHOmc6Szp/Om86ZzpEgzprOkc6bzpHOnM6ZzqnOnc6RzqMgzpvOlc6lzprOkc6UzpHOoywgzqDOn86TzqnOnc6ZzpEgzpvOlc6lzprOkc6UzpHOoywgzqPOms6bzpHOks6RzpnOnc6RIM6bzpXOpc6azpHOlM6RzqMsIM6jzqTOlc6dzp8gzqDOn86TzqnOnc6ZzpHOoyDOm86VzqXOms6RzpTOkc6jLCDOo86kzpXOnc6fIM6nzpHOoc6RzpTOmc6RzqTOmc6azqnOnSDOm86VzqXOms6RzpTOkc6jJywgUHJlZmVjdHVyZTogJ86RzrnPhM+JzrvOv86xzrrOsc+Bzr3Osc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMDAxNCcsIEFyZWE6ICfOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzprOm86VzpnOo86fzqHOoc6VzqXOnM6RzqTOqc6dIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOnM6VzqPOn86bzp/Ok86TzpnOn86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6Rzp3OqSDOks6RzqPOmc6bzpnOms6XIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6Rzp3OqSDOms6fzqXOlM6fzqXOnc6ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6TzpHOm86RzqTOkc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6VzqXOl86dzp/Op86pzqHOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzpvOkc6SzqHOn86lzpbOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqTOqSDOks6RzqPOmc6bzpnOms6XIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOpM6pIM6azpHOm86RzpLOoc6fzqXOls6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOpM6pIM6azp/Opc6Uzp/Opc6dzpkgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOm86VzpnOo86fzqHOoc6VzqXOnM6RzqTOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6bzpfOnM6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azp/Oms6pzqHOlyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6fzqXOpM6jzp/Op86VzqHOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6hzqXOn86dzpXOoc6ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpXOm86ZzprOmc6dzpHOmc6ZzprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOnM6gzqHOlc6jzpnOkc6azp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzp3Olc6RIM6azpHOm86lzpTOqc6dzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzp7Ol86hzpHOmc6ZzprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6VzqHOkc6czpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOlc6hzpnOmM6pzqHOmc6fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6kzqHOmc6azp/Ooc6mzp8gzpXOpc6Xzp3On86nzqnOoc6Zzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86RzrnPhM+JzrvOv86xzrrOsc+Bzr3Osc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMDAxNScsIEFyZWE6ICfOkc6TzpnOkSDOpM6hzpnOkc6UzpEgzpzOkc6azqHOmc6dzp/Opc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzpPOmc6fzpkgzpHOoM6fzqPOpM6fzpvOn86ZIM6czpHOms6hzpnOnc6fzqXOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6TzpnOn86jIM6Rzp3OlM6hzpXOkc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzprOoc6VzqMgKM6bzpnOmM6fzpLOn86lzp3Omc6fKSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6dzqkgzpzOlc6kzpHOoM6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6SzpHOoc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpPOkc6SzpHOm86fzqUgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpPOoc6RzpzOnM6RzqTOmc6azp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOlM6RzqbOnc6ZzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzpbOkc6dzpHOmc6ZzprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqTOqSDOnM6RzprOoc6Zzp3On86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOqM6fzqHOoc6RzqfOlyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6fzqXOoc6kzpXOm86RzpnOmc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOpc6ozpXOm86XIM6czpHOms6hzpnOnc6fzqXOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOm86ZzpjOn86Szp/Opc6dzpkgKM6RzprOoc6VzqMpIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpHOms6hzpnOnc6fzqUgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOlc6jzpHOoc6ZzqPOpM6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpXOpM6Rzp7Okc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czqDOn86lzqHOm86VzqPOmc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOm86RzpnOn86WzpXOpc6TzpHOoc6fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOm86RzpnOn86nzqnOoc6ZIM6azpHOqM6fzqHOkc6nzpfOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6RzqHOkc6UzpXOmc6jzpkgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOn86kzpHOnM6fzqXOm86RIM6czpXOo86fzpvOn86TzpPOmc6fzqUgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOkc6hzpHOnc6kzpcgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqTOoc6ZzqfOqc6dzpnOnyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOpM6jzpnOm86ZzpPOmc6Rzp3Onc6RzpnOmc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc65z4TPic67zr/Osc66zrHPgc69zrHOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzAwMTcnLCBBcmVhOiAnzpHOk86Zzp/OmSDOmM6Vzp/OlM6pzqHOn86ZIM6SzpHOm86kzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6TzpnOn86jIM6czpfOnc6RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOk86hzpHOoM6ZzpTOn86azpHOnM6gzp/OoyDOks6RzpvOpM6fzqUgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOnM6gzpXOm86ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzqXOm86RzprOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOks6hzp/Opc6SzpnOkc6dzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpPOoc6RzpzOnM6RzqTOo86fzqXOm86ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6UzqHOn86czpnOpM6jzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpXOnM6gzpXOo86fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpjOpc6RzpzOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOnM6Zzp3On86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6dzpXOnyDOkc6TzqHOmc6UzpkgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzp3Olc6fIM6nzpHOm86azpnOn86gzp/Opc6bzp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzp7Ol86hzpHOms6ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzp7Oqc6czpXOoc6XIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOm86ZzpHOnM6gzpXOm86RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOpM6Zzp/OoM6fzqXOm86fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOpc6bzpnOkc6UzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOlc6hzpTOmc6azpHOms6ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpXOpM6jzpHOm86ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOl86TzpHOlM6ZzpEgzqDOlc6hzpTOmc6azpHOms6Zzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6fzqTOkc6czpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6hzp/Oo86XzpvOmc6RIM6SzpHOm86kzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86azpHOpM6Wzp/Oms6RzpzOoM6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOpM6RzpjOkc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6jzqXOms6VzpEgzpHOoc6kzpHOoywgzqTOoc6ZzprOm86Zzp3OnyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOps6hzpHOk86azp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOp86RzpvOms6Zzp/OoM6fzqXOm86fIM6RzpnOpM6pzpsvzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHOuc+Ez4nOu86/zrHOus6xz4HOvc6xzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzMwMDE5JywgQXJlYTogJ86RzpPOmc6fzqMgzpHOmM6Rzp3Okc6jzpnOn86jIM6bzpXOpc6azpHOlM6RzqMsIM6RzqHOp86fzp3OpM6fzqfOqc6hzpkgzpvOlc6lzprOkc6UzpHOoywgzpLOkc6hzp3Okc6azpHOoyDOm86VzqXOms6RzpTOkc6jLCDOks6RzqTOn86jIM6bzpXOpc6azpHOlM6RzqMsIM6azpHOnc6UzpfOm86RIM6bzpXOpc6azpHOlM6RzqMsIM6czqXOpM6ZzprOkc6jIM6bzpXOpc6azpHOlM6RzqMsIM6gzpHOm86Zzp/Oks6RzqHOms6RIM6bzpXOpc6azpHOlM6RzqMsIM6gzpHOnc6RzpPOn86lzpvOkSDOm86VzqXOms6RzpTOkc6jJywgUHJlZmVjdHVyZTogJ86RzrnPhM+JzrvOv86xzrrOsc+Bzr3Osc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMDAyMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6gzpHOnc6kzpXOm86VzpfOnM6pzp0gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOk86Zzp/OoyDOoM6fzpvOpc6azpHOoc6gzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6TzqHOkc6gzpnOlM6fzprOkc6czqDOn86jIM6dzpHOpc6gzpHOms6kzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6dzqTOmc6hzqHOmc6fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6Rzp3OqSDOoM6bzpHOpM6Rzp3Omc6kzpfOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOks6RzpvOpM6fzqMgzp3Okc6lzqDOkc6azqTOn86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOoc6Rzp/Opc6bzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOnM6RzprOpc6dzpXOmc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpnOo86fzprOkc6czqDOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czp/Om86lzprOoc6VzpnOnyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6bzpHOpM6Rzp3Omc6kzpfOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoc6ZzpbOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86gzpHOoc6kzp/Ooc6RzqfOlyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOps6hzpHOk86azpHOmc6ZzprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86RzrnPhM+JzrvOv86xzrrOsc+Bzr3Osc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMDAyMScsIEFyZWE6ICfOkc6TzpHOm86ZzpHOnc6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOk86ZzpEgzpLOkc6hzpLOkc6hzpEgzqPOkc6hzpTOmc6RzpTOkc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzpPOmc6RIM6UzpXOpc6kzpXOoc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOks6bzpHOo86Zzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzqDOlc6dzqTOkc6azp/Ooc6mzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6TzpnOkSDOpM6hzpnOkc6UzpEgzpPOn86lzp3Okc6hzpcgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOk86Zzp/OoyDOks6RzqPOmc6bzpXOmc6fzqMgzqDOkc6hzpHOms6RzpzOoM6lzpvOmc6pzp0gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOk86Zzp/OoyDOks6bzpHOo86Zzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6azqHOmc6UzpHOmc6ZzprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6dzpTOoc6pzp3Okc6ZzpnOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6Rzp3OqSDOkc6TzpnOn86jIM6SzpvOkc6jzpnOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOnM6gzp/OoyDOp86fzqXOnc6XzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOkc6hzpHOnM6Rzp3Okc6ZzpnOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOpM6pIM6RzpPOmc6fzqMgzpLOm86RzqPOmc6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOkc6kzqkgzprOkc6czqDOn86jIM6RzpPOmc6fzqUgzpLOm86RzqPOmc6fzqUgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOoc6VzpzOkc6jzqTOkSDOo86lzprOmc6RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpvOkc6azprOlc6jIM6nzp/Opc6dzpfOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOm86RzprOqc6czpHOpM6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6bzpHOoM6RzqTOnyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOm86Vzp3OpM6Zzp3OlyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOnM6RzqXOoc6fzpzOpc6kzpcgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOoM6RzqPOlM6fzqXOnc6RzpnOmc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOoM6fzprOoc6ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOm86RzpnOn86nzp/Opc6dzpcgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOkc6bzpHOmc6fzqfOqc6hzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6fzqTOmc6jzqTOmc6azp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqHOmc6fIM6nzp/Opc6dzpfOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86azpHOm86ZzqTOmc6dzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOms6ZzpHOlM6RzpnOmc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOn86Szp/Om86RzprOmc6kzpnOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6nzpHOoc6RzpzOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOp86RzqHOkc6lzpPOlyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOp86fzqXOnc6XIM6RzpnOpM6pzpsvzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHOuc+Ez4nOu86/zrHOus6xz4HOvc6xzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzMwMDIyJywgQXJlYTogJ86RzpPOmc6RIM6kzqHOmc6RzpTOkSDOp86fzpzOn86hzpfOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6nzpvOkc6Uzp/Oms6RzqPOpM6hzp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpTOmc6RzqPOlc6bzpvOkc6azpkgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpTOmc6RzqPOlc6bzpvOnyDOnc6RzqXOoM6RzprOpM6ZzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqPOpM6Rzp3Olc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOpM6pIM6gzpvOkc6kzpHOnc6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOlc6hzpnOo86kzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOlc6hzprOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpvOkc6kzpHOnc6fzqMgzp3Okc6lzqDOkc6azqTOmc6RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqfOn86czp/Ooc6XIM6RzpnOpM6pzpsvzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHOuc+Ez4nOu86/zrHOus6xz4HOvc6xzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzMwMDIzJywgQXJlYTogJ86RzpzOoM6VzpvOkc6azpnOqc6kzpnOo86jzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOnc6pIM6nzqnOoc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOpM6pIM6nzqnOoc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzp/OlM6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc65z4TPic67zr/Osc66zrHPgc69zrHOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzAwMjcnLCBBcmVhOiAnzpHOk86Zzp/OoyDOms6pzp3Oo86kzpHOnc6kzpnOnc6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc65z4TPic67zr/Osc66zrHPgc69zrHOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzAxMDAnLCBBcmVhOiAnzpHOk86ZzpEgzqDOkc6hzpHOo86azpXOpc6XICDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzprOkc6bzqXOks6ZzqnOnSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6hzpfOk86Rzp3Okc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOpM6hzpnOp86pzp3Omc6UzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6TzqHOmc6dzpnOnyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6azqHOn86gzp/OpM6RzpzOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzpvOqc6dzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6czqDOlc6bzpnOkSDOpM6hzpnOp86pzp3Omc6UzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6lzpvOkc6azpnOlc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6SzpHOmc6dzpHOoc6Zzp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpLOkc6hzprOn86lzpvOmc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6SzpXOm86fzqXOp86ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6TzpXOoc6fzpLOkc6jzpnOm86XzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpPOmc6Rzp3On86lzpbOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOk86fzqXOoc6ZzqnOpM6ZzqPOo86RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6UzpnOkc6czpHOnc6kzpHOmc6ZzprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOlM6fzprOmc6czpkgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpTOoc6fzqPOmc6dzpnOkc6kzpnOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6VzpvOkc6Zzp/Ops6lzqTOnyDOnc6VzpHOoM6fzpvOl86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6VzpvOlc6lzpjOlc6hzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOlc6bzpvOl86dzpnOms6RIM6RzpPOoc6Zzp3Omc6fzqUgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpXOm86bzpfOnc6ZzprOnyDOo86azp/Opc6kzpXOoc6RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOkc6azpHOks6RzqMgzqPOms6fzqXOpM6VzqHOkc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOm86lzpLOmc6RIM6kzqHOmc6nzqnOnc6ZzpTOkc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOnM6RzqHOn86lzpvOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqPOpM6Rzp3On86lzpvOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqPOpM6hzpHOms6ZIM6SzpHOm86kzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6VzpvOkc6dzpnOpM6XzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOlc6bzpvOkc6azpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6VzqHOkc6jzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6fzprOms6Zzp3On86SzqHOpc6jzpcgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOn86azprOmc6dzp/Om86fzpPOk86fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOn86azprOmc6dzp/OoM6lzpvOmc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azqHOkc6ozpcgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOpc6gzpHOoc6ZzqPOo86fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOpc6ozpXOm86XICjOo86mzpfOnc6RzqMpIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6bzpHOk86azpHOlM6ZIM6bzpXOoM6Vzp3On86lzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpvOkc6jzqDOlc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6bzpXOoM6Vzp3On86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6bzpXOpc6azpEgIM6RzpPOoc6Zzp3Omc6fzqUgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpvOlc6lzprOkSDOlM6fzprOmc6czpnOn86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6bzpnOkc6TzpHOmc6ZzprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOm86ZzpzOnc6XIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpHOm86VzpLOoc6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOkc6kzqPOn86lzprOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOnM6VzpPOkc6bzpcgzqfOqc6hzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOoM6fzqXOls6Zzp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzp3Olc6RIM6RzpLOn86hzpHOnc6XIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6dzpXOkc6gzp/Om86XIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6fzqfOmM6ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOkc6kzp/Opc6bzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6Vzp3OpM6RzprOn86hzqbOnyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6bzpHOpM6Rzp3On86jIM6RzpzOoM6VzpvOmc6pzp0gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOm86RzqTOkc6dzp/OoyDOms6RzpvOpc6SzpnOqc6dIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzp/OpM6RzpzOn86lzpvOkSDOpM6hzpnOp86pzp3Omc6UzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6lzqHOk86ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6hzpHOmc6dzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOkc6hzpPOmc6RzpTOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86ZzpPOms6fzqXOnc6RzpnOmc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOmc6kzp/OnM6Vzp3OkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86azp/Opc6kzpXOoc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6jzprOn86lzqTOlc6jzpnOkc6UzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOoM6fzpvOkc6ZzqTOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86kzpHOnM6RzqTOn86TzpnOkc6dzp3Okc6ZzpnOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6jzqTOkc6lzqHOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6jzqTOoc6RzqTOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6jzqTOoc6fzpPOk86lzpvOkc6ZzpnOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6jzqfOmc6dzp/OoyDOkc6TzqHOmc6dzpnOn86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6kzqHOmc6Rzp3OpM6RzpnOmc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqTOo86fzqXOnc6RzpnOmc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqbOoc6RzpPOms6fzqPOms6RzpvOkSDOkc6ZzqTOqc6bL86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86RzrnPhM+JzrvOv86xzrrOsc+Bzr3Osc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMDE1MCcsIEFyZWE6ICfOkc6TzorOkSDOks6RzqHOks6GzqHOkSDOoM6RzqHOkc6SzozOmyDOkc6ZzqTOqc6bzp/Okc6azpHOoc6dzpHOnc6ZzpHOoywgzpHOk86KzpEgzqDOkc6hzpHOo86azpXOpc6JIM6gzpHOoc6RzpIgzpHOmc6kzqnOm86fzpHOms6RzqHOnc6Rzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHOuc+Ez4nOu86/zrHOus6xz4HOvc6xzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzMwMjAwJywgQXJlYTogJ86RzpPOmc6fzqMgzpjOqc6czpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6TzpnOn86jIM6jzqXOnM6VzqnOnSDOnM6VzqPOn86bzp/Ok86TzpnOn86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzpPOoc6RzqbOn86hzqHOkc6nzpcgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOk86hzpnOm86ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOnc6pIM6czp/Opc6jzp/Opc6hzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOoc6SzpHOnc6ZzqTOkc6ZzpnOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzqHOp86RzpnOkSDOkc6bzpnOms6RzqHOnc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6SzpHOo86ZzpvOkc6Uzpkgzp3Ol86jzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOlc6bzpvOl86dzpnOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6WzpXOo86kzpcgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpjOlc6fzpTOqc6hzpHOms6RzpnOmc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOkc6kzqkgzpXOm86bzpfOnc6ZzprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqTOqSDOoc6VzqTOo86Zzp3OkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6fzpzOnM6RIM6dzpfOo86fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOlc6jzp/Oms6RzpzOoM6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOlc6jzp/Om86fzpPOk86ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpXOpM6fzqfOmSDOkc6TzpnOn86lIM6YzqnOnM6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czqDOkc6czqDOkc6azp/Opc6bzpEgzp3Ol86jzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOnc6VzpEgzqXOlM6hzpHOk86pzpPOlc6ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzp3On86kzpnOn86jIM6UzpnOkc6lzpvOn86jIM6dzpfOo86fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOkc6jzqDOkc6bzpnOkc6hzpXOmc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqDOoc6fzprOn86gzpHOnc6XzqPOpM6fzqMgzp3Ol86jzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86nzpnOnc6fzqMgzpzOlc6jzp/Om86fzpPOk86Zzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86nzp/Omc6dzpnOkc6jIM6dzpfOo86fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqTOn86lzqHOm86ZzqMgzp3Ol86jzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOpM6hzpXOm86RzpPOms6RzpjOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOpM6hzqXOoM6VzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqfOn86lzp3Omc6jzqTOkSDOkc6ZzqTOqc6bL86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86RzrnPhM+JzrvOv86xzrrOsc+Bzr3Osc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMDMwMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6SzpHOo86ZzpvOlc6Zzp/OoyDOks6fzpzOks6fzprOn86lzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOnc6RzpLOoc6lzqTOlyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6dzpjOn86mzqXOpM6fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6Rzp3OqSDOkc6mzqHOn86ezqXOm86ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpLOlc6bzpLOmc6dzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpLOm86RzqfOn86czpHOnc6UzqHOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOks6fzpzOks6fzprOn86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6TzpHOks6hzp/Om86ZzpzOnc6XIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6TzpHOks6hzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOk86VzqbOpc6hzpEgzpzOoM6Rzp3Omc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6Tzp/Om86VzpzOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOlM6RzqbOnc6XIM6czpXOo86fzpvOn86TzpPOmc6fzqUgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpTOkc6mzp3OlyDOnc6RzqXOoM6RzprOpM6ZzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqPOpM6hzpHOms6ZIM6dzpHOpc6gzpHOms6kzpnOkc6jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOpM6RzqbOpc6TzpnOnyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqTOqSDOkc6mzqHOn86ezqXOm86ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOkc6kzqkgzpTOkc6mzp3OlyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6RzqTOqSDOnM6RzpzOn86lzpvOkc6UzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOn86lzqTOo86fzpPOmc6Rzp3Onc6RzpnOmc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpvOlc6lzprOkSDOks6fzpzOks6fzprOn86lzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpvOpc6TzpnOkSDOnc6Vzp/Oms6RzqPOpM6hzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOnM6RzpzOn86lzpvOkc6UzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOkc6hzpzOkc6hzpEgzp3Okc6lzqDOkc6azqTOmc6RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOmc6azqHOnyDOoM6RzpvOkc6Zzp/Op86pzqHOkc6azpkgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOn86dzpcgzpHOk86Zzp/OpSDOmc6pzpHOnc6dzpcgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzp3Okc6lzqDOkc6azqTOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6ezpfOoc6fzqDOl86TzpHOlM6fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOm86RzpnOn86nzqnOoc6RzprOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6ZzqTOo86Zzp3Okc6ZzpnOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6hzpnOk86Rzp3OmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86azpHOm86RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6jzqXOms6ZzpEgzqDOmc6kzqPOmc6dzpHOmc6ZzprOqc6dIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6jzqbOl86azpHOmc6ZzprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86RzrnPhM+JzrvOv86xzrrOsc+Bzr3Osc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMDQwMCcsIEFyZWE6ICfOkc6TzpPOlc6bzp/Oms6RzqPOpM6hzp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOk86Zzp/OoyDOl86bzpnOkc6jIM6czpXOo86fzpvOn86TzpPOmc6fzqUgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6RzpnOpM6pzpvOmc6azp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6ZzqTOqc6bzpnOms6fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6TzpnOkc6kzqPOkc6ZzpnOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpXOps6RzpvOn86SzqHOpc6jzp8gzpHOmc6kzqnOm86ZzprOn86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpXOps6RzpvOn86SzqHOpc6jzp/OoyDOo86kzpHOnM6dzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOm86lzqPOmc6czpHOp86VzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOnM6VzqPOkSDOoM6XzpPOkc6UzpkgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOoM6fzqXOls6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6dzpfOo86RzprOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6fzqHOn86jIM6czpXOo86fzpvOn86TzpPOmc6fzqUgzp3Ol86jzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86kzpHOmM6czp/OoyDOkc6TzpPOlc6bzp/Oms6RzqPOpM6hzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86kzpHOmM6czp/OoyDOo86kzpHOnM6dzqnOnSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86kzpHOnM6dzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqbOoc6RzpPOms6fzqXOm86RzpnOmc6azpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqfOkc6bzpnOms6ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6nzqHOpc6jzp/Oks6VzqHOk86ZIM6RzpnOpM6pzpsvzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHOuc+Ez4nOu86/zrHOus6xz4HOvc6xzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzMwNTAwJywgQXJlYTogJ86RzpPOmc6RIM6kzqHOmc6RzpTOkSDOks6RzpvOpM6fzqUgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOk86Zzp/OmSDOmM6Vzp/OlM6pzqHOn86ZIM6azpXOp86hzpnOnc6ZzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6czqDOlc6bzpHOms6ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6RzpzOps6ZzpvOn86nzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6czqbOmc6bzp/Op86ZzprOnyDOkc6hzpPOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6Rzp3On86Zzp7Omc6RzqTOmc6azp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOoc6ZzpHOlM6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6SzpHOoc6VzqTOkc6UzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOkc6bzqXOks6ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOkc6czqDOn86jIM6RzpzOoM6VzpvOkc6azpnOn86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOnc6RzpvOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOpM6RzqbOn86lzqHOms6fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpXOoc6RzpzOmc6UzpkgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOlc6nzqHOmc6dzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6fzpzOoM6fzpjOlc6azpvOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6hzpnOms6VzpvOm86fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpvOmc6czp3Okc6ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOkc6azqHOpc6nzqnOoc6ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOkc6lzqHOn86hzpHOp86XIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpXOk86RzqMgzprOkc6czqDOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czp/Onc6XIM6hzpXOmM6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czqDOn86lzprOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6ezpfOoc6fzpvOmc6SzpHOlM6fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpXOpM6hzpHOm86pzp3OkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6XzpPOkc6UzpHOms6ZIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpvOkc6kzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6hzp/Ops6XzqTOl86jIM6XzpvOmc6RzqMgzpLOkc6bzqTOn86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzqTOlc6bzpXOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86RzqHOlM6Zzp3Omc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6jzprOoc6VzpnOms6fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6jzqDOkc6hzqTOnyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86kzpHOnc6fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqTOoc6ZzpEgzpHOm86pzp3Omc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6kzqHOmc6Rzp3OpM6RzqbOpc6bzpvOn86lzpvOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOpM6jzp/Opc6azprOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOps6RzpvOkc6TzpPOmc6RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqbOpM6VzpvOmc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6ozpfOm86RIM6RzpvOqc6dzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86RzrnPhM+JzrvOv86xzrrOsc+Bzr3Osc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyMTA1MScsIEFyZWE6ICfOkc6TzpnOkSDOkc6ZzprOkc6kzpXOoc6Zzp3OlyDOkc6hzpPOn86bzpnOlM6RzqMsIM6RzpPOmc6fzpkgzpHOnc6RzqHOk86lzqHOn86ZIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOms6kzpcgzqXOlM6hzpHOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6RzqfOm86RzpTOmc6kzqPOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6VzqHOnM6Zzp/Onc6XIM6RzqHOk86fzpvOmc6UzpHOoywgzpfOm86Zzp/Oms6RzqPOpM6hzp8gzpHOoc6Tzp/Om86ZzpTOkc6jLCDOmM6VzqHOnM6XzqPOmc6RIM6RzqHOk86fzpvOmc6UzpHOoywgzprOkc6czqDOn86jIM6VzqHOnM6Zzp/Onc6XzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOms6Zzp3Olc6kzpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOms6fzqXOks6VzqHOpM6RIM6RzqHOk86fzpvOmc6UzpHOoywgzpvOn86lzprOkc6ZzqTOmc6fIM6RzqHOk86fzpvOmc6UzpHOoywgzpzOlc6kzp/Op86ZIM6YzpXOoc6czpfOo86ZzpHOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6czp/Onc6XIM6RzpPOmc6pzp0gzpHOnc6RzqHOk86lzqHOqc6dIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOlc6kzqHOn86YzpHOm86RzqPOo86RIM6VzqHOnM6Zzp/Onc6XzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOoM6XzpPOkc6UzpnOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6gzpvOlc6gzpnOnyDOkc6hzpPOn86bzpnOlM6RzqMsIM6gzp/OlM6RzqHOmSDOkc6hzpPOn86bzpnOlM6RzqMsIM6jzqnOm86Xzp3Okc6hzpkgzpHOoc6Tzp/Om86ZzpTOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4HOs86/zrvOr860zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjEwNTInLCBBcmVhOiAnzpHOk86Zzp/OoyDOkc6dzpTOoc6VzpHOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6RzpTOkc6czpkgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6dzpHOo86kzpHOo86fzqDOn86lzpvOkc6ZzpnOms6RIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOoc6azpHOlM6ZzprOnyDOkc6hzpPOn86bzpnOlM6RzqMsIM6RzqHOp86RzpnOkSDOlc6gzpnOlM6RzqXOoc6fzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6jzprOm86XzqDOmc6VzpnOnyDOlc6gzpnOlM6RzqXOoc6fzqUgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOks6fzpjOmc6azpnOnyDOkc6hzpPOn86bzpnOlM6RzqMsIM6TzpnOkc6dzp3On86lzpvOkc6ZzpnOms6RIM6RzqHOk86fzpvOmc6UzpHOoywgzpTOl86czp/Oo86ZzpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOlc6ezp/Op86XIM6kzqHOkc6nzpXOmc6RzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOms6fzprOms6Zzp3Okc6UzpXOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6azp/Om86ZzpHOms6ZIM6RzqHOk86fzpvOmc6UzpHOoywgzprOn86hzqnOnc6XIM6RzqHOk86fzpvOmc6UzpHOoywgzpvOpc6Tzp/Opc6hzpnOnyDOkc6hzpPOn86bzpnOlM6RzqMsIM6czpHOpM6RzqHOkc6TzprOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6hzp/Opc6jzpLOkc6dzpHOmc6ZzprOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6jzqDOl86bzpXOmc6RIM6RzqHOk86fzpvOmc6UzpHOoywgzqPOpM6RzpzOkc6kzpHOmc6ZzprOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6jzqTOkc6lzqHOn86jIM6RzqHOk86fzpvOmc6UzpHOoywgzqTOoc6RzqfOlc6ZzpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOp86Rzp3OmSDOnM6VzqHOms6fzqXOoc6XIM6RzqHOk86fzpvOmc6UzpHOoywgzqfOn86lzqTOkc6bzpHOmc6ZzprOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6nzqHOpc6jzp/Oo86gzpfOm86ZzqnOpM6ZzqPOo86RIM6RzqHOk86fzpvOmc6UzpHOoycsIFByZWZlY3R1cmU6ICfOkc+BzrPOv867zq/OtM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIxMDU0JywgQXJlYTogJ86TzpHOm86Rzp3Okc6ZzpnOms6RIM6dzpHOpc6gzpvOmc6RzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOlM6XzpzOkc6Zzp3OkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6czp/Onc6XIM6kzpHOns6ZzpHOoc6nzqnOnSDOkc6hzpPOn86bzpnOlM6RzqMsIM6dzpXOkSDOlM6XzpzOkc6Zzp3OkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6dzpXOkSDOlc6gzpnOlM6RzqXOoc6fzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOoM6RzqHOkc6bzpnOkSDOnc6VzpHOoyDOlc6gzpnOlM6RzqXOoc6fzqUgzpHOoc6Tzp/Om86ZzpTOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4HOs86/zrvOr860zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjEwNTUnLCBBcmVhOiAnzpHOk86ZzpEgzqTOoc6ZzpHOlM6RIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOnM6RzqHOmc6Rzp3On86jIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOnM6lzpPOlM6RzpvOmc6kzqPOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6Rzp3Opc6mzpkgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6hzpHOp86dzpHOmc6fIM6RzqHOk86fzpvOmc6UzpHOoywgzpPOms6RzqTOls6ZzpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOl86hzpHOmc6fIM6RzqHOk86fzpvOmc6UzpHOoywgzpzOkc6dzpXOo86XzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOnM6VzqTOn86nzpkgzpHOk86Zzp/OpSDOlM6XzpzOl86kzqHOmc6fzqUgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOnM6VzqTOn86nzpkgzp3Okc6lzqDOm86ZzpHOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6czpnOlM6VzpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOnM6fzp3OlyDOkc6TzpnOn86lIM6YzpXOn86Uzp/Oo86Zzp/OpSDOkc6hzpPOn86bzpnOlM6RzqMsIM6gzpHOnc6RzqHOmc6kzpfOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6gzpvOkc6kzpHOnc6ZzqTOl86jIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOn86lzpvOm86RzprOmc6UzpEgzpHOoc6Tzp/Om86ZzpTOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4HOs86/zrvOr860zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjEwNTYnLCBBcmVhOiAnzqTOn86bzp8gzpHOoc6Tzp/Om86ZzpTOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4HOs86/zrvOr860zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjEwNTknLCBBcmVhOiAnzpXOoM6Rzp3OqSDOlc6gzpnOlM6RzqXOoc6fzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOoM6RzpvOkc6ZzpEgzpXOoM6ZzpTOkc6lzqHOn86jIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOkc6dzpHOk86ZzpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOo86gzpfOm86ZzpEgzpHOoc6Tzp/Om86ZzpTOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4HOs86/zrvOr860zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjExMDAnLCBBcmVhOiAnzpHOk86ZzpEgzprOpc6hzpnOkc6azpcgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6TzpnOn86jIM6RzpTOoc6ZzpHOnc6fzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6hzpPOn86bzpnOms6fIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOoc6ZzpEgzp3Okc6lzqDOm86ZzpHOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6RzqPOmc6dzpcgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6jzqDOoc6fzpLOoc6lzqPOlyDOkc6hzpPOn86bzpnOlM6RzqMsIM6TzpHOm86Rzp3Okc6ZzpnOms6RIM6RzqHOk86fzqXOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6Vzp7Oqc6jzqTOl86jIM6RzqHOk86fzpvOmc6UzpHOoywgzprOkc6gzp/OlM6ZzqPOpM6hzpnOkc6jIM6RzqHOk86fzpvOmc6UzpHOoywgzpvOlc6lzprOkc6azpnOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6czp/Onc6XIM6azpHOoc6RzprOkc6bzpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOnM6fzp3OlyDOoM6Rzp3Okc6TzpnOkc6jIM6RzqHOk86fzpvOmc6UzpHOoywgzp3Okc6lzqDOm86Zzp8gzpHOoc6Tzp/Om86ZzpTOkc6jLCDOnc6VzpEgzqTOmc6hzqXOnc6Yzp/OoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6dzpXOnyDOoc6fzpXOmc6dzp8gzpHOoc6Tzp/Om86ZzpTOkc6jLCDOoM6RzpvOmc6fzqfOqc6hzpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOoM6Rzp3Okc6TzpnOkSDOkc6TzpnOn86lIM6Rzp3OlM6hzpnOkc6dzp/OpSDOkc6hzpPOn86bzpnOlM6RzqMsIM6gzpHOoc6RzpvOmc6RIM6RzqPOmc6dzpfOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6gzqHOn86mzpfOpM6XzqMgzpfOm86ZzpHOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6gzqXOoc6TzpnOqc6kzpnOms6RIM6RzqHOk86fzpvOmc6UzpHOoywgzqTOmc6hzqXOnc6Yzp/OoyDOkc6hzpPOn86bzpnOlM6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPgc6zzr/Ou86vzrTOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyMTIwMCcsIEFyZWE6ICfOkc6TzpnOkSDOkc6ZzprOkc6kzpXOoc6Zzp3OlyDOms6fzqXOpM6jzp/OoM6fzpTOmc6fzqUgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzprOkc6hzqXOkc6jIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOk86Zzp/OoyDOo86kzpXOps6Rzp3On86jIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOk86hzpnOm86ZzqTOo86RIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOlc6hzp/OlM6hzp/OnM6Zzp8gzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6azp/Oks6RIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOm86czqXOoc6fzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6dzpTOoc6ZzqTOo86RIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOoc6Tzp/OoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6RzqHOmc6RIM6RzqHOk86fzqXOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6SzpXOm86Rzp3Omc6UzpnOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6SzqHOn86lzqPOpM6Zzp8gzpHOoc6Tzp/Om86ZzpTOkc6jLCDOk86RzpvOkc6kzpkgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOlM6RzpvOkc6czpHOnc6RzqHOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6UzpnOp86RzpvOmc6RIM6RzqHOk86fzpvOmc6UzpHOoywgzpXOm86bzpfOnc6ZzprOnyDOkc6hzpPOn86bzpnOlM6RzqMsIM6Wzp/Ok86azpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOl86hzpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOmc6dzpHOp86fzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOms6RzpvOkc6czpHOms6ZIM6RzqHOk86fzpvOmc6UzpHOoywgzprOkc6hzqXOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6azpXOps6RzpvOkc6hzpkgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOms6ZzpLOlc6hzpkgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOms6fzprOm86RIM6RzqHOk86fzpvOmc6UzpHOoywgzprOn86lzpPOkc6ZzpnOms6RIM6RzqHOk86fzpvOmc6UzpHOoywgzprOn86lzqHOpM6RzprOmSDOkc6hzpPOn86bzpnOlM6RzqMsIM6azp/Opc6kzqPOn86gzp/OlM6ZIM6RzqHOk86fzpvOmc6UzpHOoywgzprOoc6lzpEgzpLOoc6lzqPOlyDOkc6hzpPOn86bzpnOlM6RzqMsIM6azqHOpc6fzp3Olc6hzpkgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOm86RzpvOn86lzprOkc6jIM6RzqHOk86fzpvOmc6UzpHOoywgzpvOmc6czp3Olc6jIM6RzqHOk86fzpvOmc6UzpHOoywgzpzOkc6Tzp/Opc6bzpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOnM6RzpvOkc6dzqTOoc6Vzp3OmSDOkc6hzpPOn86bzpnOlM6RzqMsIM6czpXOoc6azp/Opc6hzpkgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOnM6fzp3Okc6jzqTOl86hzpHOms6ZIM6RzqHOk86fzpvOmc6UzpHOoywgzpzOoM6fzpbOmc6fzp3Olc6bzpHOmc6ZzprOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6czqDOn86hzqPOkc6jIM6RzqHOk86fzpvOmc6UzpHOoywgzpzOpc6bzp/OmSDOkc6hzpPOn86bzpnOlM6RzqMsIM6dzpXOnyDOl86hzpHOmc6fIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOkc6dzp/Ooc6RzpzOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6gzqHOn86jzqXOnM6dzpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOoM6lzqHOk86VzpvOm86RIM6RzqHOk86fzpvOmc6UzpHOoywgzqPOms6RzqbOmc6UzpHOms6Zzp8gzpHOoc6Tzp/Om86ZzpTOkc6jLCDOo86gzpHOnc6RzpnOmc6azpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOo86gzpfOm86ZzqnOpM6RzprOl86jIM6RzqHOk86fzpvOmc6UzpHOoywgzqPOpM6RzpjOkc6ZzpnOms6RIM6RzqHOk86fzpvOmc6UzpHOoywgzqPOpM6VzqHOnc6ZzqTOo86RIM6RzqHOk86fzpvOmc6UzpHOoywgzqPOpM6hzpHOks6XIM6hzpHOp86XIM6RzqHOk86fzpvOmc6UzpHOoywgzqPOpc6dzp/Ooc6fIM6RzqHOk86fzpvOmc6UzpHOoywgzqPOp86Zzp3On86nzqnOoc6ZIM6RzqHOk86fzpvOmc6UzpHOoywgzqTOl86czpXOnc6ZIM6RzqHOk86fzpvOmc6UzpHOoywgzqTOn86lzqHOnc6ZzprOmSDOkc6hzpPOn86bzpnOlM6RzqMsIM6kzqHOmc6jzqTOoc6RzqTOnyDOkc6hzpPOn86bzpnOlM6RzqMsIM6mzpnOp86kzpnOnyDOkc6hzpPOn86bzpnOlM6RzqMsIM6mzqHOlc6TzprOkc6Zzp3OkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6nzpHOnc6kzpHOms6ZzpEgzpLOoc6fzqXOo86kzpnOn86lIM6RzqHOk86fzpvOmc6UzpHOoywgzqfOlc6bzpzOl86jIM6RzqHOk86fzpvOmc6UzpHOoycsIFByZWZlY3R1cmU6ICfOkc+BzrPOv867zq/OtM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIxMzAwJywgQXJlYTogJ86RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzprOoc6Rzp3Omc6UzpnOn86lIM6RzqHOk86fzpvOmc6UzpHOoywgzpLOm86RzqfOn86gzp/Opc6bzpXOmc6azpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOlM6ZzpTOpc6czpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOlM6fzqHOn86lzqbOmSDOms6fzpnOm86RzpTOn86jIM6RzqHOk86fzpvOmc6UzpHOoywgzpTOn86hzp/Opc6mzpkgzprOoc6Rzp3Omc6UzpnOn86lIM6RzqHOk86fzpvOmc6UzpHOoywgzpjOpc6dzpkgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOms6RzpzOoM6fzqMgzprOn86ZzpvOkc6Uzp/OoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6azp/Omc6bzpHOlM6RIM6RzqHOk86fzpvOmc6UzpHOoywgzprOn86hzqnOnc6ZzpTOkSDOnc6XzqPOn86jIM6RzqHOk86fzpvOmc6UzpHOoywgzprOn86lzp3On86lzqDOmSDOkc6hzpPOn86bzpnOlM6RzqMsIM6azqHOkc6dzpnOlM6ZIM6RzqHOk86fzpvOmc6UzpHOoywgzpvOkc6azprOlc6jIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOkc6dzp/Ooc6RzpzOkSDOlc6hzpzOmc6fzp3Omc6UzpHOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6gzpHOoc6RzpvOmc6RIM6mzp/Opc6hzp3Oqc6dIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOlc6bzpXOlyDOkc6hzpPOn86bzpnOlM6RzqMsIM6gzpXOpM6hzp/OmM6RzpvOkc6jzqPOkSDOms6hzpHOnc6ZzpTOmc6fzqUgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOoc6RzpTOnyDOkc6hzpPOn86bzpnOlM6RzqMsIM6jzpHOm86Rzp3OpM6Zzp8gzpHOoc6Tzp/Om86ZzpTOkc6jLCDOpM6WzpXOnM6ZIM6RzqHOk86fzpvOmc6UzpHOoywgzqbOm86RzpzOoM6fzqXOoc6RIM6RzqHOk86fzpvOmc6UzpHOoywgzqbOn86lzqHOnc6fzpkgzpHOoc6Tzp/Om86ZzpTOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4HOs86/zrvOr860zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjIwMDEnLCBBcmVhOiAnzpHOk86ZzpEgzpHOnc6RzqPOpM6RzqPOmc6RIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOk86Zzp/OmSDOkc6jzqnOnM6RzqTOn86ZIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6azqXOnc6fzqXOoc6ZzpHOoyDOkc6hzprOkc6UzpnOkc6jLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6RzqHOp86RzpnOkc6jIM6XzqHOkc6ZzpHOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzpHOo86kzqHOn86lzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6TzpnOn86jIM6jzqTOlc6mzpHOnc6fzqMgzpHOo86kzqHOn86lzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6TzpnOn86jIM6nzqHOmc6jzqTOn86mzp/Ooc6fzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6VzqTOn86nzqnOoc6Zzp8gzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6hzprOkc6UzpnOms6fIM6nzqnOoc6Zzp8gzpHOoc6Tzp/Om86ZzpTOkc6jLCDOkc6jzqTOoc6fzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOks6RzpjOmc6RIM6RzqHOk86fzpvOmc6UzpHOoywgzpLOkc6hzpLOn86TzpvOlyDOkc6hzpPOn86bzpnOlM6RzqMsIM6ZzpXOoc6RIM6czp/Onc6XIM6bzp/Opc6azp/Opc6jIM6RzqPOpM6hzp/Opc6jIM6RzqHOk86fzpvOmc6UzpHOoywgzprOkc6czpnOnc6RzqHOmSDOkc6hzpPOn86bzpnOlM6RzqMsIM6azpHOo86kzpHOnc6ZzqTOo86RIM6RzqHOk86fzpvOmc6UzpHOoywgzprOkc6kzqkgzpLOlc6hzpLOlc6dzpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOms6RzqTOqSDOlM6fzpvOmc6Rzp3OkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6bzp/Opc6bzp/Opc6UzpnOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6czpXOm86ZzqPOo86ZIM6RzqHOk86fzpvOmc6UzpHOoywgzpzOlc6kzpHOnM6fzqHOps6pzqPOlyDOkc6hzpPOn86bzpnOlM6RzqMsIM6dzpXOn86nzqnOoc6ZIM6azp/Ooc6RzprOn86Szp/Opc6dzpnOn86lIM6RzqHOk86fzpvOmc6UzpHOoywgzp7Ol86hzp/OoM6XzpPOkc6Uzp8gzpHOoc6Tzp/Om86ZzpTOkc6jLCDOn86hzpXOmc6dzpcgzpzOlc6bzpnOk86fzqUgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOoM6bzpHOms6RIM6ezpfOoc6fzqDOl86TzpHOlM6fzqUgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOoM6bzpHOpM6Rzp3On86jIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOn86hzqTOlc6jIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOoc6fzqPOl86bzpnOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6hzp/Opc6dzpHOmc6ZzprOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6jzpnOpM6RzpnOnc6RIM6RzqHOk86fzpvOmc6UzpHOoywgzqPOpM6fzpvOn86jIM6RzqHOk86fzpvOmc6UzpHOoywgzqbOn86lzp3OpM6pzpzOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6nzpHOnc6kzpHOms6ZzpEgzpHOo86kzqHOn86lzqMgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOp86RzqHOkc6UzqHOn86jIM6RzqHOk86fzpvOmc6UzpHOoywgzqfOlc6ZzpzOlc6hzpnOnc6XIM6czpXOm86ZzpPOn86lIM6RzqHOk86fzpvOmc6UzpHOoycsIFByZWZlY3R1cmU6ICfOkc+BzrrOsc60zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyMjAwMicsIEFyZWE6ICfOkc6TzqHOmc6UzpkgzpHOoc6azpHOlM6ZzpHOoywgzpLOm86RzqfOlc6hzp3OkSDOkc6hzprOkc6UzpnOkc6jLCDOlM6hzpHOms6fzpLOn86lzp3Omc6fIM6RzqHOms6RzpTOmc6RzqMsIM6YzpXOn86azqTOmc6jzqTOnyDOkc6hzprOkc6UzpnOkc6jLCDOms6RzpvOpc6SzpnOkSDOms6RzqHOnc6VzqPOlyDOkc6hzprOkc6UzpnOkc6jLCDOms6RzpzOlc6dzpnOpM6jzpEgzpHOoc6azpHOlM6ZzpHOoywgzprOkc6hzpLOn86lzp3OmSDOkc6hzprOkc6UzpnOkc6jLCDOms6RzqHOlM6RzqHOkc6jIM6RzqHOms6RzpTOmc6RzqMsIM6bzpXOks6ZzpTOmSDOkc6hzprOkc6UzpnOkc6jLCDOnc6Vzp/OoyDOms6RzqHOlM6RzqHOkc6jIM6RzqHOms6RzpTOmc6RzqMsIM6fzqHOp86fzpzOlc6dzp/OoyDOkc6hzprOkc6UzpnOkc6jLCDOoM6RzpvOkc6Zzp/OoM6lzqHOk86fzqMgzpzOkc6dzqTOmc6dzpXOmc6RzqMgzpHOoc6azpHOlM6ZzpHOoywgzqDOoc6RzqPOmc6dzp8gzpHOoc6azpHOlM6ZzpHOoywgzqHOn86lzqPOo86XzqMgzpHOoc6azpHOlM6ZzpHOoywgzqPOmc6czpnOkc6UzpXOoyDOkc6hzprOkc6UzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4HOus6xzrTOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIyMDA3JywgQXJlYTogJ86RzqHOkc6nzp/Oks6RIM6RzqHOms6RzpTOmc6RzqMsIM6SzpvOn86TzpPOn86jIM6RzqHOms6RzpTOmc6RzqMsIM6UzpfOnM6XzqTOo86Rzp3OkSDOkc6hzprOkc6UzpnOkc6jLCDOls6RzqTOn86lzp3OkSDOkc6hzprOkc6UzpnOkc6jLCDOls6ZzpPOn86SzpnOo86kzpnOnyDOkc6hzprOkc6UzpnOkc6jLCDOms6RzqHOms6RzpvOn86lIM6RzqHOms6RzpTOmc6RzqMsIM6azpHOpM6pIM6hzpnOls6fzqPOoM6XzpvOmc6RIM6RzqHOms6RzpTOmc6RzqMsIM6czpHOoc6azp/OoyDOkc6hzprOkc6UzpnOkc6jLCDOnM6VzpvOmc6jzqPOn86gzpXOpM6hzpEgzpHOoc6azpHOlM6ZzpHOoywgzpzOn86dzpcgzpHOmc6czqXOkc6bzqnOnSDOkc6hzprOkc6UzpnOkc6jLCDOoM6RzpvOkc6Zzp/Op86pzqHOmSDOlM6XzpzOl86kzqPOkc6dzpHOoyDOkc6hzprOkc6UzpnOkc6jLCDOoM6Rzp3Okc6TzpnOkSDOkc6hzprOkc6UzpnOkc6jLCDOoc6RzpTOn86jIM6RzqHOms6RzpTOmc6RzqMsIM6hzpnOls6fzqPOoM6XzpvOmc6RIM6RzqHOms6RzpTOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPgc66zrHOtM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjIwMDgnLCBBcmVhOiAnzpHOoc6nzpHOmc6RIM6SzpHOnc6dzpHOmc6dzpEgzpHOoc6azpHOlM6ZzpHOoywgzpLOpc6WzpnOms6ZIM6RzqHOms6RzpTOmc6RzqMsIM6TzpHOm86RzqTOkc6jIM6RzqHOms6RzpTOmc6RzqMsIM6Uzp/Ons6RIM6RzqHOms6RzpTOmc6RzqMsIM6UzqnOlM6VzprOkc6czpXOpM6hzp8gzpHOoc6azpHOlM6ZzpHOoywgzpXOm86RzpnOkSDOkc6hzprOkc6UzpnOkc6jLCDOms6RzpvOm86ZzpHOnc6ZIM6RzqHOms6RzpTOmc6RzqMsIM6azpHOoM6VzpvOm86ZzqTOo86RIM6RzqHOms6RzpTOmc6RzqMsIM6azpHOo86kzqHOkc6azpkgzpHOoc6azpHOlM6ZzpHOoywgzprOkc6kzqkgzqPOoM6RzpjOkc6hzpfOoyDOkc6hzprOkc6UzpnOkc6jLCDOm86ZzpLOkc6UzpHOms6ZIM6RzqHOms6RzpTOmc6RzqMsIM6czpXOm86ZzpTOn86dzpkgzpHOoc6azpHOlM6ZzpHOoywgzpzOoM6VzqHOpM6jzpnOkSDOkc6hzprOkc6UzpnOkc6jLCDOnM6gzp/Opc6bzpnOkc6hzpfOoyDOkc6hzprOkc6UzpnOkc6jLCDOnc6VzpEgzpTOkc6mzp3OlyDOkc6hzprOkc6UzpnOkc6jLCDOnc6Vzp/Op86pzqHOmc6fICDOk86fzqHOpM6lzp3Omc6RzqMgzpHOoc6azpHOlM6ZzpHOoywgzqDOlc6hzpTOmc6azp/Onc6VzqHOmSDOkc6hzprOkc6UzpnOkc6jLCDOoM6kzpXOoc6ZzpEgzpHOoc6azpHOlM6ZzpHOoywgzqHOkc6nzpXOoyDOkc6hzprOkc6UzpnOkc6jLCDOo86gzpHOmM6RzqHOl86jIM6RzqHOms6RzpTOmc6RzqMsIM6jzqTOkc6lzqHOn86UzqHOn86czpnOnyDOkc6hzprOkc6UzpnOkc6jLCDOo86lzqHOmc6RzpzOkc6azp/OoyDOkc6hzprOkc6UzpnOkc6jLCDOpM6fzqXOnM6gzpnOpM6jzpnOnyDOkc6hzprOkc6UzpnOkc6jLCDOpM6hzpHOnc6XIM6bzpHOms6azpEgzpHOoc6azpHOlM6ZzpHOoywgzqTOoc6ZzqDOn86kzpHOnM6ZzpEgzpHOoc6azpHOlM6ZzpHOoywgzqTOoc6fzqDOkc6ZzpEgzpHOoc6azpHOlM6ZzpHOoywgzqbOkc6dzpHOoc6RzprOmSDOkc6hzprOkc6UzpnOkc6jLCDOp86Rzp3Omc6RIM6Tzp/Ooc6kzqXOnc6ZzpHOoyDOkc6hzprOkc6UzpnOkc6jLCDOp86pzqHOkSDOkc6hzprOkc6UzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4HOus6xzrTOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIyMDEwJywgQXJlYTogJ86RzpPOoc6ZzpTOkc6azpkgzpHOoc6azpHOlM6ZzpHOoywgzpLOpc6kzpnOnc6RIM6RzqHOms6RzpTOmc6RzqMsIM6VzpvOkc6kzpcgzpHOoc6azpHOlM6ZzpHOoywgzpvOkc6jzqTOkSDOkc6hzprOkc6UzpnOkc6jLCDOnM6VzpjOpc6UzqHOmSDOkc6hzprOkc6UzpnOkc6jLCDOnM6fzp3OlyDOkc6TzpnOqc6dIM6YzpXOn86UzqnOoc6pzp0gzpHOoc6azpHOlM6ZzpHOoywgzpzOn86dzpcgzqDOkc6dzpHOk86ZzpHOoyDOms6VzqHOnc6ZzqTOo86XzqMgzpHOoc6azpHOlM6ZzpHOoywgzp3Opc6czqbOkc6jzpnOkSDOkc6hzprOkc6UzpnOkc6jLCDOoM6Rzp0gzpHOoc6azpHOlM6ZzpHOoywgzqDOpc6hzpPOkc6azpkgzpHOoc6azpHOlM6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc+BzrrOsc60zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyMjAxMicsIEFyZWE6ICfOkc6TzpnOkSDOo86fzqbOmc6RIM6RzqHOms6RzpTOmc6RzqMsIM6RzpPOmc6fzqMgzqPOqc6jzqTOl86jIM6RzqHOms6RzpTOmc6RzqMsIM6RzprOoc6RIM6RzqHOms6RzpTOmc6RzqMsIM6RzpvOlc6RIM6RzqHOms6RzpTOmc6RzqMsIM6RzqfOn86lzqHOmSDOkc6hzprOkc6UzpnOkc6jLCDOks6VzqHOks6Vzp3OkSDOkc6hzprOkc6UzpnOkc6jLCDOks6fzqXOnc6fIM6RzqHOms6RzpTOmc6RzqMsIM6TzpHOoc6VzpEgzpHOoc6azpHOlM6ZzpHOoywgzpPOmc6fzprOkc6hzpHOmc6ZzprOkSDOkc6hzprOkc6UzpnOkc6jLCDOlM6VzpzOmc6hzpkgzpHOoc6azpHOlM6ZzpHOoywgzpXOoM6ZzqPOms6fzqDOlyDOkc6hzprOkc6UzpnOkc6jLCDOms6RzpzOkc6hzpnOnyDOkc6hzprOkc6UzpnOkc6jLCDOms6Rzp3OlM6RzpvOn86jIM6RzqHOms6RzpTOmc6RzqMsIM6azpXOoc6RzqPOmc6kzqPOkSDOkc6hzprOkc6UzpnOkc6jLCDOm86ZzpjOn86Szp/Opc6dzpnOkSDOkc6hzprOkc6UzpnOkc6jLCDOnM6RzpPOn86lzpvOkSDOkc6hzprOkc6UzpnOkc6jLCDOnM6Rzp3OmM6lzqHOlc6RIM6RzqHOms6RzpTOmc6RzqMsIM6czpHOpc6hzpnOms6Zzp8gzpHOoc6azpHOlM6ZzpHOoywgzpzOoM6fzqXOls6Rzp3Okc6ZzpnOms6RIM6RzqHOms6RzpTOmc6RzqMsIM6ezpfOoc6fzprOkc6czqDOmSDOkc6hzprOkc6UzpnOkc6jLCDOoc6ZzpbOlc6jIM6RzqHOms6RzpTOmc6RzqMsIM6jzqTOkc6UzpnOnyDOkc6hzprOkc6UzpnOkc6jLCDOo86kzqHOmc6TzprOn86jIM6RzqHOms6RzpTOmc6RzqMsIM6kzpbOmc6SzpHOoyDOkc6hzprOkc6UzpnOkc6jLCDOqM6XzpvOlyDOks6hzqXOo86XIM6RzqHOms6RzpTOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPgc66zrHOtM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjIwMTUnLCBBcmVhOiAnzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6gzpHOoc6RzpvOn86TzpPOqc6dIM6RzqHOms6RzpTOmc6RzqMsIM6RzqDOn86jzprOmc6RIM6RzqHOms6RzpTOmc6RzqMsIM6RzqHOo86Zzp3Okc6ZzpEgzpHOoc6azpHOlM6ZzpHOoywgzpLOkc6nzpvOmc6RIM6RzqHOms6RzpTOmc6RzqMsIM6SzpXOm86XzpzOkc6nzpkgzpHOoc6azpHOlM6ZzpHOoywgzpLOmc6UzpnOkc6azpkgzpHOoc6azpHOlM6ZzpHOoywgzpLOn86lzqTOo86XzqMgzpHOoc6azpHOlM6ZzpHOoywgzpTOl86czpfOpM6hzpEgzpHOoc6azpHOlM6ZzpHOoywgzprOkc6hzpTOkc6hzpnOpM6jzpkgzpHOoc6azpHOlM6ZzpHOoywgzprOn86dzqTOn86SzpHOls6RzpnOnc6RIM6RzqHOms6RzpTOmc6RzqMsIM6czp/Onc6RzqPOpM6XzqHOkc6azpkgzpHOoc6azpHOlM6ZzpHOoywgzp7Ol86hzp/Oms6RzqHOmc6kzpHOmc6dzpEgzpHOoc6azpHOlM6ZzpHOoywgzqDOkc6hzpHOm86fzpPOk86fzpkgzpHOoc6azpHOlM6ZzpHOoywgzqDOlc6bzpXOms6ZIM6RzqHOms6RzpTOmc6RzqMsIM6gzpXOoc6RIM6SzpHOp86bzpnOkSDOkc6hzprOkc6UzpnOkc6jLCDOoM6VzqTOkc6jIM6RzqHOms6RzpTOmc6RzqMsIM6jzp/Opc6UzpXOm86XIM6RzqHOms6RzpTOmc6RzqMsIM6jzqTOkc6lzqHOmSDOkc6hzprOkc6UzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4HOus6xzrTOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIyMDI3JywgQXJlYTogJ86RzpPOmc6pzqHOk86ZzqTOmc6azpEgzpHOoc6azpHOlM6ZzpHOoywgzpHOk86hzpnOkc6azp/Onc6RIM6RzqHOms6RzpTOmc6RzqMsIM6RzpjOl86dzpHOmc6fIM6RzqHOms6RzpTOmc6RzqMsIM6RzpzOoM6VzpvOkc6azpkgzpHOoc6azpHOlM6ZzpHOoywgzpHOoc6RzqfOkc6czpnOpM6VzqMgzpHOoc6azpHOlM6ZzpHOoywgzpHOo86VzpEgzpHOoc6azpHOlM6ZzpHOoywgzpTOkc6mzp3OlyDOkc6hzprOkc6UzpnOkc6jLCDOlM6fzqHOmc6WzpEgzpHOoc6azpHOlM6ZzpHOoywgzprOkc6bzqTOlc6WzpXOoyDOkc6hzprOkc6UzpnOkc6jLCDOms6RzqTOqSDOkc6jzpXOkSDOkc6hzprOkc6UzpnOkc6jLCDOms6VzqHOkc6jzqTOkc6hzpfOoyDOkc6hzprOkc6UzpnOkc6jLCDOms6fzqXOks6VzpvOmc6RIM6RzqHOms6RzpTOmc6RzqMsIM6bzpnOkc6dzp/OoyDOkc6hzprOkc6UzpnOkc6jLCDOnM6Rzp3Okc6hzpfOoyDOkc6hzprOkc6UzpnOkc6jLCDOnM6Rzp3Omc6RzqTOl86jIM6RzqHOms6RzpTOmc6RzqMsIM6czpHOoc6czpHOoc6ZzpEgzpHOoc6azpHOlM6ZzpHOoywgzpzOkc6lzqHOn86TzpnOkc6dzp3Ol86jIM6RzqHOms6RzpTOmc6RzqMsIM6czp/Onc6XIM6RzpPOmc6fzqUgzp3Omc6azp/Om86Rzp/OpSDOms6RzpvOpM6VzpbOqc6dIM6RzqHOms6RzpTOmc6RzqMsIM6gzpHOm86RzpnOn86nzp/Opc6dzpcgzpHOoc6azpHOlM6ZzpHOoywgzqDOkc6gzpHOoc6XzqMgzpHOoc6azpHOlM6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc+BzrrOsc60zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyMjAyOCcsIEFyZWE6ICfOkc6TzpHOm86pIM6RzqHOms6RzpTOmc6RzqMsIM6RzpPOmc6fzp3Olc6hzpkgzpHOoc6azpHOlM6ZzpHOoywgzpHOlc6kzp/Ooc6hzpHOp86XIM6RzqHOms6RzpTOmc6RzqMsIM6RzqHOkc6gzpfOlM6VzqMgzpHOoc6azpHOlM6ZzpHOoywgzpnOkc6czpHOpM6ZzprOlc6jIM6gzpfOk86VzqMgzpfOoc6RzpnOkc6jIM6RzqHOms6RzpTOmc6RzqMsIM6azpHOms6fzqXOoc6RzpnOmc6azpEgzpHOoc6azpHOlM6ZzpHOoywgzprOn86azprOmc6dzp/Ooc6hzpHOp86XIM6RzqHOms6RzpTOmc6RzqMsIM6azp/Oms6azp/Ooc6RzqMgzpHOoc6azpHOlM6ZzpHOoywgzpvOmc6YzpHOoc6fzqMgzpHOoc6azpHOlM6ZzpHOoywgzpvOmc6fzpTOqc6hzpEgzpHOoc6azpHOlM6ZzpHOoywgzpvOn86lzqTOoc6RIM6XzqHOkc6ZzpHOoyDOkc6hzprOkc6UzpnOkc6jLCDOm86lzprOn86lzqHOlc6jzpfOoyDOkc6hzprOkc6UzpnOkc6jLCDOm86lzqPOo86RzqHOlc6RIM6RzqHOms6RzpTOmc6RzqMsIM6bzqnOpM6XzqMgzpHOoc6azpHOlM6ZzpHOoywgzpzOoM6RzqHOlM6RzprOmSDOkc6hzprOkc6UzpnOkc6jLCDOn86nzpjOmc6RIM6RzqHOms6RzpTOmc6RzqMsIM6gzpHOm86fzqXOnM6gzpEgzpHOoc6azpHOlM6ZzpHOoywgzqDOkc6gzqDOkc6UzpHOoyDOkc6hzprOkc6UzpnOkc6jLCDOoM6RzqHOnc6RzqPOo86fzqMgzpHOoc6azpHOlM6ZzpHOoywgzqDOpc6hzqHOl86jIM6RzqHOms6RzpTOmc6RzqMsIM6hzpHOoM6kzpfOoyDOkc6hzprOkc6UzpnOkc6jLCDOo86RzqHOkc6azpnOnc6Zzp8gzpfOoc6RzpnOkc6jIM6RzqHOms6RzpTOmc6RzqMsIM6jzpHOoc6bzpHOmc6ZzprOkSDOkc6hzprOkc6UzpnOkc6jLCDOo86VzqHOks6fzqMgzpHOoc6azpHOlM6ZzpHOoywgzqfOoc6lzqPOn86nzqnOoc6Zzp8gzpHOoc6azpHOlM6ZzpHOoywgzqjOkc6hzpkgzpPOn86hzqTOpc6dzpnOkc6jIM6RzqHOms6RzpTOmc6RzqMsIM6ozpHOoc6ZIM6gzpHOm86RzpzOkc6hzpnOn86lIM6RzqHOms6RzpTOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPgc66zrHOtM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjIwMjknLCBBcmVhOiAnzqDOkc6bzpHOmc6fzqfOqc6hzpEgzqTOpc6hzp/OpSDOkc6hzpPOn86bzpnOlM6RzqMsIM6gzpHOoc6RzpvOmc6RIM6jzpHOoM6fzqXOnc6RzprOkc6ZzpnOms6pzp0gzpHOoc6Tzp/Om86ZzpTOkc6jLCDOoM6RzqHOkc6bzpnOkSDOpM6lzqHOn86lIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOlc6hzpEgzpzOlc6bzpHOnc6RIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOlc6kzqHOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6jzpHOoM6fzqXOnc6RzprOkc6ZzpnOms6RIM6RzqHOk86fzpvOmc6UzpHOoywgzqTOpc6hzp/OoyDOkc6hzpPOn86bzpnOlM6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPgc66zrHOtM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjIxMDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOks6RzqPOmc6bzpXOmc6fzqMgzprOpc6dzp/Opc6hzpnOkc6jIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOk86Zzp/OoyDOks6RzqPOmc6bzpXOmc6fzqMgzpzOkc6dzqTOmc6dzpXOmc6RzqMgzpHOoc6azpHOlM6ZzpHOoywgzpHOk86Zzp/OoyDOms6pzp3Oo86kzpHOnc6kzpnOnc6fzqMgzpHOoc6azpHOlM6ZzpHOoywgzpHOk86ZzqnOoc6TzpnOpM6ZzprOkSDOkc6hzprOkc6UzpnOkc6jLCDOkc6bzqnOnc6ZzqPOpM6RzpnOnc6RIM6RzqHOms6RzpTOmc6RzqMsIM6RzqHOpM6VzpzOmc6jzpnOnyDOkc6hzprOkc6UzpnOkc6jLCDOks6RzpvOpM6VzqTOo86ZIM6RzqHOms6RzpTOmc6RzqMsIM6UzpHOks6ZzpEgzpHOoc6azpHOlM6ZzpHOoywgzpXOpc6Rzp3OlM6hzp8gzpHOoc6azpHOlM6ZzpHOoywgzpbOlc6lzpPOn86bzpHOpM6VzpnOnyDOkc6hzprOkc6UzpnOkc6jLCDOmM6Rzp3Okc6jIM6RzqHOms6RzpTOmc6RzqMsIM6azpHOpM6pIM6UzpHOks6ZzpEgzpHOoc6azpHOlM6ZzpHOoywgzprOkc6ozpHOoyDOkc6hzprOkc6UzpnOkc6jLCDOm86fzqXOms6RzqMgzpHOoc6azpHOlM6ZzpHOoywgzpzOkc6Zzp3Okc6bzp8gzpHOoc6azpHOlM6ZzpHOoywgzpzOkc6azqHOlyDOkc6hzprOkc6UzpnOkc6jLCDOnM6Rzp3OpM6RzpnOmc6azpEgzpHOoc6azpHOlM6ZzpHOoywgzpzOlc6hzprOn86Szp/Opc6dzpnOnyDOkc6hzprOkc6UzpnOkc6jLCDOnM6XzpvOmc6RIM6bzp/Opc6azpEgzpHOoc6azpHOlM6ZzpHOoywgzpzOl86bzpnOkSDOpM6hzpnOoM6fzpvOlc6pzqMgzpHOoc6azpHOlM6ZzpHOoywgzpzOn86dzpcgzpLOkc6hzqPOqc6dIM6RzqHOms6RzpTOmc6RzqMsIM6czp/Onc6XIM6VzqDOkc6dzqkgzqfOoc6VzqDOkc6jIM6RzqHOms6RzpTOmc6RzqMsIM6dzpXOn86nzqnOoc6Zzp8gzpzOkc6dzqTOmc6dzpXOmc6RzqMgzpHOoc6azpHOlM6ZzpHOoywgzqDOkc6bzpvOkc6dzqTOmc6fIM6RzqHOms6RzpTOmc6RzqMsIM6gzpHOoc6YzpXOnc6Zzp8gzpHOoc6azpHOlM6ZzpHOoywgzqDOkc6hzp/Ooc6Zzp8gzpHOoc6azpHOlM6ZzpHOoywgzqDOlc6bzpHOk86fzqMgzpHOoc6azpHOlM6ZzpHOoywgzqDOlc6hzpjOqc6hzpnOnyDOkc6hzprOkc6UzpnOkc6jLCDOoM6VzqHOoM6RzqTOkc6hzpfOoyDOkc6hzprOkc6UzpnOkc6jLCDOoM6ZzpHOnc6RIM6RzqHOms6RzpTOmc6RzqMsIM6gzpnOms6VzqHOnc6XzqMgzpHOoc6azpHOlM6ZzpHOoywgzqHOn86VzpnOnc6fIM6RzqHOms6RzpTOmc6RzqMsIM6jzpHOk86azpHOoyDOkc6hzprOkc6UzpnOkc6jLCDOo86Rzp3Okc6kzp/Ooc6Zzp8gzpzOkc6azqHOl86jIM6RzqHOms6RzpTOmc6RzqMsIM6jzpnOm86ZzpzOnc6RIM6RzqHOms6RzpTOmc6RzqMsIM6jzprOn86gzpcgzpHOoc6azpHOlM6ZzpHOoywgzqPOpM6Vzp3OnyDOkc6hzprOkc6UzpnOkc6jLCDOpM6hzpnOoM6fzpvOlyDOkc6hzprOkc6UzpnOkc6jLCDOpM6jzpXOm86VzqDOkc6azp/OoyDOkc6hzprOkc6UzpnOkc6jLCDOp86Rzp3Omc6RIM6jzprOn86gzpfOoyDOkc6hzprOkc6UzpnOkc6jLCDOp86hzqXOo86fzpLOmc6kzqPOmSDOkc6hzprOkc6UzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4HOus6xzrTOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIyMjAwJywgQXJlYTogJ86Rzp3OmM6fzqfOqc6hzpkgzpHOoc6azpHOlM6ZzpHOoywgzpHOoM6ZzpTOmc6kzqPOkSDOkc6hzprOkc6UzpnOkc6jLCDOks6RzpPOk86fzqMgzpHOoc6azpHOlM6ZzpHOoywgzpLOoc6lzqPOn86lzpvOlc6jIM6RzqHOms6RzpTOmc6RzqMsIM6TzpXOps6lzqHOkSDOkc6hzprOkc6UzpnOkc6jLCDOk86VzqbOpc6hzpHOms6ZzpEgzpHOoc6azpHOlM6ZzpHOoywgzpTOlc6hzpLOlc6dzpkgzpHOoc6azpHOlM6ZzpHOoywgzpjOqc6azp3Omc6RIM6RzqHOms6RzpTOmc6RzqMsIM6ZzqPOqc6czpEgzprOkc6hzqXOqc6dIM6RzqHOms6RzpTOmc6RzqMsIM6azpHOoc6RzqTOn86lzpvOkc6jIM6czpXOk86RzpvOn86gzp/Om86XzqMgzpHOoc6azpHOlM6ZzpHOoywgzprOkc6hzqXOlc6jIM6czpXOk86RzpvOn86gzp/Om86XzqMgzpHOoc6azpHOlM6ZzpHOoywgzprOkc6kzqkgzprOkc6hzqXOlc6jIM6RzqHOms6RzpTOmc6RzqMsIM6azpHOpM6pIM6czpHOms6hzqXOo86ZIM6RzqHOms6RzpTOmc6RzqMsIM6czpHOms6hzqXOo86Zzp8gzpHOoc6azpHOlM6ZzpHOoywgzpzOkc6bzpvOqc6kzpEgzpHOoc6azpHOlM6ZzpHOoywgzpzOkc6hzpHOmM6fzqXOo86jzpEgzpHOoc6azpHOlM6ZzpHOoywgzpzOlc6TzpHOm86fzqDOn86bzpcgzpHOoc6azpHOlM6ZzpHOoywgzp3Olc6RIM6VzprOms6bzpfOo86fzqXOm86RIM6RzqHOms6RzpTOmc6RzqMsIM6dzpXOn86nzqnOoc6Zzp8gzpvOpc6azp/Oo86fzqXOoc6RzqMgzpHOoc6azpHOlM6ZzpHOoywgzp/Ooc6VzqPOpM6VzpnOnyDOkc6hzprOkc6UzpnOkc6jLCDOoM6RzqHOkc6UzpXOmc6jzpnOkSDOkc6hzprOkc6UzpnOkc6jLCDOoM6VzqHOmc6Szp/Om86ZzpEgzpHOoc6azpHOlM6ZzpHOoywgzqDOm86RzprOkSDOnM6VzpPOkc6bzp/OoM6fzpvOl86jIM6RzqHOms6RzpTOmc6RzqMsIM6hzpHOqM6fzpzOnM6RzqTOl86jIM6RzqHOms6RzpTOmc6RzqMsIM6jzp/Opc6bzpkgzpHOoc6azpHOlM6ZzpHOoywgzqPOn86lzpvOn86jIM6RzqHOms6RzpTOmc6RzqMsIM6kzqHOmc6bzp/Ops6fIM6RzqHOms6RzpTOmc6RzqMsIM6kzqHOmc6gzp/OpM6RzpzOnyDOkc6hzprOkc6UzpnOkc6jLCDOps6Rzp3Okc6ZzqTOlyDOkc6hzprOkc6UzpnOkc6jLCDOp86ZzqHOkc6UzpXOoyDOkc6hzprOkc6UzpnOkc6jLCDOp86hzpHOnc6fzpkgzpHOoc6azpHOlM6ZzpHOoywgzqfOqc6hzpXOnM6XzqMgzpHOoc6azpHOlM6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc+BzrrOsc60zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyMjMwMCcsIEFyZWE6ICfOkc6czqXOk86UzpHOm86ZzpEgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOks6ZzpPOm86RIM6RzqHOk86fzpvOmc6UzpHOoywgzpLOm86XzqPOmc6UzpnOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6Szp/Oo86azpnOnc6RIM6RzqHOk86fzpvOmc6UzpHOoywgzprOn86lzp3On86lzqDOmc6RIM6RzqHOk86fzpvOmc6UzpHOoywgzpvOlc6pzp3Omc6UzpkgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOm86ZzpLOkc6UzpkgzqDOlc6hzpEgzpzOlc6bzpHOnc6pzp0gzpHOoc6Tzp/Om86ZzpTOkc6jLCDOm86ZzpLOkc6UzpkgzqDOoc6RzpPOnM6RzqTOlc6lzqTOlyDOkc6hzpPOn86bzpnOlM6RzqMsIM6bzp/Ok86TzpHOoc6ZIM6RzqHOk86fzpvOmc6UzpHOoywgzpzOkc6hzpkgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOnM6fzp3OlyDOlc6bzqnOnc6XzqMgzpvOkc6azqnOnc6ZzpHOoywgzqDOkc6bzpHOmc6fzqfOqc6hzpkgzprOpc6dzp/Opc6hzpnOkc6jIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOlc6bzpXOpM6RIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOl86TzpHOlM6ZIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOm86RzqTOkc6dzpHOms6ZIM6RzqHOk86fzpvOmc6UzpHOoywgzqDOn86lzpvOmc6YzqHOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6gzqHOkc6TzpzOkc6kzpXOpc6kzpfOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6gzqXOoc6Tzp/Opc6UzpkgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOo86RzpzOoM6RzqTOmc6azpcgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOpM6jzpnOpM6RzpvOmc6RIM6RzqHOk86fzpvOmc6UzpHOoywgzqbOpc6bzpHOpM6ZzprOkSDOkc6hzpPOn86bzpnOlM6RzqMsIM6mzqnOms6ZzpHOnc6fIM6RzqHOk86fzpvOmc6UzpHOoycsIFByZWZlY3R1cmU6ICfOkc+BzrrOsc60zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0NzA0MCcsIEFyZWE6ICfOks6RzpvOnM6RzpTOkSDOkc6hzqTOkc6jLCDOlc6bzpHOmc6fzqbOpc6kzp8gzqbOm86pzqHOmc6RzpTOn86jIM6RzqHOpM6RzqMsIM6VzpvOkc6Zzp/Op86pzqHOmSDOkc6hzqTOkc6jLCDOmM6VzqHOmc6RzprOl86jzpkgzpHOoc6kzpHOoywgzprOkc6YzpHOoc6fzpLOn86lzp3OmSDOps6bzqnOoc6ZzpHOlM6fzqMgzpHOoc6kzpHOoywgzprOkc6jzqTOoc6ZzqnOpM6ZzqPOo86RIM6RzqHOpM6RzqMsIM6azp/OnM6gzp/OpM6ZIM6RzqHOpM6RzqMsIM6bzpHOk86azpHOlM6RIM6czpXOnc6ZzpTOmc6fzqUgzpHOoc6kzpHOoywgzpvOkc6TzprOkc6UzpEgzpzOl86bzpnOkc6dzqnOnSDOkc6hzqTOkc6jLCDOnM6RzqHOm86VzqPOmSDOkc6hzqTOkc6jLCDOoM6RzpvOkc6ZzpEgzqbOm86pzqHOmc6RzpTOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6RzpvOkc6Zzp/Oms6RzqPOpM6hzp8gzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOlc6bzpvOkc6UzpXOoyDOkc6hzqTOkc6jLCDOo86lzprOn86lzpvOkSDOkc6hzqTOkc6jLCDOps6bzqnOoc6ZzpHOlM6RIM6RzqHOpM6RzqMsIM6nzqHOpc6jzp/OoM6XzpPOlyDOkc6hzqTOkc6jLCDOp86hzqXOo86fzqHOoc6RzqfOlyDOkc6hzqTOkc6jJywgUHJlZmVjdHVyZTogJ86Gz4HPhM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ3MDQxJywgQXJlYTogJ86dzpXOn86nzqnOoc6ZIM6RzqHOpM6RzqMgzpHOoc6kzpHOoycsIFByZWZlY3R1cmU6ICfOhs+Bz4TOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0NzA0NCcsIEFyZWE6ICfOkc6TzpnOn86jIM6RzpjOkc6dzpHOo86Zzp/OoyDOms6RzpvOlc6dzqTOmc6dzpfOoyDOkc6hzqTOkc6jLCDOkc6TzpnOn86jIM6SzpvOkc6jzpnOn86jIM6RzqHOpM6RzqMsIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzpTOmc6nzp/OnM6fzpnOoc6Zzp/OpSDOkc6hzqTOkc6jLCDOkc6dzqkgzprOkc6bzpXOnc6kzpnOnc6XIM6RzqHOpM6RzqMsIM6RzqPOps6RzprOlc6hzp8gzpHOoc6kzpHOoywgzpLOkc6hzprOkSDOkc6hzqTOkc6jLCDOks6VzpvOlc6dzqTOls6ZzprOnyDOkc6hzqTOkc6jLCDOlM6ZzqfOn86czp/Omc6hzpkgzpHOoc6kzpHOoywgzpXOoM6Rzp3OqSDOo86VzqPOlyDOkc6hzqTOkc6jLCDOls6lzpPOn86jIM6UzpnOp86fzpzOn86ZzqHOmc6fzqUgzpHOoc6kzpHOoywgzprOkc6hzqDOmc6dzp8gzpHOoc6kzpHOoywgzprOn86azprOmc6dzp8gzpvOmc6YzpHOoc6ZIM6RzqHOpM6RzqMsIM6azp/Opc6mzpHOm86fzqMgzpHOoc6kzpHOoywgzprOoc6Rzp3Omc6VzqMgzpHOoc6kzpHOoywgzprOoc6ZzqPOlc6bzpnOkSDOkc6hzqTOkc6jLCDOm86ZzqTOlc6jzpnOnyDOkc6hzqTOkc6jLCDOnM6VzpPOkc6jIM6azpHOnM6gzp/OoyDOkc6hzqTOkc6jLCDOns6XzqHOn86azpHOnM6gzp/OoyDOk86fzqHOk86fzpzOpc6bzp/OpSDOkc6hzqTOkc6jLCDOns6XzqHOn86azpHOnM6gzp/OoyDOlM6ZzqfOn86czp/Omc6hzpnOn86lIM6RzqHOpM6RzqMsIM6gzpXOoc6RIM6azpHOm86Vzp3OpM6Zzp3OlyDOkc6hzqTOkc6jLCDOoM6XzpPOlyDOks6VzpvOlc6dzqTOls6ZzprOn86lIM6RzqHOpM6RzqMsIM6gzpvOkc6azp/Opc6kzqPOkc6ZzpnOms6RIM6RzqHOpM6RzqMsIM6gzqHOn86jzpfOm86ZzpEgzpHOoc6kzpHOoywgzqHOlc6kzqPOmc6Rzp3OkSDOkc6hzqTOkc6jLCDOo86VzpvOmc6fIM6RzqHOpM6RzqMsIM6jzpXOo86XIM6RzqHOpM6RzqMsIM6mzpnOo86fzqTOkSDOkc6hzqTOkc6jJywgUHJlZmVjdHVyZTogJ86Gz4HPhM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ3MDQ1JywgQXJlYTogJ86RzpPOk86VzpvOkc6ZzpnOms6RIM6RzqHOpM6RzqMsIM6RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOkc6YzpHOnM6Rzp3Omc6fzqUgzpHOoc6kzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6azqXOqM6VzpvOl86jIM6RzqHOpM6RzqMsIM6RzpPOmc6fzqMgzpzOl86dzpHOoyDOkc6hzqTOkc6jLCDOkc6TzpnOn86jIM6jzqTOlc6mzpHOnc6fzqMgzpHOoc6kzpHOoywgzpHOk86Zzp/OoyDOp86RzqHOkc6bzpHOnM6gzp/OoyDOkc6hzqTOkc6jLCDOkc6YzpHOnM6Rzp3OmSDOkc6hzqTOkc6jLCDOkc6czqDOlc6bzpnOkSDOkc6YzpHOnM6Rzp3Omc6fzqUgzpHOoc6kzpHOoywgzpHOnM6gzpXOm86ZzpEgzqDOkc6bzpHOmc6fzprOkc6kzp/Opc6dzp/OpSDOkc6hzqTOkc6jLCDOkc6hzpnOkSDOkc6hzqTOkc6jLCDOks6fzqXOm86TzpHOoc6VzpvOmSDOkc6hzqTOkc6jLCDOk86ZzpHOnc6dzpnOpM6jzpkgzpHOoc6kzpHOoywgzpPOqc6dzpnOkSDOms6RzqTOqSDOkc6YzpHOnM6Rzp3Omc6fzqUgzpHOoc6kzpHOoywgzpPOqc6dzpnOkSDOoM6Rzp3Okc6TzpnOkc6jIM6RzqHOpM6RzqMsIM6UzqHOn86jzpnOkSDOnM6VzqPOn86lzp3OpM6RzqMgzpHOoc6kzpHOoywgzpbOkc6bzp/OoyDOkc6hzqTOkc6jLCDOmM6Rzp3Okc6jzpnOkSDOkc6hzqTOkc6jLCDOmM6Vzp/OlM6pzqHOmc6Rzp3OkSDOkc6hzqTOkc6jLCDOms6RzpvOm86fzp3OlyDOkc6hzqTOkc6jLCDOms6RzpzOoM6fzqMgzpLOn86lzqHOk86RzqHOlc6bzpnOn86lIM6RzqHOpM6RzqMsIM6azpHOnM6gzp/OoyDOo86azp/Opc6gzpHOoyDOkc6hzqTOkc6jLCDOms6RzqHOpc6RIM6RzqHOpM6RzqMsIM6azpHOpM6pIM6nzqnOoc6RIM6RzqHOpM6RzqMsIM6azpHOqM6RzpvOkSDOkc6hzqTOkc6jLCDOms6VzqHOkc6dzpkgzpHOoc6kzpHOoywgzprOn86hzpHOms6RzpTOkSDOkc6hzqTOkc6jLCDOms6fzqXOks6VzpvOmSDOkc6hzqTOkc6jLCDOms6lzqjOlc6bzpcgzpHOoc6kzpHOoywgzpvOn86TzpHOoc6fzqUgzpHOoc6kzpHOoywgzpvOn86lzqTOo86RIM6RzqHOpM6RzqMsIM6czpXOo86fzqXOnc6kzpEgzpHOoc6kzpHOoywgzpzOl86kzqPOn86hzp/Opc6SzpEgzpHOoc6kzpHOoywgzpzOn86dzpcgzpXOpc6RzpPOk86VzpvOmc6jzqTOoc6ZzpHOoyDOkc6hzqTOkc6jLCDOnc6VzpLOoc6fzqDOn86bzpcgzpHOoc6kzpHOoywgzp/OnM6RzpvOlyDOkc6hzqTOkc6jLCDOoM6RzpvOkc6Zzp/Oms6RzqTOn86lzp3OnyDOkc6hzqTOkc6jLCDOoM6RzpvOkc6Zzp/Op86pzqHOmSDOkc6YzpHOnM6Rzp3Omc6fzqUgzpHOoc6kzpHOoywgzqDOkc6bzpHOmc6fzqfOqc6hzpkgzpLOn86lzpvOk86RzqHOlc6bzpnOn86lIM6RzqHOpM6RzqMsIM6gzpHOnc6RzpPOmc6RIM6azpHOqM6RzpvOqc6dIM6RzqHOpM6RzqMsIM6gzpXOoc6RIM6dzpXOks6hzp/OoM6fzpvOlyDOkc6hzqTOkc6jLCDOoM6VzqTOoc6RzpvOqc6dzp8gzpHOoc6kzpHOoywgzqDOlc6lzprOn86jIM6RzqHOpM6RzqMsIM6gzpfOk86XIM6kzpXOpM6hzpHOms6pzpzOn86lIM6RzqHOpM6RzqMsIM6gzpvOkc6kzpHOnc6fzqMgzpHOmM6RzpzOkc6dzpnOn86lIM6RzqHOpM6RzqMsIM6gzp/OpM6RzpzOmc6RIM6RzqHOpM6RzqMsIM6hzp/Opc6gzpHOms6ZzpEgzpHOoc6kzpHOoywgzqPOms6RzpvOn86lzpvOkSDOkc6hzqTOkc6jLCDOo86azpHOoc6gzpHOoc6ZIM6RzqHOpM6RzqMsIM6jzprOmc6RzpTOkc6UzpXOoyDOkc6hzqTOkc6jLCDOo86kzpXOnc6fIM6RzqHOpM6RzqMsIM6kzpHOpc6bzpEgzpHOoc6kzpHOoywgzqTOlc6bzpfOo86Zzp8gzpHOmM6RzpzOkc6dzpnOn86lIM6RzqHOpM6RzqMsIM6kzpXOm86XzqPOmc6fIM6kzpXOpM6hzpHOms6pzpzOn86lIM6RzqHOpM6RzqMsIM6kzpXOoc6gzp3Okc6jIM6RzqHOpM6RzqMsIM6kzpXOpM6hzpHOms6pzpzOnyDOkc6hzqTOkc6jLCDOps6pzqTOkc6ZzpnOms6RIM6RzqHOpM6RzqMnLCBQcmVmZWN0dXJlOiAnzobPgc+EzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDcwNDcnLCBBcmVhOiAnzpHOk86Zzp/OoyDOks6RzqPOmc6bzpXOmc6fzqMgzpHOoc6kzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6czpXOk86RzpvOn86nzpHOoc6XzqMgzpHOoc6kzpHOoywgzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6azp/OnM6gzp/OpM6Zzp/OpSDOkc6hzqTOkc6jLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzqDOl86TzqnOnSDOkc6hzqTOkc6jLCDOkc6XzpTOn86dzpnOkSDOkc6hzqTOkc6jLCDOkc6bzqnOnc6RzprOmSDOkc6hzqTOkc6jLCDOkc6bzqnOnc6ZzpEgzpzOl86bzpnOkc6dzqnOnSDOkc6hzqTOkc6jLCDOkc6bzqnOnc6ZzpEgzqPOlc6bzpvOkc6UzqnOnSDOkc6hzqTOkc6jLCDOkc6dzqkgzprOkc6hzqXOlc6jIM6RzqHOpM6RzqMsIM6RzqPOpM6hzp/Op86pzqHOmSDOkc6hzqTOkc6jLCDOkc6mzqHOn86ezqXOm86ZzpEgzpHOoc6kzpHOoywgzpLOlc6bzpHOnc6ZzpTOmc6RIM6RzqHOpM6RzqMsIM6Szp/Opc6bzpnOkc6TzpzOlc6dzp8gzpHOoc6kzpHOoywgzpLOn86lzqTOkc6dzpnOkc6UzpEgzpHOoc6kzpHOoywgzpLOoc6lzqPOn86lzpvOkSDOkc6hzqTOkc6jLCDOlM6ZzpvOn86mzp8gzqDOl86TzqnOnSDOkc6hzqTOkc6jLCDOlc6bzpHOpM6XIM6RzqHOpM6RzqMsIM6ZzqTOlc6RIM6RzqHOpM6RzqMsIM6azpHOnc6RzpvOmc6RIM6RzqHOpM6RzqMsIM6azpHOo86ZzpHOnc6fzqMgzpHOoc6kzpHOoywgzprOkc6jzqTOkc6dzpXOkSDOkc6hzqTOkc6jLCDOms6RzqPOpM6Rzp3Omc6VzqMgzpHOoc6kzpHOoywgzprOoc6lzpEgzpLOoc6lzqPOlyDOkc6hzqTOkc6jLCDOm86RzpzOoM6ZzqHOmSDOkc6hzqTOkc6jLCDOnM6VzpPOkc6bzp/Op86RzqHOlyDOkc6hzqTOkc6jLCDOnM6VzqPOn86gzqXOoc6Tzp/OoyDOkc6hzqTOkc6jLCDOnM6XzpvOlc6RIM6azpHOo86kzpHOnc6ZzpHOoyDOkc6hzqTOkc6jLCDOnM6XzpvOmc6Rzp3OkSDOkc6hzqTOkc6jLCDOnM6XzpvOmc6VzqMgzpHOoc6kzpHOoywgzqDOkc6bzpHOmc6fzpzOpc6bzpnOkSDOkc6hzqTOkc6jLCDOoM6RzpvOkc6Zzp/OnM6lzpvOn86jIM6RzqHOpM6RzqMsIM6gzpXOoc6UzpnOms6RIM6RzqHOpM6RzqMsIM6gzpXOpM6hzp/OpSDOkc6hzqTOkc6jLCDOoM6XzpPOlc6jIM6RzqHOpM6RzqMsIM6gzpvOkc6kzpHOnc6fzqMgzpHOo86kzqHOn86nzqnOoc6Zzp/OpSDOkc6hzqTOkc6jLCDOoM6fzqTOmc6jzqTOmc6azpEgzpzOlc6TzpHOm86fzqfOkc6hzpfOoyDOkc6hzqTOkc6jLCDOoM6lzqHOk86fzqMgzpHOoc6kzpHOoywgzqHOmc6jzpXOo86ZIM6RzqHOpM6RzqMsIM6jzqTOkc6lzqHOn86SzqHOpc6jzpcgzpHOoc6kzpHOoywgzqTOo86VzpvOmc6TzpPOkc6UzpXOoyDOkc6hzqTOkc6jLCDOps6hzpHOns6fIM6RzqHOpM6RzqMsIM6nzp/Opc6kzpnOkc6dzpEgzpHOoc6kzpHOoycsIFByZWZlY3R1cmU6ICfOhs+Bz4TOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0NzEwMCcsIEFyZWE6ICfOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzpHOoc6kzpHOoywgzpHOk86ZzpEgzqDOkc6hzpHOo86azpXOpc6XIM6Tzp/Ooc6Tzp/OnM6lzpvOn86lIM6RzqHOpM6RzqMsIM6RzpPOmc6RIM6kzqHOmc6RzpTOkSDOkc6hzqTOkc6jLCDOkc6TzpnOn86ZIM6Rzp3Okc6hzpPOpc6hzp/OmSDOkc6hzqTOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzpPOm86lzprOn86hzqHOmc6Wzp/OpSDOkc6hzqTOkc6jLCDOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOkc6hzqTOkc6jLCDOkc6TzpnOn86jIM6azqnOnc6jzqTOkc6dzqTOmc6dzp/OoyDOms6RzqTOqSDOms6RzpvOlc6dzqTOmc6dzpfOoyDOkc6hzqTOkc6jLCDOkc6TzpnOn86jIM6jzqDOpc6hzpnOlM6pzp3Okc6jIM6RzqHOpM6RzqMsIM6RzprOoc6fzqDOn86kzpHOnM6ZzpEgzpHOoc6kzpHOoywgzpHOms6hzp/OoM6fzqTOkc6czpnOkSDOms6bzpXOmc6UzpnOn86lIM6RzqHOpM6RzqMsIM6RzpvOpc6azpcgzpHOoc6kzpHOoywgzpHOnM6mzpnOmM6VzpEgzpHOoc6kzpHOoywgzpHOnc6UzqHOlc6RzqMgzpHOoc6kzpHOoywgzpHOnc6VzpbOkSDOkc6hzqTOkc6jLCDOkc6dzpXOnM6fzqHOoc6RzqfOlyDOkc6hzqTOkc6jLCDOkc6dzpjOn86kzp/OoM6fzqMgzpHOoc6kzpHOoywgzpHOnc6pIM6RzpPOmc6fzpkgzpHOnc6RzqHOk86lzqHOn86ZIM6RzqHOpM6RzqMsIM6RzqDOn86czpXOoc6fIM6RzqHOpM6RzqMsIM6RzqHOpM6RIM6RzqHOpM6RzqMsIM6SzpHOmM6lzprOkc6czqDOn86jIM6RzqHOpM6RzqMsIM6SzpHOmM6lzqDOlc6Uzp8gzpHOoc6kzpHOoywgzpLOmc6TzpvOkSDOkc6hzqTOkc6jLCDOks6bzpHOp86VzqHOnc6RIM6RzqHOpM6RzqMsIM6SzqHOpc6jzp/Opc6bzpXOoyDOkc6hzqTOkc6jLCDOk86RzpLOoc6ZzpEgzpHOoc6kzpHOoywgzpPOm86lzprOn86hzqHOmc6Wzp8gzpHOoc6kzpHOoywgzpPOoc6RzpzOnM6Vzp3OpM6jzpEgzpHOoc6kzpHOoywgzpPOoc6ZzpzOoM6fzpLOnyDOkc6hzqTOkc6jLCDOlM6RzqbOnc6XIM6RzqHOpM6RzqMsIM6UzpHOps6dzp/Opc6bzpEgzpHOoc6kzpHOoywgzpTOmc6RzqPOlc6bzpvOkSDOkc6hzqTOkc6jLCDOlM6ZzqPOpM6hzpHOpM6fIM6RzqHOpM6RzqMsIM6Uzp/Oms6ZzpzOmc6RIM6RzqHOpM6RzqMsIM6UzqHOpc6pzp0gzpHOoc6kzpHOoywgzpXOm86RzqTOn86jIM6RzqHOpM6RzqMsIM6VzpvOlc6fzqXOo86RIM6RzqHOpM6RzqMsIM6WzpHOoc6azpHOlM6RzpnOmc6azpEgzpHOoc6kzpHOoywgzpbOpc6Tzp/OoyDOnM6RzqHOms6Zzp3Omc6RzpTOkc6jIM6RzqHOpM6RzqMsIM6YzpHOnc6RzqPOkc6ZzpnOms6RIM6RzqHOpM6RzqMsIM6azpHOms6fzpLOkc6kzp/OoyDOkc6hzqTOkc6jLCDOms6RzpvOn86SzpHOpM6fzqMgzpHOoc6kzpHOoywgzprOkc6bzp/Ok86VzqHOmc6azp8gzpHOoc6kzpHOoywgzprOkc6bzp/OnM6fzpTOmc6RIM6RzqHOpM6RzqMsIM6azpHOpM6pIM6azpHOm86Vzp3OpM6Zzp3OlyDOkc6hzqTOkc6jLCDOms6Vzp3OpM6hzpnOms6fIM6RzqHOpM6RzqMsIM6azpXOoc6RzpzOkc6kzpXOoyDOkc6hzqTOkc6jLCDOms6ZzqHOms6ZzpbOkc6kzpXOoyDOkc6hzqTOkc6jLCDOms6bzpXOmc6jzqTOnyDOkc6hzqTOkc6jLCDOms6fzpzOnM6Vzp3OnyDOkc6hzqTOkc6jLCDOms6fzqHOps6fzpLOn86lzp3OmSDOkc6hzqTOkc6jLCDOms6fzqHOqc6dzpfOo86ZzpEgzpHOoc6kzpHOoywgzprOoc6lzp/Onc6VzqHOmSDOkc6hzqTOkc6jLCDOms6pzqPOpM6RzprOmc6fzpkgzpHOoc6kzpHOoywgzpvOkc6TzprOkc6UzpnOkSDOms6Vzp3OpM6hzpnOms6fzqUgzpHOoc6kzpHOoywgzpvOmc6czpnOnc6XIM6RzqHOpM6RzqMsIM6bzp/Opc6kzqHOn86kzp/OoM6fzqMgzpHOoc6kzpHOoywgzpzOkc6hzpHOmM6fzpLOn86lzp3OmSDOkc6hzqTOkc6jLCDOnM6RzqHOms6Zzp3Omc6RzpTOkSDOkc6hzqTOkc6jLCDOnM6VzpPOkc6hzqfOlyDOkc6hzqTOkc6jLCDOnM6VzpPOms6bzpEgzpHOoc6kzpHOoywgzpzOlc6bzpHOpM6VzqMgzpHOoc6kzpHOoywgzpzOn86dzpcgzpPOlc6dzp3Ol86jzpXOqc6jIM6YzpXOn86kzp/Oms6fzqUgzpHOoc6kzpHOoywgzpzOpc6kzpnOms6RzqMgzpHOoc6kzpHOoywgzp3Olc6fzqMgzqPOpc6dzp/Omc6azpnOo86czp/OoyDOms6fzpzOnM6Vzp3On86lIM6RzqHOpM6RzqMsIM6dzpXOn86jIM6jzqXOnc6fzpnOms6ZzqPOnM6fzqMgzpvOn86lzqTOoc6fzqTOn86gzp/OpSDOkc6hzqTOkc6jLCDOnc6Vzp/Op86pzqHOkc6azpkgzpHOoc6kzpHOoywgzqDOkc6bzpHOmc6fzqPOms6RzpzOmc6RIM6RzqHOpM6RzqMsIM6gzpHOp86lzprOkc6bzpHOnM6fzqMgzpHOoc6kzpHOoywgzqDOlc6hzpHOnc6YzpcgzpHOoc6kzpHOoywgzqDOm86XzqPOmc6fzpkgzpHOoc6kzpHOoywgzqDOn86bzqXOlM6hzp/Oo86fIM6RzqHOpM6RzqMsIM6gzp/Opc6hzp3Okc6hzpkgzpHOoc6kzpHOoywgzqDOpM6VzqHOlyDOkc6hzqTOkc6jLCDOoc6RzqfOlyDOkc6hzqTOkc6jLCDOoc6fzprOms6RIM6RzqHOpM6RzqMsIM6hzp/Opc6czpHOnc6ZzpEgzpHOoc6kzpHOoywgzqPOkc6bzpHOqc6hzpEgzpHOoc6kzpHOoywgzqPOlc6bzpnOnc6RIM6RzqHOpM6RzqMsIM6jzprOkc6czp3Omc6RIM6RzqHOpM6RzqMsIM6jzqXOk86Tzp/Opc6dzpXOmc6azpEgzpHOoc6kzpHOoywgzqPOpc6aSc6VzqMgzpHOoc6kzpHOoywgzqTOls6RzqDOkc6UzpEgzpHOoc6kzpHOoywgzqTOoc6RzqDOlc6WzpHOms6ZIM6RzqHOpM6RzqMsIM6mzpHOk86azp/OoyDOkc6hzqTOkc6jLCDOps6kzpXOoc6XIM6RzqHOpM6RzqMsIM6mzqnOpM6VzpnOnc6fIM6RzqHOpM6RzqMsIM6ozpHOmM6fzqTOn86gzpkgzpHOoc6kzpHOoycsIFByZWZlY3R1cmU6ICfOhs+Bz4TOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0NzE1MCcsIEFyZWE6ICfOhs6czpzOn86jIM6RzqHOpM6RzqMsIM6UzpHOps6dzqnOpM6JIM6RzqHOpM6RzqMsIM6azpHOmM6RzqHOn86Szp/Ojs6dzpnOn86dIM6RzqHOpM6RzqMsIM6azpHOm86bzpnOmM6IzpEgzqDOmc6jzqTOmc6Rzp3Oj86dIM6RzqHOpM6RzqMsIM6azobOnM6gzp/OoyDOo86azp/Ojs6gzpHOoyDOkc6hzqTOkc6jLCDOms6GzqHOlM6RzpzOn86jIM6RzqHOpM6RzqMsIM6gzpHOm86RzpnOn86nzo/Ooc6Zzp/OnSDOo86azp/Ojs6gzpHOoyDOkc6hzqTOkc6jLCDOoM6VzqHOlM6ZzprOhs6hzpnOn86dIM6RzqHOpM6RzqMsIM6gzpnOo86kzpnOkc6dzoYgzpHOoc6kzpHOoywgzqDOm86RzqTOkc6dzobOms6ZzpEgzpHOoc6kzpHOoywgzqDOm86RzqTOhs6dzpnOkSDOkc6hzqTOkc6jLCDOoM6hzp/Ops6JzqTOl86jIM6XzpvOis6RzqMgzpHOoc6kzpHOoywgzqHOn86UzpHOpc6TzokgzpHOoc6kzpHOoywgzqPOms6fzo7OoM6RIM6RzqHOpM6RzqMsIM6jzp/Opc6czojOo86Zzp/OnSDOkc6hzqTOkc6jLCDOpM6jzpnOkc6gzpHOm86RzorOqs6azpEgzpHOoc6kzpHOoywgzqbOkc6dzpXOoc6pzpzOiM6dzpcgzpHOoc6kzpHOoywgzqbOoc6Gzp7On86jIM6RzqHOpM6RzqMnLCBQcmVmZWN0dXJlOiAnzobPgc+EzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0MzEnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0MzInLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0MzMnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0MzQnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0MzUnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0MzYnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0MzcnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0MzgnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0MzknLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0NDAnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0NDEnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0NDInLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0NDMnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0NDQnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0NDUnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0NDYnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA0NDcnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NTEnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NTInLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NTMnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NTQnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NTUnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NTYnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NTcnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NTgnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NTknLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NjAnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NjEnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NjInLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NjMnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA1NjQnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA2NzEnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA2NzInLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA2NzMnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA2NzQnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA2NzUnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA2NzYnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA2NzcnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA2NzgnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA2NzknLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA2ODAnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA2ODEnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA2ODInLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTA2ODMnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTExNDEnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTExNDInLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTExNDMnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTExNDQnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTExNDUnLCBBcmVhOiAnzpHOmM6Xzp3OkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTExNDYnLCBBcmVhOiAnzpPOkc6bzpHOpM6jzpkgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzExMTQ3JywgQXJlYTogJ86TzpHOm86RzqTOo86ZIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTI1MScsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTI1MicsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTI1MycsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTI1NCcsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTI1NScsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTI1NicsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTI1NycsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTM2MScsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTM2MicsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTM2MycsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTM2NCcsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTQ3MScsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTQ3MicsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTQ3MycsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTQ3NCcsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTQ3NScsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTQ3NicsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTUyMScsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTUyMicsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTUyMycsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTUyNCcsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTUyNScsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTUyNicsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTUyNycsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTUyOCcsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTYzMScsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTYzMicsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTYzMycsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTYzNCcsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTYzNScsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTYzNicsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTc0MScsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTc0MicsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTc0MycsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTc0NCcsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTc0NScsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTg1MScsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTg1MicsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTg1MycsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTg1NCcsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMTg1NScsIEFyZWE6ICfOkc6YzpfOnc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMjEzMScsIEFyZWE6ICfOoM6VzqHOmc6jzqTOlc6hzpkgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzEyMTMyJywgQXJlYTogJ86gzpXOoc6ZzqPOpM6VzqHOmSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTIxMzMnLCBBcmVhOiAnzqDOlc6hzpnOo86kzpXOoc6ZIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMjEzNCcsIEFyZWE6ICfOoM6VzqHOmc6jzqTOlc6hzpkgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzEyMTM1JywgQXJlYTogJ86gzpXOoc6ZzqPOpM6VzqHOmSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTIxMzYnLCBBcmVhOiAnzqDOlc6hzpnOo86kzpXOoc6ZIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMjEzNycsIEFyZWE6ICfOoM6VzqHOmc6jzqTOlc6hzpkgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzEyMjQxJywgQXJlYTogJ86RzpnOk86RzpvOlc6pIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMjI0MicsIEFyZWE6ICfOkc6ZzpPOkc6bzpXOqSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTIyNDMnLCBBcmVhOiAnzpHOmc6TzpHOm86VzqkgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzEyMjQ0JywgQXJlYTogJ86RzpnOk86RzpvOlc6pIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMjM1MScsIEFyZWE6ICfOkc6TzpnOkSDOks6RzqHOks6RzqHOkSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTI0NjEnLCBBcmVhOiAnzqfOkc6ZzpTOkc6hzpkgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzEyNDYyJywgQXJlYTogJ86jzprOkc6hzpHOnM6RzpPOms6RzqMgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzEzMTIxJywgQXJlYTogJ86ZzpvOmc6fzp0gzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzEzMTIyJywgQXJlYTogJ86ZzpvOmc6fzp0gzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzEzMTIzJywgQXJlYTogJ86ZzpvOmc6fzp0gzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzEzMjIzJywgQXJlYTogJ86ZzpvOmc6fzqUgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzEzMjMxJywgQXJlYTogJ86gzpXOpM6hzp/Opc6gzp/Om86XIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMzIzMicsIEFyZWE6ICfOoM6VzqTOoc6fzqXOoM6fzpvOlc6pzqMgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzEzMzQxJywgQXJlYTogJ86Rzp3OqSDOm86Zzp/Oo86ZzpEgzpHOpM6kzpnOms6XzqMsIM6gzpHOoM6RzpPOn86lIM6RzqTOpM6ZzprOl86jLCDOps6lzpvOlyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTMzNDInLCBBcmVhOiAnzpHOnc6pIM6bzpnOn86jzpnOkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTMzNDMnLCBBcmVhOiAnzpHOnc6pIM6bzpnOn86jzpnOkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTMzNDQnLCBBcmVhOiAnzpHOnc6pIM6bzpnOn86jzpnOkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTMzNTEnLCBBcmVhOiAnzqbOpc6bzpfOoyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTM0NTEnLCBBcmVhOiAnzprOkc6czpHOpM6VzqHOnyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTM0NjEnLCBBcmVhOiAnzpbOlc6mzqXOoc6ZIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMzU2MScsIEFyZWE6ICfOkc6TzpnOn86ZIM6Rzp3Okc6hzpPOpc6hzp/OmSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTM1NjInLCBBcmVhOiAnzpHOk86Zzp/OmSDOkc6dzpHOoc6TzqXOoc6fzpkgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzEzNjcxJywgQXJlYTogJ86RzqfOkc6hzp3Olc6jICjOnM6Vzp3Omc6UzpkpIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMzY3MicsIEFyZWE6ICfOks6RzqHOpc6czqDOn86czqDOlyDOkc6kzqTOmc6azpfOoywgzp7Olc6dzpnOkSDOoM6RzqHOnc6XzpjOn86jIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMzY3MycsIEFyZWE6ICfOkc6nzpHOoc6dzpXOoyDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTM2NzQnLCBBcmVhOiAnzpHOk86ZzpEgzqTOoc6ZzpHOlM6RIM6gzpHOoc6dzpfOmM6fzqMgzpHOpM6kzpnOms6XzqMsIM6gzpHOoc6dzpfOmM6RIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMzY3NScsIEFyZWE6ICfOkc6nzpHOoc6dzpXOoyDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTM2NzYnLCBBcmVhOiAnzpjOoc6RzprOn86czpHOms6VzpTOn86dzpXOoyDOkc6kzqTOmc6azpfOoywgzpzOn86dzpcgzprOn86ZzpzOl86jzpXOqc6jIM6YzpXOn86kzp/Oms6fzqUgzprOm86VzpnOo86kzqnOnSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTM2NzcnLCBBcmVhOiAnzpHOp86RzqHOnc6VzqMgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzEzNjc4JywgQXJlYTogJ86RzqfOkc6hzp3Olc6jIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxMzY3OScsIEFyZWE6ICfOkc6nzpHOoc6dzpXOoyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTQxMjEnLCBBcmVhOiAnzpfOoc6RzprOm86VzpnOnyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTQxMjInLCBBcmVhOiAnzpfOoc6RzprOm86VzpnOnyDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTQxMjMnLCBBcmVhOiAnzpvOpc6azp/Oks6hzqXOo86XIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNDIzMScsIEFyZWE6ICfOnc6VzpEgzpnOqc6dzpnOkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTQyMzInLCBBcmVhOiAnzp3Olc6RIM6ZzqnOnc6ZzpEgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE0MjMzJywgQXJlYTogJ86dzpXOkSDOmc6pzp3Omc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNDIzNCcsIEFyZWE6ICfOnc6VzpEgzpnOqc6dzpnOkSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTQyMzUnLCBBcmVhOiAnzp3Olc6RIM6ZzqnOnc6ZzpEgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE0MzQxJywgQXJlYTogJ86dzpXOkSDOps6ZzpvOkc6UzpXOm86mzpXOmc6RIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNDM0MicsIEFyZWE6ICfOnc6VzpEgzqbOmc6bzpHOlM6VzpvOps6VzpnOkSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTQzNDMnLCBBcmVhOiAnzp3Olc6RIM6nzpHOm86azpfOlM6pzp3OkSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTQ0NTEnLCBBcmVhOiAnzpzOlc6kzpHOnM6fzqHOps6pzqPOlyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTQ0NTInLCBBcmVhOiAnzpzOlc6kzpHOnM6fzqHOps6pzqPOlyDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTQ1NjEnLCBBcmVhOiAnzprOl86mzpnOo86ZzpEgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE0NTYyJywgQXJlYTogJ86azpfOps6ZzqPOmc6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNDU2MycsIEFyZWE6ICfOms6XzqbOmc6jzpnOkSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTQ1NjQnLCBBcmVhOiAnzprOl86mzpnOo86ZzpEgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE0NTY1JywgQXJlYTogJ86RzpPOmc6fzqMgzqPOpM6VzqbOkc6dzp/OoyDOkc6kzqTOmc6azpfOoywgzpTOmc6fzp3Opc6jzp/OoyDOkc6kzqTOmc6azpfOoywgzpTOoc6fzqPOmc6RIM6RzqTOpM6ZzprOl86jLCDOoM6VzqXOms6fzqbOpc6kzp8gzpHOpM6kzpnOms6XzqMsIM6hzpHOoM6Vzp3OpM6pzqPOkSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTQ1NjgnLCBBcmVhOiAnzprOoc6lzp/Onc6VzqHOmSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTQ1NjknLCBBcmVhOiAnzpHOnc6fzpnOns6XIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNDU3MicsIEFyZWE6ICfOlM6hzp/Oo86ZzpEgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE0NTc0JywgQXJlYTogJ86hzp/OlM6fzqDOn86bzpcgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE0NTc1JywgQXJlYTogJ86jzqTOkc6czpHOpM6RIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNDU3NicsIEFyZWE6ICfOlM6Zzp/Onc6lzqPOn86jIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNDU3OCcsIEFyZWE6ICfOlc6azpHOm86XIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNDY3MScsIEFyZWE6ICfOnc6VzpEgzpXOoc6lzpjOoc6RzpnOkSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTQ2NzgnLCBBcmVhOiAnzprOl86mzpnOo86ZzpHOoyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTUxMjEnLCBBcmVhOiAnzqDOlc6lzprOlyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTUxMjInLCBBcmVhOiAnzpzOkc6hzp/Opc6jzpkgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE1MTIzJywgQXJlYTogJ86czpHOoc6fzqXOo86ZIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNTEyNCcsIEFyZWE6ICfOnM6RzqHOn86lzqPOmSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTUxMjUnLCBBcmVhOiAnzpzOkc6hzp/Opc6jzpkgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE1MTI2JywgQXJlYTogJ86czpHOoc6fzqXOo86ZIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNTEyNycsIEFyZWE6ICfOnM6VzpvOmc6jzqPOmc6RIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNTIyMycsIEFyZWE6ICfOkc6czpHOoc6fzqXOo86Zzp/OpSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTUyMzEnLCBBcmVhOiAnzqfOkc6bzpHOnc6UzqHOmSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTUyMzInLCBBcmVhOiAnzqfOkc6bzpHOnc6UzqHOmSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTUyMzMnLCBBcmVhOiAnzqfOkc6bzpHOnc6UzqHOmSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTUyMzQnLCBBcmVhOiAnzqfOkc6bzpHOnc6UzqHOmSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTUyMzUnLCBBcmVhOiAnzpLOoc6ZzpvOl86jzqPOmc6RIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNTIzNicsIEFyZWE6ICfOnM6gzp/Opc6hzpzOoM6RzqfOpM6ZIM6RzqTOpM6ZzprOl86jLCDOnc6VzpEgzqDOlc6dzqTOlc6bzpcgzpHOpM6kzpnOms6XzqMsIM6gzpXOnc6kzpXOm86XIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNTIzNycsIEFyZWE6ICfOps6ZzpvOn86YzpXOlyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTUyMzgnLCBBcmVhOiAnzqfOkc6bzpHOnc6UzqHOmSDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTUzNDEnLCBBcmVhOiAnzpHOk86ZzpEgzqDOkc6hzpHOo86azpXOpc6XIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNTM0MicsIEFyZWE6ICfOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE1MzQzJywgQXJlYTogJ86RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTUzNDQnLCBBcmVhOiAnzpPOlc6hzpHOms6RzqMgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE1MzQ5JywgQXJlYTogJ86Rzp3OmM6fzqXOo86RIM6RzqTOpM6ZzprOl86jLCDOk86RzpvOl86dzpcgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE1MzUxJywgQXJlYTogJ86RzqHOk86ZzpjOlc6RIM6RzqTOpM6ZzprOl86jLCDOm86Vzp/Onc6kzpHOoc6ZIM6RzqTOpM6ZzprOl86jLCDOoM6RzpvOm86Xzp3OlyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTUzNTMnLCBBcmVhOiAnzpHOk86ZzpEgzqDOkc6hzpHOo86azpXOpc6XzqMgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE1MzU0JywgQXJlYTogJ86TzpvOpc6azpEgzp3Olc6hzpEgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE1NDUxJywgQXJlYTogJ86dzpXOnyDOqM6lzqfOmc6azp8gzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE1NDUyJywgQXJlYTogJ86ozqXOp86ZzprOnyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTU1NjEnLCBBcmVhOiAnzqfOn86bzpHOoc6Tzp/OoyDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTU1NjInLCBBcmVhOiAnzqfOn86bzpHOoc6Tzp/OoyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTU2NjknLCBBcmVhOiAnzqDOkc6gzpHOk86fzqMgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE1NzcxJywgQXJlYTogJ86WzqnOk86hzpHOps6fzqUgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE1NzcyJywgQXJlYTogJ86WzqnOk86hzpHOps6fzqMgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE1NzczJywgQXJlYTogJ86WzqnOk86hzpHOps6fzqMgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE2MTIxJywgQXJlYTogJ86azpHOmc6jzpHOoc6ZzpHOnc6XIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNjEyMicsIEFyZWE6ICfOms6RzpnOo86RzqHOmc6Rzp3OlyDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTYyMzEnLCBBcmVhOiAnzpLOpc6hzqnOnc6RzqMgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE2MjMyJywgQXJlYTogJ86SzqXOoc6pzp3Okc6jIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNjIzMycsIEFyZWE6ICfOks6lzqHOqc6dzpHOoyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTYzNDEnLCBBcmVhOiAnzpfOm86Zzp/Opc6gzp/Om86XIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNjM0MicsIEFyZWE6ICfOl86bzpnOn86lzqDOn86bzpcgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE2MzQzJywgQXJlYTogJ86XzpvOmc6fzqXOoM6fzpvOlyDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTYzNDQnLCBBcmVhOiAnzpfOm86Zzp/Opc6gzp/Om86XIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNjM0NScsIEFyZWE6ICfOl86bzpnOn86lzqDOn86bzpcgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE2MzQ2JywgQXJlYTogJ86XzpvOmc6fzqXOoM6fzpvOlyDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTY0NTEnLCBBcmVhOiAnzpHOoc6TzqXOoc6fzqXOoM6fzpvOlyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTY0NTInLCBBcmVhOiAnzpHOoc6TzqXOoc6fzqXOoM6fzpvOlyDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTY1MzEnLCBBcmVhOiAnzpPOm86lzqbOkc6UzpHOoyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTY1NjEnLCBBcmVhOiAnzpPOm86lzqbOkc6UzpEgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE2NTYyJywgQXJlYTogJ86TzpvOpc6mzpHOlM6RIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNjU3NCcsIEFyZWE6ICfOk86bzqXOps6RzpTOkc6jIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNjY3MScsIEFyZWE6ICfOks6fzqXOm86ZzpHOk86czpXOnc6XIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNjY3MicsIEFyZWE6ICfOks6RzqHOlyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTY2NzMnLCBBcmVhOiAnzpLOn86lzpvOkSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTY2NzQnLCBBcmVhOiAnzpPOm86lzqbOkc6UzpEgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE2Njc1JywgQXJlYTogJ86TzpvOpc6mzpHOlM6RIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNjc3NycsIEFyZWE6ICfOlc6bzpvOl86dzpnOms6fIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNzEyMScsIEFyZWE6ICfOnc6VzpEgzqPOnM6lzqHOnc6XIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNzEyMicsIEFyZWE6ICfOnc6VzpEgzqPOnM6lzqHOnc6XIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNzEyMycsIEFyZWE6ICfOnc6VzpEgzqPOnM6lzqHOnc6XIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNzEyNCcsIEFyZWE6ICfOnc6VzpEgzqPOnM6lzqHOnc6XIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNzIzNCcsIEFyZWE6ICfOlM6RzqbOnc6XIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNzIzNScsIEFyZWE6ICfOlM6RzqbOnc6XIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNzIzNicsIEFyZWE6ICfOpc6czpfOpM6kzp/OoyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTcyMzcnLCBBcmVhOiAnzqXOnM6XzqTOpM6fzqMgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE3MzQxJywgQXJlYTogJ86RzpPOmc6fzqMgzpTOl86czpfOpM6hzpnOn86jIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNzM0MicsIEFyZWE6ICfOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTczNDMnLCBBcmVhOiAnzpHOk86Zzp/OoyDOlM6XzpzOl86kzqHOmc6fzqMgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE3NDU1JywgQXJlYTogJ86azpHOm86RzpzOkc6azpkgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE3NDU2JywgQXJlYTogJ86RzpvOmc6czp/OoyDOkc6YzpfOnc6RIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTc1NTYnLCBBcmVhOiAnzpHOm86ZzpzOn86lIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNzU2MScsIEFyZWE6ICfOoM6RzpvOkc6Zzp8gzqbOkc6bzpfOoc6fIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNzU2MicsIEFyZWE6ICfOoM6RzpvOkc6Zzp8gzqbOkc6bzpfOoc6fIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNzU2MycsIEFyZWE6ICfOoM6RzpvOkc6Zzp8gzqbOkc6bzpfOoc6fIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNzU2NCcsIEFyZWE6ICfOoM6RzpvOkc6Zzp8gzqbOkc6bzpfOoc6fIM6RzpjOl86dzpEgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxNzY1NScsIEFyZWE6ICfOkc6bzpnOnM6fzqMgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE3NjcxJywgQXJlYTogJ86azpHOm86bzpnOmM6VzpEgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE3NjcyJywgQXJlYTogJ86azpHOm86bzpnOmM6VzpEgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE3NjczJywgQXJlYTogJ86azpHOm86bzpnOmM6VzpEgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE3Njc0JywgQXJlYTogJ86azpHOm86bzpnOmM6VzpEgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE3Njc1JywgQXJlYTogJ86azpHOm86bzpnOmM6VzpEgzpHOmM6Xzp3OkSAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE3Njc2JywgQXJlYTogJ86azpHOm86bzpnOmM6VzpEgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE3Nzc4JywgQXJlYTogJ86kzpHOpc6hzp/OoyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTgwMTAnLCBBcmVhOiAnzpHOk86ZzpEgzpzOkc6hzpnOnc6RIM6RzqTOpM6ZzprOl86jLCDOkc6TzprOmc6jzqTOoc6ZIM6dzpfOo86fzqMgzpHOpM6kzpnOms6XzqMsIM6RzpnOk86Zzp3OkSDOkc6kzqTOmc6azpfOoywgzpHOm86pzp3Olc6jIM6RzqTOpM6ZzprOl86jLCDOkc6dzpnOpM6jzpHOmc6fIM6RzqTOpM6ZzprOl86jLCDOks6RzpjOpSDOkc6TzprOmc6jzqTOoc6Zzp/OpSDOkc6kzqTOmc6azpfOoywgzpLOkc6YzqUgzpHOmc6TzpnOnc6RzqMgzpHOpM6kzpnOms6XzqMsIM6SzpHOmc6RIM6RzqTOpM6ZzprOl86jLCDOks6bzpHOp86XzpTOlc6jIM6RzqTOpM6ZzprOl86jLCDOms6RzpLOn86jIM6RzqTOpM6ZzprOl86jLCDOms6RzqDOn86kzpfOlM6VzqMgzpHOpM6kzpnOms6XzqMsIM6azp/Onc6kzp/OoyDOkc6kzqTOmc6azpfOoywgzprOpc6bzpnOnc6UzqHOkc6jIM6RzqTOpM6ZzprOl86jLCDOms6lzqjOlc6bzpcgzpHOmc6TzpnOnc6RzqMgzpHOpM6kzpnOms6XzqMsIM6bzpHOk86fzqXOo86RIM6dzpfOo86fzqMgzpHOpM6kzpnOms6XzqMsIM6bzpHOk86fzqXOo86RzprOmSDOnc6XzqPOn86jIM6RzqTOpM6ZzprOl86jLCDOm86RzpbOkc6hzpfOlM6VzqMgzpHOpM6kzpnOms6XzqMsIM6bzpnOnM6Vzp3Okc6hzpnOkSDOkc6TzprOmc6jzqTOoc6Zzp/OpSDOkc6kzqTOmc6azpfOoywgzpzOlc6TzpHOm86fzqfOqc6hzpkgzpHOk86azpnOo86kzqHOmc6fzqUgzpHOpM6kzpnOms6XzqMsIM6czpXOo86RzpPOoc6fzqMgzpHOpM6kzpnOms6XzqMsIM6czpXOpM6fzqfOmSDOkc6TzprOmc6jzqTOoc6Zzp/OpSDOkc6kzqTOmc6azpfOoywgzpzOn86dzpcgzprOn86ZzpzOl86jzpXOqc6jIM6YzpXOn86kzp/Oms6fzqUgIM6RzpnOk86Zzp3Okc6jIM6RzqTOpM6ZzprOl86jLCDOnM6fzp3OlyDOnc6XzqPOn86jIM6RzqTOpM6ZzprOl86jLCDOoM6RzqfOlc6ZzpEgzqHOkc6nzpcgzpHOpM6kzpnOms6XzqMsIM6gzpXOoc6UzpnOms6RIM6RzqTOpM6ZzprOl86jLCDOoM6fzqHOpM6VzqMgzpHOpM6kzpnOms6XzqMsIM6gzqHOn86mzpfOpM6XzqMgzpfOm86ZzpHOoyDOkc6kzqTOmc6azpfOoywgzqPOms6RzpvOkSDOkc6TzprOmc6jzqTOoc6Zzp/OpSDOkc6kzqTOmc6azpfOoywgzqPOn86lzpLOkc6bzpEgzpHOpM6kzpnOms6XzqMsIM6jzqTOkc6nzqTOn86hzqHOn86XIM6dzpfOo86fzqMgzpHOpM6kzpnOms6XzqMsIM6jzqbOlc6dzqTOn86lzqHOmSDOkc6kzqTOmc6azpfOoywgzqTOls6ZzprOl86UzpXOoyDOkc6kzqTOmc6azpfOoywgzqXOqM6XzpvOlyDOnc6XzqPOn86jIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxODAyMCcsIEFyZWE6ICfOkc6TzpnOkSDOlc6bzpXOnc6XIM6RzqTOpM6ZzprOl86jLCDOkc6TzpnOkSDOo86pzqTOl86hzpEgzpPOkc6bzpHOpM6RIM6RzqTOpM6ZzprOl86jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzqTOoc6fzpnOls6Xzp3Okc6jIM6RzqTOpM6ZzprOl86jLCDOkc6TzpnOn86jIM6azqnOnc6jzqTOkc6dzqTOmc6dzp/OoyDOpM6hzp/Omc6WzpfOnc6fzqMgzpHOpM6kzpnOms6XzqMsIM6RzpPOmc6fzqMgzp3Olc6azqTOkc6hzpnOn86jIM6RzqTOpM6ZzprOl86jLCDOkc6azqTOlyDOkc6TzpHOoM6XzqMgzpHOpM6kzpnOms6XzqMsIM6Rzp3OqSDOps6Rzp3Okc6hzpkgzpHOpM6kzpnOms6XzqMsIM6SzpvOkc6nzpHOmc6ZzprOkSDOkc6kzqTOmc6azpfOoywgzpLOpc6UzpnOnyDOkc6kzqTOmc6azpfOoywgzpPOkc6bzpHOpM6RzqMgzpHOpM6kzpnOms6XzqMsIM6UzqHOpc6fzqDOlyDOkc6kzqTOmc6azpfOoywgzpbOlc6hzpLOkc6ZzpnOms6RIM6RzqTOpM6ZzprOl86jLCDOms6RzpvOm86fzp3OlyDOkc6kzqTOmc6azpfOoywgzprOkc6hzpHOpM6WzpHOoyDOkc6kzqTOmc6azpfOoywgzprOpc6Rzp3OlyDOkc6azqTOlyDOkc6kzqTOmc6azpfOoywgzpzOlc6kzpHOnM6fzqHOps6pzqPOlyDOoM6fzqHOn86lIM6RzqTOpM6ZzprOl86jLCDOnM6fzp3OlyDOls6pzp/OlM6fzqfOn86lIM6gzpfOk86XzqMgzprOkc6bzpHOpc6hzpXOmc6RzqMgzpHOpM6kzpnOms6XzqMsIM6czqXOm86fzqMgzpHOpM6kzpnOms6XzqMsIM6dzpXOoc6RzqTOls6ZzpEgzpHOpM6kzpnOms6XzqMsIM6dzpfOo86ZzpTOkSDOkc6kzqTOmc6azpfOoywgzqDOn86hzp/OoyDOkc6kzqTOmc6azpfOoywgzqPOkc6hzqnOnc6ZzpTOkSDOk86RzpvOkc6kzpEgzpHOpM6kzpnOms6XzqMsIM6jzprOkc6gzpXOpM6ZIM6RzqTOpM6ZzprOl86jLCDOpM6RzprOpM6ZzprOn86lzqDOn86bzpcgzpHOpM6kzpnOms6XzqMsIM6kzqHOn86ZzpbOl86dzpEgzpHOpM6kzpnOms6XzqMsIM6nzqnOoc6RIM6RzqTOpM6ZzprOl86jLCDOqM6XzqbOpM6RIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxODAzMCcsIEFyZWE6ICfOkc6TzpnOn86ZIM6YzpXOn86UzqnOoc6fzpkgzpzOlc6YzpHOnc6pzp0gzpHOpM6kzpnOms6XzqMsIM6RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOnM6VzpjOkc6dzqnOnSDOkc6kzqTOmc6azpfOoywgzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6czpXOmM6Rzp3Oqc6dIM6RzqTOpM6ZzprOl86jLCDOks6RzpjOpSDOnM6VzpjOkc6dzqnOnSDOkc6kzqTOmc6azpfOoywgzpTOoc6ZzqTOo86RzpnOmc6azpEgzpzOlc6YzpHOnc6pzp0gzpHOpM6kzpnOms6XzqMsIM6azpHOl86czpXOnc6XIM6nzqnOoc6RIM6czpXOmM6Rzp3Oqc6dIM6RzqTOpM6ZzprOl86jLCDOms6fzqXOnc6fzqXOoM6ZzqTOo86RIM6czpXOmM6Rzp3Oqc6dIM6RzqTOpM6ZzprOl86jLCDOms6lzqjOlc6bzpcgzpzOlc6YzpHOnc6pzp0gzpHOpM6kzpnOms6XzqMsIM6czpHOms6hzqXOm86fzpPOk86fzqMgzpzOlc6YzpHOnc6pzp0gzpHOpM6kzpnOms6XzqMsIM6czpXOk86RzpvOnyDOoM6fzqTOkc6czpkgzpzOlc6YzpHOnc6pzp0gzpHOpM6kzpnOms6XzqMsIM6czpXOk86RzpvOn86nzqnOoc6ZIM6czpXOmM6Rzp3Oqc6dIM6RzqTOpM6ZzprOl86jLCDOnM6VzpjOkc6dzpEgzpHOpM6kzpnOms6XzqMsIM6gzpHOm86RzpnOkSDOm86fzqXOpM6hzpEgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE4MDQwJywgQXJlYTogJ86RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOnc6XzqPOn86jIM6RzqTOpM6ZzprOl86jLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6lzpTOoc6RzqMgzpHOpM6kzpnOms6XzqMsIM6RzpPOmc6fzqMgzprOqc6dzqPOpM6Rzp3OpM6Zzp3On86jIM6lzpTOoc6RzqMgzpHOpM6kzpnOms6XzqMsIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOpc6UzqHOkc6jIM6RzqTOpM6ZzprOl86jLCDOks6bzqXOp86fzqMgzpHOpM6kzpnOms6XzqMsIM6Uzp/Oms6fzqMgzp3Ol86jzp/OoyDOkc6kzqTOmc6azpfOoywgzpXOoM6ZzqPOms6fzqDOlyDOkc6kzqTOmc6azpfOoywgzpbOqc6TzpXOoc6ZIM6RzqTOpM6ZzprOl86jLCDOms6ZzpLOqc6kzp/OoyDOkc6kzqTOmc6azpfOoywgzprOm86ZzpzOkc6azpkgzpHOpM6kzpnOms6XzqMsIM6bzpnOnM6Zzp/Onc6ZzpbOkSDOkc6kzqTOmc6azpfOoywgzpzOkc6dzpTOoc6RzprOmSDOkc6kzqTOmc6azpfOoywgzpzOn86dzpcgzpHOk86ZzpHOoyDOlc6lzqDOoc6Rzp7Omc6RzqMgzpHOpM6kzpnOms6XzqMsIM6czp/Onc6XIM6RzpPOmc6RzqMgzqTOoc6ZzpHOlM6fzqMgzpHOpM6kzpnOms6XzqMsIM6czp/Onc6XIM6RzpPOmc6fzqUgzp3Omc6azp/Om86Rzp/OpSDOkc6kzqTOmc6azpfOoywgzpzOn86dzpcgzpPOlc6dzp3Ol86jzpnOn86lIM6YzpXOn86kzp/Oms6fzqUgzpbOn86lzqHOks6RzqMgzpHOpM6kzpnOms6XzqMsIM6czp/Onc6XIM6gzqHOn86mzpfOpM6fzqUgzpfOm86Zzp/OpSDOkc6kzqTOmc6azpfOoywgzpzOqc6bzp/OoyDOkc6kzqTOmc6azpfOoywgzqDOkc6bzpHOnM6ZzpTOkc6jIM6RzqTOpM6ZzprOl86jLCDOoM6RzqHOkc6gzp/Om86RIM6RzqTOpM6ZzprOl86jLCDOoM6VzqTOkc6jzpkgzpHOpM6kzpnOms6XzqMsIM6gzpvOkc6kzp/Onc6XzqPOmSDOkc6kzqTOmc6azpfOoywgzqPOpM6RzqXOoc6fzp3Ol86jzpkgzpHOpM6kzpnOms6XzqMsIM6kzqHOmc6azpXOoc6ZIM6RzqTOpM6ZzprOl86jLCDOpc6UzqHOkSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTgwNTAnLCBBcmVhOiAnzpHOk86ZzpEgzqDOkc6hzpHOo86azpXOpc6XIM6jzqDOlc6kzqPOqc6dIM6RzqTOpM6ZzprOl86jLCDOkc6TzpnOn86ZIM6Rzp3Okc6hzpPOpc6hzp/OmSDOo86gzpXOpM6jzqnOnSDOkc6kzqTOmc6azpfOoywgzpLOlc6bzp/OoM6fzqXOm86RIM6dzpfOo86fzqMgzpHOpM6kzpnOms6XzqMsIM6azp/Opc6Wzp/Opc6dzp/OoyDOkc6kzqTOmc6azpfOoywgzpvOmc6Tzp/Onc6VzqHOmSDOkc6kzqTOmc6azpfOoywgzpzOn86dzpcgzpHOk86ZzqnOnSDOoM6Rzp3OpM6pzp0gzpHOpM6kzpnOms6XzqMsIM6jzqDOlc6kzqPOlc6jIM6RzqTOpM6ZzprOl86jLCDOo86gzpXOpM6jzp/OoM6fzqXOm86RICDOnc6XzqPOn86jIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxODEyMCcsIEFyZWE6ICfOms6fzqHOpc6UzpHOm86bzp/OoyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTgxMjEnLCBBcmVhOiAnzprOn86hzqXOlM6RzpvOm86fzqMgzqDOlc6ZzqHOkc6ZzpHOoyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE4MTIyJywgQXJlYTogJ86azp/Ooc6lzpTOkc6bzpvOn86jIM6gzpXOmc6hzpHOmc6RzqMgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxODIzMycsIEFyZWE6ICfOkc6TLiDOmc6pzpHOnc6dzpfOoyDOoc6Vzp3OpM6XzqMgzqDOlc6ZzqHOkc6ZzpHOoyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE4MzQ0JywgQXJlYTogJ86czp/Oo86nzpHOpM6fIM6gzpXOmc6hzpHOmc6RzqMgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxODM0NScsIEFyZWE6ICfOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6hzpXOnc6kzpfOoyDOkc6kzqTOmc6azpfOoywgzpzOn86jzqfOkc6kzp8gzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE4MzQ2JywgQXJlYTogJ86czp/Oo86nzpHOpM6fIM6gzpXOmc6hzpHOmc6RzqMgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxODQ1MCcsIEFyZWE6ICfOnc6ZzprOkc6ZzpEgzqDOlc6ZzqHOkc6ZzpHOoyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE4NDUxJywgQXJlYTogJ86dzpnOms6RzpnOkSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg0NTInLCBBcmVhOiAnzp3Omc6azpHOmc6RIM6gzpXOmc6hzpHOmc6RzqMgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxODQ1MycsIEFyZWE6ICfOnc6ZzprOkc6ZzpEgzqDOlc6ZzqHOkc6ZzpHOoyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE4NDU0JywgQXJlYTogJ86dzpnOms6RzpnOkSDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1MzEnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1MzInLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1MzMnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1MzQnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1MzUnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1MzYnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1MzcnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1MzgnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1MzknLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1NDAnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1NDEnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1NDInLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1NDMnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1NDQnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1NDUnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1NDYnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg1NDcnLCBBcmVhOiAnzqDOlc6ZzqHOkc6ZzpHOoyDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg2NDgnLCBBcmVhOiAnzpTOoc6RzqDOlc6kzqPOqc6dzpEgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE4NzU1JywgQXJlYTogJ86azpXOoc6RzqTOo86Zzp3OmSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg3NTYnLCBBcmVhOiAnzprOlc6hzpHOpM6jzpnOnc6ZIM6gzpXOmc6hzpHOmc6RzqMgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxODc1NycsIEFyZWE6ICfOms6VzqHOkc6kzqPOmc6dzpkgzqDOlc6ZzqHOkc6ZzpHOoyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE4NzU4JywgQXJlYTogJ86azpXOoc6RzqTOo86Zzp3OmSDOoM6VzpnOoc6RzpnOkc6jIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTg4NjMnLCBBcmVhOiAnzqDOlc6hzpHOnM6RIM6RzqTOpM6ZzprOl86jLCDOqM6lzqTOpM6RzpvOlc6ZzpEgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE4OTAwJywgQXJlYTogJ86RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOo86RzpvOkc6czpnOnc6RzqMgzpHOpM6kzpnOms6XzqMsIM6VzpvOm86Xzp3Omc6azp8gzpHOpM6kzpnOms6XzqMsIM6azpHOnc6RzprOmc6RIM6RzqTOpM6ZzprOl86jLCDOm86VzqHOn86jIM6jzpHOm86RzpzOmc6dzpHOoyDOkc6kzqTOmc6azpfOoywgzpzOkc6azqHOn86dzpfOo86fzqMgzpHOpM6kzpnOms6XzqMsIM6czp/Onc6XIM6azp/Omc6czpfOo86VzqnOoyDOmM6Vzp/OpM6fzprOn86lIM6mzpHOnc6VzqHOqc6czpXOnc6XzqMgzpHOpM6kzpnOms6XzqMsIM6czqDOkc6kzqPOmSDOkc6kzqTOmc6azpfOoywgzp3Ol86jzp/OoyDOms6Rzp3Okc6azpnOkSDOkc6kzqTOmc6azpfOoywgzqHOlc6SzqXOmM6fzqXOo86RIM6RzqTOpM6ZzprOl86jLCDOo86RzpvOkc6czpnOnc6RIM6RzqTOpM6ZzprOl86jLCDOo86kzpXOnc6fIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxODk1MCcsIEFyZWE6ICfOkc6TzorOkSDOnM6RzqHOis6dzpEgzpHOpM6kzpnOms6XzqMsIM6RzpnOhs6dzqTOlc6Zzp8gzpHOpM6kzpnOms6XzqMsIM6RzorOkc6jIM6azpvOhs6czqAgzpHOpM6kzpnOms6XzqMsIM6RzpzOpc6TzpTOkc6bzpnOiM6jIM6RzqTOpM6ZzprOl86jLCDOhs6dzqkgzpbOn86hzpzOoM6RzpvOhiDOkc6kzqTOmc6azpfOoywgzpHOps6hzp/OlM6KzqTOlyDOkc6kzqTOmc6azpfOoywgzpPOpc6GzpvOkSDOkc6kzqTOmc6azpfOoywgzpTOlc6XICjOp86RzpvOmc6PzqTOlykgzpHOpM6kzpnOms6XzqMsIM6UzpfOnM6XzqTOoc6Gzp3OmSDOkc6kzqTOmc6azpfOoywgzprOkc6azokgzpLOis6TzpvOkSDOkc6kzqTOmc6azpfOoywgzprOkc6czqDOjM6bzpkgzpHOpM6kzpnOms6XzqMsIM6azpHOnc6GzprOmc6RIM6RzqTOpM6ZzprOl86jLCDOms6GzqTOqSDOls6fzqHOnM6gzpHOm86GIM6RzqTOpM6ZzprOl86jLCDOms6fzpvOj86dzpXOoyDOkc6kzqTOmc6azpfOoywgzpzOlc6dzpXOnM6Izp3OlyDOkc6kzqTOmc6azpfOoywgzpzOoM6Mzp3OmSDOkc6kzqTOmc6azpfOoywgzp3Okc6kzp8gzpHOpM6kzpnOms6XzqMsIM6dzqTOn86lzpvOhs6gzpkgzpHOpM6kzpnOms6XzqMsIM6gzpHOnc6MzqHOkc6czpEgzpHOpM6kzpnOms6XzqMsIM6gzpXOoc6Gzp3OmSDOkc6kzqTOmc6azpfOoywgzqDOlc6hzpnOo86kzojOoc6ZzpEgzpHOpM6kzpnOms6XzqMsIM6gzozOoc6kzp8gzqbOis6dzp8gzpHOpM6kzpnOms6XzqMsIM6jzpHOpM6VzqHOm86KIM6RzqTOpM6ZzprOl86jLCDOp86RzqHOn86lzqDOmc6GIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxOTAwMScsIEFyZWE6ICfOkc6TzpnOkSDOnM6RzqHOmc6dzpEgzpzOmc6azqHOn86bzpnOnM6Rzp3On86lIM6RzqTOpM6ZzprOl86jLCDOkc6TzpnOkc6jzpzOkSDOkc6kzqTOmc6azpfOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6azpXOoc6RzqTOlc6RzqMgzpHOpM6kzpnOms6XzqMsIM6Rzp3OqSDOlM6RzqPOms6RzpvOlc6Zzp8gzpHOpM6kzpnOms6XzqMsIM6RzqHOmSDOkc6kzqTOmc6azpfOoywgzpHOpc6hzp/Oms6RzqPOpM6hzp8gzpHOpM6kzpnOms6XzqMsIM6SzpXOnc6Zzp8gzpTOkc6jzprOkc6bzpXOmc6fzqUgzpHOpM6kzpnOms6XzqMsIM6SzpnOnc6kzpbOmSDOlM6RzqPOms6RzpvOlc6Zzp/OpSDOkc6kzqTOmc6azpfOoywgzpTOkc6jzprOkc6bzpXOmc6fIM6RzqTOpM6ZzprOl86jLCDOlM6XzpzOn86bzpHOms6ZIM6RzqTOpM6ZzprOl86jLCDOlM6Zzp/Onc6lzqPOn86jIM6azpXOoc6RzqTOlc6RzqMgzpHOpM6kzpnOms6XzqMsIM6UzpnOqM6VzpvOmc6WzpEgzpHOpM6kzpnOms6XzqMsIM6VzpvOkc6Zzp/Op86pzqHOmSDOkc6kzqTOmc6azpfOoywgzpXOm86ZzpXOoyDOlM6RzqPOms6RzpvOlc6Zzp/OpSDOkc6kzqTOmc6azpfOoywgzpbOkc6gzpHOnc6ZIM6RzqTOpM6ZzprOl86jLCDOls6RzqPOpM6Rzp3OnyDOkc6kzqTOmc6azpfOoywgzprOkc6azpcgzpjOkc6bzpHOo86jzpEgzpHOpM6kzpnOms6XzqMsIM6azpHOm86fzqDOl86TzpHOlM6fIM6RzqTOpM6ZzprOl86jLCDOms6VzqHOkc6kzpXOkSDOkc6kzqTOmc6azpfOoywgzprOn86dzqTOoc6RIM6SzpnOm86RzqHOkSDOkc6kzqTOmc6azpfOoywgzpzOkc6bzpnOkc6azp/Opc6azpkgzpHOpM6kzpnOms6XzqMsIM6czpHOm86ZzpHOo86kzpXOms6RIM6RzqTOpM6ZzprOl86jLCDOnM6Rzp3On86lzqTOo86fIM6RzqTOpM6ZzprOl86jLCDOnM6RzqHOmc6jzqTOoc6RIM6RzqTOpM6ZzprOl86jLCDOnM6RzqHOms6RzqTOmSDOkc6kzqTOmc6azpfOoywgzpzOlc6TzpHOm86RIM6gzpXOpc6azpEgzpHOpM6kzpnOms6XzqMsIM6czpXOk86RzpvOlyDOkc6lzpvOlyDOkc6kzqTOmc6azpfOoywgzpzOl86kzqHOn86gzpfOo86ZIM6RzqTOpM6ZzprOl86jLCDOnM6ZzprOoc6fzpvOmc6czpHOnc6fIM6RzqTOpM6ZzprOl86jLCDOnM6fzp3OlyDOms6RzprOl86jIM6YzpHOm86RzqPOo86RzqMgzpHOpM6kzpnOms6XzqMsIM6czqDOn86lzpbOkc6bzpHOlM6VzqMgzpHOpM6kzpnOms6XzqMsIM6czqXOoc6kzpXOls6RIM6RzqTOpM6ZzprOl86jLCDOnc6kzpHOoc6UzpXOls6RIM6RzqTOpM6ZzprOl86jLCDOoM6Rzp3On86hzpHOnM6RIM6czpnOms6hzp/Om86ZzpzOkc6dzp/OpSDOkc6kzqTOmc6azpfOoywgzqDOlc6lzprOkSDOkc6kzqTOmc6azpfOoywgzqDOn86hzqTOnyDOlc6dzp3Omc6RIM6RzqTOpM6ZzprOl86jLCDOoM6hzpnOo86ZzpvOmc6czpXOoyDOkc6kzqTOmc6azpfOoywgzqHOmc6czqDOkc6hzpkgzpHOpM6kzpnOms6XzqMsIM6hzp/Opc6czp/Opc6dzqTOmSDOkc6kzqTOmc6azpfOoywgzqHOn86lzp3OpM6WzpXOoc6ZIM6bzpXOnM6gzqHOn86lIM6RzqTOpM6ZzprOl86jLCDOo86RzprOms6RIM6RzqTOpM6ZzprOl86jLCDOo86azpHOm86VzpbOkSDOnM6XzqTOoc6Rzp3OpM6pzp3OlyDOkc6kzqTOmc6azpfOoywgzqPOoM6XzpvOmc6RzpbOlc6WzpEgzpHOpM6kzpnOms6XzqMsIM6jzqXOnc6kzpXOoc6Zzp3OkSDOkc6kzqTOmc6azpfOoywgzqPOpc6hzpkgzpHOpM6kzpnOms6XzqMsIM6kzpbOkc6hzpTOkc6SzpnOm86RIM6czp/Oms6hzpnOls6RzqMgzpHOpM6kzpnOms6XzqMsIM6kzpbOn86dzpnOnM6RIM6RzqTOpM6ZzprOl86jLCDOpM6fzpPOkc6dzpkgzpvOkc6azpnOls6RzqMgzpHOpM6kzpnOms6XzqMsIM6kzqHOlc6nzpHOnc6kzpnOlc6hzpEgzpHOpM6kzpnOms6XzqMsIM6kzqHOmc6Rzp3OpM6RzqbOpc6bzpvOmc6RIM6RzqTOpM6ZzprOl86jLCDOps6Rzp3Oqc6jzpkgzpHOpM6kzpnOms6XzqMsIM6nzpHOoc6RzprOkc6jIM6RzqTOpM6ZzprOl86jLCDOp86RzqHOks6RzpvOnyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTkwMDInLCBBcmVhOiAnzqDOkc6ZzpHOnc6ZzpEgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE5MDAzJywgQXJlYTogJ86RzpPOmc6RIM6kzqHOmc6RzpTOkSDOnM6RzqHOms6fzqDOn86lzpvOn86lIM6RzqTOpM6ZzprOl86jLCDOkc6lzpvOkc6azpkgKM6gzpHOoc6RzpvOmc6RIM6gzp/Ooc6kzp8gzqHOkc6mzqTOlykgzpHOpM6kzpnOms6XzqMsIM6SzqHOkc6lzqHOqc6dzpEgzpHOoc6kzpXOnM6ZzpTOn86jIM6RzqTOpM6ZzprOl86jLCDOms6fzqXOks6RzqHOkc6jIM6RzqTOpM6ZzprOl86jLCDOms6fzqXOm86ZzpTOkc6jIM6RzqTOpM6ZzprOl86jLCDOnM6RzqHOms6fzqDOn86lzpvOnyDOnM6VzqPOn86TzpXOmc6pzp0gzpHOpM6kzpnOms6XzqMsIM6czp/Onc6XIM6czpXOpM6RzpwuzqPOqc6kzpfOoc6fzqMgzprOn86lzpLOkc6hzpEgzpHOpM6kzpnOms6XzqMsIM6dzpXOn86jIM6azp/Opc6SzpHOoc6RzqMgzpHOpM6kzpnOms6XzqMsIM6gzp/Ooc6ZzpEgzpHOpM6kzpnOms6XzqMsIM6gzp/Ooc6kzp8gzqHOkc6mzqTOlyAozpvOmc6czpXOnc6RzqMgzpzOkc6hzprOn86gzp/Opc6bLikgzpHOpM6kzpnOms6XzqMsIM6nzpHOnM6fzpvOmc6RIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxOTAwNCcsIEFyZWE6ICfOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6jzqDOkc6kzqnOnSDOkc6kzqTOmc6azpfOoywgzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6czqDOn86lzqHOkSDOkc6kzqTOmc6azpfOoywgzpXOpM6fzqMgzqPOpM6VzprOnyDOkc6kzqTOmc6azpfOoywgzpfOnM6VzqHOn86jIM6gzpXOpc6azp/OoyDOkc6kzqTOmc6azpfOoywgzqPOoM6RzqTOkSDOkc6kzqTOmc6azpfOoywgzqbOn86Zzp3Omc6azpHOoyDOkc6kzqTOmc6azpfOoywgzqfOoc6ZzqPOpM6fzqXOoM6fzpvOlyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTkwMDUnLCBBcmVhOiAnzp3Olc6RIM6czpHOms6hzpcgzpHOpM6kzpnOms6XzqMsIM6dzpXOn86jIM6Szp/Opc6kzpbOkc6jIM6dzpXOkc6jIM6czpHOms6hzpfOoyDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTkwMDYnLCBBcmVhOiAnzprOn86lzpzOmc6dzqTOoc6ZIM6RzqTOpM6ZzprOl86jLCDOnc6VzpEgzqDOlc6hzpHOnM6fzqMgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE5MDA3JywgQXJlYTogJ86RzpPOmc6RIM6czpHOoc6Zzp3OkSDOk86hzpHOnM6czpHOpM6ZzprOn86lIM6RzqTOpM6ZzprOl86jLCDOkc6TzpnOn86jIM6gzpHOnc6kzpXOm86VzpfOnM6pzp0gzpzOkc6hzpHOmM6pzp3OkSDOkc6kzqTOmc6azpfOoywgzpHOnc6pIM6jzp/Opc6bzpkgzpHOpM6kzpnOms6XzqMsIM6RzqXOoc6RIM6RzqTOpM6ZzprOl86jLCDOks6bzpfOpM6ZzprOn86jIM6jzqTOkc6YzpzOn86jIM6RzqTOpM6ZzprOl86jLCDOks6fzpjOqc6dzpHOoyDOkc6kzqTOmc6azpfOoywgzpLOoc6Rzp3Okc6jIM6RzqTOpM6ZzprOl86jLCDOk86hzpHOnM6czpHOpM6ZzprOnyDOkc6kzqTOmc6azpfOoywgzprOkc6kzqkgzqPOn86lzpvOmSDOkc6kzqTOmc6azpfOoywgzpzOkc6hzpHOmM6pzp3Okc6jIM6RzqTOpM6ZzprOl86jLCDOo86VzqPOmSDOkc6kzqTOmc6azpfOoywgzqPOp86Zzp3Omc6RzqMgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE5MDA4JywgQXJlYTogJ86VzqHOpc6YzqHOlc6jIM6Szp/Omc6pzqTOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE5MDA5JywgQXJlYTogJ86UzpHOo86RzpzOkc6hzpkgzpHOpM6kzpnOms6XzqMsIM6UzpnOqc6dzpcgzpHOpM6kzpnOms6XzqMsIM6azpHOm86bzpnOpM6VzqfOnc6fzqXOoM6fzpvOlyDOkc6kzqTOmc6azpfOoywgzp3Olc6fzqMgzpLOn86lzqTOls6RzqMgzqHOkc6mzpfOnc6RzqMgzpHOpM6kzpnOms6XzqMsIM6dzqTOkc6fzqUgzqDOlc6dzqTOlc6bzpcgzpHOpM6kzpnOms6XzqMsIM6dzqTOoc6RzqbOmSDOkc6kzqTOmc6azpfOoywgzqDOkc6bzpnOn86jIM6czqXOm86fzqMgzpHOpM6kzpnOms6XzqMsIM6gzpnOms6VzqHOnM6ZIM6RzqTOpM6ZzprOl86jLCDOoc6RzqbOl86dzpEgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE5MDEwJywgQXJlYTogJ86azpHOm86lzpLOmc6RIM6Yzp/Ooc6ZzprOn86lIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxOTAxMScsIEFyZWE6ICfOkc6jzqDOoc6fzqfOqc6hzpkgzpHOpc6bzqnOnc6RzqMgzpHOpM6kzpnOms6XzqMsIM6RzqXOm86pzp3OkSDOkc6kzqTOmc6azpfOoywgzpzOkc6bzpHOms6RzqPOkSDOkc6kzqTOmc6azpfOoywgzpzOmc6bzpXOo86Zzp8gzpHOpM6kzpnOms6XzqMsIM6jzqbOlc6dzpTOkc6bzpcgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE5MDEyJywgQXJlYTogJ86RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOks6ZzpvOmc6pzp0gzpHOpM6kzpnOms6XzqMsIM6RzpPOmc6fzqMgzprOqc6dzqPOpM6Rzp3OpM6Zzp3On86jIM6SzpnOm86ZzqnOnSDOkc6kzqTOmc6azpfOoywgzpHOk86Zzp/OoyDOnc6VzprOpM6RzqHOmc6fzqMgzpLOmc6bzpnOqc6dIM6RzqTOpM6ZzprOl86jLCDOkc6ZzpPOn86jzpjOlc6dzpEgzpHOpM6kzpnOms6XzqMsIM6SzpnOm86ZzpEgzpHOpM6kzpnOms6XzqMsIM6azqHOpc6fIM6gzpfOk86RzpTOmSDOkc6kzqTOmc6azpfOoywgzpvOlc6lzprOkSDOkc6kzqTOmc6azpfOoywgzpvOn86lzpzOoM6RIM6RzqTOpM6ZzprOl86jLCDOnM6lzqTOmc6azpHOoyDOkc6kzqTOmc6azpfOoywgzp/Omc6dzp/OlyDOkc6kzqTOmc6azpfOoywgzqDOoc6fzqbOl86kzpfOoyDOl86bzpnOkc6jIM6SzpnOm86ZzqnOnSDOkc6kzqTOmc6azpfOoywgzqjOkc6YzpEgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE5MDEzJywgQXJlYTogJ86Rzp3Okc6SzqXOo86jzp/OoyDOkc6kzqTOmc6azpfOoywgzpjOpc6czpHOoc6ZIM6RzqTOpM6ZzprOl86jLCDOoM6RzpvOkc6ZzpEgzqbOqc6azpHOmc6RIM6RzqTOpM6ZzprOl86jLCDOo86RzqHOqc6dzpnOlM6RIM6RzqTOpM6ZzprOl86jLCDOps6VzqHOmc6WzpEgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE5MDE0JywgQXJlYTogJ86RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOks6RzqHOnc6RzpLOkSDOkc6kzqTOmc6azpfOoywgzpHOk86ZzpEgzqTOoc6ZzpHOlM6RIM6RzqbOmc6Uzp3Oqc6dIM6RzqTOpM6ZzprOl86jLCDOkc6TzpnOn86ZIM6Rzp3Okc6hzpPOpc6hzp/OmSAozprOkc6gzpHOnc6UzqHOmc6kzorOn86lKSDOkc6kzqTOmc6azpfOoywgzpHOk86Zzp/OmSDOkc6gzp/Oo86kzp/Om86fzpkgzprOkc6bzpHOnM6fzqUgzpHOpM6kzpnOms6XzqMsIM6RzpPOmc6fzpkgzpTOl86czpfOpM6hzpnOn86jIM6azpHOmSDOoM6Rzp3OpM6VzpvOlc6XzpzOqc6dIM6RzqTOpM6ZzprOl86jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgKM6gzp/Om86lzpTOlc6dzpTOoS4pIM6RzqTOpM6ZzprOl86jLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6SzpHOoc6dzpHOks6RIM6RzqTOpM6ZzprOl86jLCDOkc6mzpnOlM6dzpXOoyDOkc6kzqTOmc6azpfOoywgzpLOkc6hzp3Okc6SzpHOoyDOkc6kzqTOmc6azpfOoywgzpTOmc6VzpjOnc6XzqMgzpnOoM6gzp/Oms6hzpHOpM6VzpnOn86jIM6gzp/Om86ZzqTOlc6ZzpEgzpHOpM6kzpnOms6XzqMsIM6UzqHOn86jzp/OoM6XzpPOlyDOkc6kzqTOmc6azpfOoywgzpfOoc6RzprOm86VzpnOlM6VzpnOoyDOkc6kzqTOmc6azpfOoywgzprOkc6bzpHOnM6fzqMgzpHOpM6kzpnOms6XzqMsIM6azpHOoM6Rzp3OlM6hzpnOpM6ZIM6RzqTOpM6ZzprOl86jLCDOms6fzprOms6Zzp3On86SzqHOkc6nzp/OoyDOkc6kzqTOmc6azpfOoywgzprOn86jzpzOn86YzpXOkSDOkc6kzqTOmc6azpfOoywgzpvOmc6czp3OlyDOnM6RzqHOkc6YzqnOnc6RIM6RzqTOpM6ZzprOl86jLCDOm86ZzpzOnc6ZzqnOnc6RzqMgzpHOpM6kzpnOms6XzqMsIM6czpnOms6hzp/Op86pzqHOmc6fIM6RzqTOpM6ZzprOl86jLCDOnM6fzp3OlyDOnM6VzqTOkc6cLs6jzqnOpM6XzqHOn86jIM6SzpHOoc6dzpHOks6RIM6RzqTOpM6ZzprOl86jLCDOnM6fzp3OlyDOoM6Rzp3Okc6TzpnOkc6jIM6RzqTOpM6ZzprOl86jLCDOoM6fzpvOpc6UzpXOnc6UzqHOmSDOkc6kzqTOmc6azpfOoywgzqDOn86lzqHOmc6YzpkgzpHOpM6kzpnOms6XzqMsIM6jzqTOkc6YzpzOn86jIM6RzqbOmc6Uzp3Oqc6dIM6RzqTOpM6ZzprOl86jLCDOpM6Rzp7Omc6RzqHOp86VzqMgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE5MDE1JywgQXJlYTogJ86RzpPOmc6RIM6RzpnOms6RzqTOlc6hzpnOnc6XIM6dzpXOqc6dIM6gzpHOm86RzqTOmc6pzp0gzpHOpM6kzpnOms6XzqMsIM6RzpPOmc6RIM6SzpHOoc6SzpHOoc6RIM6czpHOoc6azp/OoM6fzqXOm86fzqUgzpHOpM6kzpnOms6XzqMsIM6RzpPOmc6fzqMgzpHOmM6Rzp3Okc6jzpnOn86jIM6dLs6gzpHOm86RzqTOmc6pzp0gzpHOpM6kzpnOms6XzqMsIM6RzpPOmc6fzqMgzprOqc6dzqPOpM6Rzp3OpM6Zzp3On86jIM6dLs6gzpHOm86RzqTOmc6pzp0gzpHOpM6kzpnOms6XzqMsIM6SzpHOoc6lzqTOmSDOkc6kzqTOmc6azpfOoywgzprOkc6czpHOoc6ZIM6RzqTOpM6ZzprOl86jLCDOms6RzpzOoM6fzqMgzqnOoc6pzqDOn86lIM6RzqTOpM6ZzprOl86jLCDOms6RzqTOl86mzp/Ooc6ZIM6RzqTOpM6ZzprOl86jLCDOnM6RzqHOms6fzqDOn86lzpvOnyDOqc6hzqnOoM6fzqUgzpHOpM6kzpnOms6XzqMsIM6czqDOkc6mzpkgzpHOpM6kzpnOms6XzqMsIM6dzpXOkSDOoM6RzpvOkc6kzpnOkSDOkc6kzqTOmc6azpfOoywgzp3Olc6RIM6gzp/Om86ZzqTOlc6ZzpEgzpHOpM6kzpnOms6XzqMsIM6dzpXOnyDOo86lzprOkc6czpnOnc6fIM6RzqTOpM6ZzprOl86jLCDOnc6Vzp/OnSDOm86ZzpLOpc6jzqPOmc6fIM6RzqTOpM6ZzprOl86jLCDOoM6RzqHOkc6bzpnOkSDOkc6kzqTOmc6azpfOoywgzqDOlc6lzprOmc6RzqMgzpHOpM6kzpnOms6XzqMsIM6gzpvOkc6kzpHOnc6ZzpEgzqnOoc6pzqDOn86lIM6RzqTOpM6ZzprOl86jLCDOoM6fzp3OpM6ZzqnOnSDOkc6kzqTOmc6azpfOoywgzqPOms6RzpvOkSDOqc6hzqnOoM6fzqUgzpHOpM6kzpnOms6XzqMsIM6jzqXOms6RzpzOmc6dzp8gzpHOpM6kzpnOms6XzqMsIM6nzpHOm86azp/Opc6kzqPOmSDOkc6kzqTOmc6azpfOoywgzqnOoc6pzqDOn86jIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxOTAxNicsIEFyZWE6ICfOkc6TzpnOkSDOms6lzqHOmc6RzprOlyDOo86gzpHOpM6pzp0gzpHOpM6kzpnOms6XzqMsIM6RzpPOmc6fzqMgzqPOlc6hzpHOps6VzpnOnCDOo86gzpHOpM6pzp0gzpHOpM6kzpnOms6XzqMsIM6RzqHOpM6VzpzOlyDOkc6kzqTOmc6azpfOoywgzpLOlc6bzpHOnc6ZzpTOmc6RIM6RzqTOpM6ZzprOl86jLCDOm86fzqXOpM6jzpEgzpHOpM6kzpnOms6XzqMsIM6dzpXOkc6gzp/Om86XIM6RzqTOpM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcxOTAxOCcsIEFyZWE6ICfOnM6RzpPOn86lzpvOkSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTkxMDAnLCBBcmVhOiAnzpHOk86ZzpEgzqTOoc6ZzpHOlM6RIM6czpXOk86RzqHOqc6dIM6RzqTOpM6ZzprOl86jLCDOkc6ZzpPOlc6ZzqHOn86lzqPOlc6jIM6RzqTOpM6ZzprOl86jLCDOkc6bzpXOoM6fzqfOqc6hzpkgzpHOnc6pIM6RzqTOpM6ZzprOl86jLCDOkc6bzpXOoM6fzqfOqc6hzpkgzprOkc6kzqkgzpHOpM6kzpnOms6XzqMsIM6SzpXOnc6ZzpbOkSDOkc6kzqTOmc6azpfOoywgzpLOm86lzqfOkc6UzpEgzpHOpM6kzpnOms6XzqMsIM6azpnOnc6VzqTOkSDOkc6kzqTOmc6azpfOoywgzpvOkc6azprOkSDOms6RzpvOn86TzpfOoc6fzqUgzpHOpM6kzpnOms6XzqMsIM6czpXOk86RzqHOkSDOkc6kzqTOmc6azpfOoywgzpzOn86dzpcgzpHOk86Zzp/OpSDOmc6VzqHOn86YzpXOn86lIM6RzqTOpM6ZzprOl86jLCDOnM6fzp3OlyDOkc6TzpnOn86lIM6ZzqnOkc6dzp3OlyDOoM6hzp/OlM6hzp/OnM6fzqUgzpHOpM6kzpnOms6XzqMsIM6czp/Onc6XIM6gzpHOnc6RzqfOoc6Rzp3OpM6fzqUgzpHOpM6kzpnOms6XzqMsIM6gzpHOp86RzprOmc6fIM6RzqTOpM6ZzprOl86jLCDOoM6RzqfOlyDOkc6kzqTOmc6azpfOoywgzqPOoM6RzqHOpM6RIM6RzqTOpM6ZzprOl86jLCDOo86kzpnOms6RzqMgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE5MjAwJywgQXJlYTogJ86VzpvOlc6lzqPOmc6dzpEgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE5MzAwJywgQXJlYTogJ86RzqPOoM6hzp/OoM6lzqHOk86fzqMgzpHOpM6kzpnOms6XzqMsIM6UzpnOpc6bzpnOo86kzpfOoc6ZzpEgzpHOo86gzqHOn86gzqXOoc6Tzp/OpSDOkc6kzqTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOkc+Ez4TOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMTk0MDAnLCBBcmVhOiAnzpHOk86ZzpEgzpzOkc6hzpnOnc6RIM6RzqTOpM6ZzprOl86jLCDOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOms6fzqHOqc6gzpnOn86lIM6RzqTOpM6ZzprOl86jLCDOms6RzqHOlc6bzpvOkc6jIM6RzqTOpM6ZzprOl86jLCDOms6ZzqTOo86ZIM6RzqTOpM6ZzprOl86jLCDOms6fzqHOqc6gzpkgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE5NTAwJywgQXJlYTogJ86RzpPOmc6fzqMgzprOqc6dzqPOpM6Rzp3OpM6Zzp3On86jIM6RzqTOpM6ZzprOl86jLCDOkc6dzqkgzpjOn86hzpnOms6fIM6RzqTOpM6ZzprOl86jLCDOlc6jzqDOlc6hzpnOlM6VzqMgzpHOpM6kzpnOms6XzqMsIM6Yzp/Ooc6ZzprOnyDOkc6kzqTOmc6azpfOoywgzprOkc6kzqkgzqDOn86jzpXOmc6UzqnOnc6ZzpEgzpHOpM6kzpnOms6XzqMsIM6azpHOpM6pIM6jzp/Opc6dzpnOnyDOkc6kzqTOmc6azpfOoywgzpvOkc6lzqHOmc6fIM6RzqTOpM6ZzprOl86jLCDOm86VzpPOoc6Vzp3OkSDOkc6kzqTOmc6azpfOoywgzqDOkc6bzpnOn86azpHOnM6RzqHOmc6WzpEgzpHOpM6kzpnOms6XzqMsIM6gzpvOkc6azpEgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzE5NjAwJywgQXJlYTogJ86RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOnM6Rzp3OlM6hzpHOoyDOkc6kzqTOmc6azpfOoywgzpHOk86Zzp/OoyDOo86pzqTOl86hIM6czpHOnc6UzqHOkc6jIM6RzqTOpM6ZzprOl86jLCDOkc6TzpnOn86jIM6nzpHOoc6RzpvOkc6czqDOn86jIM6czpHOnc6UzqHOkc6jIM6RzqTOpM6ZzprOl86jLCDOlM6Zzp/OlM6ZzpEgzpHOpM6kzpnOms6XzqMsIM6YzpXOkSDOkc6kzqTOmc6azpfOoywgzpvOn86lzqTOo86RIM6czpHOnc6UzqHOkc6jIM6RzqTOpM6ZzprOl86jLCDOnM6RzpPOn86lzpvOkSDOkc6kzqTOmc6azpfOoywgzpzOkc6dzpTOoc6RIM6RzqTOpM6ZzprOl86jLCDOnM6fzp3OlyDOn86jzpnOn86lIM6czpXOm86VzqTOmc6fzqUgzpHOpM6kzpnOms6XzqMsIM6dzpXOkSDOls6pzpcgzpHOpM6kzpnOms6XzqMsIM6dzpXOn86jIM6gzp/Onc6kzp/OoyDOkc6kzqTOmc6azpfOoywgzqDOkc6bzpHOmc6fzqfOqc6hzpkgzpzOkc6dzpTOoc6RzqMgzpHOpM6kzpnOms6XzqMsIM6gzp/Opc6hzp3Okc6hzpkgzpHOpM6kzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzgwMTAwJywgQXJlYTogJ86RzpLOm86VzpzOn86dzpHOoyDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOkc6TzpnOn86jIM6XzpvOmc6RzqMgzprOkc6hzpLOn86lzp3Okc6UzqnOnSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOkc6bzpXOns6Rzp3OlM6hzpHOlM6VzqMgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzpHOnc6pIM6bzpnOks6RzpTOmSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOkc6hzpHOmc6fzpkgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzpLOmc6RzqHOkc6UzpnOms6RIM6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6TzpHOm86Rzp3Omc6Rzp3OkSDOkc6dzqTOmc6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6Tzp/Opc6UzpnOkc6dzpnOms6RIM6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6Uzp/Oms6Rzp3OkSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOlM6hzqXOnM6pzp3Okc6hzpkgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzpTOoc6lzpzOqc6dzpHOoyDOnM6lzqHOpM6ZzpTOmc6pzp0gzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzprOkc6bzpHOnM6fzqMgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzprOkc6bzpfOo86gzpXOoc6ZzpHOnc6ZzprOkSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOms6RzpvOn86azpHOmc6hzpnOnc6VzqMgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzprOkc6czqDOn86jIM6gzpHOm86RzpnOn86gzp/Om86VzqnOoyDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOms6RzqHOks6fzqXOnc6RzpTOlc6jIM6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6azpHOpM6jzp/Opc6dzpkgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzprOkc6kzqkgzqfOqc6hzpEgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzprOkc6ozpHOm86ZIM6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6azpXOoc6RzpzOqc6kzp8gzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzprOn86czpfOnc6ZzpHOnc6ZzprOkSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOms6fzp3OpM6fzpvOmc6Rzp3Omc6azpEgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzprOpc6YzpfOoc6RIM6bzpHOms6pzp3Omc6RzqMsIM6bzpnOks6RzpTOmSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOm86fzqXOoc6Rzp3OpM6ZzpHOnc6ZzprOkSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOnM6Rzp3Omc6kzp/Op86pzqHOmSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOnM6fzp3OlyDOnM6lzqHOpM6ZzpTOmc6pzp0gzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzpzOpc6bzp/OoM6fzqTOkc6czp/OoyDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOoM6RzpvOkc6Zzp/OoM6fzpvOlyDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOoM6ZzqPOqSDOoM6XzpPOkc6UzpkgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzqDOmc6kzqPOmc6dzpnOkc6dzpnOms6RIM6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6gzp/OpM6RzpzOn86jIM6Rzp3OpM6ZzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzqDOn86lzqHOms6fIM6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6jzqTOkc6YzpnOkc6dzpnOms6RIM6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6jzqTOoc6RzqDOn86UzpkgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzqTOoc6RzpLOkc6jzpHOoc6ZzpHOnc6ZzprOkSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOpM6jzpnOms6RzpvOkc6hzpnOkSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOps6RzqTOo86RzpTOmc6azpEgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzqbOoc6RzqTOo86ZzpEgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzqfOkc6hzqfOkc6bzpnOkc6dzpEgzpHOnc6kzpnOms6XzpjOpc6hzqnOnSDOm86RzprOqc6dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4TPhM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MDIwMCcsIEFyZWE6ICfOkc6TzpnOkSDOkc6dzpHOo86kzpHOo86ZzpEgzqDOn86kzpHOnM6fzqUgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzpHOk86ZzpEgzpzOn86dzpcgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzpHOk86ZzpEgzqDOlc6bzpHOk86ZzpEgzqDOn86kzpHOnM6fzqUgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzpHOm86fzqrOls6ZzpHOnc6ZzprOkSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOkc6hzqnOnc6ZzpHOlM6ZzprOkSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOks6fzqXOnc6fIM6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6TzpXOoc6RzprOkc6hzpkgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzpTOmc6RzprOn86mzqTOmSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOms6RzpzOoM6fzqMgzqDOn86kzpHOnM6fzqUgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzprOkc6hzpHOks6RzqMgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzprOkc6jzqTOoc6ZzqPOmc6Rzp3Omc6azpEgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzprOn86lzqPOn86lzp3Okc6hzpkgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzprOoc6lzp/Onc6VzqHOmSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOm86ZzpHOnc6ZzpHOnc6ZzprOkSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOm86fzpPOn86YzpXOpM6ZzpHOnc6ZzprOkSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOnM6XzqTOkc6kzpEgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzqDOlc6hzpvOlc6TzprOmc6Rzp3Omc6azpEgzprOpc6YzpfOoc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzqDOlc6kzqHOn86lzp3OmSDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOoM6ZzqTOo86Zzp3Okc6UzpXOoyDOms6lzpjOl86hzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOoM6bzpHOpM6VzpnOkSDOkc6czpzOn86jIM6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6gzp/OpM6RzpzOn86jIM6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6gzqHOn86TzprOmc6fIM6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6kzqHOmc6mzqXOm86bzpnOkc6dzpnOms6RIM6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6mzqHOmc6bzpnOk86azpnOkc6dzpnOms6RIM6azqXOmM6XzqHOqc6dIM6bzpHOms6pzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPhM+EzrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI1MDAxJywgQXJlYTogJ86Rzp3OqSDOls6RzqfOm86pzqHOn86lIM6RzqfOkc6ZzpHOoywgzpHOnc6pIM6bzp/Opc6jzp/OmSDOkc6nzpHOmc6RzqMsIM6RzqXOm86pzp3Okc6jIM6azpHOm86RzpLOoc6lzqTOqc6dIM6RzqfOkc6ZzpHOoywgzpLOkc6bzqTOkSDOkc6nzpHOmc6RzqMsIM6SzpnOm86ZzpLOmc6dzpEgzpHOp86RzpnOkc6jLCDOks6hzpHOp86dzpnOnyDOkc6nzpHOmc6RzqMsIM6SzqHOpc6jzpHOoc6ZICjOk86fzqXOnM6Vzp3Omc6jzqPOkSkgzpHOp86RzpnOkc6jLCDOk86fzqXOnM6Vzp3Omc6jzqPOkSDOkc6nzpHOmc6RzqMsIM6UzpnOk86VzpvOkSDOkc6nzpHOmc6RzqMsIM6Uzp/Opc6czpXOnc6RIM6RzqfOkc6ZzpHOoywgzpTOoc6fzqPOkc6kzp8gzpHOp86RzpnOkc6jLCDOms6RzpvOkc6SzqHOpc6kzpEgzpHOp86RzpnOkc6jLCDOms6RzpvOm86ZzqbOqc6dzpnOnyDOkc6nzpHOmc6RzqMsIM6azpHOpM6pIM6WzpHOp86bzqnOoc6fzqUgzpHOp86RzpnOkc6jLCDOms6RzqTOqSDOm86fzqXOo86fzpkgzpHOp86RzpnOkc6jLCDOms6fzqHOps6VzqMgzpHOp86RzpnOkc6jLCDOms6fzqXOpM6VzpvOlyDOkc6nzpHOmc6RzqMsIM6azqHOkc6jzqTOmc6azp/OmSDOkc6nzpHOmc6RzqMsIM6bzpXOpc6azpcgzqPOmc6Tzp/Opc6dzpnOn86lIM6RzqfOkc6ZzpHOoywgzpvOn86lzqPOmc6azp8gzpHOp86RzpnOkc6jLCDOnM6fzp3OlyDOkc6TzpnOkc6jIM6bzpHOpc6hzpHOoyDOkc6nzpHOmc6RzqMsIM6czp/Onc6XIM6czpXOk86RzpvOn86lIM6jzqDOl86bzpHOmc6fzqUgzpHOp86RzpnOkc6jLCDOnM6gzp/Oo86ZIM6RzqfOkc6ZzpHOoywgzqDOlc6kzqPOkc6azp/OmSDOkc6nzpHOmc6RzqMsIM6gzpvOkc6kzpHOnc6ZzqnOpM6ZzqPOo86RIM6RzqfOkc6ZzpHOoywgzqDOoc6Zzp/Om86ZzpjOn86jIM6RzqfOkc6ZzpHOoywgzqHOn86Tzp/OmSDOkc6nzpHOmc6RzqMsIM6jzpnOk86fzqXOnc6ZIM6RzqfOkc6ZzpHOoywgzqPOms6VzqDOkc6jzqTOnyDOkc6nzpHOmc6RzqMsIM6jzp/Opc6SzpHOoc6Uzp8gzpHOp86RzpnOkc6jLCDOo86gzpHOoc6kzpnOnc6fzqUgzpHOp86RzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4fOsc6QzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjUwMDInLCBBcmVhOiAnzpHOm86ZzqPOo86fzqMgzpHOp86RzpnOkc6jLCDOkc6dzpXOnM6fzpzOpc6bzp/OoyDOkc6nzpHOmc6RzqMsIM6SzqHOkc6nzp3Okc6ZzpnOms6RIM6RzqfOkc6ZzpHOoywgzpPOmc6RzpvOn86jIM6RzqfOkc6ZzpHOoywgzpTOoc6VzqPOmM6Vzp3OkSDOkc6nzpHOmc6RzqMsIM6YzpXOoc6ZzpHOnc6fIM6RzqfOkc6ZzpHOoywgzprOkc6czpXOnc6ZzqTOo86RIM6RzqfOkc6ZzpHOoywgzprOkc6czpnOnc6ZzpEgzpHOp86RzpnOkc6jLCDOms6RzqTOqSDOkc6bzpnOo86jzp/OoyDOkc6nzpHOmc6RzqMsIM6czp/Omc6hzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6czp/Onc6fzpTOlc6dzpTOoc6ZIM6RzqfOkc6ZzpHOoywgzqDOkc6hzpHOm86ZzpEgzpHOm86ZzqPOo86fzqUgzpHOp86RzpnOkc6jLCDOoM6hzp/Ops6XzqTOl86jIM6VzpvOmc6jzqPOkc6Zzp/OoyDOkc6nzpHOmc6RzqMsIM6hzp/Ok86ZzqTOmc6azpEgzpHOp86RzpnOkc6jLCDOpM6jzp/Opc6azpHOm86RzpnOmc6azpEgzpHOp86RzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4fOsc6QzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjUwMDMnLCBBcmVhOiAnzpHOnc6pIM6UzpnOkc6azp/OoM6kzp8gzpHOp86RzpnOkc6jLCDOlM6ZzpHOms6fzqDOpM6fIM6RzqfOkc6ZzpHOoywgzpXOm86RzpnOqc6dzpHOoyDOkc6ZzpPOmc6RzpvOlc6ZzpHOoyDOkc6nzpHOmc6RzqMsIM6WzpHOp86bzqnOoc6ZzqTOmc6azpEgzpHOp86RzpnOkc6jLCDOms6RzpjOn86bzpnOms6fIM6RzqfOkc6ZzpHOoywgzprOkc6bzqXOks6ZzqTOl86jIM6RzqfOkc6ZzpHOoywgzprOlc6hzp3Omc6kzqPOkSDOkc6nzpHOmc6RzqMsIM6bzp/Ops6fzqMgzpHOp86RzpnOkc6jLCDOnM6VzqTOn86nzpkgzpXOm86RzpnOqc6dzpEgzpHOp86RzpnOkc6jLCDOoM6RzqHOkc6bzpnOkSDOpM6hzpHOoM6VzpbOkc6jIM6RzqfOkc6ZzpHOoywgzqDOn86lzp3OpM6RIM6RzqfOkc6ZzpHOoywgzqTOlc6hzqjOmc6YzpXOkSDOkc6nzpHOmc6RzqMsIM6kzqHOkc6gzpXOls6RIM6RzqfOkc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc+HzrHOkM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI1MDA0JywgQXJlYTogJ86RzpPOmc6fzpkgzpjOlc6fzpTOqc6hzp/OmSDOo86VzpnOoc6pzp0gzpHOp86RzpnOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzqPOlc6ZzqHOqc6dIM6RzqfOkc6ZzpHOoywgzpHOnc6pIM6nzp/Oks6fzpvOlyDOkc6nzpHOmc6RzqMsIM6SzpXOo86Zzp3OmSDOkc6nzpHOmc6RzqMsIM6UzpHOps6dzpcgzprOkc6bzpHOks6hzqXOpM6pzp0gzpHOp86RzpnOkc6jLCDOlM6VzqfOn86lzp3Okc6ZzpnOms6RIM6RzqfOkc6ZzpHOoywgzprOoc6Xzp3OlyDOo86VzpnOoc6pzp0gzpHOp86RzpnOkc6jLCDOnM6fzqXOoc6ZzpEgzpHOoc6azpHOlM6ZzpHOoywgzp3Okc6jzpnOkSDOkc6nzpHOmc6RzqMsIM6dzpXOn86jIM6gzpHOn86jIM6RzqfOkc6ZzpHOoywgzqDOkc6bzpHOmc6fzqMgzqDOkc6fzqMgzpHOp86RzpnOkc6jLCDOoM6Rzp/OoyDOkc6nzpHOmc6RzqMsIM6gzpXOpc6azp8gzpHOp86RzpnOkc6jLCDOoM6fzqTOkc6czpnOkSDOkc6nzpHOmc6RzqMsIM6gzp/Opc6hzp3Okc6hzpnOkSDOkc6hzprOkc6UzpnOkc6jLCDOo86VzpnOoc6VzqMgzpHOp86RzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4fOsc6QzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjUwMDYnLCBBcmVhOiAnzpHOk86ZzpEgzpLOkc6hzpLOkc6hzpEgzprOkc6bzpHOks6hzqXOpM6pzp0gzpHOp86RzpnOkc6jLCDOkc6TzqHOmc6UzpkgzqDOlc6hzpnOo86kzpXOoc6RzqMgzpHOp86RzpnOkc6jLCDOkc6azqHOkc6kzpEgzpHOp86RzpnOkc6jLCDOkc6czqDOlc6bzp/OoyDOkc6nzpHOmc6RzqMsIM6Rzp3OqSDOnM6VzqPOn86hzqHOn86lzpPOmSDOkc6nzpHOmc6RzqMsIM6SzpHOm86ZzpzOlyDOkc6nzpHOmc6RzqMsIM6Szp/Opc6dzpHOms6ZIM6RzqfOkc6ZzpHOoywgzpPOms6fzqXOnM6RzpnOmc6azpEgzpHOp86RzpnOkc6jLCDOls6RzqHOn86lzqfOm86RIM6RzqfOkc6ZzpHOoywgzprOoc6RzpjOmc6fIM6RzqfOkc6ZzpHOoywgzpzOlc6jzp/Ooc6hzp/Opc6TzpkgzpHOp86RzpnOkc6jLCDOoM6RzpvOkc6Zzp/Oo86kzpHOps6ZzpTOkSDOkc6nzpHOmc6RzqMsIM6gzpHOoc6RzpvOmc6RIM6gzp/Ooc6fzpLOmc6kzqPOkc6jIM6RzqfOkc6ZzpHOoywgzqDOlc6hzpnOo86kzpXOoc6RIM6azpHOm86RzpLOoc6lzqTOqc6dIM6RzqfOkc6ZzpHOoywgzqDOn86hzp/Oks6ZzqTOo86RIM6RzqfOkc6ZzpHOoywgzqDOn86kzpHOnM6ZzqTOmc6azp/OoyDOk86ZzpHOm86fzqMgzpHOp86RzpnOkc6jLCDOoM6lzqHOk86fzqMgzpHOp86RzpnOkc6jLCDOo86fzpvOn86jIM6RzqfOkc6ZzpHOoywgzqPOpc6bzpnOks6RzpnOnc6ZzqnOpM6ZzprOkSDOkc6nzpHOmc6RzqMsIM6mzp/Opc6hzp3On86ZIM6RzqfOkc6ZzpHOoywgzqfOkc6bzprOmc6Rzp3Omc6azpEgzpHOp86RzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4fOsc6QzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjUwMDcnLCBBcmVhOiAnzpHOk86Zzp/OmSDOmM6Vzp/OlM6pzqHOn86ZIM6mzpnOm86ZzqnOnSDOkc6nzpHOmc6RzqMsIM6RzpPOmc6fzqMgzpLOm86RzqPOmc6fzqMgzpHOp86RzpnOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzqPOms6fzqTOkc6dzpfOoyDOkc6nzpHOmc6RzqMsIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOms6RzpvOkc6SzqHOpc6kzqnOnSDOkc6nzpHOmc6RzqMsIM6RzpzOpc6TzpTOkc6bzpnOkSDOkc6nzpHOmc6RzqMsIM6Rzp3OqSDOms6bzpXOmc6kzp/Ooc6ZzpEgzpHOp86RzpnOkc6jLCDOkc6hzpzOoM6fzqXOnc6RIM6RzqfOkc6ZzpHOoywgzpLOkc6bzqTOn86jIM6RzqfOkc6ZzpHOoywgzpPOm86RzqPOpM6hzpEgzpHOp86RzpnOkc6jLCDOlM6hzqXOnM6fzqMgzpHOp86RzpnOkc6jLCDOlc6bzpHOpM6fzqbOpc6kzp8gzpHOp86RzpnOkc6jLCDOls6RzqHOlc6bzpnOkSDOkc6nzpHOmc6RzqMsIM6WzpXOpc6Tzp/Om86RzqTOlc6Zzp8gzpHOp86RzpnOkc6jLCDOms6RzpvOkc6czpHOms6ZIM6azpHOm86RzpLOoc6lzqTOqc6dIM6RzqfOkc6ZzpHOoywgzprOkc6bzpvOmc6YzpXOkSDOms6bzpXOmc6kzp/Ooc6ZzpHOoyDOkc6nzpHOmc6RzqMsIM6azpHOm86lzpLOmc6RIM6RzqfOkc6ZzpHOoywgzprOkc6jzqTOlc6bzpvOmSDOkc6nzpHOmc6RzqMsIM6azpHOo86kzqHOmc6RIM6RzqfOkc6ZzpHOoywgzprOkc6kzqkgzpTOoc6lzpzOn86jIM6RzqfOkc6ZzpHOoywgzprOlc6hzpHOo86ZzpEgzpvOlc6nzp/Opc6hzpnOn86lIM6RzqfOkc6ZzpHOoywgzprOlc6hzpHOo86ZzpEgzpvOpc6azp/Opc6hzpnOkc6jIM6RzqfOkc6ZzpHOoywgzprOm86VzpnOpM6fzqHOmc6RIM6RzqfOkc6ZzpHOoywgzprOm86VzpnOpM6pzqHOkc6jIM6RzqfOkc6ZzpHOoywgzprOoc6Zzp3On86mzqXOpM6RIM6RzqfOkc6ZzpHOoywgzpvOlc6lzprOkc6jzpnOnyDOkc6nzpHOmc6RzqMsIM6bzqXOms6fzqXOoc6ZzpEgzpHOp86RzpnOkc6jLCDOnM6fzp3OlyDOkc6TzpnOn86lIM6RzpjOkc6dzpHOo86Zzp/OpSDOkc6nzpHOmc6RzqMsIM6gzpHOk86azqHOkc6kzpHOmc6ZzprOkSDOms6RzpvOpc6SzpnOkSDOkc6nzpHOmc6RzqMsIM6gzpHOk86azqHOkc6kzpkgzpHOp86RzpnOkc6jLCDOoM6RzpvOkc6Zzp/Oms6RzqTOn86lzp3OkSDOms6RzpvOkc6SzqHOpc6kzqnOnSDOkc6nzpHOmc6RzqMsIM6gzpvOkc6dzpfOpM6VzqHOnyDOkc6nzpHOmc6RzqMsIM6jzpXOm86bzpEgzpHOp86RzpnOkc6jLCDOo86azp/OpM6Rzp3OlyDOkc6nzpHOmc6RzqMsIM6jzqDOl86bzpnOkSDOkc6nzpHOmc6RzqMsIM6jzqTOlc6dzp8gzpHOp86RzpnOkc6jLCDOpM6fzqXOoc6bzpHOlM6RIM6RzqfOkc6ZzpHOoywgzqbOmc6bzpnOkSDOkc6nzpHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPh86xzpDOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNTAwOCcsIEFyZWE6ICfOkc6TzpnOkSDOlc6bzpXOn86lzqPOkSDOkc6nzpHOmc6RzqMsIM6RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOoM6VzqTOoc6pzqTOn86lIM6RzqfOkc6ZzpHOoywgzpHOk86hzpnOm86ZzpEgzpHOp86RzpnOkc6jLCDOkc6dzqkgzpzOkc6WzpHOoc6RzprOmSDOkc6nzpHOmc6RzqMsIM6Rzp3OqSDOo86kzpHOoc6fzqfOqc6hzpkgzpHOp86RzpnOkc6jLCDOkc6dzqkgzqfOoc6lzqPOn86gzpfOk86XIM6RzqfOkc6ZzpHOoywgzpLOkc6jzpnOm86ZzprOnyDOoM6RzqTOoc6pzp0gzpHOp86RzpnOkc6jLCDOks6VzqTOkc6ZzpnOms6RIM6RzqfOkc6ZzpHOoywgzpPOkc6bzpHOnc6RzpnOmc6azpEgzpHOp86RzpnOkc6jIM6RzqfOkc6ZzpHOoywgzpPOms6Rzp3Olc6ZzprOkSDOkc6nzpHOmc6RzqMgzpHOp86RzpnOkc6jLCDOk86fzpvOlc6czpkgzpvOlc6fzp3OpM6Zzp/OpSDOkc6nzpHOmc6RzqMsIM6UzpHOps6dzp/Opc6bzpEgzpHOp86RzpnOkc6jLCDOlM6VzpzOlc6jzqTOmc6nzpEgzpHOp86RzpnOkc6jLCDOlc6bzpvOl86dzpnOms6fIM6RzqfOkc6ZzpHOoywgzpbOqc6TzpEgzpHOp86RzpnOkc6jLCDOmM6pzpzOlc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6ZzqPOqc6czpEgzpHOp86RzpnOkc6jLCDOms6RzpvOkc6dzpnOo86kzqHOkSDOkc6nzpHOmc6RzqMsIM6azpHOm86Rzp3On86jIM6RzqfOkc6ZzpHOoywgzprOkc6bzp/Opc6jzpkgzpHOp86RzpnOkc6jLCDOms6RzqTOkc6hzqHOkc6azqTOl86jIM6RzqfOkc6ZzpHOoywgzprOkc6kzqPOkc6ZzqTOlc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6azpHOpM6pIM6czpHOls6RzqHOkc6azpkgzpHOp86RzpnOkc6jLCDOms6RzqTOqSDOoM6bzpHOpM6Rzp3On86SzqHOpc6jzpcgzpHOp86RzpnOkc6jLCDOms6RzqTOqSDOo86kzpHOoc6fzqfOqc6hzpkgzpHOp86RzpnOkc6jLCDOms6fzpnOnM6XzqPOlyDOkc6nzpHOmc6RzqMsIM6azp/Opc6czpHOoc6XzqMgzpXOm86bzpfOnc6ZzprOn86lIM6RzqfOkc6ZzpHOoywgzprOn86lzp3Okc6SzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6azqXOlM6pzp3Omc6VzqMgzpLOkc6jzpnOm86ZzprOn86lIM6RzqfOkc6ZzpHOoywgzprOpc6UzqnOnc6ZzpXOoyDOp86RzpvOkc6dzpTOoc6ZzqTOo86RzqMgzpHOp86RzpnOkc6jLCDOms6pzpzOlyDOkc6nzpHOmc6RzqMsIM6bzpHOms6azqnOnM6RzqTOkSDOkc6nzpHOmc6RzqMsIM6bzpXOn86dzqTOmc6fIM6RzqfOkc6ZzpHOoywgzpzOkc6jzqTOn86hzpHOmc6ZzprOkSDOo86kzpHOnM6RzpnOmc6azpEgzpHOp86RzpnOkc6jLCDOnM6ZzqHOkc6bzpkgzpHOp86RzpnOkc6jLCDOnM6ZzqTOn86gzp/Om86XIM6RzqfOkc6ZzpHOoywgzpzOmc6nzpHOm86VzpnOms6RIM6RzqfOkc6ZzpHOoywgzpzOmc6nzpHOoyDOkc6nzpHOmc6RzqMsIM6dzpXOnyDOms6fzpzOoM6XzpPOkc6UzpkgzpHOp86RzpnOkc6jLCDOnc6Vzp/Op86pzqHOmc6fIM6VzpvOm86Xzp3Omc6azp/OpSDOkc6nzpHOmc6RzqMsIM6fzpLOoc6lzp/Oms6RzpzOoM6fzqMgzpHOp86RzpnOkc6jLCDOoM6bzpHOpM6Rzp3On86SzqHOpc6jzpcgzpHOp86RzpnOkc6jLCDOoM6bzpHOpM6Rzp3On86jIM6gzpHOpM6hzqnOnSDOkc6nzpHOmc6RzqMsIM6gzqHOlc6SzpXOlM6fzqMgzpHOp86RzpnOkc6jLCDOoc6fzpTOmc6RIM6gzpHOpM6hzqnOnSDOkc6nzpHOmc6RzqMsIM6jzp/Opc6SzpHOm86ZzqnOpM6VzpnOms6RIM6RzqfOkc6ZzpHOoywgzqPOpM6RzqHOn86nzqnOoc6ZIM6RzqfOkc6ZzpHOoywgzqPOpM6VzqHOnc6RIM6RzqfOkc6ZzpHOoywgzqPOpM6VzqbOkc6dzpcgzpHOp86RzpnOkc6jLCDOpM6hzp/Opc6jzpEgzpHOp86RzpnOkc6jLCDOpM6jzpHOoM6fzqXOoc6dzpnOkSDOkc6nzpHOmc6RzqMsIM6mzpHOoc6RzpkgzpHOp86RzpnOkc6jLCDOp86RzpvOkc6dzpTOoc6ZzqTOo86RIM6RzqfOkc6ZzpHOoywgzqfOoc6lzqPOkc6lzpPOlyDOkc6nzpHOmc6RzqMsIM6nzqHOpc6jzp/OoM6XzpPOlyDOkc6nzpHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPh86xzpDOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNTAwOScsIEFyZWE6ICfOls6XzqHOmc6RIM6RzqfOkc6ZzpHOoywgzprOkc6czpHOoc6VzqMgzpHOp86RzpnOkc6jLCDOm86RzpzOoM6ZzqHOmSDOkc6nzpHOmc6RzqMsIM6czqDOn86lzprOkSDOkc6nzpHOmc6RzqMsIM6dzpXOn86jIM6VzqHOmc6dzpXOn86jIM6RzqfOkc6ZzpHOoywgzqDOlc6lzprOkSDOms6RzpzOkc6hzqnOnSDOkc6nzpHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPh86xzpDOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNTAxMCcsIEFyZWE6ICfOkc6ZzpPOlc6ZzqHOkSDOkc6nzpHOmc6RzqMsIM6RzpnOk86VzqMgzpHOp86RzpnOkc6jLCDOkc6bzpzOpc6hzp/OoyDOkc6nzpHOmc6RzqMsIM6RzpzOoM6VzpvOn86azpfOoM6fzpkgzpHOp86RzpnOkc6jLCDOks6VzpvOkSDOkc6nzpHOmc6RzqMsIM6Vzp7On86nzpcgzpHOp86RzpnOkc6jLCDOms6RzqPOkc6dzpXOks6RIM6RzqfOkc6ZzpHOoywgzpvOkc6czqDOmc6dzp/OoyDOkc6nzpHOmc6RzqMsIM6czp/Onc6RzqPOpM6XzqHOmSDOkc6nzpHOmc6RzqMsIM6fzpHOo86XIM6RzqfOkc6ZzpHOoywgzqDOlc6hzpnOmM6pzqHOmc6fIM6RzqfOkc6ZzpHOoywgzqDOmc6czqDOkc6ZzpnOms6RIM6RzqfOkc6ZzpHOoywgzqPOlc6bzpnOkc6dzpEgzpHOp86RzpnOkc6jLCDOo86Zzp3Olc6SzqHOnyDOkc6nzpHOmc6RzqMsIM6nzqHOpc6jzpHOnc6YzpnOnyDOkc6nzpHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPh86xzpDOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNTAxNCcsIEFyZWE6ICfOkc6dzqkgzqDOn86kzpHOnM6ZzpEgzpHOp86RzpnOkc6jLCDOks6fzqXOpM6jzpnOnM6fzqMgzpHOp86RzpnOkc6jLCDOms6RzpvOkc6czpnOkSDOkc6nzpHOmc6RzqMsIM6azpHOpM6pIM6gzp/OpM6RzpzOmc6RIM6RzqfOkc6ZzpHOoywgzprOn86azprOmc6dzpnOlc6jIM6RzqfOkc6ZzpHOoywgzprOn86hzpnOnc6YzpnOkc6azp8gzpzOoM6RzpvOms6fzp3OmSDOkc6nzpHOmc6RzqMsIM6gzpHOoc6RzpvOmc6RIM6gzpvOkc6kzpHOnc6fzqUgzpHOp86RzpnOkc6jLCDOoM6bzpHOpM6Rzp3On86jIM6RzpnOk86Zzp/OpSDOkc6nzpHOmc6RzqMsIM6kzqPOmc6SzpvOn86jIM6RzqfOkc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc+HzrHOkM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI1MDE1JywgQXJlYTogJ86RzpLOoc6RzpzOmSDOkc6nzpHOmc6RzqMsIM6RzpPOmc6RIM6SzpHOoc6SzpHOoc6RIM6gzpHOpM6hzqnOnSDOkc6nzpHOmc6RzqMsIM6RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOms6RzpvOlc6dzqTOls6Zzp/OpSDOkc6nzpHOmc6RzqMsIM6RzpPOmc6fzqMgzpTOl86czpfOpM6hzpnOn86jIM6RzpvOlc6gzp/Op86pzqHOmc6fzqUgzpHOp86RzpnOkc6jLCDOkc6TzqHOkc6gzpnOlM6ZzpXOoyDOkc6nzpHOmc6RzqMsIM6RzpvOlc6gzp/Op86pzqHOmSDOkc6nzpHOmc6RzqMsIM6RzqPOpM6VzqHOmSDOkc6nzpHOmc6RzqMsIM6SzpXOm86ZzpzOkc6nzpkgzpHOp86RzpnOkc6jLCDOk86RzpvOkc6hzp8gzpHOp86RzpnOkc6jLCDOk86fzpvOlc6czpkgzpHOp86RzpnOkc6jLCDOlM6hzp/Oo86ZzpEgzpHOp86RzpnOkc6jLCDOlc6hzqXOnM6Rzp3OmM6VzpnOkSDOkc6nzpHOmc6RzqMsIM6azpHOm86Vzp3OpM6WzpkgzpHOp86RzpnOkc6jLCDOms6RzpvOps6RzqMgzqDOkc6kzqHOqc6dIM6RzqfOkc6ZzpHOoywgzprOkc6hzpTOkc6jzpkgzpHOp86RzpnOkc6jLCDOms6RzqHOoM6VzqTOkSDOkc6nzpHOmc6RzqMsIM6azpHOpM6pIM6RzpPOmc6RIM6czpHOoc6Zzp3OkSDOkc6nzpHOmc6RzqMsIM6azpHOpM6pIM6UzqHOn86jzpnOkSDOkc6nzpHOmc6RzqMsIM6azpHOpM6pIM6czpHOo86kzqHOkc6dzqTOqc6dzpnOnyDOkc6nzpHOmc6RzqMsIM6azp/Opc6czqDOlc6hzpkgzpHOp86RzpnOkc6jLCDOms6hzpnOmM6RzqHOkc6azpnOkSDOkc6nzpHOmc6RzqMsIM6azqXOoM6RzqHOmc6jzqPOmSDOkc6nzpHOmc6RzqMsIM6czpHOnc6VzqPOmSDOoM6RzqTOoc6pzp0gzpHOp86RzpnOkc6jLCDOnM6RzqPOn86lzqHOkc6ZzpnOms6RIM6RzqfOkc6ZzpHOoywgzpzOkc6jzqTOoc6Rzp3OpM6pzp3Ol86jIM6RzqfOkc6ZzpHOoywgzpzOn86dzpcgzpHOk86ZzqnOnSDOoM6Rzp3OpM6pzp0gzpHOp86RzpnOkc6jLCDOnM6fzp3OlyDOms6fzpnOnM6XzqPOlc6pzqMgzpjOlc6fzqTOn86azp/OpSDOnc6fzqTOlc6dzqnOnSDOkc6nzpHOmc6RzqMsIM6czqDOkc6dzqTOo86RzpnOmc6azpEgzpHOp86RzpnOkc6jLCDOnM6gzpHOoc6RzprOlc6jIM6RzqfOkc6ZzpHOoywgzp7Ol86hzp/Op86pzqHOmSDOkc6nzpHOmc6RzqMsIM6gzpHOnc6fzqXOo86RzpnOmc6azpEgzpHOp86RzpnOkc6jLCDOoM6XzpPOkc6UzpnOkSDOo86azpnOkc6UzpEgzpHOp86RzpnOkc6jLCDOoM6kzpXOoc6XIM6UzqHOn86jzpnOkc6jIM6RzqfOkc6ZzpHOoywgzqHOkc6nzpcgzqPOpM6RzqXOoc6fzpTOoc6fzpzOmc6fzqUgzpHOp86RzpnOkc6jLCDOoc6fzqXOoM6RzprOmc6RIM6RzqfOkc6ZzpHOoywgzqPOms6ZzpHOlM6RzqMgzpHOp86RzpnOkc6jLCDOo86azp/Opc6hzpEgzpHOp86RzpnOkc6jLCDOo86gzpHOoc6kzpnOkSDOkc6nzpHOmc6RzqMsIM6jzqTOkc6lzqHOn86UzqHOn86czpkgzpHOp86RzpnOkc6jLCDOpM6fzqPOms6VzqMgzpHOp86RzpnOkc6jLCDOp86Zzp/Onc6RIM6RzqfOkc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc+HzrHOkM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI1MTAwJywgQXJlYTogJ86RzpPOmc6RIM6Rzp3Onc6RIM6azp/Opc6dzpnOnc6RzqMgzpHOp86RzpnOkc6jLCDOkc6TzpnOn86jIM6Rzp3OlM6hzpXOkc6jIM6RzqfOkc6ZzpHOoywgzpHOk86Zzp/OoyDOl86bzpnOkc6jIM6UzpHOps6dzqnOnSDOkc6nzpHOmc6RzqMsIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzprOlc6hzqXOnc6VzpnOkc6jIM6RzqfOkc6ZzpHOoywgzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOnM6RzqXOoc6ZzprOmc6fzqUgzpHOp86RzpnOkc6jLCDOkc6TzpnOn86jIM6azqnOnc6jzqTOkc6dzqTOmc6dzp/OoyDOkc6ZzpPOmc6fzqUgzpHOp86RzpnOkc6jLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzpHOmc6TzpnOn86lIM6RzqfOkc6ZzpHOoywgzpHOk86Zzp/OoyDOoM6Rzp3OpM6VzpvOlc6XzpzOqc6dIM6RzqfOkc6ZzpHOoywgzpHOmc6TzpnOnyDOkc6nzpHOmc6RzqMsIM6RzpvOo86fzqMgzpHOp86RzpnOkc6jLCDOkc6dzqkgzpTOn86lzprOkc6dzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6Rzp3OqSDOls6XzqHOmc6RIM6RzqfOkc6ZzpHOoywgzpHOnc6pIM6czpHOpc6hzpnOms6ZIM6RzqfOkc6ZzpHOoywgzpHOnc6pIM6jzpHOm86czpXOnc6ZzprOnyDOkc6nzpHOmc6RzqMsIM6RzqHOoc6RzpLOqc6dzpnOpM6jzpEgzpHOp86RzpnOkc6jLCDOkc6nzpvOkc6UzpnOkSDOkc6nzpHOmc6RzqMsIM6SzpHOm86ZzpzOmc6kzpnOms6RIM6RzqfOkc6ZzpHOoywgzpLOlc6hzpnOnc6fIM6RzqfOkc6ZzpHOoywgzpLOn86kzpXOnc6XIM6RzqfOkc6ZzpHOoywgzpLOn86lzp3On86gzqXOoc6Tzp/OoyDOkc6nzpHOmc6RzqMsIM6TzprOoc6RzpnOms6RIM6RzqfOkc6ZzpHOoywgzpPOoc6XzpPOn86hzpcgzpHOp86RzpnOkc6jLCDOlM6RzpzOkc6azpnOnc6ZIM6RzqfOkc6ZzpHOoywgzpTOkc6mzp3Olc6jIM6RzqfOkc6ZzpHOoywgzpTOlc6hzpLOlc6dzpkgzpHOp86RzpnOkc6jLCDOlM6XzpzOl86kzqHOn86gzp/Opc6bzp8gzpHOp86RzpnOkc6jLCDOlM6ZzpPOlc6bzpnOqc6kzpnOms6RIM6RzqfOkc6ZzpHOoywgzpTOn86lzprOkc6dzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6VzpvOmc6azpcgzpHOp86RzpnOkc6jLCDOlc6gzqTOkc6gzpnOpM6kzpEgzpHOp86RzpnOkc6jLCDOms6RzpvOkc6dzqTOlc6hzpkgzpHOp86RzpnOkc6jLCDOms6RzqTOqSDOnM6RzqXOoc6ZzprOmSDOkc6nzpHOmc6RzqMsIM6azpHOpM6pIM6gzqTOlc6hzpcgzpHOp86RzpnOkc6jLCDOms6RzqTOqSDOo86RzpvOnM6Vzp3Omc6azp8gzpHOp86RzpnOkc6jLCDOms6VzqHOpc6dzpXOmc6RIM6RzqfOkc6ZzpHOoywgzprOn86lzpvOn86lzqHOkSDOkc6nzpHOmc6RzqMsIM6azp/Opc6czpHOoc6XIM6RzqfOkc6ZzpHOoywgzprOn86lzp3Omc6dzpEgzpHOp86RzpnOkc6jLCDOms6hzpfOnc6XIM6RzpnOk86Zzp/OpSDOkc6nzpHOmc6RzqMsIM6bzpHOms6azpEgzpHOmc6TzpnOkc6bzpXOmc6RzqMgzpHOp86RzpnOkc6jLCDOm86RzprOms6RIM6gzpHOpM6hzqnOnSDOkc6nzpHOmc6RzqMsIM6bzp/Ok86Tzp/OoyDOkc6nzpHOmc6RzqMsIM6czpHOk86VzpnOoc6RzqMgzpHOp86RzpnOkc6jLCDOnM6RzpzOn86lzqPOmc6RIM6RzqfOkc6ZzpHOoywgzpzOlc6bzpnOo86jzpnOkSDOkc6nzpHOmc6RzqMsIM6czpXOoc6kzpnOlM6ZIM6RzqfOkc6ZzpHOoywgzpzOmc6azqHOn86dzpkgzpHOp86RzpnOkc6jLCDOnM6fzp3OlyDOkc6TzpnOkc6jIM6VzpvOlc6fzqXOo86RzqMgzpHOp86RzpnOkc6jLCDOnM6fzp3OlyDOkc6TzpnOn86lIM6ZzqnOkc6dzp3On86lIM6YzpXOn86bzp/Ok86fzqUgzpHOp86RzpnOkc6jLCDOnM6fzp3OlyDOoM6RzpzOnM6VzpPOmc6jzqTOqc6dIM6kzpHOns6ZzpHOoc6nzqnOnSDOkc6nzpHOmc6RzqMsIM6czp/Onc6XIM6gzpXOoM6VzpvOlc6dzpnOpM6jzpfOoyDOkc6nzpHOmc6RzqMsIM6czqDOn86lzqbOn86lzqPOms6ZzpEgzpHOp86RzpnOkc6jLCDOnM6lzqHOn86SzqHOpc6jzpcgzpHOp86RzpnOkc6jLCDOnc6VzpEgzprOlc6hzqXOnc6VzpnOkSDOkc6nzpHOmc6RzqMsIM6dzpXOnyDOo86VzpvOnM6Vzp3Omc6azp8gzpHOp86RzpnOkc6jLCDOnc6VzqHOkc6kzpbOmc6VzqMgzpHOp86RzpnOkc6jLCDOnc6ZzprOn86bzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6gzpHOoc6RzqPOms6VzqXOlyDOkc6nzpHOmc6RzqMsIM6gzpXOm86VzprOmc6jzqTOoc6RIM6RzqfOkc6ZzpHOoywgzqDOlc6kzqHOn86Szp/Opc6dzpkgzpHOp86RzpnOkc6jLCDOoM6kzpXOoc6XIM6RzpnOk86ZzpHOm86VzpnOkc6jIM6RzqfOkc6ZzpHOoywgzqDOpc6hzpPOkc6azpkgzpHOp86RzpnOkc6jLCDOoc6ZzpbOn86czqXOm86fzqMgzpHOp86RzpnOkc6jLCDOoc6fzpTOmc6RIM6RzpnOk86ZzpHOm86VzpnOkc6jIM6RzqfOkc6ZzpHOoywgzqHOn86Uzp/OlM6RzqbOnc6XIM6RzqfOkc6ZzpHOoywgzqPOlc6bzpnOkc6dzpnOpM6ZzprOkSDOkc6nzpHOmc6RzqMsIM6jzpXOm86Zzp3On86lzqMgzpHOp86RzpnOkc6jLCDOo86VzpvOm86ZIM6RzqfOkc6ZzpHOoywgzqPOpM6RzqXOoc6ZzpEgzpHOp86RzpnOkc6jLCDOo86lzp3Okc6dzpnOkSDOkc6nzpHOmc6RzqMsIM6jzqnOpM6XzqHOkc6jIM6RzpnOk86Zzp/OpSDOkc6nzpHOmc6RzqMsIM6kzpXOnM6Vzp3OlyDOkc6nzpHOmc6RzqMsIM6kzp/Opc6czqDOkSDOkc6nzpHOmc6RzqMsIM6mzqTOlc6hzpcgKM6gzqTOlc6hzpcgzpHOmc6TzpnOkc6bzpXOmc6RzqMpIM6RzqfOkc6ZzpHOoywgzqbOqc6dzpfOo86azpHOoc6ZzpEgzpHOp86RzpnOkc6jLCDOp86Rzp3OpM6WzpcgzpHOp86RzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4fOsc6QzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjUyMDAnLCBBcmVhOiAnzpHOk86ZzpEgzpzOkc6hzpnOnc6RIM6RzqfOkc6ZzpHOoywgzpHOk86Zzp/Oks6bzpHOo86ZzqTOmc6azpEgzpHOp86RzpnOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzqPOkc6dzqTOn86czpXOoc6Zzp/OpSDOkc6nzpHOmc6RzqMsIM6RzpPOmc6fzqMgzprOqc6dzqPOpM6Rzp3OpM6Zzp3On86jIM6jzqDOkc6kzqnOnSDOkc6nzpHOmc6RzqMsIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOoM6RzqTOoc6pzp0gzpHOp86RzpnOkc6jLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzqPOoM6RzqTOqc6dIM6RzqfOkc6ZzpHOoywgzpHOk86Zzp/OoyDOo86kzpXOps6Rzp3On86jIM6RzqfOkc6ZzpHOoyDOkc6nzpHOmc6RzqMsIM6RzpvOpc6azpXOoyDOkc6nzpHOmc6RzqMsIM6RzpzOoM6VzpvOkc6azpnOkSDOkc6nzpHOmc6RzqMsIM6Rzp3OqSDOkc6nzpHOmc6RIM6RzqfOkc6ZzpHOoywgzpHOnc6pIM6jzp/Opc6UzpXOnc6RzpnOmc6azpEgzpHOp86RzpnOkc6jLCDOkc6gzpnOlM6VzqnOnc6RIM6RzqfOkc6ZzpHOoywgzpHOoc6Rzp7On86jIM6RzqfOkc6ZzpHOoywgzpHOoc6bzpEgzpHOp86RzpnOkc6jLCDOkc6lzpPOlc6hzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6RzqfOkc6ZzprOnyDOkc6nzpHOmc6RzqMsIM6SzpXOo86azp/Opc6azpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6SzqXOmM6fzqXOm86azpEgzpHOp86RzpnOkc6jLCDOk86Zzp/Opc6bzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6Tzp/OnM6fzqPOpM6fIM6RzqfOkc6ZzpHOoywgzpXOm86RzpnOn86nzqnOoc6ZIM6RzqfOkc6ZzpHOoywgzpbOkc6czqDOlc6kzpXOmc6azpEgzpHOp86RzpnOkc6jLCDOls6XzqPOmc6czpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6YzqnOnM6RzpnOmc6azpEgzpHOky7Onc6ZzprOn86bzpHOn86lIM6azqHOkc6bzpfOoyDOkc6nzpHOmc6RzqMsIM6YzqnOnM6RzpnOmc6azpEgzpHOp86RzpnOkc6jLCDOmc6fzp3Omc6azpcgzpHOms6kzpcgzpHOp86RzpnOkc6jLCDOms6RzpPOms6RzpTOmSDOkc6nzpHOmc6RzqMsIM6azpHOm86RzpzOkc6azpkgzpHOky7Onc6ZzprOn86bzpHOn86lIM6RzqfOkc6ZzpHOoywgzprOkc6bzpHOnM6RzprOmSDOm86ZzpzOnc6fzqfOqc6hzpnOn86lIM6RzqfOkc6ZzpHOoywgzprOkc6gzpXOm86XIM6RzqfOkc6ZzpHOoywgzprOkc6hzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6azpHOoc6RzpzOlc6jzpnOnc6RzpnOmc6azpEgzpHOp86RzpnOkc6jLCDOms6RzqHOnc6RzqHOmSDOkc6nzpHOmc6RzqMsIM6azpHOoc6lzpEgzqDOlc6kzqHOn86nzqnOoc6Zzp/OpSDOkc6nzpHOmc6RzqMsIM6azpHOpM6jzpHOmc6kzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6azpHOpM6pIM6RzqfOkc6ZzpEgzpHOp86RzpnOkc6jLCDOms6RzqTOqSDOm86ZzpzOnc6fzqfOqc6hzpkgzpHOp86RzpnOkc6jLCDOms6VzqbOkc6bzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6azp/Opc6dzpXOm86RzpnOmc6azpEgzpHOp86RzpnOkc6jLCDOms6hzpnOnc6fzqMgzpHOp86RzpnOkc6jLCDOm86RzprOms6fzqDOlc6kzqHOkSDOkc6nzpHOmc6RzqMsIM6bzpHOnM6gzqHOkc6ZzpnOms6RIM6RzqfOkc6ZzpHOoywgzpvOlc6lzprOn86jIM6RzqfOkc6ZzpHOoywgzpvOmc6czpHOnc6RzprOmSDOkc6nzpHOmc6RzqMsIM6bzpnOnM6dzp/Op86pzqHOmSDOkc6nzpHOmc6RzqMsIM6bzp/Ok86fzpjOlc6kzpfOoyDOkc6nzpHOmc6RzqMsIM6bzp/Opc6jzpnOms6RIM6RzqfOkc6ZzpHOoywgzpzOkc6WzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6czpHOnc6VzqTOkc6ZzpnOms6RIM6RzqfOkc6ZzpHOoywgzpzOkc6kzpHOoc6RzpPOms6RIM6RzqfOkc6ZzpHOoywgzpzOkc6lzqHOnyDOn86hzp/OoyDOkc6nzpHOmc6RzqMsIM6czp/Onc6XIM6RzpPOmc6RzqMgzpzOkc6hzpnOnc6RzqMgzpzOkc6hzpnOpM6jzpfOoyDOkc6nzpHOmc6RzqMsIM6czp/Onc6XIM6RzpPOmc6fzqUgzp3Omc6azp/Om86Rzp/OpSDOo86gzpHOpM6pzp0gzpHOp86RzpnOkc6jLCDOnM6lzqHOpM6fzqMgzpHOp86RzpnOkc6jLCDOnc6Vzp/Op86pzqHOmSDOp86RzqHOkc6lzpPOl86jIM6RzqfOkc6ZzpHOoywgzp3Omc6mzp/Ooc6RzpnOmc6azpEgzpHOp86RzpnOkc6jLCDOoM6RzpvOmc6RIM6gzpXOoc6ZzqPOpM6VzqHOkSDOkc6nzpHOmc6RzqMsIM6gzpHOoc6RzpvOmc6RIM6azpHOm86RzpzOkc6azpnOn86lIM6RzqfOkc6ZzpHOoywgzqDOkc6hzpHOm86ZzpEgzprOkc6kzqkgzpHOp86RzpnOkc6jIM6RzqfOkc6ZzpHOoywgzqDOkc6hzpHOm86ZzpEgzp3Omc6mzp/Ooc6RzpnOmc6azqnOnSDOkc6nzpHOmc6RzqMsIM6gzpXOpM6RIM6RzqfOkc6ZzpHOoywgzqDOlc6kzqHOn86nzqnOoc6ZIM6RzqfOkc6ZzpHOoywgzqDOl86TzpHOlM6ZzpEgzqfOkc6hzpHOpc6TzpfOoyDOkc6nzpHOmc6RzqMsIM6gzpnOo86pIM6jzqXOms6VzpEgzpHOp86RzpnOkc6jLCDOoM6fzpnOnM6Vzp3On86nzqnOoc6ZIM6RzqfOkc6ZzpHOoywgzqDOn86bzqXOm86fzqbOnyDOkc6nzpHOmc6RzqMsIM6gzp/Ooc6kzpXOoyDOkc6nzpHOmc6RzqMsIM6gzp/Opc6hzp3Okc6hzpkgzpHOp86RzpnOkc6jLCDOoc6RzqfOlyDOkc6nzpHOmc6RzqMsIM6hzpnOn86bzp/OoyDOkc6nzpHOmc6RzqMsIM6jzpHOnc6kzp/OnM6VzqHOmSDOkc6nzpHOmc6RzqMsIM6jzqDOkc6bzpnOkc6hzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6jzqDOkc6dzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6jzqTOlc6dzpHOmc6ZzqTOmc6azpEgzpHOp86RzpnOkc6jLCDOpM6Rzp7Omc6RzqHOp86VzqMgzpHOp86RzpnOkc6jLCDOpM6jzpHOms6pzp3Omc6azpEgzpHOp86RzpnOkc6jLCDOpc6ozpfOm86XIM6hzpHOp86XIM6RzqfOkc6ZzpHOoywgzqbOm86fzprOkSDOkc6nzpHOmc6RzqMsIM6mzqHOkc6TzprOkSDOkc6nzpHOmc6RzqMsIM6mzqnOo86kzpHOmc6dzpEgzpHOp86RzpnOkc6jLCDOp86RzpnOms6RzpvOmSDOkc6nzpHOmc6RzqMsIM6nzpHOoc6RzqXOk86XIM6RzqfOkc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc+HzrHOkM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI2MjIxJywgQXJlYTogJ86gzpHOpM6hzpEgzpHOp86RzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4fOsc6QzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjYyMjInLCBBcmVhOiAnzpzOoM6RzpvOkc6jIM6RzqfOkc6ZzpHOoywgzqDOkc6kzqHOkSDOkc6nzpHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPh86xzpDOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNjIyMycsIEFyZWE6ICfOoM6RzqTOoc6RIM6RzqfOkc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc+HzrHOkM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI2MjI0JywgQXJlYTogJ86gzpHOpM6hzpEgzpHOp86RzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4fOsc6QzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjYyMjUnLCBBcmVhOiAnzqDOkc6kzqHOkSDOkc6nzpHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPh86xzpDOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNjIyNicsIEFyZWE6ICfOoM6RzqTOoc6RIM6RzqfOkc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc+HzrHOkM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI2MzMxJywgQXJlYTogJ86gzpHOpM6hzpEgzpHOp86RzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4fOsc6QzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjYzMzInLCBBcmVhOiAnzqDOkc6kzqHOkSDOkc6nzpHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPh86xzpDOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNjMzMycsIEFyZWE6ICfOoM6RzqTOoc6RIM6RzqfOkc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc+HzrHOkM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI2MzM0JywgQXJlYTogJ86fzpLOoc6ZzpEgzpHOp86RzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4fOsc6QzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjYzMzUnLCBBcmVhOiAnzqDOkc6kzqHOkSDOkc6nzpHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPh86xzpDOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNjMzNicsIEFyZWE6ICfOoM6RzqTOoc6VzqnOnSDOkc6nzpHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPh86xzpDOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNjQ0MScsIEFyZWE6ICfOkc6TzqXOmc6RIM6RzqfOkc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOkc+HzrHOkM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI2NDQyJywgQXJlYTogJ86gzpHOpM6hzpEgzpHOp86RzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4fOsc6QzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjY0NDMnLCBBcmVhOiAnzpzOoM6fzpbOkc6ZzpnOpM6ZzprOkSDOkc6nzpHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpHPh86xzpDOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNjUwMCcsIEFyZWE6ICfOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzqDOm86RzqTOkc6dzp/Oks6hzqXOo86XzqMgzpHOp86RzpnOkc6jLCDOkc6TzpnOn86jIM6SzpHOo86ZzpvOlc6Zzp/OoyDOkc6nzpHOmc6RzqMsIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzqPOn86lzpvOmc6fzqUgzpHOp86RzpnOkc6jLCDOkc6TzpnOn86jIM6azqnOnc6jzqTOkc6dzqTOmc6dzp/OoyDOoM6RzqTOoc6pzp0gzpHOp86RzpnOkc6jLCDOkc6TzpnOn86jIM6jzqTOlc6mzpHOnc6fzqMgzqPOkc6hzpHOks6RzpvOmc6fzqUgzpHOp86RzpnOkc6jLCDOkc6dzqkgzprOkc6bzpvOmc6YzpXOkSDOkc6nzpHOmc6RzqMsIM6SzpXOoc6dzpHOoc6UzpHOmc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6TzprOn86kzqPOkc6ZzpnOms6RIM6RzqfOkc6ZzpHOoywgzpTOlc6czpXOnc6ZzprOkSDOkc6nzpHOmc6RzqMsIM6VzpvOmc6azpnOo86kzqHOkSDOkc6nzpHOmc6RzqMsIM6WzpHOoc6azpHOm86XIM6RzqfOkc6ZzpHOoywgzpjOlc6RIM6RzqfOkc6ZzpHOoywgzprOkc6bzpvOmc6YzpXOkSDOoM6RzqTOoc6pzp0gzpHOp86RzpnOkc6jLCDOms6RzqHOpc6RIM6VzpvOmc6azpnOo86kzqHOkc6jIM6RzqfOkc6ZzpHOoywgzprOkc6kzqkgzpHOoc6RzqfOqc6SzpnOpM6ZzprOkSDOkc6nzpHOmc6RzqMsIM6azpHOpM6pIM6hzp/OlM6Zzp3OlyDOkc6nzpHOmc6RzqMsIM6azpXOps6RzpvOn86SzqHOpc6jzp8gzqPOkc6hzpHOks6RzpvOmc6fzqUgzpHOp86RzpnOkc6jLCDOms6VzqbOkc6bzp/Oks6hzqXOo86fIM6jzp/Opc6bzpnOn86lIM6RzqfOkc6ZzpHOoywgzprOoc6Xzp3OlyDOoM6RzqTOoc6pzp0gzpHOp86RzpnOkc6jLCDOms6hzqXOo86kzpHOm86bzp/Oks6hzqXOo86XIM6RzqfOkc6ZzpHOoywgzprOpc6Rzp3OlyDOkc6azqTOlyDOkc6nzpHOmc6RzqMsIM6bzqXOk86ZzpXOoyDOkc6nzpHOmc6RzqMsIM6czpHOpc6hzp/OnM6Rzp3OlM6XzpvOkSDOkc6nzpHOmc6RzqMsIM6czpnOnc6kzpbOkc6ZzpnOms6RIM6RzqfOkc6ZzpHOoywgzpzOmc6dzqTOmc6bzp/Ok86bzpkgzpHOp86RzpnOkc6jLCDOnM6fzpnOoc6RIM6RzqfOkc6ZzpHOoywgzpzOn86dzpcgzp/OnM6gzpvOn86lIM6RzqfOkc6ZzpHOoywgzpzOn86dzp/OlM6Vzp3OlM6hzpkgzprOoc6Xzp3Ol86jIM6RzqfOkc6ZzpHOoywgzpzOoM6RzprOkc6hzpkgzpHOp86RzpnOkc6jLCDOnc6Vzp8gzqPOn86lzpvOmSDOkc6nzpHOmc6RzqMsIM6gzpHOnc6RzpPOmc6RIM6RzqfOkc6ZzpHOoywgzqDOkc6hzpHOm86ZzpEgzpHOp86RzpnOkc6jLCDOoM6RzqXOm86fzprOkc6jzqTOoc6fIM6RzqfOkc6ZzpHOoywgzqDOlc6kzqHOqc6kzp8gzpHOp86RzpnOkc6jLCDOoM6XzpPOlyDOkc6nzpHOmc6RzqMsIM6gzp/Opc6hzp3Okc6hzp/Oms6RzqPOpM6hzp8gzpHOp86RzpnOkc6jLCDOoM6hzp/Ops6XzqTOl86jIM6XzpvOmc6RzqMgzqPOn86lzpvOmc6fzqUgzpHOp86RzpnOkc6jLCDOoc6lzpHOms6ZIM6RzqfOkc6ZzpHOoywgzqHOqc6czpHOnc6fzqMgzpHOp86RzpnOkc6jLCDOo86RzqHOkc6SzpHOm86ZIM6RzqfOkc6ZzpHOoywgzqPOkc6hzprOn86lzp3Okc6jIM6RzqfOkc6ZzpHOoywgzqfOkc6kzpbOl86bzpnOkc6azp8gzpHOp86RzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Rz4fOsc6QzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzIwMDEnLCBBcmVhOiAnzpHOk86ZzpEgzqDOkc6hzpHOo86azpXOpc6XIM6azp/Ooc6pzp3Olc6ZzpHOoyDOks6fzpnOqc6kzpnOkc6jLCDOkc6bzpnOkc6hzqTOn86jIM6Szp/Omc6pzqTOmc6RzqMsIM6VzqXOkc6TzpPOlc6bzpnOo86kzqHOmc6RIM6Szp/Omc6pzqTOmc6RzqMsIM6czpHOls6ZIM6Szp/Omc6pzqTOmc6RzqMsIM6czp/Onc6XIM6VzqXOkc6TzpPOlc6bzpnOo86kzqHOmc6RzqMgzpLOn86ZzqnOpM6ZzpHOoywgzqDOlc6kzqHOkSDOks6fzpnOqc6kzpnOkc6jLCDOo86pzpvOl86dzpHOoc6ZIM6Szp/Omc6pzqTOmc6RzqMsIM6lzqjOl86bzpHOnc6kzpfOoyDOks6fzpnOqc6kzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Szr/Ouc+Jz4TOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzMyMDAyJywgQXJlYTogJ86RzqPOms6hzpHOmc6RIM6Szp/Omc6pzqTOmc6RzqMsIM6SzpHOk86ZzpEgzpLOn86ZzqnOpM6ZzpHOoywgzpjOlc6jzqDOmc6VzqMgzpLOn86ZzqnOpM6ZzpHOoywgzpvOlc6fzp3OpM6RzqHOmSDOks6fzpnOqc6kzpnOkc6jLCDOnM6RzqXOoc6fzpzOnM6RzqTOmSDOks6fzpnOqc6kzpnOkc6jLCDOnc6Vzp/Op86pzqHOmSDOks6fzpnOqc6kzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Szr/Ouc+Jz4TOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzMyMDAzJywgQXJlYTogJ86RzqPOoM6hzpEgzqPOoM6ZzqTOmc6RIM6Szp/Omc6pzqTOmc6RzqMsIM6gzpHOoc6RzpvOmc6RIM6UzpnOo86kzp/OnM6fzqUgzpLOn86ZzqnOpM6ZzpHOoycsIFByZWZlY3R1cmU6ICfOks6/zrnPic+Ezq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMjAwNCcsIEFyZWE6ICfOkc6hzpHOp86pzpLOkSDOks6fzpnOqc6kzpnOkc6jLCDOls6VzpzOlc6dzp8gzpLOn86ZzqnOpM6ZzpHOoywgzprOkc6bzqXOks6ZzpEgzpvOmc6SzpHOlM6Zzp/OpSDOks6fzpnOqc6kzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Szr/Ouc+Jz4TOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzMyMDA1JywgQXJlYTogJ86RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOlM6ZzqPOpM6fzpzOn86lIM6Szp/Omc6pzqTOmc6RzqMsIM6UzpnOo86kzp/OnM6fIM6Szp/Omc6pzqTOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpLOv865z4nPhM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzIwMDYnLCBBcmVhOiAnzpHOk86Zzp/OoyDOkc6YzpHOnc6RzqPOmc6fzqMgzprOpc6hzpnOkc6azpnOn86lIM6Szp/Omc6pzqTOmc6RzqMsIM6azpHOoc6lzqnOpM6ZIM6Szp/Omc6pzqTOmc6RzqMsIM6azqXOoc6ZzpHOms6ZIM6Szp/Omc6pzqTOmc6RzqMsIM6gzpHOnc6RzpPOmc6RIM6azpHOm86RzpzOmc6pzqTOmc6jzqPOkSDOks6fzpnOqc6kzpnOkc6jLCDOpM6RzqHOo86fzqMgzpLOn86ZzqnOpM6ZzpHOoycsIFByZWZlY3R1cmU6ICfOks6/zrnPic+Ezq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMjAwOScsIEFyZWE6ICfOkc6TzpnOn86jIM6YzqnOnM6RzqMgzpXOpc6Szp/Omc6RzqMsIM6azpvOlc6ZzpTOmSDOlc6lzpLOn86ZzpHOoywgzp/Omc6dzp/OlyDOlc6lzpLOn86ZzpHOoywgzqDOkc6dzpHOk86ZzpEgzqTOkc6dzpHOk86hzpHOoyDOlc6lzpLOn86ZzpHOoywgzqPOp86XzpzOkc6kzpHOoc6ZIM6VzqXOks6fzpnOkc6jLCDOpM6Rzp3Okc6TzqHOkSDOlc6lzpLOn86ZzpHOoycsIFByZWZlY3R1cmU6ICfOks6/zrnPic+Ezq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMjEwMCcsIEFyZWE6ICfOkc6TzpnOkSDOkc6dzp3OkSDOks6fzpnOqc6kzpnOkc6jLCDOkc6TzpnOkSDOpM6hzpnOkc6UzpEgzpLOn86ZzqnOpM6ZzpHOoywgzpHOk86Zzp/OoyDOkc6YzpHOnc6RzqPOmc6fzqMgzpHOm86RzpvOms6fzpzOlc6dzqnOnSDOks6fzpnOqc6kzpnOkc6jLCDOkc6TzpnOn86jIM6SzpvOkc6jzpnOn86jIM6Szp/Omc6pzqTOmc6RzqMsIM6RzpPOmc6fzqMgzpTOl86czpfOpM6hzpnOn86jIM6Szp/Omc6pzqTOmc6RzqMsIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOm86ZzpLOkc6UzpXOmc6RzqMgzpLOn86ZzqnOpM6ZzpHOoywgzpHOms6fzp3OpM6Zzp8gzpLOn86ZzqnOpM6ZzpHOoywgzpHOm86RzpvOms6fzpzOlc6dzpXOoyDOks6fzpnOqc6kzpnOkc6jLCDOkc6dzpHOm86XzqjOlyDOks6fzpnOqc6kzpnOkc6jLCDOlc6bzpnOms6pzp3Okc6jIM6Szp/Omc6pzqTOmc6RzqMsIM6WzpXOm86ZzqTOo86RIM6Szp/Omc6pzqTOmc6RzqMsIM6Yzp/Opc6hzpnOnyDOks6fzpnOqc6kzpnOkc6jLCDOms6fzqHOqc6dzpXOmc6RIM6Szp/Omc6pzqTOmc6RzqMsIM6bzpHOps6lzqPOpM6ZIM6Szp/Omc6pzqTOmc6RzqMsIM6bzpnOks6RzpTOlc6ZzpEgzpLOn86ZzqnOpM6ZzpHOoywgzpzOkc6lzqHOn86TzpXOmc6RIM6Szp/Omc6pzqTOmc6RzqMsIM6czpHOpc6hzp/Onc6VzqHOmSDOks6fzpnOqc6kzpnOkc6jLCDOnM6fzp3OlyDOn86jzpnOn86lIM6bzp/Opc6azpEgzpLOn86ZzqnOpM6ZzpHOoywgzqDOlc6hzpHOp86pzqHOmSDOks6fzpnOqc6kzpnOkc6jLCDOoM6hzp/Oo86XzpvOmc6fIM6Szp/Omc6pzqTOmc6RzqMsIM6hzqnOnM6RzpnOmc6azp8gzpLOn86ZzqnOpM6ZzpHOoywgzqPOpM6RzpjOnM6fzqMgzpTOkc6lzpvOlc6ZzpHOoyDOks6fzpnOqc6kzpnOkc6jLCDOo86kzpHOmM6czp/OoyDOm86ZzpLOkc6UzpXOmc6RzqMgzpLOn86ZzqnOpM6ZzpHOoywgzqPOpM6VzpnOoc6Zzp8gzpLOn86ZzqnOpM6ZzpHOoywgzqTOls6ZzpzOkc6ZzpnOms6RIM6Szp/Omc6pzqTOmc6RzqMsIM6kzqPOn86lzprOkc6bzpHOlM6VzqMgzpLOn86ZzqnOpM6ZzpHOoywgzqfOkc6ZzqHOqc6dzpXOmc6RIM6Szp/Omc6pzqTOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpLOv865z4nPhM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzIyMDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOks6RzqPOmc6bzpXOmc6fzqMgzpLOn86ZzqnOpM6ZzpHOoywgzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOks6fzpnOqc6kzpnOkc6jLCDOkc6TzpnOn86jIM6dzpXOms6kzpHOoc6Zzp/OoyDOmM6XzpLOqc6dIM6Szp/Omc6pzqTOmc6RzqMsIM6RzprOoc6RzpnOps6dzpnOnyDOks6fzpnOqc6kzpnOkc6jLCDOkc6czqDOlc6bzp/Op86pzqHOmSDOks6fzpnOqc6kzpnOkc6jLCDOkc6hzpzOkSDOks6fzpnOqc6kzpnOkc6jLCDOkc6jzqnOoM6ZzpEgzpLOn86ZzqnOpM6ZzpHOoywgzpTOkc6mzp3OlyDOks6fzpnOqc6kzpnOkc6jLCDOlM6RzqbOnc6fzqXOm86RIM6Szp/Omc6pzqTOmc6RzqMsIM6VzpvOlc6pzp3Okc6jICAozpXOm86RzpnOqc6dzpHOoykgzpLOn86ZzqnOpM6ZzpHOoywgzpjOl86SzpEgzpLOn86ZzqnOpM6ZzpHOoywgzprOkc6bzpHOnM6RzprOmSDOks6fzpnOqc6kzpnOkc6jLCDOms6RzpvOm86ZzpjOlc6RIM6Szp/Omc6pzqTOmc6RzqMsIM6azpHOoM6RzqHOlc6bzpvOmSDOks6fzpnOqc6kzpnOkc6jLCDOms6RzqPOpM6hzpkgzpLOn86ZzqnOpM6ZzpHOoywgzprOkc6jzqTOoc6fIM6Szp/Omc6pzqTOmc6RzqMsIM6azp/Oms6azpnOnc6fIM6Szp/Omc6pzqTOmc6RzqMsIM6bzpXOpc6azqTOoc6RIM6Szp/Omc6pzqTOmc6RzqMsIM6bzp/Opc6kzp/Opc6mzpkgzpLOn86ZzqnOpM6ZzpHOoywgzpzOlc6bzpnOo86jzp/Op86pzqHOmSDOks6fzpnOqc6kzpnOkc6jLCDOnM6fzp3OlyDOkc6TzpnOkc6jIM6kzqHOmc6RzpTOkc6jIM6Szp/Omc6pzqTOmc6RzqMsIM6czp/Onc6XIM6czpXOpM6RzpzOn86hzqbOqc6jzpfOoyDOo86pzqTOl86hzp/OoyDOks6fzpnOqc6kzpnOkc6jLCDOnM6fzp3OlyDOoM6VzpvOkc6TzpnOkc6jIM6Szp/Omc6pzqTOmc6RzqMsIM6czp/Opc6hzpnOms6ZIM6Szp/Omc6pzqTOmc6RzqMsIM6dzpXOn86nzqnOoc6RzprOmSDOks6fzpnOqc6kzpnOkc6jLCDOoM6Rzp3Okc6azqTOnyDOks6fzpnOqc6kzpnOkc6jLCDOoM6RzqHOkc6bzpnOkSDOm86ZzpLOkc6Uzp/Oo86kzqHOkc6jIM6Szp/Omc6pzqTOmc6RzqMsIM6gzpvOkc6kzpHOmc6VzqMgzpLOn86ZzqnOpM6ZzpHOoywgzqDOm86RzqTOkc6dzpHOms6ZzpEgzpLOn86ZzqnOpM6ZzpHOoywgzqDOoc6RzqPOmc6dzp8gzpLOn86ZzqnOpM6ZzpHOoywgzqDOpc6bzpcgzpLOn86ZzqnOpM6ZzpHOoywgzqPOms6fzqXOoc6kzpEgzpLOn86ZzqnOpM6ZzpHOoywgzqPOms6hzp/OoM6fzp3Olc6hzpnOkSDOks6fzpnOqc6kzpnOkc6jLCDOo86kzpXOps6Rzp3OlyDOks6fzpnOqc6kzpnOkc6jLCDOo86kzqHOn86SzpnOms6ZIM6Szp/Omc6pzqTOmc6RzqMsIM6lzqDOkc6kzp8gzpLOn86ZzqnOpM6ZzpHOoycsIFByZWZlY3R1cmU6ICfOks6/zrnPic+Ezq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMjMwMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6Rzp3OlM6hzpXOkc6jIM6Szp/Omc6pzqTOmc6RzqMsIM6RzpPOmc6fzqMgzqPOoM6lzqHOmc6UzqnOnc6RzqMgzpLOn86ZzqnOpM6ZzpHOoywgzpTOmc6fzp3Opc6jzp/OoyDOks6fzpnOqc6kzpnOkc6jLCDOms6RzqHOpc6RIM6Szp/Omc6pzqTOmc6RzqMsIM6bzp/Opc6kzqPOmSDOks6fzpnOqc6kzpnOkc6jLCDOn86hzqfOn86czpXOnc6fzqMgzpLOn86ZzqnOpM6ZzpHOoywgzqDOkc6lzpvOn86jIM6Szp/Omc6pzqTOmc6RzqMsIM6gzqXOoc6Tzp/OoyDOks6fzpnOqc6kzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Szr/Ouc+Jz4TOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzUxMDMwJywgQXJlYTogJ86RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOk86hzpXOks6Vzp3Oqc6dLCDOms6ZzpLOqc6kzp/OoyDOk86hzpXOks6Vzp3Oqc6dLCDOms6bzpfOnM6RzqTOkc6azpkgzpPOoc6VzpLOlc6dzqnOnSwgzprOn86azprOmc6dzpnOkSDOk86hzpXOks6Vzp3Oqc6dLCDOms6hzpnOmM6RzqHOkc6azpnOkSDOk86hzpXOks6Vzp3Oqc6dLCDOnM6XzpvOlc6RIM6TzqHOlc6SzpXOnc6pzp0sIM6dzpXOkSDOpM6hzpHOoM6VzpbOn86lzqPOkSDOk86hzpXOks6Vzp3Oqc6dLCDOoM6fzpvOpc6UzpXOnc6UzqHOmSDOk86hzpXOks6Vzp3Oqc6dLCDOpM6Rzp7Omc6RzqHOp86XzqMgzpPOoc6VzpLOlc6dzqnOnScsIFByZWZlY3R1cmU6ICfOk8+BzrXOss61zr3Pjs69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1MTEwMCcsIEFyZWE6ICfOkc6TzpHOm86RzpnOn86ZIM6TzqHOlc6SzpXOnc6pzp0sIM6RzpPOkc6gzpcgzpPOoc6VzpLOlc6dzqnOnSwgzpHOk86ZzpEgzqTOoc6ZzpHOlM6RIM6TzqHOlc6SzpXOnc6pzp0sIM6RzpPOmc6fzpkgzpjOlc6fzpTOqc6hzp/OmSDOk86hzpXOks6Vzp3Oqc6dLCDOkc6TzpnOn86jIM6azp/Oo86czpHOoyDOk86hzpXOks6Vzp3Oqc6dLCDOkc6XzpTOn86dzpnOkSDOk86hzpXOks6Vzp3Oqc6dLCDOkc6ZzpzOmc6bzpnOkc6dzp/OoyDOk86hzpXOks6Vzp3Oqc6dLCDOkc6czqXOk86UzpHOm86ZzpXOoyDOk86hzpXOks6Vzp3Oqc6dLCDOkc6dzpHOks6hzqXOpM6RIM6TzqHOlc6SzpXOnc6pzp0sIM6Rzp3OmM6hzpHOms6ZzpEgzpPOoc6VzpLOlc6dzqnOnSwgzpHOnc6fzpnOns6XIM6TzqHOlc6SzpXOnc6pzp0sIM6Rzp3OqSDOlc6azprOm86XzqPOmc6RIM6TzqHOlc6SzpXOnc6pzp0sIM6RzqPOoM6hzp/Oms6RzpzOoM6fzqMgzpPOoc6VzpLOlc6dzqnOnSwgzpLOkc6hzpfOoyDOk86hzpXOks6Vzp3Oqc6dLCDOks6RzqTOn86bzpHOms6azp/OoyDOk86hzpXOks6Vzp3Oqc6dLCDOk86VzqnOoc6TzpnOpM6jzpEgzpPOoc6VzpLOlc6dzqnOnSwgzpPOoc6VzpLOlc6dzpEgzpPOoc6VzpLOlc6dzqnOnSwgzpTOkc6jzpHOms6ZIM6TzqHOlc6SzpXOnc6pzp0sIM6UzpXOo86gzp/OpM6XzqMgzpPOoc6VzpLOlc6dzqnOnSwgzpTOl86czpfOpM6hzpEgzpPOoc6VzpLOlc6dzqnOnSwgzpTOmc6gzp/Ooc6fIM6TzqHOlc6SzpXOnc6pzp0sIM6Uzp/Ons6RzqHOkc6jIM6TzqHOlc6SzpXOnc6pzp0sIM6VzprOms6bzpfOo86ZzpEgzpPOoc6VzpLOlc6dzqnOnSwgzpXOm86RzqTOn86jIM6TzqHOlc6SzpXOnc6pzp0sIM6VzpvOlc6lzpjOlc6hzp8gzpPOoc6VzpLOlc6dzqnOnSwgzpXOm86VzqXOmM6VzqHOn86nzqnOoc6ZIM6TzqHOlc6SzpXOnc6pzp0sIM6VzpvOlc6lzpjOlc6hzqnOnSDOoM6hzp/Oo86mzqXOk86pzp0gzpPOoc6VzpLOlc6dzqnOnSwgzpXOns6RzqHOp86fzqMgzpPOoc6VzpLOlc6dzqnOnSwgzpbOkc6azpHOoyDOk86hzpXOks6Vzp3Oqc6dLCDOmc6kzpXOkSDOk86hzpXOks6Vzp3Oqc6dLCDOms6RzpvOkc6czpnOpM6jzpkgzpPOoc6VzpLOlc6dzqnOnSwgzprOkc6bzpfOoc6RzqfOlyDOk86hzpXOks6Vzp3Oqc6dLCDOms6RzpvOm86fzp3OlyDOk86hzpXOks6Vzp3Oqc6dLCDOms6RzpvOn86nzpkgzpPOoc6VzpLOlc6dzqnOnSwgzprOkc6hzqDOlc6hzp8gzpPOoc6VzpLOlc6dzqnOnSwgzprOkc6jzqTOoc6fIM6TzqHOlc6SzpXOnc6pzp0sIM6azpHOpM6RzprOkc6bzpcgzpPOoc6VzpLOlc6dzqnOnSwgzprOlc6dzqTOoc6fIM6TzqHOlc6SzpXOnc6pzp0sIM6azp3Omc6UzpcgzpPOoc6VzpLOlc6dzqnOnSwgzprOn86jzpzOkc6kzpkgzpPOoc6VzpLOlc6dzqnOnSwgzprOoc6lzpEgzpLOoc6lzqPOlyDOk86hzpXOks6Vzp3Oqc6dLCDOms6lzpTOqc6dzpnOlc6jIM6TzqHOlc6SzpXOnc6pzp0sIM6azqXOoM6RzqHOmc6jzqPOmSDOk86hzpXOks6Vzp3Oqc6dLCDOms6lzqHOkc6azpHOm86XIM6TzqHOlc6SzpXOnc6pzp0sIM6bzpXOmc6ozpnOnyDOk86hzpXOks6Vzp3Oqc6dLCDOm86fzqfOnM6XIM6TzqHOlc6SzpXOnc6pzp0sIM6czpHOpc6hzpHOnc6RzpnOn86ZIM6TzqHOlc6SzpXOnc6pzp0sIM6czpHOpc6hzp/Onc6fzqHOn86jIM6TzqHOlc6SzpXOnc6pzp0sIM6czpXOk86RzpvOnyDOo86VzpnOoc6Xzp3OmSDOk86hzpXOks6Vzp3Oqc6dLCDOnM6VzpPOkc6hzp8gzpPOoc6VzpLOlc6dzqnOnSwgzpzOlc6bzpnOo86jzpkgzpPOoc6VzpLOlc6dzqnOnSwgzpzOlc6jzp/Om86RzprOms6fzqMgzpPOoc6VzpLOlc6dzqnOnSwgzpzOmc6azqHOnyDOo86VzpnOoc6Xzp3Omc6fIM6TzqHOlc6SzpXOnc6pzp0sIM6czpnOms6hzp/Oms6bzpXOmc6jzp/Opc6hzpEgzpPOoc6VzpLOlc6dzqnOnSwgzpzOn86dzpHOp86ZzqTOmSDOk86hzpXOks6Vzp3Oqc6dLCDOnM6lzqHOo86Zzp3OkSDOk86hzpXOks6Vzp3Oqc6dLCDOnc6Vzp/Op86pzqHOmSDOk86hzpXOks6Vzp3Oqc6dLCDOnc6XzqPOmSDOk86hzpXOks6Vzp3Oqc6dLCDOn86hzp/OoM6VzpTOmc6fIM6TzqHOlc6SzpXOnc6pzp0sIM6gzpHOm86RzpnOn86nzqnOoc6ZIM6TzqHOlc6SzpXOnc6pzp0sIM6gzpHOoc6fzqHOlc6Zzp8gzpPOoc6VzpLOlc6dzqnOnSwgzqDOlc6hzpnOks6fzpvOkc6azpkgzpPOoc6VzpLOlc6dzqnOnSwgzqDOmc6jzqTOmc6azp8gzpPOoc6VzpLOlc6dzqnOnSwgzqDOn86dzqTOmc6dzpcgzpPOoc6VzpLOlc6dzqnOnSwgzqDOn86hzp/OoyDOk86hzpXOks6Vzp3Oqc6dLCDOoM6lzpvOqc6hzp/OmSDOk86hzpXOks6Vzp3Oqc6dLCDOoc6fzpTOmc6RIM6TzqHOlc6SzpXOnc6pzp0sIM6jzpHOoc6RzprOl86dzpEgzpPOoc6VzpLOlc6dzqnOnSwgzqPOoM6XzpvOkc6Zzp8gzpPOoc6VzpLOlc6dzqnOnSwgzqPOpM6RzqXOoc6fzqMgzpPOoc6VzpLOlc6dzqnOnSwgzqPOpc6UzpXOnc6UzqHOnyDOk86hzpXOks6Vzp3Oqc6dLCDOpM6hzpnOms6fzprOms6ZzpEgzpPOoc6VzpLOlc6dzqnOnSwgzqTOoc6ZzprOn86hzqbOnyDOk86hzpXOks6Vzp3Oqc6dLCDOpM6hzpnOms6pzpzOnyDOk86hzpXOks6Vzp3Oqc6dLCDOpM6hzpnOps6lzpvOm86ZIM6TzqHOlc6SzpXOnc6pzp0sIM6mzpXOm86bzpnOnyDOk86hzpXOks6Vzp3Oqc6dJywgUHJlZmVjdHVyZTogJ86Tz4HOtc6yzrXOvc+Ozr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzUxMjAwJywgQXJlYTogJ86RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOlM6VzqPOms6RzqTOl86jIM6TzqHOlc6SzpXOnc6pzp0sIM6TzpfOm86fzqbOn86jIM6TzqHOlc6SzpXOnc6pzp0sIM6UzpHOo86fzqfOqc6hzpkgzpPOoc6VzpLOlc6dzqnOnSwgzpTOlc6jzprOkc6kzpcgzpPOoc6VzpLOlc6dzqnOnSwgzpTOmc6RzqPOlc6bzpvOkc6azpkgzpPOoc6VzpLOlc6dzqnOnSwgzpzOn86dzpcgzpHOk0lPWSDOnc6ZzprOkc6dzp/Ooc6fzqMgzpPOoc6VzpLOlc6dzqnOnSwgzqDOkc6bzpnOn86lzqHOmc6RIM6TzqHOlc6SzpXOnc6pzp0sIM6gzpHOnc6RzpPOmc6RIM6TzqHOlc6SzpXOnc6pzp0sIM6gzpHOoc6RzqPOms6VzqXOlyDOk86hzpXOks6Vzp3Oqc6dLCDOo86azp/Opc6czqTOo86ZzpEgzpPOoc6VzpLOlc6dzqnOnScsIFByZWZlY3R1cmU6ICfOk8+BzrXOss61zr3Pjs69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2NjAzMScsIEFyZWE6ICfOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lSCDOlM6hzpHOnM6RzqMsIM6azpHOm86RzpzOoM6RzprOmSDOlM6hzpHOnM6RzqMsIM6azpHOm86RzpzOqc6dIM6UzqHOkc6czpHOoywgzp3Olc6hzp/Ops6hzpHOms6kzpfOoyDOlM6hzpHOnM6RzqMsIM6mzqTOlc6bzpnOkSDOlM6hzpHOnM6RzqMnLCBQcmVmZWN0dXJlOiAnzpTPgc6szrzOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2NjAzMicsIEFyZWE6ICfOkc6Tzp/OoUEgzpTOoc6RzpzOkc6jLCDOkc6ZzpPOlc6ZzqHOn86jIM6UzqHOkc6czpHOoywgzpHOnc6pIM6azpXOps6RzpvOkc6hzpkgzpTOoc6RzpzOkc6jLCDOks6RzpjOpc6jzqDOl86bzp8gzpTOoc6RzpzOkc6jLCDOks6RzpjOpc6nzqnOoc6ZIM6UzqHOkc6czpHOoywgzpXOpc6hzqXOoM6VzpTOnyDOlM6hzpHOnM6RzqMsIM6azpHOpM6pIM6azpXOps6RzpvOkc6hzpkgzpTOoc6RzpzOkc6jLCDOms6lzqHOmc6RIM6UzqHOkc6czpHOoywgzqDOlc6hzpnOo86kzpXOoc6ZzpEgzpTOoc6RzpzOkc6jLCDOoM6XzpPOkc6UzpnOkSDOlM6hzpHOnM6RzqMsIM6lzqjOl86bzp8gzpTOoc6RzpzOkc6jJywgUHJlZmVjdHVyZTogJ86Uz4HOrM68zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjYwMzMnLCBBcmVhOiAnzpHOk86Zzp/OoyDOnM6Xzp3Okc6jIM6UzqHOkc6czpHOoywgzpHOp86bzpHOlM6ZzpEgzpTOoc6RzpzOkc6jLCDOkc6nzpvOkc6Uzp/OnM6XzpvOlc6RIM6UzqHOkc6czpHOoywgzpLOkc6YzqXOpM6fzqDOn86jIM6UzqHOkc6czpHOoywgzpLOqc6bzpHOniDOlM6hzpHOnM6RzqMsIM6TzqHOkc6dzpnOpM6XzqMgzpTOoc6RzpzOkc6jLCDOlM6RzqPOqc6kzp8gzpTOoc6RzpzOkc6jLCDOlM6VzpvOpM6RIM6UzqHOkc6czpHOoywgzpXOns6fzqfOlyDOlM6hzpHOnM6RzqMsIM6azpHOpM6RzqPOms6Xzp3Oqc6jzpXOmc6jIM6UzqHOkc6czpHOoywgzprOkc6kzpHOps6lzqTOnyDOlM6hzpHOnM6RzqMsIM6azpHOpM6pIM6SzqHOn86dzqTOn86lIM6UzqHOkc6czpHOoywgzprOkc6kzqkgzp3Olc6lzqHOn86azp/OoM6ZIM6UzqHOkc6czpHOoywgzpvOlc6lzprOn86TzpXOmc6RIM6UzqHOkc6czpHOoywgzpzOmc6azqHOn86azpvOlc6ZzqPOn86lzqHOkSDOlM6hzpHOnM6RzqMsIM6czpnOms6hzp/OnM6XzpvOlc6RIM6UzqHOkc6czpHOoywgzp/Op86lzqHOnyDOlM6hzpHOnM6RzqMsIM6gzpHOk86fzp3Olc6hzpkgzpTOoc6RzpzOkc6jLCDOoM6VzqHOkc6jzpzOkSDOlM6hzpHOnM6RzqMsIM6gzpXOoc6ZzpjOqc6hzpkgzpTOoc6RzpzOkc6jLCDOoM6VzqHOmc6nzqnOoc6RIM6UzqHOkc6czpHOoywgzqDOn86kzpHOnM6fzpkgzpTOoc6RzpzOkc6jLCDOp86hzqXOo86fzprOlc6mzpHOm86fzqMgzpTOoc6RzpzOkc6jJywgUHJlZmVjdHVyZTogJ86Uz4HOrM68zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjYwMzUnLCBBcmVhOiAnzpHOl86Uzp/Onc6fzprOkc6jzqTOoc6fIM6UzqHOkc6czpHOoywgzpTOmc6gzp/OpM6RzpzOkSDOlM6hzpHOnM6RzqMsIM6UzqHOpc6czpnOkSDOns6Rzp3OmM6XzqMsIM6Yzp/Om86fzqMgzpTOoc6RzpzOkc6jLCDOms6RzqDOnc6fzqbOpc6kzp8gzpTOoc6RzpzOkc6jLCDOms6RzqHOoM6fzqbOn86hzp8gzpTOoc6RzpzOkc6jLCDOms6RzqTOqSDOmM6fzpvOn86jIM6UzqHOkc6czpHOoywgzprOoc6Xzp3OlyDOlM6hzpHOnM6RzqMsIM6czpXOo86fzqfOqc6hzpkgzpTOoc6RzpzOkc6jLCDOnM6lzqHOpM6fzqXOo86RIM6ezpHOnc6YzpfOoywgzp7Okc6Tzp3Okc6dzqTOnyDOlM6hzpHOnM6RzqMsIM6gzpHOoc6Rzp3Olc6jzqTOmSDOlM6hzpHOnM6RzqMsIM6gzpHOo86nzpHOm86ZzpEgzp7Okc6dzpjOl86jLCDOoM6VzqHOmc6SzpvOlc6gzqTOnyDOlM6hzpHOnM6RzqMsIM6gzp/Om86lzp3Olc6hzpnOnyDOlM6hzpHOnM6RzqMsIM6gzp/Om86lzqPOpc6azp8gzpTOoc6RzpzOkc6jLCDOoM6hzpHOo86Zzp3Okc6UzpEgzpTOoc6RzpzOkc6jLCDOo86ZzpvOm86XIM6UzqHOkc6czpHOoywgzqPOpM6VzqHOnc6RIM6UzqHOkc6czpHOoywgzqTOlc6czpXOnc6fzqMgzpTOoc6RzpzOkc6jLCDOp86RzpvOlc6gzpkgzp7Okc6dzpjOl86jJywgUHJlZmVjdHVyZTogJ86Uz4HOrM68zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjYxMDAnLCBBcmVhOiAnzpHOlM6hzpnOkc6dzpcgzpTOoc6RzpzOkc6jLCDOkc6czqDOlc6bzpHOms6ZzpEgzpTOoc6RzpzOkc6jLCDOkc6hzpPOpc6hzp/Opc6gzp/Om0ggzpTOoc6RzpzOkc6jLCDOks6RzpjOpc6bzpHOms6azp/OoyDOlM6hzpHOnM6RzqMsIM6UzqHOkc6czpEgzpTOoc6RzpzOkc6jLCDOms6RzpvOm86ZzqbOpc6kzp/OoyDOlM6hzpHOnM6RzqMsIM6azpHOm86fzqMgzpHOk86hzp/OoyDOlM6hzpHOnM6RzqMsIM6azp/Opc6Uzp/Opc6dzpnOkSDOlM6hzpHOnM6RzqMsIM6czpHOms6hzqXOoM6bzpHOk86Zzp8gzpTOoc6RzpzOkc6jLCDOnM6RzqXOoc6fzpLOkc6kzp/OoyDOlM6hzpHOnM6RzqMsIM6czpXOk86RzpvOn86azpHOnM6gzp/OoyDOlM6hzpHOnM6RzqMsIM6czpXOpM6RzpzOn86hzqbOqc6jzpcgzqPOqc6kzpfOoc6fzqMgzpTOoc6RzpzOkc6jLCDOnM6ZzprOoc6fzprOkc6czqDOn86jIM6UzqHOkc6czpHOoywgzpzOmc6azqHOn86nzqnOoc6ZIM6UzqHOkc6czpHOoywgzpzOn86dzpHOo86kzpfOoc6RzprOmSDOlM6hzpHOnM6RzqMsIM6czqXOm86fzqDOn86kzpHOnM6fzqMgzpTOoc6RzpzOkc6jLCDOnUXOkSDOo86VzpLOkc6jzqTOlc6ZzpEgzpTOoc6RzpzOkc6jLCDOnc6ZzprOn86kzqPOkc6hzpEgzpTOoc6RzpzOkc6jLCDOns6XzqHOn86gzp/OpM6RzpzOn86jIM6UzqHOkc6czpHOoywgzqDOkc6dzp/Ooc6RzpzOkSDOms6RzpvOm86ZzqbOpc6kzp/OpSDOlM6hzpHOnM6RzqMsIM6gzpXOpM6hzp/Opc6jzpEgzpTOoc6RzpzOkc6jLCDOoM6fzpvOpc6azpHOoc6gzp/OoyDOlM6hzpHOnM6RzqMsIM6gzqXOoc6Tzp/OmSDOlM6hzpHOnM6RzqMsIM6jzpnOpM6RzpPOoc6fzpkgzpTOoc6RzpzOkc6jLCDOo86kzpHOpc6hzp/OoyDOlM6hzpHOnM6RzqMsIM6kzpHOns6ZzpHOoc6nzpXOoyDOlM6hzpHOnM6RzqMsIM6nzqnOoc6ZzqPOpM6XIM6UzqHOkc6czpHOoycsIFByZWZlY3R1cmU6ICfOlM+BzqzOvM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzY2MjAwJywgQXJlYTogJ86RzpPOk86ZzqTOl86jIM6UzqHOkc6czpHOoywgzpHOnc6Yzp/Op86pzqHOmSDOlM6hzpHOnM6RzqMsIM6TzqHOkc6czpzOlc6dzpcgzpTOoc6RzpzOkc6jLCDOms6RzpvOlyDOks6hzqXOo86XIM6UzqHOkc6czpHOoywgzprOkc6bzpvOmc6YzpXOkSDOlM6hzpHOnM6RzqMsIM6azp/Oms6azpnOnc6fzpPOlc6ZzpEgzpTOoc6RzpzOkc6jLCDOoM6XzpPOlc6jIM6UzqHOkc6czpHOoywgzqDOoc6fzqPOn86kzqPOkc6dzpcgzpTOoc6RzpzOkc6jLCDOp86RzqHOmc6kzqnOnM6Vzp3OlyDOlM6hzpHOnM6RzqMnLCBQcmVmZWN0dXJlOiAnzpTPgc6szrzOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2NjMwMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6RzphBzp3Okc6jzpnOn86jIM6UzqHOkc6czpHOoywgzpTOn86ezpHOpM6fIM6UzqHOkc6czpHOoycsIFByZWZlY3R1cmU6ICfOlM+BzqzOvM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg1MDAxJywgQXJlYTogJ86TzpvOkc6hzp/OoyDOkc6TzpHOmM6fzp3Ol86jzpnOn86lIM6jzpHOnM6fzqUsIM6azp/Opc6dzpXOm86ZIM6dzpfOo86fzqMgzqPOkc6czp/OpSwgzpvOlc6ZzqjOn86ZIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6VzpPOkc6bzp8gzqfOqc6hzpnOnyDOkc6TzpHOmM6fzp3Ol86jzpnOn86lIM6jzpHOnM6fzqUsIM6czpnOms6hzp8gzqfOqc6hzpnOnyDOkc6TzpHOmM6fzp3Ol86jzpnOn86lIM6jzpHOnM6fzqUsIM6dzpXOoc6RIM6RzpPOkc6Yzp/Onc6XzqPOmc6fzqUgzqPOkc6czp/OpSwgzqbOoc6RzpPOms6fzqMgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqjOkc6Yzp/Onc6XzqPOmSDOo86RzpzOn86lJywgUHJlZmVjdHVyZTogJ86Uz4nOtM61zrrOsc69zq7Pg86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg1MDAyJywgQXJlYTogJ86RzpPOmc6fzqMgzpHOnc6kzqnOnc6Zzp/OoyDOpM6XzpvOn86lIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6dzqTOmc6kzpfOm86fzqMgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzpPOkc6ZzpTOkc6hzp/OoyDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOm86ZzpLOkc6UzpnOkSDOpM6XzpvOn86lIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6VzpPOkc6bzp8gzqfOqc6hzpnOnyDOpM6XzpvOn86lIM6UzqnOlC/Onc6XzqPOn86lJywgUHJlZmVjdHVyZTogJ86Uz4nOtM61zrrOsc69zq7Pg86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg1MDAzJywgQXJlYTogJ86RzpPOkc6Yzp/Onc6XzqPOmc6fzqUgzpTOqc6UzpXOms6Rzp3Ol86jzp/OpScsIFByZWZlY3R1cmU6ICfOlM+JzrTOtc66zrHOvc6uz4POv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NTEwMCcsIEFyZWE6ICfOkc6czpzOn86lzpTOlc6jIM6UzqnOlC/Onc6XzqPOn86lLCDOks6hzqXOo86ZzpEgzpTOqc6UL86dzpfOo86fzqUsIM6azp/Oo86azpnOnc6fzqUgzpTOqc6UL86dzpfOo86fzqUsIM6azqHOl86kzpnOms6RIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6RzprOoc6lIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6hzp/OlM6fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6jzpPOn86lzqHOn86lIM6UzqnOlC/Onc6XzqPOn86lLCDOpM6jzpHOmc6hzpkgzpTOqc6UL86dzpfOo86fzqUsIM6mzpHOm86XzqHOkc6azpkgzpTOqc6UL86dzpfOo86fzqUsIM6nzpfOnc6RIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6ozpnOnc6Yzp/OoyDOlM6pzpQvzp3Ol86jzp/OpScsIFByZWZlY3R1cmU6ICfOlM+JzrTOtc66zrHOvc6uz4POv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NTEwMScsIEFyZWE6ICfOmc6RzpvOpc6jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpScsIFByZWZlY3R1cmU6ICfOlM+JzrTOtc66zrHOvc6uz4POv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NTEwMicsIEFyZWE6ICfOkc6hzqfOkc6TzpPOlc6bzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzprOkc6bzpHOmM6fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6azp/Om86lzpzOoM6ZzpEgzpTOqc6UL86dzpfOo86fzqUsIM6czpHOm86pzp0gzpTOqc6UL86dzpfOo86fzqUsIM6czpHOo86RzqHOlyDOlM6pzpQvzp3Ol86jzp/OpSwgzpzOn86dzpHOo86kzpfOoc6ZIM6XIM6kzqPOkc6czqDOmc6azpEgzpTOqc6UL86dzpfOo86fzqUsIM6jzqTOlc6Tzp3OkSDOlM6pzpQvzp3Ol86jzp/OpSwgzqfOkc6hzpHOms6ZIM6UzqnOlC/Onc6XzqPOn86lJywgUHJlZmVjdHVyZTogJ86Uz4nOtM61zrrOsc69zq7Pg86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg1MTAzJywgQXJlYTogJ86RzqbOkc6dzqTOn86lIM6UzqnOlC/Onc6XzqPOn86lJywgUHJlZmVjdHVyZTogJ86Uz4nOtM61zrrOsc69zq7Pg86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg1MTA0JywgQXJlYTogJ86azqHOlc6czpHOo86kzpcgzpTOqc6UL86dzpfOo86fzqUnLCBQcmVmZWN0dXJlOiAnzpTPic60zrXOus6xzr3Ors+Dzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODUxMDUnLCBBcmVhOiAnzprOkc6bzqXOmM6ZzpXOoyDOlM6pzpQvzp3Ol86jzp/OpSwgzpvOkc6UzpnOms6fIM6UzqnOlC/Onc6XzqPOn86lJywgUHJlZmVjdHVyZTogJ86Uz4nOtM61zrrOsc69zq7Pg86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg1MTA2JywgQXJlYTogJ86RzpPOmc6RIM6VzpvOlc6fzqXOo86RIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6VzqHOn86bzpnOnM6Vzp3Okc6jIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6gzp/Om86bzqnOnc6RIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6hzqfOmc6gzp/Om86XIM6UzqnOlC/Onc6XzqPOn86lLCDOks6RzpPOmc6VzqMgzpTOqc6UL86dzpfOo86fzqUsIM6UzpHOnM6RzqTOoc6ZzpEgzpTOqc6UL86dzpfOo86fzqUsIM6UzpnOnM6lzpvOmc6RIM6UzqnOlC/Onc6XzqPOn86lLCDOlc6bzpXOn86lzqPOkSDOlM6pzpQvzp3Ol86jzp/OpSwgzpXOoM6Rzp3OqSDOms6RzpvOkc6czqnOnc6RzqMgzpTOqc6UL86dzpfOo86fzqUsIM6YzpXOn86bzp/Ok86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6azpHOm86RzpLOkc6hzpTOkSDOlM6pzpQvzp3Ol86jzp/OpSwgzprOkc6gzpnOnyDOlM6pzpQvzp3Ol86jzp/OpSwgzprOkc6kzqkgzprOkc6bzpHOnM6pzp0gzpTOqc6UL86dzpfOo86fzqUsIM6czpHOoc6ZzqTOo86RIM6UzqnOlC/Onc6XzqPOn86lLCDOoM6RzqHOkc6UzpXOmc6jzpkgzpTOqc6UL86dzpfOo86fzqUsIM6gzpHOo86kzpnOlM6RIM6UzqnOlC/Onc6XzqPOn86lLCDOoM6bzpHOpM6Rzp3Omc6RICDOlM6pzpQvzp3Ol86jzp/OpSwgzqDOoc6fzqbOl86kzpfOoyDOl86bzpnOkc6jIM6UzqnOlC/Onc6XzqPOn86lLCDOo86RzpvOkc6azp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqPOn86hzqnOnc6XIM6UzqnOlC/Onc6XzqPOn86lLCDOps6Rzp3Olc6jIM6UzqnOlC/Onc6XzqPOn86lJywgUHJlZmVjdHVyZTogJ86Uz4nOtM61zrrOsc69zq7Pg86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg1MTA3JywgQXJlYTogJ86SzpvOmc6nzpEgzpTOqc6UL86dzpfOo86fzqUsIM6bzpnOnc6Uzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqDOlc6lzprOn86ZIM6UzqnOlC/Onc6XzqPOn86lJywgUHJlZmVjdHVyZTogJ86Uz4nOtM61zrrOsc69zq7Pg86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg1MTA4JywgQXJlYTogJ86RzpPOmc6fzqMgzpnOo86ZzpTOqc6hzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzpXOnM6gzqnOnc6RzqMgzpTOqc6UL86dzpfOo86fzqUsIM6azpHOnM6VzpnOoc6fzqMgzqPOms6RzpvOkSDOlM6pzpQvzp3Ol86jzp/OpSwgzprOoc6XzqTOl86dzpnOkSDOlM6pzpQvzp3Ol86jzp/OpSwgzpvOkc6azprOmSDOoc6fzpTOn86lIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6Rzp3OlM6hzpnOms6fIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6fzp3On86bzpnOmM6fzqMgIM6UzqnOlC/Onc6XzqPOn86lLCDOo86ZzpHOnc6RIM6UzqnOlC/Onc6XzqPOn86lJywgUHJlZmVjdHVyZTogJ86Uz4nOtM61zrrOsc69zq7Pg86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg1MTA5JywgQXJlYTogJ86RzpPOmc6fzqMgzqDOkc6lzpvOn86jIM6azpHOpM6kzpHOks6ZzpHOoyDOlM6pzpQvzp3Ol86jzp/OpSwgzpHOoM6fzpvOkc6azprOmc6RIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6hzp3Omc6YzpEgzpTOqc6UL86dzpfOo86fzqUsIM6RzqPOms6bzpfOoM6ZzpXOmc6fIM6UzqnOlC/Onc6XzqPOn86lLCDOks6RzqTOmSDOlM6pzpQvzp3Ol86jzp/OpSwgzpPOlc6dzp3Okc6UzpnOnyDOlM6pzpQvzp3Ol86jzp/OpSwgzpnOo86kzqHOmc6fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6azpHOpM6kzpHOks6ZzpEgzpTOqc6UL86dzpfOo86fzqUsIM6azpnOn86kzpHOoc6ZIM6UzqnOlC/Onc6XzqPOn86lLCDOm86RzpXOoc6czpEgzpTOqc6UL86dzpfOo86fzqUsIM6bzpHOoc6Uzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzpvOkc6nzpHOnc6ZzpEgzpTOqc6UL86dzpfOo86fzqUsIM6czpHOp86RzpnOoc6ZzpEgzpTOqc6UL86dzpfOo86fzqUsIM6czpXOo86Rzp3Okc6TzqHOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOoM6bzpfOnM6czqXOoc6ZIM6UzqnOlC/Onc6XzqPOn86lLCDOoM6hzpHOo86fzp3Ol86jzpkgzpTOqc6UL86dzpfOo86fzqUsIM6gzqHOn86mzpnOm86ZzpEgzpTOqc6UL86dzpfOo86fzqUsIM6gzqXOm86pzp3Okc6jIM6UzqnOlC/Onc6XzqPOn86lJywgUHJlZmVjdHVyZTogJ86Uz4nOtM61zrrOsc69zq7Pg86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg1MTEwJywgQXJlYTogJ86RzpPOmc6fzqMgzpjOlc6fzpTOqc6hzp/OoyDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6bzpnOnM6ZzpEgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzprOoc6VzpLOkc6kzpnOkSDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6RzpXOm86fzp3Ol86jzpkgzqfOkc6bzprOl86jIM6UzqnOlC/Onc6XzqPOn86lLCDOpM6hzpHOk86fzqXOo86RIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6nzpHOm86azpcgzpTOqc6UL86dzpfOo86fzqUsIM6nzqnOoc6Zzp8gzqfOkc6bzprOl86jIM6UzqnOlC/Onc6XzqPOn86lJywgUHJlZmVjdHVyZTogJ86Uz4nOtM61zrrOsc69zq7Pg86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg1MTExJywgQXJlYTogJ86RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6TzqHOmc6VzpvOkc6ZzpEgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzprOkc6jzqTOlc6bzp/Ooc6ZzpbOnyAozpzOlc6TzpnOo86kzpcpIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6RzqXOoc6fIM6gzp/Omc6dzpkgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqDOn86bzqXOps6RzpTOn86jIM6UzqXOnyDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOoM6fzpvOpc6mzpHOlM6fzqMgzpXOnc6RIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6hzqkgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqPOpM6hzp/Ok86TzqXOm86XIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6ozqnOnM6ZIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUnLCBQcmVmZWN0dXJlOiAnzpTPic60zrXOus6xzr3Ors+Dzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODUyMDAnLCBBcmVhOiAnzpHOoc6TzpnOnc6pzp3OpM6RIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6hzpPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6hzpzOlc6fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6SzpHOmM6lIM6azpHOm86lzpzOnc6fzqUgzpTOqc6UL86dzpfOo86fzqUsIM6SzpvOpc6nzpHOlM6ZzpEgzpTOqc6UL86dzpfOo86fzqUsIM6Szp/OmM6lzp3On86ZIM6UzqnOlC/Onc6XzqPOn86lLCDOlc6czqDOn86hzpXOmc6fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6ZzpzOmc6RIC0gzpvOmc6czp3Omc6RIM6UzqXOnyAozp3Ol86jzp/OoykgzpTOqc6UL86dzpfOo86fzqUsIM6ZzpzOmc6RIC0gzpvOmc6czp3Omc6RIM6Vzp3OkSAozp3Ol86jzp/OoykgzpTOqc6UL86dzpfOo86fzqUsIM6azpHOm86fzpvOmc6czp3On86jIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6azpHOm86lzpzOnc6fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6azpHOnM6RzqHOmSDOlM6pzpQvzp3Ol86jzp/OpSwgzprOkc6jzqTOlc6bzpkgzpTOqc6UL86dzpfOo86fzqUsIM6czpHOo86fzqXOoc6ZIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6RzqXOoc6RIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6czpHOpc6hzp/OoM6Zzp3Okc6azpkgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzpzOpc6hzqTOmc6VzqMgzpTOqc6UL86dzpfOo86fzqUsIM6dzpXOoc6RIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6gzpHOnc6fzqHOnM6fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6gzpvOkc6kzpHOnc6fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6gzpvOkc6kzpcgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqPOkc6mzp/Onc6XzpTOmSDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOo86azpHOm86ZzpEgzpTOqc6UL86dzpfOo86fzqUsIM6kzpXOm86Vzp3OlM6fzqMgIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6nzqTOlc6dzpkgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqfOqc6hzpnOnyDOlM6pzpQvzp3Ol86jzp/OpSwgzqjOlc6hzpnOnM6fzqMgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpScsIFByZWZlY3R1cmU6ICfOlM+JzrTOtc66zrHOvc6uz4POv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NTMwMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzpHOk86Zzp/OoyDOps6pzprOkc6jIM6azqkgzpTOqc6UL86dzpfOo86fzqUsIM6RzqPOps6Vzp3OlM6Zzp/OpSDOlM6pzpQvzp3Ol86jzp/OpSwgzpbOl86gzpHOoc6ZIM6UzqnOlC/Onc6XzqPOn86lLCDOms6pzqMgzpTOqc6UL86dzpfOo86fzqUsIM6bzpHOk86fzqXOlM6ZLc6WzpnOkSDOlM6pzpQvzp3Ol86jzp/OpSwgzpvOmc6dzp/OoM6fzqTOl86jIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6RzqHOnM6RzqHOmSDOlM6pzpQvzp3Ol86jzp/OpSwgzqDOpc6bzpnOnyDOlM6pzpQvzp3Ol86jzp/OpSwgzqPOpc6czqDOlc6dzqTOoc6fLc6hzpHOnc6kzpHOoSDOlM6pzpQvzp3Ol86jzp/OpSwgzqTOmc6TzprOkc6azpkgzpTOqc6UL86dzpfOo86fzqUnLCBQcmVmZWN0dXJlOiAnzpTPic60zrXOus6xzr3Ors+Dzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODUzMDEnLCBBcmVhOiAnzpHOk86Zzp/OoyDOo86kzpXOps6Rzp3On86jIM6UzqnOlC/Onc6XzqPOn86lLCDOms6RzpzOkc6hzpkgzpTOqc6UL86dzpfOo86fzqUsIM6azpXOps6RzpvOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOm86ZzpzOnc6ZzqnOnc6RIM6UzqnOlC/Onc6XzqPOn86lLCDOn86dzpnOkSDOlM6pzpQvzp3Ol86jzp/OpScsIFByZWZlY3R1cmU6ICfOlM+JzrTOtc66zrHOvc6uz4POv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NTMwMicsIEFyZWE6ICfOkc6dzqTOmc6czpHOp86VzpnOkSDOlM6pzpQvzp3Ol86jzp/OpSwgzpHOpM6czpHOnc6Zzp/OpSDOlM6pzpQvzp3Ol86jzp/OpSwgzprOkc6czqDOn86jIM6azqkgzpTOqc6UL86dzpfOo86fzqUsIM6azpHOoc6UzpHOnM6RzpnOnc6RIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6RzqPOpM6ZzqfOkc6hzpkgzpTOqc6UL86dzpfOo86fzqUnLCBQcmVmZWN0dXJlOiAnzpTPic60zrXOus6xzr3Ors+Dzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODUzMDMnLCBBcmVhOiAnzpHOpc6bzpHOms6ZIM6dzpnOo86lzqHOn86lIM6UzqnOlC/Onc6XzqPOn86lLCDOk86lzpHOm86ZIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6VzpzOoM6fzqHOlc6Zzp/OoyDOnc6ZzqPOpc6hzp/OpSDOlM6pzpQvzp3Ol86jzp/OpSwgzprOkc6dzpTOlc6bzpnOn86lzqPOo86RIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6bzp/Opc6kzqHOkSDOnc6ZzqPOpc6hzp/OpSDOlM6pzpQvzp3Ol86jzp/OpSwgzpzOkc6dzpTOoc6RzprOmSDOnc6ZzqPOpc6hzp/OpSDOlM6pzpQvzp3Ol86jzp/OpSwgzp3Omc6azpnOkSDOnc6ZzqPOpc6hzp/OpSDOlM6pzpQvzp3Ol86jzp/OpSwgzqDOkc6bzp/OmSDOnc6ZzqPOpc6hzp/OpSDOlM6pzpQvzp3Ol86jzp/OpSwgzqDOkc6nzpXOmc6RIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6gzpXOoc6Tzp/Opc6jzqPOkSDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOo86kzqHOn86TzpPOpc6bzpcgzp3Omc6jzqXOoc6fzqUgzpTOqc6UL86dzpfOo86fzqUnLCBQcmVmZWN0dXJlOiAnzpTPic60zrXOus6xzr3Ors+Dzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODU0MDAnLCBBcmVhOiAnzpHOk86ZzpEgzpzOkc6hzpnOnc6RIM6bzpXOoc6fzqUgzpTOqc6UL86dzpfOo86fzqUsIM6RzpvOmc6dzpTOkSDOlM6pzpQvzp3Ol86jzp/OpSwgzpHOoc6nzpHOk86TzpXOm86fzqMgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzpPOm86RzqHOn86jIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6Tzp/Opc6hzp3OkSDOlM6pzpQvzp3Ol86jzp/OpSwgzpTOoc6lzpzOqc6dzpHOoyDOm86VzqHOn86lIM6UzqnOlC/Onc6XzqPOn86lLCDOms6RzpzOkc6hzpEgzpTOqc6UL86dzpfOo86fzqUsIM6azpnOnc6RzqHOn86jIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6azp/Oms6azpHOm86XIM6UzqnOlC/Onc6XzqPOn86lLCDOm86VzpLOmc6YzpEgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqDOkc6hzpjOlc6dzpkgzpTOqc6UL86dzpfOo86fzqUsIM6gzpfOk86Rzp3On86lzqPOo86RIM6UzqnOlC/Onc6XzqPOn86lLCDOoM6bzpHOms6RIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6gzpvOkc6azpXOoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqPOpM6hzp/Ok86TzqXOm86XIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6kzpXOnM6Vzp3Omc6RIM6UzqnOlC/Onc6XzqPOn86lLCDOpM6hzqXOoM6XzqTOlyDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOps6RzqHOnM6RzprOn86dzpfOo86ZIM6UzqnOlC/Onc6XzqPOn86lJywgUHJlZmVjdHVyZTogJ86Uz4nOtM61zrrOsc69zq7Pg86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg1NTAwJywgQXJlYTogJ86RzpPOms6RzpjOn86dzpfOo86ZIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6TzqHOlc6bzp/Opc6jzqPOkSDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6dzqXOlM6hzp8gzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzpHOoc6azp/OmSDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOms6RzpvOn86Szp/Om86fzqMgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzprOn86czpHOoc6fzqMgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzpzOkc6azqHOn86dzpfOo86ZIM6gzpHOpM6czp/OpSDOlM6pzpQvzp3Ol86jzp/OpSwgzp3Olc6hzpEgzqDOkc6kzpzOn86lIM6UzqnOlC/Onc6XzqPOn86lLCDOoM6RzqTOnM6fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6jzprOkc6bzpEgzqDOkc6kzpzOn86lIM6UzqnOlC/Onc6XzqPOn86lLCDOo86kzqHOn86TzpPOpc6bzp8gzqDOkc6kzpzOn86lIM6UzqnOlC/Onc6XzqPOn86lLCDOpM6hzpHOk86fzp3Ol86jzpkgzpTOqc6UL86dzpfOo86fzqUsIM6nzpnOm86Zzp/OnM6fzpTOmSDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lJywgUHJlZmVjdHVyZTogJ86Uz4nOtM61zrrOsc69zq7Pg86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg1NjAwJywgQXJlYTogJ86TzpnOkc6bzpXOo86Zzp3OnyDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOlM6ZzpHOks6RzqTOlc6jIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6VzpzOoM6fzqHOlc6Zzp/OoyDOo86lzpzOl86jICAozp3Ol86czqDOn86hzpnOn86jKSDOlM6pzpQvzp3Ol86jzp/OpSwgzprOn86lzpvOn86lzp3OlM6hzp/OoyDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6RzqHOkc6Yzp/Opc6dzqTOkSDOo86lzpzOl86jIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6RzqHOnM6RzqHOkc6jIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6dzpnOnM6fzqMgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzp7Omc6jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqDOkc6dzp/Ooc6czpnOpM6XzqMgzqPOpc6czpfOoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqDOlc6UzpnOnyDOo86lzpzOl86jIM6UzqnOlC/Onc6XzqPOn86lLCDOo86VzqPOms6bzpnOnyDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOo86lzpzOlyDOlM6pzpQvzp3Ol86jzp/OpSwgzqfOn86dzpTOoc6fzqMgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpScsIFByZWZlY3R1cmU6ICfOlM+JzrTOtc66zrHOvc6uz4POv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NTcwMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6RzqbOmc6RzqHOpM6XzqMgzpTOqc6UL86dzpfOo86fzqUsIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOo86gzp/Oqc6dIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6gzpXOoc6Zzp8gzpTOqc6UL86dzpfOo86fzqUsIM6RzqHOms6RzqPOkSDOlM6pzpQvzp3Ol86jzp/OpSwgzpHOo86kzpHOms6ZzpTOkSDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6kzqPOkc6azpnOlM6fzqDOn86lzpvOnyDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6lzpvOqc6dzpEgzpTOqc6UL86dzpfOo86fzqUsIM6SzqnOm86RzpTOkSDOlM6pzpQvzp3Ol86jzp/OpSwgzpTOmc6RzqbOkc6dzpnOnyDOlM6pzpQvzp3Ol86jzp/OpSwgzprOkc6hzqDOkc6Yzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzprOkc6kzqkgzpvOlc6lzprOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOms6RzqTOqc6UzpnOnyDOlM6pzpQvzp3Ol86jzp/OpSwgzprOl86gzp/OoyDOkc6mzpnOkc6hzqTOlyDOlM6pzpQvzp3Ol86jzp/OpSwgzprOpc6hzpEgzqDOkc6dzpHOk86ZzpEgzpTOqc6UL86dzpfOo86fzqUsIM6bzpHOms6azpkgzprOkc6hzqDOkc6Yzp/OpSDOlM6pzpQvzp3Ol86jzp/OpSwgzpvOkc6jzqTOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOm86VzqXOms6fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6czpXOnc6VzqTOlc6jIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6VzqPOn86nzqnOoc6ZIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6lzqHOpM6pzp3Okc6jIM6UzqnOlC/Onc6XzqPOn86lLCDOn86Yzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzp/Om86lzpzOoM6fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6gzpfOk86RzpTOmc6RIM6UzqnOlC/Onc6XzqPOn86lLCDOoM6lzpvOlc6jIM6UzqnOlC/Onc6XzqPOn86lLCDOo86RzqHOmc6RIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6jzqDOn86RIM6UzqnOlC/Onc6XzqPOn86lLCDOo86kzpXOoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqTOoc6ZzqPOpM6fzpzOnyDOlM6pzpQvzp3Ol86jzp/OpSwgzqbOn86Zzp3Omc6azpnOnyDOlM6pzpQvzp3Ol86jzp/OpSwgzqfOkc6czpfOm86XIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUnLCBQcmVmZWN0dXJlOiAnzpTPic60zrXOus6xzr3Ors+Dzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODU4MDAnLCBBcmVhOiAnzpHOk86ZzpEgzpzOkc6hzpnOnc6RIM6azpHOo86fzqUgzpTOqc6UL86dzpfOo86fzqUsIM6RzqHOks6Rzp3Omc6kzp/Op86pzqHOmSDOms6RzqPOn86lIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6hzpzOkc6YzpnOkSDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOms6RzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6RzprOoc6fzp3Ol86jzpkgzprOkc6jzp/OpSDOlM6pzpQvzp3Ol86jzp/OpSwgzqDOkc6dzpHOk86ZzpEgzprOkc6jzp/OpSDOlM6pzpQvzp3Ol86jzp/OpSwgzqDOn86bzpnOnyDOms6RzqPOn86lIM6UzqnOlC/Onc6XzqPOn86lLCDOps6hzqUgzpTOqc6UL86dzpfOo86fzqUnLCBQcmVmZWN0dXJlOiAnzpTPic60zrXOus6xzr3Ors+Dzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODU5MDAnLCBBcmVhOiAnzpHOk86ZzpEgzprOpc6hzpnOkc6azpcgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzpHOnc6RzpvOl86ozpcgzpTOqc6UL86dzpfOo86fzqUsIM6RzqPOpM6lzqDOkc6bzpHOmc6RIM6UzqnOlC/Onc6XzqPOn86lLCDOkc6lzpPOnyDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOks6RzpjOpSDOkc6jzqTOpc6gzpHOm86RzpnOkc6jIM6UzqnOlC/Onc6XzqPOn86lLCDOk86bzqXOnc6fIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6WzpHOps6fzqHOkc6jIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6azp/Opc6dzp/Opc6gzp/OmSDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOms6fzqXOpM6jzp/OnM6lzqTOmSDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOm86ZzpLOkc6UzpnOkSDOkc6jzqTOpc6gzpHOm86RzpnOkc6jIM6UzqnOlC/Onc6XzqPOn86lLCDOnM6VzqPOn86dzpfOo86ZIM6UzqnOlC/Onc6XzqPOn86lLCDOn86mzpnOlM6fzqXOo86jzpEgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqDOm86RzprOmc6UzpEgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqDOn86dzqTOmc6azp/Opc6jzpEgzpTOqc6UL86dzpfOo86fzqUsIM6jzqTOlc6mzpHOnc6ZzpEgzp3Ol86jzp/OoyDOlM6pzpQvzp3Ol86jzp/OpSwgzqPOpc6hzp3OkSDOnc6XzqPOn86jIM6UzqnOlC/Onc6XzqPOn86lLCDOps6pzprOmc6fzp3Ol86jzpnOkSDOlM6pzpQvzp3Ol86jzp/OpSwgzqfOn86dzpTOoc6fIM6dzpfOo86fzqMgzpTOqc6UL86dzpfOo86fzqUsIM6nzp/Onc6UzqHOn86dzpfOo86ZIM6UzqnOlC/Onc6XzqPOn86lJywgUHJlZmVjdHVyZTogJ86Uz4nOtM61zrrOsc69zq7Pg86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzY4MDAxJywgQXJlYTogJ86dRc6RIM6SzqXOo86jzpEgzpXOks6hzp/OpScsIFByZWZlY3R1cmU6ICfOiM6yz4HOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2ODAwMicsIEFyZWE6ICfOkc6bzqnOnc6ZzpEgzpXOks6hzp/OpSwgzpHOnc6pIM6azpHOoc6lzqnOpM6VzqMgzpXOks6hzp/OpSwgzpHOnc6pIM6czpXOoc6ZzpEgzpXOks6hzp/OpSwgzpTOkc6mzp3Olc6jIM6VzpLOoc6fzqUsIM6YzpXOoc6czpEgzpXOks6hzp/OpSwgzprOkc6czpHOoc6ZzqnOpM6ZzqPOo86RIM6VzpLOoc6fzqUsIM6azpHOo86kzpXOm86ZIM6VzpLOoc6fzqUsIM6azpHOpM6jzpHOnM6gzpHOoyDOlc6SzqHOn86lLCDOms6RzqTOqSDOms6RzqHOpc6pzqTOlc6jIM6VzpLOoc6fzqUsIM6bzpHOms6azqnOnM6RIM6VzpLOoc6fzqUsIM6czpHOms6hzqXOm86ZzpXOoyDOlc6SzqHOn86lLCDOnM6dzpfOnM6fzqHOmc6RIM6VzpLOoc6fzqUsIM6czqDOkc6ezpXOlM6VzqMgzpXOks6hzp/OpSwgzp7Ol86hzp/OoM6fzqTOkc6czp/OoyDOlc6SzqHOn86lLCDOoM6RzpvOkc6Zzp/OoM6fzpvOlyDOlc6SzqHOn86lLCDOoM6fzqTOkc6czpnOkSDOlc6SzqHOn86lLCDOoM6hzp/Ops6XzqTOl86jIM6XzpvOmc6RzqMgzpXOks6hzp/OpSwgzqHOlc6czqDOn86lzqTOo86RzpTOmc6azpEgzpXOks6hzp/OpSwgzqPOkc6czp/OmM6hzpHOms6XIM6VzpLOoc6fzqUnLCBQcmVmZWN0dXJlOiAnzojOss+Bzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjgwMDMnLCBBcmVhOiAnzpvOkc6TzqXOnc6RIM6VzpLOoc6fzqUsIM6bzpXOpc6azpnOnM6XIM6VzpLOoc6fzqUsIM6bzqXOoc6RIM6VzpLOoc6fzqUsIM6gzqHOn86SzpHOpM6pzp3Okc6jIM6VzpLOoc6fzqUsIM6kzqXOp86VzqHOnyDOlc6SzqHOn86lLCDOps6lzpvOkc6azqTOnyDOlc6SzqHOn86lJywgUHJlZmVjdHVyZTogJ86IzrLPgc6/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzY4MDA0JywgQXJlYTogJ86RzpzOn86hzpnOnyDOlc6SzqHOn86lLCDOm86RzpLOkc6hzpEgzpXOks6hzp/OpScsIFByZWZlY3R1cmU6ICfOiM6yz4HOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2ODAwNicsIEFyZWE6ICfOkc6czpzOn86Szp/Opc6dzp8gzpXOks6hzp/OpSwgzpLOkc6bzqTOn86jIM6VzpLOoc6fzqUsIM6TzpHOm86Xzp3OlyDOlc6SzqHOn86lLCDOls6pzp3OlyDOlc6SzqHOn86lLCDOmM6VzqHOkc6gzpXOmc6fIM6VzpLOoc6fzqUsIM6azpXOoc6RzpzOn86jIM6VzpLOoc6fzqUsIM6azp/OnM6RzqHOkSDOlc6SzqHOn86lLCDOms6lzqDOoc6Zzp3On86jIM6VzpLOoc6fzqUsIM6czpXOk86RzpvOlyDOlM6fzp7Omc6gzpHOoc6RIM6VzpLOoc6fzqUsIM6czpfOm86VzpEgzpXOks6hzp/OpSwgzpzOmc6azqHOkSDOlM6fzp7Omc6gzpHOoc6RIM6VzpLOoc6fzqUsIM6mzqXOm86RzprOmc6fIM6VzpLOoc6fzqUsIM6nzpHOnc6UzqHOkc6jIM6VzpLOoc6fzqUsIM6nzpXOm86ZzpTOqc6dzpHOoyDOlc6SzqHOn86lJywgUHJlZmVjdHVyZTogJ86IzrLPgc6/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzY4MDA3JywgQXJlYTogJ86RzqHOls6fzqMgzpXOks6hzp/OpSwgzpTOmc6azpHOmc6RIM6VzpLOoc6fzqUsIM6UzpnOm86fzqbOn86jIM6VzpLOoc6fzqUsIM6VzpvOkc6ZzpEgzpXOks6hzp/OpSwgzprOkc6dzpHOlM6RzqMgzpXOks6hzp/OpSwgzprOoc6Zzp/OoyDOlc6SzqHOn86lLCDOnM6RzqHOkc6jzpnOkSDOlc6SzqHOn86lLCDOn86hzpzOlc6dzpnOnyDOlc6SzqHOn86lLCDOoM6RzpvOm86XIM6VzpLOoc6fzqUsIM6gzpXOnc6kzpHOm86fzqbOn86jIM6VzpLOoc6fzqUsIM6gzpXOpM6hzqnOpM6RIM6VzpLOoc6fzqUsIM6gzpvOkc6kzpcgzpXOks6hzp/OpSwgzqDOpM6VzpvOlc6RIM6VzpLOoc6fzqUsIM6jzqDOl86bzpHOmc6fIM6VzpLOoc6fzqUnLCBQcmVmZWN0dXJlOiAnzojOss+Bzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjgwMDgnLCBBcmVhOiAnzprOkc6jzqTOkc6dzpnOlc6jIM6VzpLOoc6fzqUnLCBQcmVmZWN0dXJlOiAnzojOss+Bzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjgwMTAnLCBBcmVhOiAnzpHOks6UzpXOm86RIM6VzpLOoc6fzqUsIM6RzpvOlc6gzp/Op86pzqHOmSDOlc6SzqHOn86lLCDOkc6jzqDOoc6fzp3Olc6hzpkgzpXOks6hzp/OpSwgzpLOoc6lzqPOlyDOlc6SzqHOn86lLCDOk86ZzpHOpM6hzpHOlM6VzqMgzpXOks6hzp/OpSwgzpTOn86ezpEgzpXOks6hzp/OpSwgzpXOm86RzqbOn86nzqnOoc6ZIM6VzpLOoc6fzqUsIM6bzpHOlM6XIM6VzpLOoc6fzqUsIM6czpXOpM6Rzp7Okc6UzpXOoyDOlc6SzqHOn86lLCDOoM6RzpvOmc6fzqXOoc6Zzp8gzpXOks6hzp/OpSwgzqDOn86bzpnOkSDOlc6SzqHOn86lLCDOo86RzqXOoc6RIM6VzpLOoc6fzqUsIM6nzpnOn86dzpHOlM6VzqMgzpXOks6hzp/OpScsIFByZWZlY3R1cmU6ICfOiM6yz4HOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2ODAxNCcsIEFyZWE6ICfOoc6ZzpbOmc6RIM6VzpLOoc6fzqUnLCBQcmVmZWN0dXJlOiAnzojOss+Bzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjgxMDAnLCBBcmVhOiAnzpHOks6RzqMgzpXOks6hzp/OpSwgzpHOk86dzpHOnc6kzpnOkSDOlc6SzqHOn86lLCDOkc6VzqTOn86nzqnOoc6ZIM6VzpLOoc6fzqUsIM6RzpvOlc6ezpHOnc6UzqHOn86lzqDOn86bzpcgzpXOks6hzp/OpSwgzpHOnM6mzpnOpM6hzpnOpM6XIM6VzpLOoc6fzqUsIM6Rzp3OmM6VzpnOkSDOlc6SzqHOn86lLCDOkc6gzpHOm86fzqMgzpXOks6hzp/OpSwgzpHOoc6ZzqPOpM6Xzp3OnyDOlc6SzqHOn86lLCDOlM6ZzprOlc6bzpvOkSDOlc6SzqHOn86lLCDOlM6pzqHOmc6azp8gzpXOks6hzp/OpSwgzpXOnc6dzpHOpM6fIM6VzpLOoc6fzqUsIM6azp/Omc6czpfOo86XIM6YzpXOn86kzp/Oms6fzqUgzpXOks6hzp/OpSwgzpvOn86lzqTOoc6RIM6kzqHOkc6ZzpHOnc6fzqXOoM6fzpvOl86jIM6VzpLOoc6fzqUsIM6bzp/Opc6kzqHOn86jIM6VzpLOoc6fzqUsIM6czpHOms6hzpcgzpXOks6hzp/OpSwgzpzOlc6jzpfOnM6SzqHOmc6RIM6VzpLOoc6fzqUsIM6dzpnOqM6RIM6VzpLOoc6fzqUsIM6gzpHOm86RzpPOmc6RIM6VzpLOoc6fzqUsIM6gzpHOnc6fzqHOkc6czpEgzpXOks6hzp/OpSwgzqDOkc6hzpHOm86ZzpEgzpTOmc6azpXOm86bzqnOnSDOlc6SzqHOn86lLCDOoM6VzqXOms6RIM6VzpLOoc6fzqUsIM6gzpvOkc6azpEgzpXOks6hzp/OpScsIFByZWZlY3R1cmU6ICfOiM6yz4HOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2ODIwMCcsIEFyZWE6ICfOkc6czqDOlc6bzpHOms6ZzpEgzpXOks6hzp/OpSwgzprOkc6SzqXOm86XIM6VzpLOoc6fzqUsIM6bzpXOoM6kzpcgzpXOks6hzp/OpSwgzp1Fzp8gzqfOlc6ZzpzOqc6dzpnOnyDOlc6SzqHOn86lLCDOnc6Vzp/OoyDOoM6lzqHOk86fzqMgzpXOks6hzp/OpSwgzp3Olc6fzqfOqc6hzpkgzpXOks6hzp/OpSwgzp/Ooc6VzqPOpM6ZzpHOlM6RIM6VzpLOoc6fzqUsIM6gzpHOm86RzpnOkSDOo86RzpPOl86dzpcgzpXOks6hzp/OpSwgzqDOkc6kzpHOk86XIM6VzpLOoc6fzqUsIM6jzpHOms6azp/OoyDOlc6SzqHOn86lLCDOo86kzpXOoc6dzpEgzpXOks6hzp/OpScsIFByZWZlY3R1cmU6ICfOiM6yz4HOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2ODMwMCcsIEFyZWE6ICfOkc6jzpLOlc6jzqTOkc6UzpXOoyDOlc6SzqHOn86lLCDOkc6jzpfOnM6Vzp3Omc6fIM6VzpLOoc6fzqUsIM6SzqHOpc6jzpnOms6RIM6VzpLOoc6fzqUsIM6UzpnOlM6lzpzOn86kzpXOmc6nTyDOlc6SzqHOn86lLCDOlc6bzpvOl86dzp/Op86pzqHOmSDOlc6SzqHOn86lLCDOlc6lzpPOlc6dzpnOms6fIM6VzpLOoc6fzqUsIM6WzqnOn86Uzp/Op86fzqMgzqDOl86TzpcgzpXOks6hzp/OpSwgzpjOn86lzqHOmc6fIM6VzpLOoc6fzqUsIM6YzqXOoc6VzpEgzpXOks6hzp/OpSwgzpnOo86RzpHOms6Zzp8gzpXOks6hzp/OpSwgzprOkc6hzqnOpM6XIM6VzpLOoc6fzqUsIM6azp/Opc6mzp/Oks6fzqXOnc6fIM6VzpLOoc6fzqUsIM6azqXOkc6dzpcgzpXOks6hzp/OpSwgzpvOkc6Tzp/OoyDOlc6SzqHOn86lLCDOnM6Rzp3OlyDOlc6SzqHOn86lLCDOnc6Vzp/OmSDOqM6RzpjOkc6UzpXOoyDOlc6SzqHOn86lLCDOoM6fzpnOnM6Vzp3Omc6azp8gzpXOks6hzp/OpSwgzqPOmc6kzpHOoc6ZzpEgzpXOks6hzp/OpSwgzqPOmc6kzp/Op86pzqHOmc6fIM6VzpLOoc6fzqUsIM6jzp/Ops6ZzprOnyDOlc6SzqHOn86lJywgUHJlZmVjdHVyZTogJ86IzrLPgc6/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzY4NDAwJywgQXJlYTogJ86RzpPOoc6ZzpHOnc6XIM6VzpLOoc6fzqUsIM6TzpnOkc6dzp3On86lzpvOlyDOlc6SzqHOn86lLCDOlM6RzpTOmc6RIM6VzpLOoc6fzqUsIM6UzqHOn86jzpnOkSDOlc6SzqHOn86lLCDOms6fzqHOnc6fzqbOqc6bzpnOkSDOlc6SzqHOn86lLCDOms6fzqHOpc6czpLOn86jIM6VzpLOoc6fzqUsIM6azp/OpM6hzqnOnc6ZzpEgzpXOks6hzp/OpSwgzprOpc6hzpnOkc6azpcgzpXOks6hzp/OpSwgzpvOpc6azqnOps6fzqMgzpXOks6hzp/OpSwgzpzOkc6dzpTOoc6RIM6VzpLOoc6fzqUsIM6czpHOpc6hzp/Oms6bzpfOo86ZIM6VzpLOoc6fzqUsIM6czp/Onc6XIM6UzpHOlM6ZzpHOoyDOlc6SzqHOn86lLCDOnM6fzp3OlyDOms6fzqHOnc6fzqbOqc6bzpnOkc6jIM6VzpLOoc6fzqUsIM6gzqHOqc6kzp/Oms6bzpfOo86ZIM6VzpLOoc6fzqUsIM6jzpnOlM6XzqHOqSDOlc6SzqHOn86lLCDOo86fzqXOps6bzpkgzpXOks6hzp/OpScsIFByZWZlY3R1cmU6ICfOiM6yz4HOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2ODUwMCcsIEFyZWE6ICfOkc6hzpTOkc6dzpnOnyDOps6VzqHOqc6dIM6VzpLOoc6fzqUsIM6Uzp/Ooc6ZzqPOms6fzqMgzqbOlc6hzqnOnSDOlc6SzqHOn86lLCDOms6RzpLOl86jzp/OoyDOps6VzqHOqc6dIM6VzpLOoc6fzqUsIM6azp/Omc6bzpEgzpXOks6hzp/OpSwgzpzOlc6bzpnOkSDOlc6SzqHOn86lLCDOnM6fzp3Okc6jzqTOl86hzpHOms6ZIM6mzpXOoc6pzp0gzpXOks6hzp/OpSwgzqDOn86hzp/OoyDOps6VzqHOqc6dIM6VzpLOoc6fzqUsIM6gzqXOm86RzpnOkSDOlc6SzqHOn86lLCDOps6VzqHOlc6jIM6VzpLOoc6fzqUnLCBQcmVmZWN0dXJlOiAnzojOss+Bzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzQwMDEnLCBBcmVhOiAnzpHOk86RzpjOnyDOlc6lzpLOn86ZzpHOoywgzpHOk86Zzp/OmSDOlc6lzpLOn86ZzpHOoywgzpHOk86Zzp/OoyDOlM6XzpzOl86kzqHOmc6fzqMgzprOkc6hzqXOo86kzp/OpSDOlc6lzpLOn86ZzpHOoywgzpHOlc6kzp/OoyDOlc6lzpLOn86ZzpHOoywgzpHOms6hzqnOpM6XzqHOmSDOlc6lzpLOn86ZzpHOoywgzpHOnM6lzpPOlM6RzpvOmc6RIM6VzqXOks6fzpnOkc6jLCDOkc6dzqTOmc6RzqMgzpXOpc6Szp/Omc6RzqMsIM6SzqHOkc6nzp/OoyDOlc6lzpLOn86ZzpHOoywgzpPOoc6RzpzOoM6ZzpEgzpXOpc6Szp/Omc6RzqMsIM6UzqHOpc6czp/Onc6RzqHOmSDOlc6lzpLOn86ZzpHOoywgzpXOm86RzpnOqc6dIM6VzqXOks6fzpnOkc6jLCDOlc6gzpHOnc6pzqfOqc6hzpkgzpXOpc6Szp/Omc6RzqMsIM6VzqXOkc6TzpPOlc6bzpnOo86czp/OoyDOlc6lzpLOn86ZzpHOoywgzpbOkc6hzpzOoM6fzqXOpM6RzpnOqs6azpEgzpXOpc6Szp/Omc6RzqMsIM6WzpHOp86RzqHOmc6RIM6VzqXOks6fzpnOkc6jLCDOmM6lzpzOmc6fIM6VzqXOks6fzpnOkc6jLCDOms6RzpvOlc6hzpPOnyDOlc6lzpLOn86ZzpHOoywgzprOkc6bzpvOmc6Rzp3On86jIM6VzqXOks6fzpnOkc6jLCDOms6RzpvOpc6SzpnOkSDOms6RzqHOpc6jzqTOmc6RzqMgzpXOpc6Szp/Omc6RzqMsIM6azpHOoc6lzqPOpM6fzqMgzpXOpc6Szp/Omc6RzqMsIM6azpHOo86kzqHOmSDOms6RzqHOpc6jzqTOmc6RzqMgzpXOpc6Szp/Omc6RzqMsIM6azpHOqM6fzqXOoc6ZIM6VzqXOks6fzpnOkc6jLCDOms6fzpzOmc6kzp8gzpXOpc6Szp/Omc6RzqMsIM6bzpXOnc6fzqPOkc6Zzp/OmSDOlc6lzpLOn86ZzpHOoywgzpzOkc6dzpTOl86bzp/OpSDOlc6lzpLOn86ZzpHOoywgzpzOlc6azp/Opc6dzpnOlM6RIM6VzqXOks6fzpnOkc6jLCDOnM6VzqTOn86nzpkgzprOkc6hzqXOo86kzpnOkc6jIM6VzqXOks6fzpnOkc6jLCDOnM6gzp/Opc6hzp/OoyDOlc6lzpLOn86ZzpHOoywgzpzOpc6bzp/OmSDOms6RzqHOpc6jzqTOmc6RzqMgzpXOpc6Szp/Omc6RzqMsIM6gzpfOlM6fzqXOm86RzpnOms6RIM6VzqXOks6fzpnOkc6jLCDOoM6bzpHOpM6Rzp3Omc6jzqTOn86jIM6VzqXOks6fzpnOkc6jLCDOoM6fzqTOkc6czpnOnyDOlc6lzpLOn86ZzpHOoywgzqDOoc6Zzp3Omc6RIM6VzqXOks6fzpnOkc6jLCDOoc6fzqXOms6bzpnOkSDOlc6lzpLOn86ZzpHOoywgzqPOps6lzqHOmc6Uzp/Opc6gzp/Om86XIM6VzqXOks6fzpnOkc6jLCDOo86nzpnOls6RzpvOlyDOlc6lzpLOn86ZzpHOoywgzqPOqc6kzpfOoc6RIM6VzqXOks6fzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Vz43Oss6/zrnOsScgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzQwMDMnLCBBcmVhOiAnzpHOk86ZzpEgzpzOkc6hzpnOnc6RIM6azqXOnM6XzqMgzpXOpc6Szp/Omc6RzqMsIM6Rzp3OqSDOoM6fzqTOkc6czpnOkSDOlc6lzpLOn86ZzpHOoywgzpXOnc6fzqHOmc6RIM6VzqXOks6fzpnOkc6jLCDOms6RzpbOkc6hzpzOkSDOlc6lzpLOn86ZzpHOoywgzprOkc6czqDOn86jIM6SzpnOpM6RzpvOn86lIM6VzqXOks6fzpnOkc6jLCDOms6RzpzOoM6fzqMgzp/Ons6lzpvOmc6Yzp/OpSDOlc6lzpLOn86ZzpHOoywgzprOm86XzpzOkc6kzpHOoc6ZIM6VzqXOks6fzpnOkc6jLCDOms6lzpzOlyDOlc6lzpLOn86ZzpHOoywgzpzOlc6jzp/Onc6XzqPOmSDOlc6lzpLOn86ZzpHOoywgzpzOmc6jzp/Oms6RzpzOoM6fzqMgzpXOpc6Szp/Omc6RzqMsIM6czp/Onc6XIM6czpHOnc6kzpbOkc6hzpcgzpXOpc6Szp/Omc6RzqMsIM6czp/Onc6XIM6jzqnOpM6XzqHOn86jIM6VzqXOks6fzpnOkc6jLCDOoM6RzqHOkc6bzpnOkSDOms6lzpzOl86jIM6VzqXOks6fzpnOkc6jLCDOoM6RzqHOkc6bzpnOkSDOnM6VzqTOn86nzpnOn86lIM6VzqXOks6fzpnOkc6jLCDOoM6RzqHOkc6bzpnOkSDOn86ezqXOm86ZzpjOn86lIM6VzqXOks6fzpnOkc6jLCDOoM6VzqTOmc6jzp/Opc6dzpHOoyDOlc6lzpLOn86ZzpHOoywgzqDOm86RzqTOkc6dzpEgzpXOpc6Szp/Omc6RzqMsIM6gzqHOkc6jzp/Opc6UzpEgzp3Ol86jzp/OoyDOlc6lzpLOn86ZzpHOoywgzqPOp86fzpvOlyDOlc6czqDOn86hzp/OoM6bzp/Omc6RzqHOp86pzp0gzpXOpc6Szp/Omc6RzqMsIM6nzpfOm86XIM6VzqXOks6fzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Vz43Oss6/zrnOsScgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzQwMDQnLCBBcmVhOiAnzpLOm86RzqfOmc6RIM6VzqXOks6fzpnOkc6jLCDOlM6RzqbOnc6fzqXOo86jzpEgzpXOpc6Szp/Omc6RzqMsIM6WzqnOn86Uzp/Op86fzqMgzqDOl86TzpcgzpXOpc6Szp/Omc6RzqMsIM6azpHOm86lzpLOmc6RIM6VzqXOks6fzpnOkc6jLCDOms6XzqHOmc6dzpjOn86jIM6VzqXOks6fzpnOkc6jLCDOms6hzqXOkSDOks6hzqXOo86XIM6VzqXOks6fzpnOkc6jLCDOnM6Rzp3OpM6fzqXOlM6ZIM6VzqXOks6fzpnOkc6jLCDOnM6RzqHOms6RzqTOlc6jIM6VzqXOks6fzpnOkc6jLCDOnM6VzqTOn86nzpkgzprOl86hzpXOn86jIM6VzqXOks6fzpnOkc6jLCDOnc6Vzp/OoyDOoM6RzpPOqc6dzqTOkc6jIM6VzqXOks6fzpnOkc6jLCDOoM6RzpPOqc6dzqTOkc6jIM6VzqXOks6fzpnOkc6jLCDOoM6XzpvOmSDOlc6lzpLOn86ZzpHOoywgzqDOoc6fzprOn86gzpkgzpXOpc6Szp/Omc6RzqMsIM6jzpHOoc6RzprOl86dzpnOms6fIM6VzqXOks6fzpnOkc6jLCDOo86gzpHOmM6RzqHOmSDOlc6lzpLOn86ZzpHOoywgzqTOoc6fzqXOoM6Zzp8gzpXOpc6Szp/Omc6RzqMsIM6mzpHOoc6RzprOm86RIM6VzqXOks6fzpnOkc6jLCDOps6fzqXOoc6dzp/OmSDOlc6lzpLOn86ZzpHOoycsIFByZWZlY3R1cmU6ICfOlc+NzrLOv865zrEnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM0MDA1JywgQXJlYTogJ86UzpHOnM6ZzpEgzpXOpc6Szp/Omc6RzqMsIM6UzpHOps6dzpcgzprOlc6nzqHOmc6pzp0gzpXOpc6Szp/Omc6RzqMsIM6UzqHOpc6czqnOnc6RIM6VzqXOks6fzpnOkc6jLCDOms6RzpvOkc6czp/Opc6UzpkgzpXOpc6Szp/Omc6RzqMsIM6azpHOpM6fzqXOnc6ZzpEgzpXOpc6Szp/Omc6RzqMsIM6azpXOp86hzpnOlc6jIM6VzqXOks6fzpnOkc6jLCDOms6fzqXOm86fzqXOoc6fzqMgzpXOpc6Szp/Omc6RzqMsIM6azp/Opc6hzprOn86lzpvOn86ZIM6VzqXOks6fzpnOkc6jLCDOm86ZzpzOnc6XIM6VzqXOks6fzpnOkc6jLCDOnM6RzqHOn86lzpvOmSDOlc6lzpLOn86ZzpHOoywgzpzOn86dzpcgzpHOk86Zzp/OpSDOnc6ZzprOn86bzpHOn86lIM6TzpHOm86RzqTOkc6azpcgzpXOpc6Szp/Omc6RzqMsIM6czp/Onc6XIM6fzqPOmc6fzqUgzpTOkc6lzpnOlCDOk86VzqHOn86dzqTOn86jIM6VzqXOks6fzpnOkc6jLCDOnM6lzqHOpM6ZzpHOoyDOlc6lzpLOn86ZzpHOoywgzqDOkc6bzpHOmc6fzqfOqc6hzpkgzpXOpc6Szp/Omc6RzqMsIM6hzpXOpM6jzpnOnc6fzpvOkc6azp/OoyDOlc6lzpLOn86ZzpHOoywgzqHOn86SzpnOlc6jIM6VzqXOks6fzpnOkc6jLCDOo86XzqDOmc6RzqMgzpXOpc6Szp/Omc6RzqMsIM6jzprOlc6gzpHOo86kzpcgzpXOpc6Szp/Omc6RzqMsIM6nzqHOn86dzpnOkSDOlc6lzpLOn86ZzpHOoycsIFByZWZlY3R1cmU6ICfOlc+NzrLOv865zrEnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM0MDA2JywgQXJlYTogJ86RzpzOkc6hzqXOnc6Yzp/OoyDOlc6lzpLOn86ZzpHOoywgzpHOnc6pIM6SzpHOmM6VzpnOkSDOlc6lzpLOn86ZzpHOoywgzpPOkc6bzpHOls6ZzpEgzp3Olc6hzpEgzpXOpc6Szp/Omc6RzqMsIM6TzqXOnM6dzp8gzpXOpc6Szp/Omc6RzqMsIM6azpHOm86bzpnOmM6VzpEgzpXOpc6Szp/Omc6RzqMsIM6azpHOpM6pIM6jzpXOpM6RIM6VzqXOks6fzpnOkc6jLCDOnM6VzqTOkc6czp/Ooc6mzqnOo86XIM6VzqXOks6fzpnOkc6jLCDOnM6fzp3OlyDOkc6TzpnOn86lIM6dzpnOms6fzpvOkc6fzqUgzpHOnc6pIM6SzpHOmM6VzpnOkc6jIM6VzqXOks6fzpnOkc6jLCDOo86VzqTOkSDOlc6lzpLOn86ZzpHOoycsIFByZWZlY3R1cmU6ICfOlc+NzrLOv865zrEnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM0MDA3JywgQXJlYTogJ86RzqPOoM6fzqXOoyAgzqPOms6lzqHOn86lIM6VzqXOks6fzpnOkc6jLCDOkc6kzqPOmc6kzqPOkSAgzqPOms6lzqHOn86lIM6VzqXOks6fzpnOkc6jLCDOkc6nzpXOoc6fzqXOnc6VzqMgIM6jzprOpc6hzp/OpSDOlc6lzpLOn86ZzpHOoywgzpHOp86ZzpvOm86ZICDOo86azqXOoc6fzqUgzpXOpc6Szp/Omc6RzqMsIM6Vzp7OqSDOoM6fzpTOmc6VzqMgzpXOpc6Szp/Omc6RzqMsIM6azpHOm86RzpzOmc6kzqPOkSAgzqPOms6lzqHOn86lIM6VzqXOks6fzpnOkc6jLCDOms6RzpvOmc6azqHOmSAgzqPOms6lzqHOn86lIM6VzqXOks6fzpnOkc6jLCDOms6lzqHOkSDOoM6Rzp3Okc6TzpnOkSAgzqPOms6lzqHOn86lIM6VzqXOks6fzpnOkc6jLCDOm86Zzp3Okc6hzpnOkSAgzqPOms6lzqHOn86lIM6VzqXOks6fzpnOkc6jLCDOm86fzqXOpM6hzp8gIM6jzprOpc6hzp/OpSDOlc6lzpLOn86ZzpHOoywgzpzOlc6bzpEgIM6jzprOpc6hzp/OpSDOlc6lzpLOn86ZzpHOoywgzpzOlc6jzpEgzqDOn86UzpnOkSDOlc6lzpLOn86ZzpHOoywgzpzOqc6bzp/OoyAgzqPOms6lzqHOn86lIM6VzqXOks6fzpnOkc6jLCDOnc6lzqbOmSAgzqPOms6lzqHOn86lIM6VzqXOks6fzpnOkc6jLCDOoM6VzqXOms6fzqMgIM6jzprOpc6hzp/OpSDOlc6lzpLOn86ZzpHOoywgzqPOkc6hzpHOms6Xzp3OnyDOnc6XzqPOn86jIM6VzqXOks6fzpnOkc6jLCDOo86azqXOoc6fzqDOn86lzpvOkSAgzp3Ol86jzp/OoyDOlc6lzpLOn86ZzpHOoywgzqPOms6lzqHOn86jIM6VzqXOks6fzpnOkc6jLCDOpM6hzpHOp86lICDOo86azqXOoc6fzqUgzpXOpc6Szp/Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpXPjc6yzr/Ouc6xJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczNDAwOCcsIEFyZWE6ICfOkc6TzpnOkSDOpM6hzpnOkc6UzpEgzp3Ol86jzp/OoyDOlc6lzpLOn86ZzpHOoywgzpPOlc6hzp/Onc6kzpHOoyDOlc6lzpLOn86ZzpHOoywgzpXOoc6VzqTOoc6ZzpEgzpXOpc6Szp/Omc6RzqMsIM6czpHOk86fzqXOm86RIM6VzqXOks6fzpnOkc6jLCDOnM6RzpvOkc6azqnOnc6kzpHOoyDOlc6lzpLOn86ZzpHOoywgzqDOkc6dzp/Ooc6RzpzOkSDOlc6lzpLOn86ZzpHOoycsIFByZWZlY3R1cmU6ICfOlc+NzrLOv865zrEnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM0MDA5JywgQXJlYTogJ86RzpPOmc6RIM6YzpXOms6bzpEgzpXOpc6Szp/Omc6RzqMsIM6RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOms6RzqHOpc6jzqTOn86lIM6VzqXOks6fzpnOkc6jLCDOkc6TzpnOn86jIM6czpXOoc6azp/Opc6hzpnOn86jIM6VzqXOks6fzpnOkc6jLCDOkc6lzpvOqc6dzpHOoc6ZIM6VzqXOks6fzpnOkc6jLCDOkc6nzpvOkc6UzpXOoc6XIM6VzqXOks6fzpnOkc6jLCDOlM6RzqbOnc6XIM6azpHOoc6lzqPOpM6ZzpHOoyDOlc6lzpLOn86ZzpHOoywgzpXOm86RzpnOkSDOlc6lzpLOn86ZzpHOoywgzprOkc6bzpHOnM6fzqMgzpXOpc6Szp/Omc6RzqMsIM6azp/Omc6bzpnOnyDOlc6lzpLOn86ZzpHOoywgzprOn86hzpHOo86ZzpTOkSDOlc6lzpLOn86ZzpHOoywgzpvOn86mzpnOo86azp/OoyDOlc6lzpLOn86ZzpHOoywgzpzOn86dzpcgzpHOk86Zzp/OpSDOp86RzqHOkc6bzpHOnM6gzp/Opc6jIM6bzpXOpc6azqnOnSDOlc6lzpLOn86ZzpHOoywgzpzOn86dzp/Onc6UzqHOpc6fIM6VzqXOks6fzpnOkc6jLCDOnM6fzqXOoc6kzpXOoc6XIM6VzqXOks6fzpnOkc6jLCDOnM6lzqHOpM6ZzpEgzpXOpc6Szp/Omc6RzqMsIM6dzpXOn86nzqnOoc6ZIM6RzqXOm86pzp3Okc6hzpnOn86lIM6VzqXOks6fzpnOkc6jLCDOn86azqTOqc6dzpnOkSDOlc6lzpLOn86ZzpHOoywgzp/Ooc6Zzp8gzpXOpc6Szp/Omc6RzqMsIM6gzpXOoc6ZzpLOn86bzpnOkSDOlc6lzpLOn86ZzpHOoywgzqDOoc6Zzp3Okc6azpkgzpXOpc6Szp/Omc6RzqMsIM6gzqXOoc6TzpkgzpXOpc6Szp/Omc6RzqMsIM6jzqXOms6ZzpXOoyDOlc6lzpLOn86ZzpHOoywgzqfOkc6dzpnOkSDOkc6lzpvOqc6dzpHOoc6Zzp/OpSDOlc6lzpLOn86ZzpHOoywgzqnOoc6fzpvOn86TzpnOnyDOlc6lzpLOn86ZzpHOoycsIFByZWZlY3R1cmU6ICfOlc+NzrLOv865zrEnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM0MDEzJywgQXJlYTogJ86RzpPOmc6RIM6czpHOoc6Zzp3OkSDOnM6RzqHOnM6RzqHOmc6fzqUgzpXOpc6Szp/Omc6RzqMsIM6RzpPOmc6fzqMgzprOqc6dzqPOpM6Rzp3OpM6Zzp3On86jIM6VzqXOks6fzpnOkc6jLCDOkc6azqTOkc6Zzp8gzpXOpc6Szp/Omc6RzqMsIM6RzpvOlc6ezpfOoyDOlc6lzpLOn86ZzpHOoywgzpLOkc6hzpXOm86bzpHOmc6fzpkgzpXOpc6Szp/Omc6RzqMsIM6SzpHOpM6XzqPOmSDOlc6lzpLOn86ZzpHOoywgzpPOmc6Rzp3Onc6ZzqTOo86ZIM6VzqXOks6fzpnOkc6jLCDOlM6ZzpHOo86kzpHOpc6hzqnOo86XIM6VzqXOks6fzpnOkc6jLCDOlc6azpHOm86XIM6VzqXOks6fzpnOkc6jLCDOms6RzpvOn86TzpXOoc6ZIM6VzqXOks6fzpnOkc6jLCDOms6RzqTOo86RzqHOqc6dzpnOnyDOlc6lzpLOn86ZzpHOoywgzprOkc6kzqkgzpPOmc6Rzp3Onc6ZzqTOo86ZIM6VzqXOks6fzpnOkc6jLCDOms6fzprOms6Zzp3Ol86jIM6VzqXOks6fzpnOkc6jLCDOms6hzqXOkSDOks6hzqXOo86XIM6czpHOoc6czpHOoc6Zzp/OpSDOlc6lzpLOn86ZzpHOoywgzpvOpc6azp/Ooc6VzpzOkSDOlc6lzpLOn86ZzpHOoywgzpzOkc6hzpzOkc6hzpkgzpXOpc6Szp/Omc6RzqMsIM6czpXOk86RzpvOn86dzpfOo86fzqMgzqDOlc6kzpHOm86ZzqnOnSDOnc6XzqPOn86jIM6VzqXOks6fzpnOkc6jLCDOnM6VzpvOmc6jzqPOqc6dzpHOoyDOlc6lzpLOn86ZzpHOoywgzqDOkc6dzpHOk86ZzpEgzpzOkc6hzpzOkc6hzpnOn86lIM6VzqXOks6fzpnOkc6jLCDOoM6RzqHOkc6UzpXOmc6jzpkgzpXOpc6Szp/Omc6RzqMsIM6gzpHOoc6RzpvOmc6RIM6mzpfOk86ZzpEgzpXOpc6Szp/Omc6RzqMsIM6gzp/OmM6Zzp8gzpXOpc6Szp/Omc6RzqMsIM6hzpnOls6fzpLOn86lzp3OmSDOlc6lzpLOn86ZzpHOoywgzqPOpM6fzqXOoM6gzpHOmc6fzpkgzpXOpc6Szp/Omc6RzqMsIM6kzqHOkc6Tzp/Onc6XzqPOmSDOlc6lzpLOn86ZzpHOoywgzqbOl86TzpnOkSDOlc6lzpLOn86ZzpHOoywgzqfOkc6dzpnOkSDOoM6RzqHOkc6UzpXOmc6jzpnOn86lIM6VzqXOks6fzpnOkc6jLCDOp86VzqHOo86fzp3Ol86jzpkgzpXOpc6Szp/Omc6RzqMsIM6nzqnOnc6ZIM6VzqXOks6fzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Vz43Oss6/zrnOsScgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzQwMTUnLCBBcmVhOiAnzpHOm86czqXOoc6fzqDOn86kzpHOnM6fzqMgzpXOpc6Szp/Omc6RzqMsIM6SzpHOmM6lzqHOlc6czpEgzpXOpc6Szp/Omc6RzqMsIM6UzpfOm86XzqPOnyDOlc6lzpLOn86ZzpHOoywgzpXOm86RzpnOn86nzqnOoc6ZIM6VzqXOks6fzpnOkc6jLCDOlc6bzpHOps6fzpvOmc6czpHOnc6fIM6VzqXOks6fzpnOkc6jLCDOls6pzp/OlM6fzqfOn86jIM6gzpfOk86XIM6azpHOoc6lzqPOpM6ZzpHOoyDOlc6lzpLOn86ZzpHOoywgzprOkc6SzpHOm86bzpnOkc6dzpcgzpXOpc6Szp/Omc6RzqMsIM6azpHOk86azpHOlM6RzpnOn86ZIM6VzqXOks6fzpnOkc6jLCDOms6RzqjOkc6bzpEgzpXOpc6Szp/Omc6RzqMsIM6azpXOm86bzpnOkSDOlc6lzpLOn86ZzpHOoywgzprOn86lzpLOlc6bzpvOlc6jIM6VzqXOks6fzpnOkc6jLCDOm86VzqXOms6RIM6VzqXOks6fzpnOkc6jLCDOnM6VzqPOn86nzqnOoc6ZzpEgzpXOpc6Szp/Omc6RzqMsIM6dzpXOkSDOo86kzqXOoc6RIM6VzqXOks6fzpnOkc6jLCDOnc6ZzpzOoM6fzqHOlc6Zzp8gzpXOpc6Szp/Omc6RzqMsIM6gzpHOnc6RzpPOmc6RIM6RzpvOnM6lzqHOn86gzp/OpM6RzpzOn86lIM6VzqXOks6fzpnOkc6jLCDOoM6fzpvOpc6gzp/OpM6RzpzOn86jIM6VzqXOks6fzpnOkc6jLCDOoc6RzqDOpM6RzpnOn86ZIM6VzqXOks6fzpnOkc6jLCDOo86kzqXOoc6RIM6VzqXOks6fzpnOkc6jLCDOpM6jzpHOms6RzpnOn86ZIM6VzqXOks6fzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Vz43Oss6/zrnOsScgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzQxMDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6nzpHOm86azpnOlM6fzqMgKM6czqDOn86lzqHOpM6WzpkpIM6VzqXOks6fzpnOkc6jLCDOkc6dzpjOl86UzqnOnc6RIM6VzqXOks6fzpnOkc6jLCDOkc6mzqHOkc6kzpkgzpXOpc6Szp/Omc6RzqMsIM6SzpHOmM6lIM6VzqXOks6fzpnOkc6jLCDOlM6hzp/Oo86ZzpEgzqfOkc6bzprOmc6Uzp/OoyDOlc6lzpLOn86ZzpHOoywgzprOkc6bzp/Op86pzqHOmSDOoM6Rzp3OpM6VzpnOp86ZIM6VzqXOks6fzpnOkc6jLCDOms6RzpzOkc6hzpkgzpXOpc6Szp/Omc6RzqMsIM6azp/Opc6azpHOms6ZIM6VzqXOks6fzpnOkc6jLCDOms6hzp/Onc6ZzpEgzpXOpc6Szp/Omc6RzqMsIM6azqTOpc6gzp/Onc6XzqPOmSDOlc6lzpLOn86ZzpHOoywgzpvOn86lzprOmc6jzpnOkSDOlc6lzpLOn86ZzpHOoywgzpzOmc6azqHOnyDOks6RzpjOpSDOlc6lzpLOn86ZzpHOoywgzpzOn86dzpcgzpHOk86Zzp/OpSDOk86VzqnOoc6TzpnOn86lIM6RzqHOnM6RIM6VzqXOks6fzpnOkc6jLCDOnM6lzqTOmc6azpHOoyDOlc6lzpLOn86ZzpHOoywgzp3Olc6RIM6bzpHOnM6ozpHOms6fzqMgzpXOpc6Szp/Omc6RzqMsIM6ezpfOoc6fzpLOoc6lzqPOlyDOlc6lzpLOn86ZzpHOoywgzqDOkc6hzpHOm86ZzpEgzpHOpc6bzpnOlM6fzqMgzpXOpc6Szp/Omc6RzqMsIM6gzpHOoc6RzpvOmc6RIM6SzpHOmM6Vzp/OoyDOlc6lzpLOn86ZzpHOoywgzqDOkc6jzpHOoyDOnc6XzqPOn86jIM6VzqXOks6fzpnOkc6jLCDOoM6hzp/Ops6XzqTOl86jIM6XzpvOmc6RzqMgzpXOpc6Szp/Omc6RzqMsIM6hzpnOpM6jzqnOnc6RIM6VzqXOks6fzpnOkc6jLCDOo86azqHOn86gzp/Onc6VzqHOmc6RIM6VzqXOks6fzpnOkc6jLCDOpc6bzpnOms6XIM6VzqXOks6fzpnOkc6jLCDOps6RzqHOn86jIM6VzqXOks6fzpnOkc6jLCDOps6lzpvOm86RIM6VzqXOks6fzpnOkc6jLCDOp86RzpvOms6ZzpTOkSDOlc6lzpLOn86ZzpHOoycsIFByZWZlY3R1cmU6ICfOlc+NzrLOv865zrEnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM0MjAwJywgQXJlYTogJ86RzpLOk86RzqHOmc6RIM6VzqXOks6fzpnOkc6jLCDOkc6TzpTOmc6dzpXOoyDOlc6lzpLOn86ZzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6ZzqPOpM6ZzpHOmc6RzqMgzpXOpc6Szp/Omc6RzqMsIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOlc6bzpvOl86dzpnOms6pzp0gzpXOpc6Szp/Omc6RzqMsIM6RzpPOoc6Zzp/Oks6fzqTOkc6dzp8gzpXOpc6Szp/Omc6RzqMsIM6RzqHOpM6VzpzOmc6jzpnOnyDOlc6lzpLOn86ZzpHOoywgzpHOo86czpfOnc6Zzp8gzpXOpc6Szp/Omc6RzqMsIM6SzpHOo86ZzpvOmc6azpEgzpXOpc6Szp/Omc6RzqMsIM6Szp/Opc6kzpHOoyDOlc6lzpLOn86ZzpHOoywgzpPOkc6bzpHOpM6jzpHOlM6VzqMgzpXOpc6Szp/Omc6RzqMsIM6TzpHOm86RzqTOo86pzp3OkSDOlc6lzpLOn86ZzpHOoywgzpPOlc6hzpHOms6Zzp/OpSDOlc6lzpLOn86ZzpHOoywgzpPOn86lzpLOlc6jIM6VzqXOks6fzpnOkc6jLCDOlc6bzpvOl86dzpnOms6RIM6VzqXOks6fzpnOkc6jLCDOmc6jzqTOmc6RzpnOkSDOlc6lzpLOn86ZzpHOoywgzprOkc6czpHOoc6ZzpEgzpXOpc6Szp/Omc6RzqMsIM6azpHOnM6RzqTOoc6ZzpHOlM6VzqMgzpXOpc6Szp/Omc6RzqMsIM6azpHOnc6RzqTOkc6UzpnOms6RIM6VzqXOks6fzpnOkc6jLCDOms6RzqPOpM6Rzp3Omc6pzqTOmc6jzqPOkSDOlc6lzpLOn86ZzpHOoywgzprOkc6jzqTOoc6ZIM6ZzqPOpM6ZzpHOmc6RzqMgzpXOpc6Szp/Omc6RzqMsIM6azpHOpM6pIM6czp/Onc6fzprOkc6hzqXOkSDOlc6lzpLOn86ZzpHOoywgzprOlc6mzpHOm86VzqMgzpXOpc6Szp/Omc6RzqMsIM6azp/Oms6azpnOnc6fzpzOl86bzpXOkSDOlc6lzpLOn86ZzpHOoywgzprOoc6lzp/Onc6VzqHOmc6kzpfOoyDOlc6lzpLOn86ZzpHOoywgzprOpc6gzpHOoc6ZzqPOo86ZIM6VzqXOks6fzpnOkc6jLCDOnM6XzpvOmc6VzqMgzpXOpc6Szp/Omc6RzqMsIM6czp/Onc6fzprOkc6hzqXOkSDOlc6lzpLOn86ZzpHOoywgzp3Olc6RIM6jzpnOnc6RzqPOn86jIM6VzqXOks6fzpnOkc6jLCDOnc6Vzp/Op86pzqHOmSDOmc6jzqTOmc6RzpnOkc6jIM6VzqXOks6fzpnOkc6jLCDOoM6VzqXOms6ZIM6VzqXOks6fzpnOkc6jLCDOoM6fzp3OpM6ZzprOn86dzpfOo86ZIM6VzqXOks6fzpnOkc6jLCDOo86XzpzOmc6RIM6VzqXOks6fzpnOkc6jLCDOpM6jzpHOoM6fzqXOoc6dzpnOkSDOlc6lzpLOn86ZzpHOoywgzqjOkc6hzp/OoM6fzqXOm86ZIM6VzqXOks6fzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Vz43Oss6/zrnOsScgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzQzMDAnLCBBcmVhOiAnzpHOk86Zzp/Oms6RzpzOoM6fzqMgzpXOpc6Szp/Omc6RzqMsIM6RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOk86ZzpHOm86kzqHOqc6dIM6VzqXOks6fzpnOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzpvOmc6nzpHOlM6fzqMgzpXOpc6Szp/Omc6RzqMsIM6RzpPOmc6fzqMgzpXOpc6Szp/Omc6RzqMsIM6RzpnOlM6XzqjOn86jIM6VzqXOks6fzpnOkc6jLCDOks6RzqHOks6RzqHOkSDOlc6lzpLOn86ZzpHOoywgzpLOkc6jzpnOm86Zzp3OkSDOlc6lzpLOn86ZzpHOoywgzpLOmc6TzpvOkSDOlc6lzpLOn86ZzpHOoywgzpPOmc6RzpvOpM6hzpEgzpXOpc6Szp/Omc6RzqMsIM6TzqHOlc6Tzp/Om86ZzpzOkc6dzp8gzpXOpc6Szp/Omc6RzqMsIM6XzpvOmc6RIM6VzqXOks6fzpnOkc6jLCDOms6RzpLOn86jIM6VzqXOks6fzpnOkc6jLCDOms6fzprOms6Zzp3Omc6RzqMgzpXOpc6Szp/Omc6RzqMsIM6bzpnOp86RzqMgzpXOpc6Szp/Omc6RzqMsIM6bzp/Opc6kzqHOkSDOkc6ZzpTOl86ozp/OpSDOlc6lzpLOn86ZzpHOoywgzpvOn86lzqTOoc6RIM6TzpnOkc6bzqTOoc6pzp0gzpXOpc6Szp/Omc6RzqMsIM6czpHOn86lzp3Ol86jICDOlc6lzpLOn86ZzpHOoywgzpzOn86dzpcgzpHOk86Zzp/OpSDOk86VzqnOoc6TzpnOn86lIM6RzpnOlM6XzqjOn86lIM6VzqXOks6fzpnOkc6jLCDOnM6fzp3On86bzpnOkSDOnc6XzqPOn86jIM6VzqXOks6fzpnOkc6jLCDOoM6RzpnOlM6fzqXOoM6fzpvOlyDOlc6lzpLOn86ZzpHOoywgzqDOkc6hzpHOm86ZzpEgzpHOk86Zzp/OpSDOnc6ZzprOn86bzpHOn86lIM6RzpnOlM6XzqjOn86lIM6VzqXOks6fzpnOkc6jLCDOoM6bzpHOpM6Rzp3Omc6RzqMgzpXOpc6Szp/Omc6RzqMsIM6gzp/Om86lzpvOn86mzp/OoyDOlc6lzpLOn86ZzpHOoywgzqHOn86Uzp/OlM6RzqbOnc6XIM6VzqXOks6fzpnOkc6jLCDOo86azpXOoM6RzqPOpM6XIM6RzpnOlM6XzqjOn86lIM6VzqXOks6fzpnOkc6jLCDOo86kzqHOn86TzpPOpc6bzpcgzp3Ol86jzp/OoyDOlc6lzpLOn86ZzpHOoycsIFByZWZlY3R1cmU6ICfOlc+NzrLOv865zrEnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM0NDAwJywgQXJlYTogJ86RzpPOmc6RIM6jzp/Ops6ZzpEgzpXOpc6Szp/Omc6RzqMsIM6RzpPOmc6fzqMgzprOkc6czpHOoc6ZzqTOo86RzqMgzpXOpc6Szp/Omc6RzqMsIM6RzpPOmc6fzqMgzpzOlc6jzqPOkc6gzqnOnSDOlc6lzpLOn86ZzpHOoywgzpHOms6hzpXOoyDOlc6lzpLOn86ZzpHOoywgzpHOpM6kzpHOm86XIM6VzqXOks6fzpnOkc6jLCDOlM6RzqbOnc6XIM6dzpXOoc6fzqTOoc6ZzpLOmc6RzqMgzpXOpc6Szp/Omc6RzqMsIM6UzqHOn86jzpnOkSDOms6lzqDOkc6hzpnOo86jzpnOn86lIM6VzqXOks6fzpnOkc6jLCDOmM6Vzp/OpM6fzprOn86jIM6VzqXOks6fzpnOkc6jLCDOms6RzpzOkc6hzpnOpM6jzpEgzpXOpc6Szp/Omc6RzqMsIM6azpHOo86kzpXOm86bzpEgzpXOpc6Szp/Omc6RzqMsIM6azp/Onc6kzp/OlM6VzqPOoM6fzqTOmSDOlc6lzpLOn86ZzpHOoywgzprOpc6gzqDOkc6hzpnOo86jzpkgzqfOkc6bzprOmc6UzpHOoyDOlc6lzpLOn86ZzpHOoywgzpvOmc6czp3Omc6pzp3Okc6jIM6VzqXOks6fzpnOkc6jLCDOnM6RzprOoc6lzprOkc6gzpEgzpXOpc6Szp/Omc6RzqMsIM6czpHOms6hzqXOnM6RzpvOm86XIM6VzqXOks6fzpnOkc6jLCDOnM6fzp3OlyDOkc6TzpnOn86lICDOmc6pzpHOnc6dzpcgzprOkc6bzqXOks6ZzqTOlyDOlc6lzpLOn86ZzpHOoywgzpzOn86dzpcgzpzOkc6azqHOpc6czpHOm86bzpfOoyDOlc6lzpLOn86ZzpHOoywgzpzOn86dzpcgzqDOkc6dzpHOk86ZzpHOoyDOk86fzqHOk86fzpXOoM6XzprOn86fzqUgzpXOpc6Szp/Omc6RzqMsIM6czqXOm86fzpkgzpXOpc6Szp/Omc6RzqMsIM6dzpXOoc6fzqTOoc6ZzpLOmc6RIM6VzqXOks6fzpnOkc6jLCDOoM6RzqHOkc6bzpnOkSDOoM6fzpvOmc6kzpnOms6pzp0gzpXOpc6Szp/Omc6RzqMsIM6gzpfOk86RzpTOmc6RIM6VzqXOks6fzpnOkc6jLCDOoM6bzpHOpM6Rzp3Omc6RIM6VzqXOks6fzpnOkc6jLCDOoM6fzpvOmc6kzpnOms6RIM6VzqXOks6fzpnOkc6jLCDOo86kzpHOpc6hzp/OoyDOlc6lzpLOn86ZzpHOoywgzqTOoc6ZzpHOlM6RIM6VzqXOks6fzpnOkc6jLCDOqM6RzqfOnc6RIM6VzqXOks6fzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Vz43Oss6/zrnOsScgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzQ1MDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOlc6lzpLOn86ZzpHOoywgzpHOk86Zzp/OoyDOm86fzqXOms6RzqMgzpXOpc6Szp/Omc6RzqMsIM6RzprOpM6XIM6dzpfOoc6VzqnOoyDOlc6lzpLOn86ZzpHOoywgzpHOm86ZzpLOlc6hzpkgzpXOpc6Szp/Omc6RzqMsIM6Rzp3OmM6fzqXOoM6fzpvOlyDOlc6lzpLOn86ZzpHOoywgzpLOlc6bzp/OoyDOlc6lzpLOn86ZzpHOoywgzpPOkc6SzpHOm86RzqMgzpXOpc6Szp/Omc6RzqMsIM6UzqXOo86kzp/OoyDOlc6lzpLOn86ZzpHOoywgzpjOkc6hzp/Opc6dzpnOkSDOlc6lzpLOn86ZzpHOoywgzprOkc6kzpHOms6RzpvOn86jIM6VzqXOks6fzpnOkc6jLCDOms6fzqXOpM6fzqXOnM6fzqXOm86RzqMgzpXOpc6Szp/Omc6RzqMsIM6bzpHOpM6RzqMgzpXOpc6Szp/Omc6RzqMsIM6bzpXOoM6fzqXOoc6RIM6VzqXOks6fzpnOkc6jLCDOnM6XzpvOkc6azpkgzpXOpc6Szp/Omc6RzqMsIM6gzpHOnc6RzpPOmc6RIM6gzpHOoc6YzpXOnc6Zzp/OpSDOlc6lzpLOn86ZzpHOoywgzqDOkc6dzpHOk86ZzqTOo86RIM6gzp/Opc6dzqTOkSDOlc6lzpLOn86ZzpHOoywgzqDOkc6hzpHOnM6VzqHOmc6kzpXOoyDOlc6lzpLOn86ZzpHOoywgzqDOkc6hzpjOlc6dzpkgzpXOpc6Szp/Omc6RzqMsIM6gzqHOkc6jzpnOnc6fIM6VzqXOks6fzpnOkc6jLCDOoM6hzpnOnc6ZzpHOoyDOlc6lzpLOn86ZzpHOoywgzqTOoc6RzqfOl86bzpnOnyDOlc6lzpLOn86ZzpHOoycsIFByZWZlY3R1cmU6ICfOlc+NzrLOv865zrEnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM0NjAwJywgQXJlYTogJ86dzpXOkSDOkc6hzqTOkc6azpcgzpXOpc6Szp/Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpXPjc6yzr/Ouc6xJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczNjA3MScsIEFyZWE6ICfOkc6TzpnOkSDOpM6hzpnOkc6UzpEgzprOlc6hzpHOo86fzqfOqc6hzpnOn86lIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzqDOkc6bzpHOmc6fzqfOqc6hzpnOn86lIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpHOk86Zzp/OoyDOms6pzp3Oo86kzpHOnc6kzpnOnc6fzqMgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6RzpzOmc6hzpnOkc6dzpcgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6Rzp3Okc6kzp/Om86ZzprOlyDOps6hzpHOk86azpnOo86kzpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6SzpnOnc6ZzpHOnc6XIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOks6hzpXOms6RzpnOmc6azpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6TzpHOks6hzpnOnc6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOk86fzqXOm86RzpnOmc6azpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6UzpHOps6dzpcgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6UzqXOpM6ZzprOlyDOps6hzpHOk86azpnOo86kzpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6VzqDOmc6jzprOn86gzpcgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6azpHOoc6RzprOkc6jzpnOn86dIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOms6VzqHOkc6jzp/Op86pzqHOmSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzprOlc6mzpHOm86fzpLOoc6lzqPOnyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzprOoc6Vzp3OpM6XzqMgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6bzp/Ok86TzpnOlc6jIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOnM6RzqHOkc6YzpnOkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpzOkc6hzpHOmM6fzqMgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6czpHOpc6hzp/OnM6czpHOpM6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOnM6fzp3Okc6jzqTOl86hzpHOms6ZIM6VzqXOoc6lzqTOkc6dzpnOkc6jIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOnc6VzpEgzpLOmc6dzpnOkc6dzpcgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6dzpXOn86nzqnOoc6ZIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOoM6RzpvOkc6Zzp/Op86pzqHOmSDOps6hzpHOo86TzprOmc6jzqTOkc6jIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOoM6VzqHOn86lzpvOkc6ZzpnOms6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOo86VzpvOnyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzqPOms6RzpzOnc6ZzpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6nzqHOpc6jzqkgzpXOpc6hzqXOpM6Rzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpXPhc+Bz4XPhM6xzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM2MDcyJywgQXJlYTogJ86RzpPOmc6fzqMgzqDOoc6fzprOn86gzpnOn86jIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOkc6czqDOkc6hzpXOoyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpHOnc6pIM6gzp/OpM6RzpzOmc6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOkc6hzpzOkc6czqDOlc6bzpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6SzpHOm86RzqnOoc6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOks6VzqHOnc6ZzprOnyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpLOn86lzpvOoM6XIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOk86hzpHOnc6ZzqTOo86RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOms6RzpnOoM6Rzp3Okc6azpkgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6azpHOo86kzqHOkc6azpkgzpLOkc6bzpHOqc6hzpHOoyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzprOkc6jzqTOoc6RzprOmSDOpM6fzqDOn86bzpnOkc6dzqnOnSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzprOkc6kzqkgzqDOn86kzpHOnM6ZzpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6azp/Onc6UzqXOm86RzpnOmc6azpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6azp/OqM6RzpnOmc6azpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6bzpfOnM6VzqHOmSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpvOmc6Yzp/Op86pzqHOmSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpvOn86TzpPOmc6kzqPOmSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpzOn86dzpcgzqTOkc6kzpHOoc6dzpfOoyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzqDOoc6RzqTOn86Szp/Opc6dzpkgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6kzp/OoM6fzpvOmc6Rzp3OkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzqTOoc6ZzqDOn86kzpHOnM6fIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOpM6jzp/Opc6azprOkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzqfOoc6ZzqPOn86SzpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpXPhc+Bz4XPhM6xzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM2MDczJywgQXJlYTogJ86RzpPOmc6fzqMgzpHOmM6Rzp3Okc6jzpnOn86jIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOkc6TzqHOkc6mzpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6Rzp3Ol86mzp/Ooc6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOkc6jzqDOoc6fzqHOoc6VzqXOnM6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOks6RzpvOkc6hzpkgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6SzqHOkc6TzpPOmc6Rzp3OkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpPOkc6SzqHOn86bzpnOo86ZzpHOlM6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOlM6Vzp3OlM6hzp/OoyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpXOm86RzqTOn86jIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOlc6gzpnOnc6ZzpHOnc6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOms6RzpLOkc6azpnOkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzprOkc6czpHOoc6ZzpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6azpHOoc6lzpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6azpHOpM6jzpHOnc6kzqnOnc6XzqMgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6azp/Opc6jzqTOlc6jzpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6dzpXOoc6RzpnOlM6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOoM6RzpvOkc6Zzp/Om86RzprOms6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOoM6RzqHOkc6czpXOoc6ZzqTOkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzqDOpM6VzqHOlyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzqTOoc6ZzpTOlc6dzpTOoc6fIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOpM6hzp/Oks6RzqTOnyDOlc6lzqHOpc6kzpHOnc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOlc+Fz4HPhc+EzrHOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzYwODAnLCBBcmVhOiAnzpLOoc6RzqfOkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzprOm86VzpnOo86kzp8gzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6czpHOpc6hzp/Om86fzpPOk86fzqMgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6czpXOo86fzqfOqc6hzpkgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6gzpvOkc6kzpHOnc6fzqMgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6mzp/Opc6hzp3OkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOlc+Fz4HPhc+EzrHOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzYxMDAnLCBBcmVhOiAnzpHOk86ZzpEgzpLOm86RzqfOlc6hzp3OkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpHOk86Zzp/OoyDOkc6dzpTOoc6VzpHOoyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOkc6czqDOlc6bzpnOkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpHOnc6ZzpHOlM6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOkc6dzqkgzprOkc6bzpXOo86czpXOnc6fIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOkc6hzqnOnc6ZzpHOlM6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOks6RzpzOks6RzprOmc6VzqMgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6SzpXOm86fzqXOp86ZIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOks6fzqXOpM6lzqHOnyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpPOn86hzpnOkc6dzpHOlM6VzqMgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6UzqXOpM6ZzprOnyDOoM6RzqDOoM6RzqHOn86lzqPOmSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpnOpM6ZzpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6azpHOm86VzqPOnM6Vzp3OnyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzprOkc6bzpvOmc6YzpXOkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzprOkc6hzqDOlc6dzpfOo86ZIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOms6RzqTOqSDOnM6RzqHOkc6YzpXOkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzprOm86RzqXOo86Zzp8gzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6azp/Ooc6lzqPOp86RzpTOlc6jIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOnM6VzqPOkc6czqDOlc6bzpnOkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpzOl86bzpnOkc6jIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOnM6fzp3Okc6jzqTOl86hzpHOms6ZIM6azpHOm86VzqPOnM6Vzp3On86lIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOnM6fzqXOls6ZzpvOnyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzpzOpc6hzpnOms6XIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOnc6fzqPOpM6ZzpzOnyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzqDOkc6gzqDOkc6UzpnOkSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzqDOkc6gzqDOkc6hzp/Opc6jzpkgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6gzpHOoc6azpnOnyDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzqDOkc6lzpvOn86gzp/Opc6bzp8gzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6jzpXOm86bzpEgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6jzqTOlc6dzqnOnM6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jLCDOo86kzpXOps6Rzp3OmSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzqPOpc6TzprOoc6VzpvOm86fzqMgzpXOpc6hzqXOpM6Rzp3Omc6RzqMsIM6mzpnOlM6RzprOmc6RIM6VzqXOoc6lzqTOkc6dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86Vz4XPgc+Fz4TOsc69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyOTA5MCcsIEFyZWE6ICfOkc6TzpnOkSDOnM6RzqHOmc6dzpEgzpbOkc6azqXOnc6Yzp/OpSwgzpHOk86Zzp/OoyDOlM6XzpzOl86kzqHOmc6fzqMgzpbOkc6azqXOnc6Yzp/OpSwgzpHOm86ZzprOkc6dzpHOoyDOls6RzprOpc6dzpjOn86lLCDOkc6bzqnOnc6ZzpEgzpbOkc6azqXOnc6Yzp/OpSwgzpHOnc6pIM6TzpXOoc6RzprOkc6hzpkgzpbOkc6azqXOnc6Yzp/OpSwgzpTOoc6RzprOkc6jIM6WzpHOms6lzp3OmM6fzqUsIM6azpHOm86bzpnOmM6VzpEgzpbOkc6azqXOnc6Yzp/OpSwgzprOkc6jzqTOlc6bzpnOkSDOls6RzprOpc6dzpjOn86lLCDOms6RzqTOkc6jzqTOkc6hzpkgzpbOkc6azqXOnc6Yzp/OpSwgzprOkc6kzqkgzpPOlc6hzpHOms6RzqHOmSDOls6RzprOpc6dzpjOn86lLCDOoM6XzpPOkc6UzpHOms6ZzpEgzpbOkc6azqXOnc6Yzp/OpSwgzqPOms6fzqXOm86XzprOkc6Uzp8gzpbOkc6azqXOnc6Yzp/OpScsIFByZWZlY3R1cmU6ICfOls6xzrrPjc69zrjOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyOTA5MScsIEFyZWE6ICfOkc6TzpnOkSDOmM6VzprOm86RIM6WzpHOms6lzp3OmM6fzqUsIM6RzpPOmc6fzqMgzpHOnc6UzqHOlc6RzqMgzpbOkc6azqXOnc6Yzp/OpSwgzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOnc6XzqPOn86jIM6WzpHOms6lzp3OmM6fzqUsIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOks6fzpvOmc6czqnOnSDOls6RzprOpc6dzpjOn86lLCDOkc6dzpHOps6pzp3Ol86kzqHOmc6RIM6WzpHOms6lzp3OmM6fzqUsIM6Rzp3OqSDOks6fzpvOmc6czpXOoyDOls6RzprOpc6dzpjOn86lLCDOkc6jzprOn86jIM6WzpHOms6lzp3OmM6fzqUsIM6SzpHOoc6SzpHOoc6RIM6WzpHOms6lzp3OmM6fzqUsIM6Szp/Om86ZzpzOlc6jIM6WzpHOms6lzp3OmM6fzqUsIM6VzpvOmc6VzqMgzpbOkc6azqXOnc6Yzp/OpSwgzpXOns6pIM6nzqnOoc6RIM6WzpHOms6lzp3OmM6fzqUsIM6azpHOnM6gzpnOnyDOls6RzprOpc6dzpjOn86lLCDOms6fzqHOmc6YzpkgzpbOkc6azqXOnc6Yzp/OpSwgzprOn86hzqnOnc6XIM6WzpHOms6lzp3OmM6fzqUsIM6czpHOoc6ZzpXOoyDOls6RzprOpc6dzpjOn86lLCDOnM6ZzprOoc6fIM6dzpfOo86ZIM6WzpHOms6lzp3OmM6fzqUsIM6fzqHOmM6fzp3Omc6VzqMgzpbOkc6azqXOnc6Yzp/OpSwgzqPOms6Zzp3Okc6hzpnOkSDOls6RzprOpc6dzpjOn86lJywgUHJlZmVjdHVyZTogJ86WzrHOus+Nzr3OuM6/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI5MDkyJywgQXJlYTogJ86RzpPOkc6bzpHOoyDOls6RzprOpc6dzpjOn86lLCDOkc6TzpnOn86ZIM6gzpHOnc6kzpXOoyDOls6RzprOpc6dzpjOn86lLCDOkc6TzpnOn86jIM6bzpXOqc6dIM6WzpHOms6lzp3OmM6fzqUsIM6RzpPOmc6fzqMgzqPOqc6jzqTOl86jIM6WzpHOms6lzp3OmM6fzqUsIM6RzpcgzpPOmc6Rzp3Onc6XzqMgzpHOk86RzpvOkSDOls6RzprOpc6dzpjOn86lLCDOkc6czqDOlc6bzp/OoyDOls6RzprOpc6dzpjOn86lLCDOkc6gzpXOm86RzqTOmSDOls6RzprOpc6dzpjOn86lLCDOks6fzqXOk86ZzpHOpM6fIM6WzpHOms6lzp3OmM6fzqUsIM6TzpHOm86RzqHOnyDOls6RzprOpc6dzpjOn86lLCDOk86lzqHOmc6fIM6WzpHOms6lzp3OmM6fzqUsIM6azpHOm86gzpHOms6ZIM6WzpHOms6lzp3OmM6fzqUsIM6azpXOoc6ZIM6WzpHOms6lzp3OmM6fzqUsIM6azp/Omc6bzpnOqc6czpXOnc6fzqMgzpbOkc6azqXOnc6Yzp/OpSwgzpvOkc6TzpHOnc6RzqMgzpbOkc6azqXOnc6Yzp/OpSwgzpvOkc6TzprOkc6UzpHOms6ZzpEgzpbOkc6azqXOnc6Yzp/OpSwgzpvOkc6TzqnOoM6fzpTOnyDOls6RzprOpc6dzpjOn86lLCDOm86ZzpjOkc6azpnOkSDOls6RzprOpc6dzpjOn86lLCDOm86ZzpzOnc6XIM6azpXOoc6Zzp/OpSDOls6RzprOpc6dzpjOn86lLCDOm86fzqXOp86RIM6WzpHOms6lzp3OmM6fzqUsIM6czpHOoc6RzpjOmc6RzqMgzpbOkc6azqXOnc6Yzp/OpSwgzpzOkc6nzpHOmc6hzpHOlM6fIM6WzpHOms6lzp3OmM6fzqUsIM6czpXOm86Zzp3Okc6Uzp8gzpbOkc6azqXOnc6Yzp/OpSwgzpzOn86lzpbOkc6azpkgzpbOkc6azqXOnc6Yzp/OpSwgzqDOkc6dzqTOn86azqHOkc6kzqnOoc6RzqMgzpbOkc6azqXOnc6Yzp/OpSwgzqHOn86czpnOoc6ZIM6WzpHOms6lzp3OmM6fzqUsIM6jzqTOl86czpnOlc6jIM6WzpHOms6lzp3OmM6fzqUsIM6mzpnOn86bzpnOpM6XzqMgzpbOkc6azqXOnc6Yzp/OpSwgzqbOpM6VzqHOmc6dzpkgzpbOkc6azqXOnc6Yzp/OpScsIFByZWZlY3R1cmU6ICfOls6xzrrPjc69zrjOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyOTEwMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6SzpHOo86ZzpvOmc6azp/OpSDOls6RzprOpc6dzpjOn86lLCDOkc6TzpnOn86jIM6azpfOoc6lzprOn86jIM6WzpHOms6lzp3OmM6fzqUsIM6RzprOoc6pzqTOl86hzpkgzpbOkc6azqXOnc6Yzp/OpSwgzpHOnM6gzpXOm86fzprOl86gzp/OmSDOls6RzprOpc6dzpjOn86lLCDOkc6dzqkgzpLOkc6jzpnOm86ZzprOn86jIM6WzpHOms6lzp3OmM6fzqUsIM6RzqHOk86RzqPOmSDOls6RzprOpc6dzpjOn86lLCDOks6Rzp3Okc6kzp8gzpbOkc6azqXOnc6Yzp/OpSwgzpLOkc6jzpnOm86ZzprOn86jIM6WzpHOms6lzp3OmM6fzqUsIM6TzpHOmc6kzpHOnc6ZIM6WzpHOms6lzp3OmM6fzqUsIM6UzqHOn86jzpnOkSDOls6RzprOpc6dzpjOn86lLCDOls6RzprOpc6dzpjOn86jIM6WzpHOms6lzp3OmM6fzqUsIM6azpHOm86RzpzOkc6azpkgzpbOkc6azqXOnc6Yzp/OpSwgzprOkc6bzpnOoM6RzpTOnyDOls6RzprOpc6dzpjOn86lLCDOms6RzpvOm86ZzqTOlc6hzp/OoyDOls6RzprOpc6dzpjOn86lLCDOms6RzpvOn86dzpfOo86ZIM6WzpHOms6lzp3OmM6fzqUsIM6azqXOlM6pzp3OmSDOls6RzprOpc6dzpjOn86lLCDOms6lzqjOlc6bzpcgzpbOkc6azqXOnc6Yzp/OpSwgzpvOmc6czp/Onc6kzpHOmc6ZzprOkSDOls6RzprOpc6dzpjOn86lLCDOnM6RzqHOk86RzqHOkc6ZzpnOms6RIM6WzpHOms6lzp3OmM6fzqUsIM6czpXOo86fIM6TzpXOoc6RzprOkc6hzpkgzpbOkc6azqXOnc6Yzp/OpSwgzpzOn86dzpcgzqPOpM6hzp/Ops6RzpTOqc6dIM6WzpHOms6lzp3OmM6fzqUsIM6czqDOn86nzpHOm86XIM6WzpHOms6lzp3OmM6fzqUsIM6dzpXOoc6fzpzOpc6bzp/OoyDOls6RzprOpc6dzpjOn86lLCDOns6XzqHOn86azpHOo86kzpXOm86bzp8gzpbOkc6azqXOnc6Yzp/OpSwgzqDOlc6lzprOkc6azpnOkSDOls6RzprOpc6dzpjOn86lLCDOoM6bzpHOnc6fzqMgzpbOkc6azqXOnc6Yzp/OpSwgzqPOkc6hzpHOms6Xzp3Okc6Uzp8gzpbOkc6azqXOnc6Yzp/OpSwgzqTOoc6RzpPOkc6azpkgzpbOkc6azqXOnc6Yzp/OpSwgzqfOkc6czp/Opc6WzpHOoyDOls6RzprOpc6dzpjOn86lLCDOqM6RzqHOkc6ZzpnOms6RIM6WzpHOms6lzp3OmM6fzqUsIM6ozpHOoc6fzqUgzpbOkc6azqXOnc6Yzp/OpScsIFByZWZlY3R1cmU6ICfOls6xzrrPjc69zrjOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNzA1MCcsIEFyZWE6ICfOkc6TzpnOn86jIM6gzpHOnc6kzpXOm86VzpfOnM6pzp0gzpLOkc6hzpjOn86bzp/OnM6Zzp/OpSDOl86bzpXOmc6RzqMsIM6RzqHOms6fzqXOlM6ZIM6XzpvOlc6ZzpHOoywgzpLOkc6hzpjOn86bzp/OnM6Zzp8gzpfOm86VzpnOkc6jLCDOks6RzqTOmc6pzp3Okc6jIM6XzpvOlc6ZzpHOoywgzpLOoc6Rzp3Okc6jIM6XzpvOlc6ZzpHOoywgzpPOm86lzqbOkSDOl86bzpXOmc6RzqMsIM6UzpfOnM6XzqTOoc6RIM6XzpvOlc6ZzpHOoywgzpjOmc6dzpXOoyDOl86bzpXOmc6RzqMsIM6Zzp/Onc6ZzprOnyDOl86bzpXOmc6RzqMsIM6azpHOm86RzpzOmc6RIM6XzpvOlc6ZzpHOoywgzprOkc6bzqXOks6ZzpEgzpzOpc6hzqTOn86lzp3OpM6ZzqnOnSDOl86bzpXOmc6RzqMsIM6azpHOoc6RzpLOkc6azpkgzpfOm86VzpnOkc6jLCDOms6RzqHOlM6ZzpHOms6RzqXOpM6XIM6XzpvOlc6ZzpHOoywgzprOkc6jzqTOoc6fIM6XzpvOlc6ZzpHOoywgzprOn86azprOkc6bzpEgzpfOm86VzpnOkc6jLCDOm86fzqXOpM6hzpEgzprOpc6bzpvOl86dzpfOoyDOl86bzpXOmc6RzqMsIM6bzqXOk86ZzpEgzpfOm86VzpnOkc6jLCDOnM6RzqfOn86jIM6XzpvOlc6ZzpHOoywgzqDOkc6hzpHOm86ZzpEgzpjOmc6dzqnOnSDOl86bzpXOmc6RzqMsIM6gzpHOoc6RzpvOmc6RIM6bzqXOk86ZzpHOoyDOl86bzpXOmc6RzqMsIM6hzpXOk86azpvOkc6ZzpnOms6RIM6XzpvOlc6ZzpHOoywgzqHOqc6czpXOmc6azpEgzpHOnM6RzpvOmc6RzpTOn86jIM6XzpvOlc6ZzpHOoywgzqPOpM6hzp/Opc6czqDOn86lzpvOlyDOl86bzpXOmc6RzqMsIM6ozpfOm86XIM6hzpHOp86XIM6XzpvOlc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOl867zrXOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI3MDUxJywgQXJlYTogJ86Rzp3OlM6hzpHOks6ZzpTOkSDOl86bzpXOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpfOu861zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNzA1MicsIEFyZWE6ICfOkc6TzpnOkSDOnM6RzqHOmc6dzpEgzpfOm86VzpnOkc6jLCDOkc6TzpnOn86jIM6RzpjOkc6dzpHOo86Zzp/OoyDOnc6XzqPOmc6fzqUgzpfOm86VzpnOkc6jLCDOkc6TzpnOn86jIM6nzpHOoc6RzpvOkc6czqDOn86jIM6XzpvOlc6ZzpHOoywgzpHOlc6kzp/Ooc6hzpHOp86XIM6XzpvOlc6ZzpHOoywgzpHOnc6pIM6SzpXOm86ZzqTOo86VzqMgzpHOp86RzpnOkc6jLCDOkc6dzqkgzprOn86lzqHOpM6VzqPOmSDOl86bzpXOmc6RzqMsIM6SzpHOoc6UzpEgzpfOm86VzpnOkc6jLCDOks6fzqXOoM6hzpHOo86ZIM6RzqfOkc6ZzpHOoywgzpTOkc6mzp3OlyDOkc6VzqTOn86hzqHOkc6nzpfOoyDOl86bzpXOmc6RzqMsIM6YzpHOnc6RzqPOn86lzpvOkc6ZzpnOms6RIM6XzpvOlc6ZzpHOoywgzprOkc6bzp/Ok86hzpnOkSDOkc6nzpHOmc6RzqMsIM6azpHOm86lzpLOkc6azpnOkSDOns6Vzp3Omc6pzp0gzpfOm86VzpnOkc6jLCDOms6Rzp3OlM6RzpvOn86jIM6gzpHOpM6hzqnOnSDOkc6nzpHOmc6RzqMsIM6azpHOoM6VzpvOlc6kzp8gzpfOm86VzpnOkc6jLCDOms6RzqHOkc6Szp/Opc6bzpHOmc6ZzprOkSDOl86bzpXOmc6RzqMsIM6azpHOoc6Szp/Opc6dzpHOmc6ZzprOkSDOl86bzpXOmc6RzqMsIM6azpHOpM6pIM6SzpXOm86ZzqTOo86VzqMgzpHOp86RzpnOkc6jLCDOms6fzqTOpM6VzpnOms6RIM6XzpvOlc6ZzpHOoywgzprOn86lzpPOkc6ZzpnOms6RIM6XzpvOlc6ZzpHOoywgzprOn86lzqHOpM6VzqPOlyDOl86bzpXOmc6RzqMsIM6azqHOlc6czpzOpc6UzpkgzpfOm86VzpnOkc6jLCDOms6pzpzOlyDOl86bzpXOmc6RzqMsIM6bzpHOoM6RzqMgzpHOp86RzpnOkc6jLCDOm86fzqXOpM6hzpEgzqXOoc6czpnOnc6XzqMgzpfOm86VzpnOkc6jLCDOnM6Rzp3Oqc6bzpHOlM6RIM6XzpvOlc6ZzpHOoywgzpzOlc6TzpHOm86fIM6gzpXOpc6azp8gzpfOm86VzpnOkc6jLCDOnM6VzpvOmc6jzqPOkSDOl86bzpXOmc6RzqMsIM6czpXOpM6fzqfOmSDOoM6RzqTOoc6pzp0gzpHOp86RzpnOkc6jLCDOnM6ZzqfOn86Zzp8gzpHOp86RzpnOkc6jLCDOnM6gzp/Ooc6jzpkgzpfOm86VzpnOkc6jLCDOnM6gzqHOmc6dzpnOkSDOl86bzpXOmc6RzqMsIM6dzpXOkSDOnM6Rzp3Oqc6bzpHOlM6RIM6XzpvOlc6ZzpHOoywgzp3Olc6RzqDOn86bzpcgzpfOm86VzpnOkc6jLCDOnc6Vzp8gzpLOn86lzqDOoc6RzqPOmc6fIM6RzqfOkc6ZzpHOoywgzp3Ol86jzpkgzpfOm86VzpnOkc6jLCDOns6Vzp3Omc6VzqMgzpfOm86VzpnOkc6jLCDOoM6RzpvOkc6Zzp/Op86pzqHOkSDOl86bzpXOmc6RzqMsIM6gzpHOoc6RzpvOmc6czp3OlyDOkc6nzpHOmc6RzqMsIM6jzpHOnM6RzqHOkc6ZzpnOms6RIM6XzpvOlc6ZzpHOoywgzqPOpc6czqDOkc6dzpkgzpfOm86VzpnOkc6jLCDOpM6jzpHOnM6RzpnOmc6azpEgzpHOp86RzpnOkc6jLCDOqM6RzqHOmSDOl86bzpXOmc6RzqMsIM6ozpXOpc6kzpXOmc6azpEgzpHOp86RzpnOkc6jJywgUHJlZmVjdHVyZTogJ86XzrvOtc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjcwNTMnLCBBcmVhOiAnzpHOk86Zzp/OmSDOmM6Vzp/OlM6pzqHOn86ZIM6bzpXOp86RzpnOnc6pzp0gzpfOm86VzpnOkc6jLCDOkc6TzpnOn86jIM6gzpHOnc6kzpXOm86VzpfOnM6pzp0gzpvOlc6nzpHOmc6dzqnOnSDOl86bzpXOmc6RzqMsIM6RzqHOlc6kzpcgzpfOm86VzpnOkc6jLCDOks6hzpHOp86dzpHOmc6ZzprOkSDOl86bzpXOmc6RzqMsIM6SzqXOpM6Zzp3Okc6ZzpnOms6RIM6XzpvOlc6ZzpHOoywgzprOkc6kzpHOoc6hzpHOp86ZIM6XzpvOlc6ZzpHOoywgzpvOlc6nzpHOmc6dzpEgzpfOm86VzpnOkc6jLCDOnM6RzqHOms6fzqDOn86lzpvOnyDOl86bzpXOmc6RzqMsIM6czqXOoc6jzpnOnc6XIM6XzpvOlc6ZzpHOoywgzp3Olc6fzqfOqc6hzpkgzpbOkc6nzpHOoc6pzqMgzpfOm86VzpnOkc6jLCDOnc6Vzp/Op86pzqHOmSDOnM6lzqHOpM6fzqXOnc6kzpnOqc6dIM6XzpvOlc6ZzpHOoywgzp/Om86TzpEgzpfOm86VzpnOkc6jLCDOoM6XzpPOkc6UzpkgzpfOm86VzpnOkc6jLCDOo86ZzpzOmc6WzpEgzpfOm86VzpnOkc6jLCDOo86kzpHOps6ZzpTOn86azpHOnM6gzp/OoyDOl86bzpXOmc6RzqMsIM6jzqTOoc6fzqXOo86ZIM6XzpvOlc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOl867zrXOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI3MDU0JywgQXJlYTogJ86RzpPOmc6fzqMgzpfOm86ZzpHOoyDOn86bzqXOnM6gzpnOkc6jIM6XzpvOlc6ZzpHOoywgzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6WzpHOp86RzqHOqc6jIM6XzpvOlc6ZzpHOoywgzpHOk86hzpHOoM6ZzpTOmc6RIM6XzpvOlc6ZzpHOoywgzpHOnc6XzpvOmc6fIM6XzpvOlc6ZzpHOoywgzpHOoc6Xzp3OlyDOl86bzpXOmc6RzqMsIM6RzqHOpM6VzpzOmc6UzpEgzpfOm86VzpnOkc6jLCDOk86ZzpHOnc6dzpnOpM6jzp/Op86pzqHOmSDOl86bzpXOmc6RzqMsIM6WzpHOp86RzqHOqSDOl86bzpXOmc6RzqMsIM6Yzp/Om86fIM6XzpvOlc6ZzpHOoywgzprOkc6ZzpHOps6RzqMgzpfOm86VzpnOkc6jLCDOms6RzprOn86SzpHOpM6fzqMgzpfOm86VzpnOkc6jLCDOms6RzpvOmc6Uzp/Onc6RIM6XzpvOlc6ZzpHOoywgzprOkc6czqDOn86jIM6azpHOm86ZzpTOn86dzpHOoyDOl86bzpXOmc6RzqMsIM6azpHOpM6pIM6RzqHOl86dzpcgzpfOm86VzpnOkc6jLCDOms6RzqTOqSDOns6XzqHOn86nzqnOoc6ZIM6XzpvOlc6ZzpHOoywgzprOkc6kzqkgzqTOkc6ezpnOkc6hzqfOlc6jIM6XzpvOlc6ZzpHOoywgzprOn86jzqTOn86czpXOoc6RIM6XzpvOlc6ZzpHOoywgzprOn86kzqHOqc6dzpHOms6ZIM6XzpvOlc6ZzpHOoywgzprOn86kzqHOqc6dzpkgzpzOmc6dzpjOlyDOl86bzpXOmc6RzqMsIM6azp/OpM6hzqnOnc6ZIM6ezpfOoc6fzqfOqc6hzpnOn86lIM6XzpvOlc6ZzpHOoywgzprOn86lzpzOn86lzpjOlc6azqHOkSDOl86bzpXOmc6RzqMsIM6bzp/Ok86TzpHOms6ZIM6XzpvOlc6ZzpHOoywgzpzOkc6azpnOo86kzp/OoyDOl86bzpXOmc6RzqMsIM6czpHOoc6RzpjOn86jIM6XzpvOlc6ZzpHOoywgzpzOl86bzpXOkSDOl86bzpXOmc6RzqMsIM6czpnOnc6YzpcgzpfOm86VzpnOkc6jLCDOnM6gzp/Opc6hzpzOoM6fzqXOm86RzqMgzpfOm86VzpnOkc6jLCDOnc6Vzp/Op86pzqHOmSDOns6XzqHOn86nzqnOoc6Zzp/OpSDOl86bzpXOmc6RzqMsIM6ezpfOoc6fzqfOqc6hzpkgzpfOm86VzpnOkc6jLCDOoM6RzpvOkc6Zzp/Op86pzqHOmSDOpM6hzqXOoM6pzp0gzpfOm86VzpnOkc6jLCDOoM6RzpvOmc6fIM6gzqHOkc6jzpnOlM6RzprOmSDOl86bzpXOmc6RzqMsIM6gzpHOnc6RzpPOmc6RIM6ezpfOoc6fzqfOqc6hzpnOn86lIM6XzpvOlc6ZzpHOoywgzqDOkc6dzpHOk86ZzpEgzqPOnM6VzqHOnc6RzqMgzpfOm86VzpnOkc6jLCDOoM6Rzp3Okc6TzpnOlc6jIM6XzpvOlc6ZzpHOoywgzqDOkc6dzp/Ooc6RzpzOkSDOl86bzpXOmc6RzqMsIM6gzqHOkc6jzpnOlM6RzprOmSDOl86bzpXOmc6RzqMsIM6hzpXOks6VzpvOkc6ZzpnOms6RIM6XzpvOlc6ZzpHOoywgzqHOn86UzpnOnc6RIM6XzpvOlc6ZzpHOoywgzqPOnM6VzqHOnc6RIM6XzpvOlc6ZzpHOoywgzqPOp86Zzp3On86ZIM6XzpvOlc6ZzpHOoywgzqTOoc6Rzp3OlyDOm86RzprOkSDOl86bzpXOmc6RzqMsIM6nzqHOpc6jzp/Op86pzqHOmSDOl86bzpXOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpfOu861zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNzA1NScsIEFyZWE6ICfOkc6dzpXOnM6fzqfOqc6hzpHOms6ZIM6XzpvOlc6ZzpHOoywgzpLOoc6Zzp3OkSDOl86bzpXOmc6RzqMsIM6TzqHOkc6ZzprOkc6jIM6XzpvOlc6ZzpHOoywgzpPOoc6lzpvOm86fzqMgzpfOm86VzpnOkc6jLCDOms6RzpvOpc6SzpHOms6ZzpEgzp/Om86lzpzOoM6ZzpHOoyDOl86bzpXOmc6RzqMsIM6azpHOpM6pIM6jzpHOnM6ZzprOnyDOl86bzpXOmc6RzqMsIM6azpvOlc6ZzpTOmSDOl86bzpXOmc6RzqMsIM6azqHOlc6jzqTOlc6dzpEgzpfOm86VzpnOkc6jLCDOms6hzp/Opc6dzp/OmSDOl86bzpXOmc6RzqMsIM6czpHOms6hzpnOo86ZzpEgzpfOm86VzpnOkc6jLCDOnM6fzqPOp86fzqXOm86RIM6XzpvOlc6ZzpHOoywgzp3Olc6RIM6azpHOm86lzpLOkc6azpnOkSDOl86bzpXOmc6RzqMsIM6dzpXOkSDOo86azpnOm86bzp/Opc6dzqTOmc6RIM6XzpvOlc6ZzpHOoywgzp3Olc6fIM6nzqnOoc6Zzp8gzpfOm86VzpnOkc6jLCDOoM6bzp/Opc6kzp/Op86pzqHOmSDOl86bzpXOmc6RzqMsIM6gzp/Ooc6fzqMgzpfOm86VzpnOkc6jLCDOoc6RzqfOlc6jIM6XzpvOlc6ZzpHOoywgzqPOkc6czpnOms6fIM6XzpvOlc6ZzpHOoywgzqPOms6ZzpvOm86fzqXOnc6kzpnOkSDOl86bzpXOmc6RzqMsIM6mzqHOkc6TzprOn86azprOm86XzqPOmc6RIM6XzpvOlc6ZzpHOoywgzqbOoc6Zzp7OkSDOl86bzpXOmc6RzqMsIM6nzpHOnc6ZIM6TzqHOpc6bzpvOn86lIM6XzpvOlc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOl867zrXOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI3MDU2JywgQXJlYTogJ86azqHOpc6fzp3Olc6hzpkgzpfOm86VzpnOkc6jIM6XzpvOlc6ZzpHOoywgzprOoc6lzp/Onc6VzqHOmSDOn86bzqXOnM6gzpnOkc6jIM6XzpvOlc6ZzpHOoywgzpvOlc6gzqHOlc6fIM6XzpvOlc6ZzpHOoywgzp3Olc6RIM6mzpnOk86RzpvOlc6ZzpEgzpfOm86VzpnOkc6jLCDOo86azp/Opc6gzpHOoyDOl86bzpXOmc6RzqMsIM6kzpHOns6ZzpHOoc6nzpXOoyDOl86bzpXOmc6RzqMsIM6kzqHOmc6Rzp3OpM6RIM6XzpvOlc6ZzpHOoywgzqbOkc6jzprOn86czpfOm86ZzpEgzpfOm86VzpnOkc6jJywgUHJlZmVjdHVyZTogJ86XzrvOtc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjcwNTgnLCBBcmVhOiAnzpHOk86hzpnOlM6ZIM6XzpvOlc6ZzpHOoywgzpHOm86mzpXOmc6fzqXOo86RIM6XzpvOlc6ZzpHOoywgzpHOnc6VzpzOn86nzqnOoc6ZIM6XzpvOlc6ZzpHOoywgzpXOoM6ZzqTOkc6bzpnOnyDOl86bzpXOmc6RzqMsIM6azpHOm86bzpnOms6pzpzOnyDOl86bzpXOmc6RzqMsIM6bzpHOlM6ZzprOnyDOl86bzpXOmc6RzqMsIM6gzpHOoc6RzpvOmc6RIM6VzqDOmc6kzpHOm86Zzp/OpSDOl86bzpXOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpfOu861zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNzA2MScsIEFyZWE6ICfOkc6TzpnOn86jIM6SzpvOkc6jzpfOoyDOnM6lzqHOqc6dzpnOqc6dIM6XzpvOlc6ZzpHOoywgzpHOk86Zzp/OoyDOo86pzqPOpM6XzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOkc6czqDOlc6bzpnOqc6dzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOkc6czqXOk86UzpHOm86ZzpXOoyDOl86bzpXOmc6RzqMsIM6Rzp3OlM6hzpnOpM6jzpHOmc6dzpEgzpfOm86VzpnOkc6jLCDOks6hzpXOo86kzp8gzpfOm86VzpnOkc6jLCDOlM6hzpHOk86pzpPOmSDOl86bzpXOmc6RzqMsIM6YzpXOmc6jzp/OkSDOl86bzpXOmc6RzqMsIM6azpHOms6RzpvOlc6kzqHOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOoc6czpkgzpfOm86VzpnOkc6jLCDOms6RzqPOpM6hzp/Opc6TzprOkc6Zzp3OkSDOl86bzpXOmc6RzqMsIM6azpHOpM6pIM6RzpzOpc6TzpTOkc6bzpnOlc6jIM6XzpvOlc6ZzpHOoywgzprOm86XzpzOkSDOl86bzpXOmc6RzqMsIM6azp/Opc6mzp/OoM6fzqXOm86fIM6XzpvOlc6ZzpHOoywgzprOoc6Rzp3OkSDOl86bzpXOmc6RzqMsIM6azqnOpM6ZzpvOmSDOkc6hzprOkc6UzpnOkc6jLCDOm86Zzp3Omc6jzqTOkc6Zzp3OkSDOl86bzpXOmc6RzqMsIM6bzp/Ok86Tzp8gzpfOm86VzpnOkc6jLCDOnM6RzqHOmc6dzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6RzqTOlc6jzpkgzpfOm86VzpnOkc6jLCDOnM6gzpHOm86RzpnOmc6azpEgzpfOm86VzpnOkc6jLCDOnM6lzpvOn86ZIM6XzpvOlc6ZzpHOoywgzpzOpc6hzqnOnc6ZzpEgzpfOm86VzpnOkc6jLCDOnc6VzpTOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpHOm86RzqTOn86jIM6RzqHOms6RzpTOmc6RzqMsIM6gzpXOoc6ZzpLOn86bzpnOkSDOl86bzpXOmc6RzqMsIM6gzpXOpM6hzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6VzqTOoc6RzpvOqc6dzpEgzpfOm86VzpnOkc6jLCDOoM6bzpHOpM6VzpnOkSDOl86bzpXOmc6RzqMsIM6hzpHOnM6RIM6czqXOoc6pzp3Omc6pzp0gzpfOm86VzpnOkc6jLCDOoc6fzpLOmc6RIM6XzpvOlc6ZzpHOoywgzqPOms6bzpfOoc6fzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOo86kzp/OnM6Zzp8gzpfOm86VzpnOkc6jLCDOo86kzqHOn86TzpPOpc6bzp8gzpHOoc6azpHOlM6ZzpHOoywgzqPOpc6azpXOlc6jIM6XzpvOlc6ZzpHOoywgzqbOkc6dzpHOoc6ZIM6fzpvOpc6czqDOmc6RzqMgzpfOm86VzpnOkc6jLCDOps6ZzpPOkc6bzpXOmc6RIM6XzpvOlc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOl867zrXOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI3MDYzJywgQXJlYTogJ86RzpPOmc6RIM6azqXOoc6ZzpHOms6XIM6XzpvOlc6ZzpHOoywgzpHOk86Zzp/OoyDOkc6dzpTOoc6VzpHOoyDOpM6jzpnOoM6ZzpHOnc6pzp0gzpfOm86VzpnOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzpHOnc6kzqHOqc6dzpnOn86lIM6XzpvOlc6ZzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6gzqXOoc6Tzp/OpSDOl86bzpXOmc6RzqMsIM6RzpzOpc6TzpTOkc6bzpcgzpfOm86VzpnOkc6jLCDOkc6dzqTOoc6pzp3OmSDOl86bzpXOmc6RzqMsIM6RzqPOpM6hzpHOoyDOl86bzpXOmc6RzqMsIM6azpHOms6fzqTOkc6hzpkgzpfOm86VzpnOkc6jLCDOms6RzpvOpc6SzpnOkSDOkc6jzqTOoc6RIM6XzpvOlc6ZzpHOoywgzprOkc6bzqXOks6ZzpEgzprOoc6lzp/Oks6hzqXOo86XzqMgzpfOm86VzpnOkc6jLCDOms6VzqHOlc6jzp/Oks6RIM6XzpvOlc6ZzpHOoywgzprOoc6lzp/Oks6hzqXOo86XIM6XzpvOlc6ZzpHOoywgzpvOkc6czqDOlc6ZzpEgzpfOm86VzpnOkc6jLCDOn86hzpXOmc6dzpcgzpfOm86VzpnOkc6jLCDOoM6RzpvOkc6Zzp/Ops6lzqTOmc6RIM6XzpvOlc6ZzpHOoywgzqDOkc6dzp/OoM6fzqXOm86fzqMgzpfOm86VzpnOkc6jLCDOpM6jzpnOoM6ZzpHOnc6RIM6XzpvOlc6ZzpHOoywgzqfOkc6dzpnOkSDOo86gzpHOoc6kzp/Opc6bzpnOkSDOl86bzpXOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpfOu861zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNzA2NCcsIEFyZWE6ICfOkc6TzpnOkSDOkc6dzp3OkSDOl86bzpXOmc6RzqMsIM6RzqHOks6Rzp3Omc6kzpfOoyDOl86bzpXOmc6RzqMsIM6SzpHOoc6SzpHOoc6Zzp3OkSDOl86bzpXOmc6RzqMsIM6Tzp/Opc6czpXOoc6fIM6XzpvOlc6ZzpHOoywgzprOkc6hzpHOpM6fzqXOm86RIM6XzpvOlc6ZzpHOoywgzprOkc6hzqXOkSDOl86bzpXOmc6RzqMsIM6azpHOpM6jzp/OnM6RzpvOmc6RzqHOkc6ZzpnOms6RIM6XzpvOlc6ZzpHOoywgzprOm86VzpnOlM6VzqHOlc6ZzprOkSDOl86bzpXOmc6RzqMsIM6azpvOmc6dzpTOmc6RIM6XzpvOlc6ZzpHOoywgzprOn86lzqTOo86fzqfOlc6hzpEgzpfOm86VzpnOkc6jLCDOm86Rzp3OmM6ZIM6XzpvOlc6ZzpHOoywgzpzOkc6Tzp/Opc6bzpEgzpfOm86VzpnOkc6jLCDOnM6RzqHOnM6RzqHOkSDOl86bzpXOmc6RzqMsIM6czp/Onc6XIM6azqHOlc6czpHOo86kzpfOoyDOl86bzpXOmc6RzqMsIM6czp/Opc6WzpHOms6ZIM6XzpvOlc6ZzpHOoywgzqDOlc6lzprOlyDOl86bzpXOmc6RzqMsIM6jzpnOpM6fzqfOqc6hzpkgzpfOm86VzpnOkc6jLCDOo86fzqDOmc6fIM6XzpvOlc6ZzpHOoywgzqfOkc6hzpnOkSDOl86bzpXOmc6RzqMsIM6nzpXOmc6czpHOlM6Zzp8gzpfOm86VzpnOkc6jLCDOqc6bzpXOnc6XIM6XzpvOlc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOl867zrXOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI3MDY1JywgQXJlYTogJ86RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOoM6bzpHOpM6Rzp3On86lIM6XzpvOlc6ZzpHOoywgzpHOnM6gzpHOoc6ZIM6XzpvOlc6ZzpHOoywgzpHOoc6nzpHOmc6RIM6fzpvOpc6czqDOmc6RIM6XzpvOlc6ZzpHOoywgzpHOoc6nzpHOmc6RIM6gzpnOo86RIM6XzpvOlc6ZzpHOoywgzpHOo86gzqHOkSDOo86gzpnOpM6ZzpEgzpfOm86VzpnOkc6jLCDOks6RzqPOmc6bzpHOms6ZIM6XzpvOlc6ZzpHOoywgzpPOpc6hzp/OoyDOm86fzqXOks6hzp/OpSDOl86bzpXOmc6RzqMsIM6UzpnOlc6Yzp3Ol86jIM6fzpvOpc6czqDOmc6RzprOlyDOkc6azpHOlM6XzpzOmc6RIM6XzpvOlc6ZzpHOoywgzpTOoc6fzqXOks6RIM6XzpvOlc6ZzpHOoywgzprOkc6czpXOnc6RIM6XzpvOlc6ZzpHOoywgzprOkc6hzp/Opc6kzpXOoyDOl86bzpXOmc6RzqMsIM6azpHOpM6pIM6jzqTOoc6VzqbOmSDOl86bzpXOmc6RzqMsIM6azpvOkc6UzpXOn86jIM6XzpvOlc6ZzpHOoywgzprOn86jzprOmc6dzpEgzpfOm86VzpnOkc6jLCDOm86Zzp3Okc6hzpnOkSDOl86bzpXOmc6RzqMsIM6bzp/Opc6SzqHOnyDOl86bzpXOmc6RzqMsIM6czpHOk86VzpnOoc6RzqMgzpfOm86VzpnOkc6jLCDOnM6ZzqHOkc6azpEgzpfOm86VzpnOkc6jLCDOnM6fzqXOoc6ZzpEgzpfOm86VzpnOkc6jLCDOnc6VzpEgzprOkc6czpXOnc6RIM6XzpvOlc6ZzpHOoywgzp7Ol86hzp/Oms6RzpzOoM6fzqMgzpfOm86VzpnOkc6jLCDOn86bzqXOnM6gzpnOkc6jIM6XzpvOlc6ZzpHOoywgzqDOlc6lzprOlc6jIM6XzpvOlc6ZzpHOoywgzqDOm86RzqTOkc6dzp/OoyDOl86bzpXOmc6RzqMsIM6lzqjOl86bzp8gzpfOm86VzpnOkc6jLCDOps6Rzp3Okc6hzpHOoyDOkc6hzqfOkc6ZzpHOoyDOn86bzqXOnM6gzpnOkc6jIM6XzpvOlc6ZzpHOoywgzqbOm86fzprOkc6jIM6XzpvOlc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOl867zrXOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI3MDY2JywgQXJlYTogJ86RzpkgzpPOmc6Rzp3Onc6RzprOl86jIM6XzpvOlc6ZzpHOoywgzpHOp86bzpHOlM6Zzp3OlyDOl86bzpXOmc6RzqMsIM6SzpnOm86bzpnOkSDOl86bzpXOmc6RzqMsIM6Uzp/Opc6azpEgzpfOm86VzpnOkc6jLCDOms6RzpzOoM6fzqMgzp3Olc6czp/Opc6kzpEgzpfOm86VzpnOkc6jLCDOms6RzpzOoM6fzqMgzp3Olc6hzpHOmc6UzpHOoyDOl86bzpXOmc6RzqMsIM6azpHOo86kzpHOnc6ZzpEgzpfOm86VzpnOkc6jLCDOms6fzqXOnM6Rzp3OlyDOl86bzpXOmc6RzqMsIM6azp/Opc6kzqPOn86lzqHOn86lzpzOoM6RzqMgzpfOm86VzpnOkc6jLCDOm86RzpvOkSDOl86bzpXOmc6RzqMsIM6bzpHOo86UzpnOms6RIM6XzpvOlc6ZzpHOoywgzpzOl86bzpnOlc6jIM6XzpvOlc6ZzpHOoywgzp3Olc6RIM6gzpXOoc6jzpHOmc6dzpEgzpfOm86VzpnOkc6jLCDOnc6VzpzOn86lzqTOkSDOl86bzpXOmc6RzqMsIM6dzpXOoc6RzpnOlM6RIM6XzpvOlc6ZzpHOoywgzqDOlc6hzqPOkc6Zzp3OkSDOl86bzpXOmc6RzqMsIM6gzp/OmM6fzqMgzpfOm86VzpnOkc6jLCDOpM6jzpHOoM6RzqHOkc6ZzpnOms6RIM6XzpvOlc6ZzpHOoywgzqbOn86bzp/OlyDOl86bzpXOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpfOu861zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNzA2NycsIEFyZWE6ICfOkc6TzpnOn86jIM6Rzp3OlM6hzpXOkc6jIM6azpHOpM6RzprOn86bzp/OpSDOl86bzpXOmc6RzqMsIM6azpHOks6fzqXOoc6ZIM6XzpvOlc6ZzpHOoywgzprOkc6kzpHOms6fzpvOnyDOl86bzpXOmc6RzqMsIM6azpHOpM6pIM6azpHOks6fzqXOoc6ZIM6XzpvOlc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOl867zrXOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI3MDY5JywgQXJlYTogJ86RzpPOmc6RIM6kzqHOmc6RzpTOkSDOl86bzpXOmc6RzqMsIM6RzpPOmc6fzqMgzpfOm86ZzpHOoyDOoM6Xzp3Olc6ZzpHOoyDOl86bzpXOmc6RzqMsIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOo86ZzpzOn86gzp/Opc6bzp/OpSDOl86bzpXOmc6RzqMsIM6RzpPOnc6Rzp3OpM6RIM6XzpvOlc6ZzpHOoywgzpHOk86hzpHOoM6ZzpTOn86nzqnOoc6ZIM6XzpvOlc6ZzpHOoywgzpHOms6hzp/OoM6fzqTOkc6czpnOkSDOl86bzpXOmc6RzqMsIM6RzpzOoM6VzpvOkc6azpnOkSDOl86bzpXOmc6RzqMsIM6Rzp3OmM6pzp3Okc6jIM6XzpvOlc6ZzpHOoywgzpHOoM6ZzpTOn86lzpvOkSDOl86bzpXOmc6RzqMsIM6RzqXOk86XIM6XzpvOlc6ZzpHOoywgzpLOkc6bzpzOlyDOl86bzpXOmc6RzqMsIM6SzpXOm86Rzp3Omc6UzpkgzpfOm86VzpnOkc6jLCDOks6fzqXOm86ZzpHOk86czpXOnc6XIM6XzpvOlc6ZzpHOoywgzpPOkc6SzqHOkc6azpnOkSDOl86bzpXOmc6RzqMsIM6UzpHOps6dzpcgzqDOl86dzpXOmc6RzqMgzpfOm86VzpnOkc6jLCDOlM6RzqbOnc6ZzqnOpM6ZzqPOo86RIM6XzpvOlc6ZzpHOoywgzpXOps6lzqHOkSDOl86bzpXOmc6RzqMsIM6azpHOm86RzpjOkc6jIM6XzpvOlc6ZzpHOoywgzprOkc6bzp8gzqDOkc6ZzpTOmSDOl86bzpXOmc6RzqMsIM6azpHOnM6gzp/OoyDOl86bzpXOmc6RzqMgzpfOm86VzpnOkc6jLCDOms6RzpzOoM6fzqMgzqDOkc6bzpHOmc6fzpLOkc6hzpLOkc6jzpHOmc6dzpHOoyDOl86bzpXOmc6RzqMsIM6azpXOnc6kzqHOnyDOl86bzpXOmc6RzqMsIM6azpXOoc6RzpzOmc6UzpnOkSDOl86bzpXOmc6RzqMgzpfOm86VzpnOkc6jLCDOms6VzqHOkc6czpnOlM6ZzpEgzqDOoc6RzqPOmc6dzp/OpSDOl86bzpXOmc6RzqMsIM6azp/Om86fzprOpc6YzpHOoyDOl86bzpXOmc6RzqMsIM6azp/OpM6hzqnOnc6RIM6XzpvOlc6ZzpHOoywgzprOoc6lzp/Onc6VzqHOmSDOoM6Xzp3Olc6ZzpHOoyDOl86bzpXOmc6RzqMsIM6bzpHOk86Rzp3Okc6jIM6XzpvOlc6ZzpHOoywgzpvOkc6kzpHOoyDOl86bzpXOmc6RzqMsIM6bzp/Opc6azpHOoyDOl86bzpXOmc6RzqMsIM6czpHOls6RzqHOkc6azpkgzpfOm86VzpnOkc6jLCDOn86Zzp3On86XIM6XzpvOlc6ZzpHOoywgzqDOmc6hzpkgzpfOm86VzpnOkc6jLCDOoM6hzpnOnc6RzqHOmSDOl86bzpXOmc6RzqMsIM6gzqHOn86UzqHOn86czp/OoyDOl86bzpXOmc6RzqMsIM6hzp/OlM6ZzpEgzpfOm86VzpnOkc6jLCDOoc6fzqXOoM6RzprOmc6RIM6SzpXOm86Rzp3Omc6UzpnOn86lIM6XzpvOlc6ZzpHOoywgzqPOmc6czp/OoM6fzqXOm86fIM6XzpvOlc6ZzpHOoywgzqPOms6bzpnOks6RIM6XzpvOlc6ZzpHOoywgzqPOn86lzpvOmSDOl86bzpXOmc6RzqMsIM6pzqHOkc6ZzpEgzpfOm86VzpnOkc6jJywgUHJlZmVjdHVyZTogJ86XzrvOtc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjcxMDAnLCBBcmVhOiAnzpHOk86Zzp/OmSDOkc6gzp/Oo86kzp/Om86fzpkgzpfOm86VzpnOkc6jLCDOkc6TzpnOn86jIM6Rzp3OlM6hzpXOkc6jIM6azp/Ooc6RzprOn86nzqnOoc6Zzp/OpSDOl86bzpXOmc6RzqMsIM6RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOkc6dzpTOoc6RzpLOmc6UzpHOoyDOl86bzpXOmc6RzqMsIM6RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOoM6RzpvOkc6Zzp/Oks6RzqHOks6RzqPOkc6Zzp3Okc6jIM6XzpvOlc6ZzpHOoywgzpHOk86Zzp/OoyDOl86bzpnOkc6jIM6bzpXOpM6hzpnOnc6pzp0gzpfOm86VzpnOkc6jLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6bzpXOpM6hzpnOnc6pzp0gzpfOm86VzpnOkc6jLCDOkc6bzqDOn86nzqnOoc6ZIM6XzpvOlc6ZzpHOoywgzpHOm86mzpXOmc6fzqMgzpfOm86VzpnOkc6jLCDOkc6czqDOlc6bzqnOnc6RzqMgzpfOm86VzpnOkc6jLCDOkc6dzpjOn86gzqXOoc6Tzp/OoyDOl86bzpXOmc6RzqMsIM6SzpHOoc6SzpHOo86RzpnOnc6RIM6XzpvOlc6ZzpHOoywgzpLOn86lzp3Okc6hzpPOnyDOl86bzpXOmc6RzqMsIM6SzqHOn86nzpnOpM6jzpEgzpfOm86VzpnOkc6jLCDOks6lzqTOmc6dzpHOmc6ZzprOkSDOlc6bzpHOmc6pzp3OkSDOl86bzpXOmc6RzqMsIM6SzqXOpM6Zzp3Okc6ZzpnOms6RIM6dzpXOn86nzqnOoc6Zzp/OpSDOnM6lzqHOpM6fzqXOnc6kzpnOqc6dIM6XzpvOlc6ZzpHOoywgzpPOm86lzprOn86hzpnOls6fIM6gzqHOkc6jzpnOnc6fzqUgzpfOm86VzpnOkc6jLCDOk86hzpHOnc6ZzqTOo86RzpnOmc6azpEgzpfOm86VzpnOkc6jLCDOlc6bzpHOmc6pzp3Okc6jIM6XzpvOlc6ZzpHOoywgzpnOpM6ZzpEgzpfOm86VzpnOkc6jLCDOms6RzpLOkc6jzpnOm86RzprOmc6RIM6XzpvOlc6ZzpHOoywgzprOkc6bzpHOms6RzpnOqs6azpEgzpfOm86VzpnOkc6jLCDOms6RzpvOm86ZzpjOlc6RIM6azp/Ooc6RzprOn86nzqnOoc6Zzp/OpSDOl86bzpXOmc6RzqMsIM6azpHOoM6Rzp3OlM6hzpnOpM6ZIM6XzpvOlc6ZzpHOoywgzprOkc6kzqPOkc6hzp/OoyDOl86bzpXOmc6RzqMsIM6azpHOpM6pIM6SzpHOoc6SzpHOo86RzpnOnc6RIM6XzpvOlc6ZzpHOoywgzprOn86bzpnOoc6VzpnOms6VzqMgzqDOkc6hzpHOk86azpXOoyDOl86bzpXOmc6RzqMsIM6azp/Om86ZzqHOmc6fIM6XzpvOlc6ZzpHOoywgzprOn86hzpHOms6fzqfOqc6hzpkgzpfOm86VzpnOkc6jLCDOms6fzqHOpc6mzpcgzpfOm86VzpnOkc6jLCDOms6fzqXOls6fzqXOm86Zzp8gzpfOm86VzpnOkc6jLCDOms6lzpHOnc6XIM6RzprOpM6XIM6XzpvOlc6ZzpHOoywgzpvOkc6jzqTOkc6ZzpnOms6RIM6XzpvOlc6ZzpHOoywgzpvOlc6SzpXOnc6kzp/Op86pzqHOmSDOl86bzpXOmc6RzqMsIM6czp/Onc6XIM6jzprOkc6mzpnOlM6ZzpHOoyDOl86bzpXOmc6RzqMsIM6czp/Onc6XIM6mzqHOkc6TzprOn86gzpfOlM6XzpzOkc6kzp/OoyDOl86bzpXOmc6RzqMsIM6czqDOn86lzprOkSDOl86bzpXOmc6RzqMsIM6czqXOoc6kzpnOkSDOl86bzpXOmc6RzqMsIM6ezqXOm86fzprOlc6hzpEgzpfOm86VzpnOkc6jLCDOoM6RzpvOkc6Zzp/Oks6RzqHOks6RzqPOkc6Zzp3OkSDOl86bzpXOmc6RzqMsIM6gzpHOm86RzqTOkc6jIM6XzpvOlc6ZzpHOoywgzqDOkc6kzqHOn86dzpnOms6fzpvOkc6ZzqrOms6RIM6XzpvOlc6ZzpHOoywgzqDOoc6RzqPOmc6dzp8gzpfOm86VzpnOkc6jLCDOoM6lzqHOk86ZIM6XzpvOlc6ZzpHOoywgzqDOpc6hzpPOn86jIM6XzpvOlc6ZzpHOoywgzqHOn86WzpXOmc6azpEgzpfOm86VzpnOkc6jLCDOo86RzpvOnM6pzp3OlyDOl86bzpXOmc6RzqMsIM6jzprOkc6mzpnOlM6ZzpEgzpfOm86VzpnOkc6jLCDOo86azp/Opc6hzp/Op86pzqHOmSDOl86bzpXOmc6RzqMsIM6jzqTOkc6czpHOpM6VzpvOkc6ZzpnOms6RIM6XzpvOlc6ZzpHOoywgzqPOpc6dzqTOoc6ZzpHOlM6RIM6XzpvOlc6ZzpHOoywgzqbOn86dzpHOmc6kzpnOms6RIM6XzpvOlc6ZzpHOoywgzqfOkc6dzpHOms6ZzpEgzpfOm86VzpnOkc6jJywgUHJlZmVjdHVyZTogJ86XzrvOtc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjcxMzEnLCBBcmVhOiAnzqDOpc6hzpPOn86lIM6XzpvOlc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOl867zrXOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI3MjAwJywgQXJlYTogJ86RzpPOmc6RIM6czpHOoc6Zzp3OkSDOlM6fzqXOnc6RzpnOmc6azqnOnSDOl86bzpXOmc6RzqMsIM6RzpPOmc6fzqMgzpTOl86czpfOpM6hzpnOn86jIM6RzpzOkc6bzpnOkc6UzpHOoyDOl86bzpXOmc6RzqMsIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzpHOnM6RzpvOmc6RzpTOkc6jIM6XzpvOlc6ZzpHOoywgzpHOnM6RzpvOmc6RzpTOkSDOl86bzpXOmc6RzqMsIM6RzpzOoM6VzpvOn86azpHOnM6gzp/OoyDOl86bzpXOmc6RzqMsIM6Rzp3Okc6bzpfOqM6XIM6TzpXOoc6RzprOmc6fzqUgzpfOm86VzpnOkc6jLCDOkc6dzpHOm86XzqjOlyDOms6RzqPOpM6hzp/OpSDOl86bzpXOmc6RzqMsIM6RzqHOp86RzpnOkSDOl86bzpnOlM6RIM6XzpvOlc6ZzpHOoywgzpHOo86kzpXOoc6RzpnOmc6azpEgzpfOm86VzpnOkc6jLCDOk86VzqHOkc6azpkgzpfOm86VzpnOkc6jLCDOlM6Rzp3Omc6azpEgzpfOm86VzpnOkc6jLCDOlM6fzqXOnc6RzpnOmc6azpEgzpfOm86VzpnOkc6jLCDOms6RzqHOlM6RzpzOkc6jIM6XzpvOlc6ZzpHOoywgzprOkc6jzpnOlM6ZzpHOoc6XzqMgzpfOm86VzpnOkc6jLCDOms6RzqTOqSDOms6VzqHOpM6VzpbOkc6ZzpnOms6RIM6XzpvOlc6ZzpHOoywgzprOn86lzqHOn86lzqTOkSDOl86bzpXOmc6RzqMsIM6azqHOpc6fzp3Olc6hzp8gzpfOm86VzpnOkc6jLCDOnM6RzqHOkc6YzpXOkSDOl86bzpXOmc6RzqMsIM6gzpHOm86RzpnOn86bzpHOnc6YzpcgzpfOm86VzpnOkc6jLCDOoM6RzpvOkc6Zzp/Op86pzqHOmSDOl86bzpXOmc6RzqMgzpfOm86VzpnOkc6jLCDOoM6RzpvOn86lzprOmSDOl86bzpXOmc6RzqMsIM6gzpHOnc6RzpPOmc6RIM6RzpzOkc6bzpnOkc6UzpHOoyDOl86bzpXOmc6RzqMsIM6gzpHOoc6RzpvOmc6RIM6hzp/Oks6ZzpHOpM6RzqMgzpfOm86VzpnOkc6jLCDOoM6VzqHOmc6jzqTOlc6hzpkgzpfOm86VzpnOkc6jLCDOoM6VzqTOoc6fzqXOm86VzqMgzpfOm86VzpnOkc6jLCDOoc6fzpLOmc6RzqTOkSDOl86bzpXOmc6RzqMsIM6hzqnOnM6VzpnOms6RIM6SzpHOoc6Yzp/Om86fzpzOmc6fzqUgzpfOm86VzpnOkc6jLCDOo86RzpLOkc6bzpnOkSDOl86bzpXOmc6RzqMsIM6kzqPOkc6mzpvOlc6ZzprOkSDOl86bzpXOmc6RzqMsIM6kzqPOmc6nzpvOlc6ZzprOkSDOl86bzpXOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpfOu861zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNzMwMCcsIEFyZWE6ICfOkc6TzpnOkSDOnM6RzqXOoc6RIM6XzpvOlc6ZzpHOoywgzpHOpc6TzpXOmc6fIM6XzpvOlc6ZzpHOoywgzpPOkc6jzqTOn86lzp3OlyDOl86bzpXOmc6RzqMsIM6XzpvOmc6UzpEgzpfOm86VzpnOkc6jLCDOms6RzpLOkc6jzpnOm86RzqMgzpfOm86VzpnOkc6jLCDOms6RzpvOpc6SzpnOkSDOl86bzpnOlM6fzqMgzpfOm86VzpnOkc6jLCDOms6fzqHOn86ZzpLOn86jIM6XzpvOlc6ZzpHOoywgzpvOlc6lzprOn86nzqnOoc6ZIM6XzpvOlc6ZzpHOoywgzqHOn86lzqDOkc6azpkgzpfOm86VzpnOkc6jLCDOo86pzqPOpM6ZIM6XzpvOlc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOl867zrXOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU5MDMxJywgQXJlYTogJ86RzpPOmc6RIM6kzqHOmc6RzpTOkSDOl86czpHOmM6ZzpHOoywgzpHOk86azpHOmM6ZzpEgzpfOnM6RzpjOmc6RzqMsIM6SzpXOoc6TzpnOnc6RIM6XzpzOkc6YzpnOkc6jLCDOms6lzqjOlc6bzpcgzpfOnM6RzpjOmc6RzqMsIM6czpXOm86ZzprOlyDOl86czpHOmM6ZzpHOoywgzpzOn86dzpcgzpHOk86Zzp/OpSDOkc6YzpHOnc6RzqPOmc6fzqUgzqPOps6Xzp3Omc6jzqPOl86jIM6XzpzOkc6YzpnOkc6jLCDOnc6Vzp/Oms6RzqPOpM6hzp8gzpfOnM6RzpjOmc6RzqMsIM6dzpXOn86jIM6gzqHOn86UzqHOn86czp/OoyDOl86czpHOmM6ZzpHOoywgzqDOkc6bzpHOpM6ZzqTOo86ZzpEgzpfOnM6RzpjOmc6RzqMsIM6gzqHOn86UzqHOn86czp/OoyDOl86czpHOmM6ZzpHOoywgzqPOpc6azpXOkSDOl86czpHOmM6ZzpHOoywgzqTOoc6ZzpvOn86mzpnOkSDOl86czpHOmM6ZzpHOoycsIFByZWZlY3R1cmU6ICfOl868zrHOuM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTkwMzMnLCBBcmVhOiAnzpzOkc6azqHOn86nzqnOoc6ZIM6XzpzOkc6YzpnOkc6jJywgUHJlZmVjdHVyZTogJ86XzrzOsc64zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1OTAzNScsIEFyZWE6ICfOms6fzqDOkc6dzp/OoyDOl86czpHOmM6ZzpHOoywgzpvOlc6lzprOkc6UzpnOkSDOl86czpHOmM6ZzpHOoywgzpzOn86dzp/Oo86gzpnOpM6RIM6XzpzOkc6YzpnOkc6jLCDOo86kzpXOnc6XzpzOkc6nzp/OoyDOl86czpHOmM6ZzpHOoywgzqfOkc6hzpnOlc6jzqPOkSDOl86czpHOmM6ZzpHOoycsIFByZWZlY3R1cmU6ICfOl868zrHOuM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTkxMDAnLCBBcmVhOiAnzpHOk86ZzpEgzpLOkc6hzpLOkc6hzpEgzpfOnM6RzpjOmc6RzqMsIM6RzpPOmc6RIM6czpHOoc6Zzp3OkSDOl86czpHOmM6ZzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6XzpzOkc6YzpnOkc6jLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzqbOpc6kzpXOmc6RzqMgzpfOnM6RzpjOmc6RzqMsIM6RzpzOnM6fzqMgzpfOnM6RzpjOmc6RzqMsIM6RzqPOqc6czpHOpM6RIM6XzpzOkc6YzpnOkc6jLCDOks6VzqHOn86ZzpEgzpfOnM6RzpjOmc6RzqMsIM6TzpXOqc6hzpPOmc6Rzp3On86ZIM6XzpzOkc6YzpnOkc6jLCDOlM6RzqPOms6Zzp8gzpfOnM6RzpjOmc6RzqMsIM6UzpnOkc6SzpHOpM6fzqMgzpfOnM6RzpjOmc6RzqMsIM6VzpvOkc6mzpnOnc6RIM6XzpzOkc6YzpnOkc6jLCDOlc6ezqnOms6azpvOl86jzpkgzpfOnM6RzpjOmc6RzqMsIM6azpHOks6RzqPOmc6bzpEgzpfOnM6RzpjOmc6RzqMsIM6azpHOm86XIM6gzpHOnc6RzpPOmc6RIM6XzpzOkc6YzpnOkc6jLCDOms6RzqPOpM6Rzp3Olc6RIM6XzpzOkc6YzpnOkc6jLCDOms6RzqTOqSDOks6VzqHOnM6Zzp8gzpfOnM6RzpjOmc6RzqMsIM6azpHOpM6pIM6azp/OnM6dzpfOnc6VzpnOnyDOl86czpHOmM6ZzpHOoywgzprOn86czp3Ol86dzpXOmc6fIM6XzpzOkc6YzpnOkc6jLCDOms6fzqXOm86fzqXOoc6RIM6XzpzOkc6YzpnOkc6jLCDOms6fzqXOnM6RzqHOmc6RIM6XzpzOkc6YzpnOkc6jLCDOms6fzqXOpM6jzp/Op86pzqHOmSDOl86czpHOmM6ZzpHOoywgzprOpc6UzqnOnc6fzqfOqc6hzpkgzpfOnM6RzpjOmc6RzqMsIM6bzpHOls6fzqfOqc6hzpkgzpfOnM6RzpjOmc6RzqMsIM6bzpHOls6fzqfOqc6hzpnOn86dIM6XzpzOkc6YzpnOkc6jLCDOm86VzqXOms6fzqDOlc6kzqHOkSDOl86czpHOmM6ZzpHOoywgzpvOmc6Rzp3On86SzqHOn86nzpkgzpfOnM6RzpjOmc6RzqMsIM6czpXOo86XIM6XzpzOkc6YzpnOkc6jLCDOnM6VzqTOn86nzpkgzqDOoc6fzpTOoc6fzpzOn86lIM6XzpzOkc6YzpnOkc6jLCDOnM6ZzprOoc6XIM6jzpHOnc6kzpEgzpfOnM6RzpjOmc6RzqMsIM6czp/Onc6XIM6kzpnOnM6Zzp/OpSDOoM6hzp/OlM6hzp/OnM6fzqUgzpfOnM6RzpjOmc6RzqMsIM6dzpXOkSDOm86lzprOn86TzpnOkc6dzp3OlyDOl86czpHOmM6ZzpHOoywgzp3Olc6RIM6dzpnOms6fzpzOl86UzpXOmc6RIM6XzpzOkc6YzpnOkc6jLCDOns6VzqfOkc6jzpzOlc6dzpcgzpfOnM6RzpjOmc6RzqMsIM6ezpfOoc6fzpvOmc6SzpHOlM6fIM6XzpzOkc6YzpnOkc6jLCDOoM6RzpvOkc6ZzpEgzpvOpc6azp/Ok86ZzpHOnc6dzpcgzpfOnM6RzpjOmc6RzqMsIM6gzpHOpM6hzpnOlM6RIM6XzpzOkc6YzpnOkc6jLCDOoM6fzpvOpc6UzpXOnc6UzqHOnyDOl86czpHOmM6ZzpHOoywgzqDOn86hzp/OoyDOl86czpHOmM6ZzpHOoywgzqDOoc6fzqbOl86kzpfOoyDOl86bzpnOkc6jIM6XzpzOkc6YzpnOkc6jLCDOoc6RzqfOlyDOl86czpHOmM6ZzpHOoywgzqHOkc6ozp/OnM6Rzp3Omc6azpkgzpfOnM6RzpjOmc6RzqMsIM6hzpnOls6pzpzOkc6kzpEgzpfOnM6RzpjOmc6RzqMsIM6jzpHOnc6kzpEgzpfOnM6RzpjOmc6RzqMsIM6jzqTOkc6lzqHOn86jIM6XzpzOkc6YzpnOkc6jLCDOo86mzpfOms6ZzpEgzpfOnM6RzpjOmc6RzqMsIM6kzpHOk86RzqHOn86nzqnOoc6ZIM6XzpzOkc6YzpnOkc6jLCDOpM6hzpnOm86fzqbOn86jIM6XzpzOkc6YzpnOkc6jLCDOpM6hzpnOoM6fzqTOkc6czp/OoyDOl86czpHOmM6ZzpHOoywgzqbOpc6kzpXOmc6RIM6XzpzOkc6YzpnOkc6jLCDOp86RzqHOkc6UzqHOkSDOl86czpHOmM6ZzpHOoycsIFByZWZlY3R1cmU6ICfOl868zrHOuM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTkxMzEnLCBBcmVhOiAnzpLOlc6hzp/Omc6RzqMgzpfOnM6RzpjOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpfOvM6xzrjOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU5MTMyJywgQXJlYTogJ86SzpXOoc6fzpnOkc6jIM6XzpzOkc6YzpnOkc6jJywgUHJlZmVjdHVyZTogJ86XzrzOsc64zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1OTIwMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzp3Okc6fzqXOo86RzqMgzpfOnM6RzpjOmc6RzqMsIM6RzpPOmc6fzqMgzqDOkc6lzpvOn86jIM6XzpzOkc6YzpnOkc6jLCDOkc6dzqkgzqPOlc6bzpkgzpfOnM6RzpjOmc6RzqMsIM6RzqHOms6fzqfOqc6hzpkgzpfOnM6RzpjOmc6RzqMsIM6TzpnOkc6dzp3Okc6azp/Op86pzqHOmSDOl86czpHOmM6ZzpHOoywgzpXOoM6ZzqPOms6fzqDOlyDOl86czpHOmM6ZzpHOoywgzpzOkc6hzpnOnc6RIM6XzpzOkc6YzpnOkc6jLCDOnM6VzqTOkc6czp/Ooc6mzqnOo86XIM6XzpzOkc6YzpnOkc6jLCDOnc6Rzp/Opc6jzpEgzpfOnM6RzpjOmc6RzqMsIM6gzpfOk86RzpTOmc6RIM6XzpzOkc6YzpnOkc6jLCDOoM6fzpvOm86RIM6dzpXOoc6RIM6XzpzOkc6YzpnOkc6jLCDOoc6fzpTOkc6azpnOnc6VzpEgzpfOnM6RzpjOmc6RzqMsIM6hzp/OlM6fzqfOqc6hzpkgzpfOnM6RzpjOmc6RzqMsIM6jzqTOkc6YzpzOn86jIM6XzpzOkc6YzpnOkc6jJywgUHJlZmVjdHVyZTogJ86XzrzOsc64zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1OTMwMCcsIEFyZWE6ICfOkc6bzpXOns6Rzp3OlM6hzpXOmc6RIM6XzpzOkc6YzpnOkc6jLCDOks6hzqXOo86RzprOmSDOl86czpHOmM6ZzpHOoywgzpXOoM6ZzqPOms6fzqDOlyDOl86czpHOmM6ZzpHOoyDOl86czpHOmM6ZzpHOoywgzprOkc6bzp/Op86pzqHOmSDOl86czpHOmM6ZzpHOoywgzprOkc6czqDOn86nzqnOoc6ZIM6XzpzOkc6YzpnOkc6jLCDOms6VzqbOkc6bzp/Op86pzqHOmSDOl86czpHOmM6ZzpHOoywgzprOn86hzqXOps6XIM6XzpzOkc6YzpnOkc6jLCDOm86fzqXOpM6hzp/OoyDOl86czpHOmM6ZzpHOoywgzp3Olc6fzqfOqc6hzpkgzpfOnM6RzpjOmc6RzqMsIM6dzpfOo86VzpvOmSDOl86czpHOmM6ZzpHOoywgzp3Ol86jzpXOm86bzp/Opc6UzpkgzpfOnM6RzpjOmc6RzqMsIM6dzpfOo86ZIM6XzpzOkc6YzpnOkc6jLCDOoM6RzpvOkc6Zzp8gzqPOms6lzpvOmc6kzqPOmSDOl86czpHOmM6ZzpHOoywgzqDOkc6bzpHOmc6fzqfOqc6hzpEgzpfOnM6RzpjOmc6RzqMsIM6jzqfOn86Zzp3Okc6jIM6XzpzOkc6YzpnOkc6jJywgUHJlZmVjdHVyZTogJ86XzrzOsc64zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MDAwMicsIEFyZWE6ICfOks6fzqHOmc6WzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6WzpHOoc6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzpzOkc6hzpXOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6azp/Opc6hzqTOlc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpvOkc6bzp/Opc6czpHOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6czpHOms6hzpXOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6czpXOo86XzqPOms6bzpkgzpfOoc6RzprOm86VzpnOn86lLCDOnM6fzp3OlyDOkc6TzpnOn86lIM6Rzp3OpM6pzp3Omc6fzqUgzpLOoc6fzp3OpM6XzqPOmc6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOnM6fzqHOn86dzpnOnyDOl86hzpHOms6bzpXOmc6fzqUsIM6dzqXOks6hzpnOpM6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOoM6Rzp3Okc6TzpnOkSDOls6RzqHOn86lIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqbOkc6hzpkgzpfOoc6RzprOm86VzpnOn86lJywgUHJlZmVjdHVyZTogJ86Xz4HOsc66zrvOtc6vzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzAwMDMnLCBBcmVhOiAnzpHOk86ZzpEgzpLOkc6hzpLOkc6hzpEgzpfOoc6RzprOm86VzpnOn86lLCDOkc6TzpnOn86jIM6YzqnOnM6RzqMgzpfOoc6RzprOm86VzpnOn86lLCDOkc6dzqkgzpzOn86lzpvOmc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOoM6fzpzOkc6hzpzOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6RzqHOms6RzpTOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6Szp/Ooc6hzp/OoyDOl86hzpHOms6bzpXOmc6fzqUsIM6TzpXOnc6dzpEgzpfOoc6RzprOm86VzpnOn86lLCDOlM6fzqXOm86Zzp8gzpfOoc6RzprOm86VzpnOn86lLCDOlM6hzp/Oo86fzpkgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzqHOlM6RzpzOmc6Rzp3OkSDOl86hzpHOms6bzpXOmc6fzqUsIM6azpHOpM6pIM6czp/Opc6bzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6azpXOoc6RzqTOn86azpXOps6RzpvOmc6fIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOn86bzpXOnc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpvOkc6hzpHOnc6ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOkc6jzqTOoc6RzqfOmc6Rzp3OkSDOl86hzpHOms6bzpXOmc6fzqUsIM6czpXOk86RzpvOlyDOks6hzqXOo86XIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOkc6dzpHOo86fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOoM6VzpnOoc6fzqXOnc6ZzpHOnc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOoc6VzpLOlc6bzpnOkc6dzpEgzpfOoc6RzprOm86VzpnOn86lLCDOoM6hzpnOnc6ZzpHOoyDOnM6RzpvOlc6SzpnOls6Zzp/OpSDOl86hzpHOms6bzpXOmc6fzqUsIM6hzpHOoM6kzpfOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6kzpbOkc6dzpnOkc6dzpEgzpfOoc6RzprOm86VzpnOn86lLCDOqM6RzpvOmc6UzpEgzpfOoc6RzprOm86VzpnOn86lJywgUHJlZmVjdHVyZTogJ86Xz4HOsc66zrvOtc6vzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzAwMDQnLCBBcmVhOiAnzpHOk86ZzpEgzpzOn86dzpcgzpfOoc6RzprOm86VzpnOn86lLCDOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzpLOmc6Rzp3Onc6fzqUgzpvOkc6jzpnOmM6Zzp/OpSwgzpHOk86Zzp/OoyDOks6RzqPOmc6bzpXOmc6fzqMgzpLOmc6Rzp3Onc6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOks6ZzpHOnc6dzp/OpSDOm86RzqPOmc6YzpnOn86lLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6SzpnOkc6dzp3On86lIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOk86fzqXOks6pzp0gzpfOoc6RzprOm86VzpnOn86lLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzpLOmc6Rzp3Onc6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOkc6czpnOoc6RzqMgzpfOoc6RzprOm86VzpnOn86lLCDOkc6dzqkgzpLOmc6Rzp3Onc6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOkc6dzqkgzpLOmc6TzpvOkSDOm86RzqPOmc6YzpnOn86lLCDOkc6dzqkgzprOn86hzp3Omc6RzqMgzpfOoc6RzprOm86VzpnOn86lLCDOkc6hzpLOlyDOm86RzqPOmc6YzpnOn86lLCDOkc6hzpLOlyDOnc6VzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzpLOkc6nzp/OoyDOm86RzqPOmc6YzpnOn86lLCDOlM6VzqHOnM6RzqTOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6bzpHOnM6ZIM6bzpHOo86ZzpjOmc6fzqUsIM6azpHOm86RzpzOmc6fIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6jzqTOoc6ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6kzqkgzpLOmc6Rzp3Onc6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzqTOqSDOks6ZzpPOm86VzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzprOkc6kzqkgzqPOpc6czpcgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzqjOkc6bzpcgzpfOoc6RzprOm86VzpnOn86lLCDOms6VzqHOkc6kzp/Oms6RzpzOoM6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOms6VzqbOkc6bzp/Oks6hzqXOo86fIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOn86azprOkc6bzpHOoc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOoc6VzpLOks6RzqTOkc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpvOkc6kzp/OnM6ZzpEgzpHOk86Zzp/OpSDOks6RzqPOmc6bzpXOmc6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOm86RzqTOn86czpnOkSDOoM6VzqXOms6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOm86fzqXOpM6hzpHOms6ZIM6Rzp3OqSDOks6ZzpHOnc6dzp/OpSDOl86hzpHOms6bzpXOmc6fzqUsIM6czpXOo86XIM6XzqHOkc6azpvOlc6Zzp/OpSwgzp3Olc6RIM6RzqHOks6XIM6XzqHOkc6azpvOlc6Zzp/OpSwgzp7Olc6hzp/Oms6RzpzOoM6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzqDOlc6hzpLOn86bzpEgzpfOoc6RzprOm86VzpnOn86lLCDOoM6VzqXOms6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOo86azpHOps6ZzpTOmc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqPOpM6RzqXOoc6ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOo86lzprOn86bzp/Ok86fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzqPOpc6dzpTOn86dzpnOkSDOm86RzqPOmc6YzpnOn86lLCDOpM6VzqHOpM6jzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzqbOkc6mzpvOkc6TzprOn86jIM6bzpHOo86ZzpjOmc6fzqUsIM6nzpHOnc6UzqHOkc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqfOn86dzpTOoc6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOqM6RzqHOlyDOps6fzqHOkc6UzpEgzpvOkc6jzpnOmM6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcwMDA1JywgQXJlYTogJ86RzpLOlM6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOkc6dzqkgzprOlc6hzpEgzpfOoc6RzprOm86VzpnOn86lLCDOk86pzp3Omc6VzqMgzqfOlc6hzqPOn86dzpfOo86fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOms6VzqHOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6azqHOkc6jzpnOnyDOl86hzpHOms6bzpXOmc6fzqUsIM6czp/Onc6XIM6azpHOoc6UzpnOqc6kzpnOo86jzpfOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6czp/Op86fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOoM6fzqTOkc6czpnOlc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqPOps6Vzp3OlM6lzpvOmSDOl86hzpHOms6bzpXOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzpfPgc6xzrrOu861zq/Ov8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MDAwNicsIEFyZWE6ICfOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzqDOlc6UzpnOkc6Uzp/OoyDOl86hzpHOms6bzpXOmc6fzqUsIM6RzpPOnc6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOkc6czpHOoc6ZzpHOnc6fIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOnc6pIM6azpHOoc6fzqXOls6Rzp3OkSDOl86hzpHOms6bzpXOmc6fzqUsIM6RzqDOn86jzqTOn86bzp/OmSDOl86hzpHOms6bzpXOmc6fzqUsIM6RzqHOnM6RzqfOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6RzqHOp86RzpPOk86VzpvOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOo86azp/OmSDOl86hzpHOms6bzpXOmc6fzqUsIM6Szp/Onc6XIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpPOkc6bzpHOpM6RzqMgzpfOoc6RzprOm86VzpnOn86lLCDOk86RzpvOlc6dzpnOkc6dzp8gzpfOoc6RzprOm86VzpnOn86lLCDOk86VzqHOkc6azpkgzpfOoc6RzprOm86VzpnOn86lLCDOlc6lzpHOk86TzpXOm86ZzqPOnM6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOls6pzqbOn86hzp/OmSDOl86hzpHOms6bzpXOmc6fzqUsIM6YzqHOkc6ozpHOnc6fIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6jzqTOkc6czp/Onc6ZzqTOo86RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6jzqTOlc6bzpvOmSDOoM6VzpTOmc6RzpTOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6kzqkgzprOkc6hzp/Opc6WzpHOnc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpvOkc6Tzp/OoyDOl86hzpHOms6bzpXOmc6fzqUsIM6bzpnOm86ZzpHOnc6fIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpvOpc6kzqTOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOkc6YzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6czqDOmc6kzpbOkc6hzpnOkc6dzp8gzpfOoc6RzprOm86VzpnOn86lLCDOoM6fzpvOpc6YzpXOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6jzpHOnM6gzpHOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6jzprOm86RzpLOlc6hzp/Op86pzqHOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6jzpzOkc6hzpkgzpfOoc6RzprOm86VzpnOn86lLCDOpM6WzpnOk86azp/Opc6dzpEgzprOkc6jzqTOlc6bzpvOmc6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOpM6fzpnOp86fzqMgzpfOoc6RzprOm86VzpnOn86lJywgUHJlZmVjdHVyZTogJ86Xz4HOsc66zrvOtc6vzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzAwMDcnLCBBcmVhOiAnzpzOkc6bzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6jzqTOkc6bzpnOlM6RIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcwMDA4JywgQXJlYTogJ86RzpnOpM6Rzp3Omc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOnc6pzqDOn86bzpcgzpfOoc6RzprOm86VzpnOn86lLCDOks6RzpjOlc6ZzpHOnc6fzqMgzprOkc6czqDOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpPOkc6bzpnOoM6VIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpPOkc6bzpnOps6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpXOm86RzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6VzqDOkc6dzqkgzpLOkc6YzpXOmc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpXOoM6ZzqPOms6fzqDOlyDOl86hzpHOms6bzpXOmc6fzqUsIM6azpHOmc6dzp/Opc6hzpPOmc6fIM6nzqnOoc6Zzp8gzpfOoc6RzprOm86VzpnOn86lLCDOms6RzqTOqSDOks6RzpjOlc6ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOnM6fzp3OlyDOkc6TzpnOn86lIM6ZzqnOkc6dzp3On86lIM6YzpXOn86bzp/Ok86fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOnM6fzp3OlyDOkc6TzprOkc6hzpHOmM6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOo86Tzp/Opc6hzp/Oms6VzqbOkc6bzpkgzpfOoc6RzprOm86VzpnOn86lLCDOo86azp/OoM6VzpvOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6jzqTOkc6czp3On86ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqfOn86nzpvOkc6azpnOlc6jIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcwMDEwJywgQXJlYTogJ86RzpPOmc6RIM6Rzp3Onc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOk86ZzpEgzqDOkc6hzpHOo86azpXOpc6XIM6RzqfOlc6dzqTOoc6ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOkc6TzpnOkSDOps6pzqTOmc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOk86Zzp/OoyDOoM6Rzp3OpM6VzpvOlc6XzpzOqc6dIM6RzqfOlc6dzqTOoc6ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOkc6czqXOk86UzpHOm86fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOkc6dzqkgzpHOms6hzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6Rzp3OqSDOms6RzqPOpM6VzpvOm86ZzpHOnc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOoM6fzqPOlc6bzpXOnM6ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOoc6czpHOnc6pzpPOlc6ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOkc6nzpXOnc6kzqHOmc6RzqMgzpfOoc6RzprOm86VzpnOn86lLCDOks6fzqHOmc6RzqMgzpfOoc6RzprOm86VzpnOn86lLCDOlM6RzpzOkc6dzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6UzpXOnM6RzqTOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6UzqnOoc6RzprOmc6fIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpXOmM6ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzqPOpM6VzpvOm86ZIM6czp/Onc6fzqbOkc6kzqPOmc6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzqTOqSDOkc6azqHOmc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6kzqkgzprOkc6bzqXOks6ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzqTOqSDOms6RzqPOpM6VzpvOm86ZzpHOnc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOlc6mzpHOm86RzpTOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpvOmc6Tzp/Ooc6kzqXOnc6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOnM6RzpTOlSDOl86hzpHOms6bzpXOmc6fzqUsIM6czpXOm86ZzpTOn86nzqnOoc6ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOlc6jzp/Op86pzqHOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6czpXOpM6Rzp7On86nzqnOoc6ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOn86dzpcgzpHOk86Zzp/OpSDOk86VzqnOoc6TzpnOn86lIM6VzqDOkc6dzqnOo86XzqbOlyDOl86hzpHOms6bzpXOmc6fzqUsIM6czp/Onc6XIM6azp/Opc6Uzp/Opc6czpEgzpfOoc6RzprOm86VzpnOn86lLCDOnM6fzqXOoc6dzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6dzpXOn86nzqnOoc6ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOkc6hzpHOnc6lzpzOps6fzpkgzpfOoc6RzprOm86VzpnOn86lLCDOoM6RzqHOmM6Vzp3OmSDOl86hzpHOms6bzpXOmc6fzqUsIM6gzpvOkc6azpnOqc6kzpnOo86jzpEgzpfOoc6RzprOm86VzpnOn86lLCDOoM6bzpHOpM6Rzp3Omc6RzqMgzpfOoc6RzprOm86VzpnOn86lLCDOoM6hzpHOmc6kzqnOoc6ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOoM6hzpnOnc6ZzpHOoyDOoM6lzqHOk86fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOoM6hzp/OpM6fzqHOmc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOpc6hzpHOmM6Zzp8gzpfOoc6RzprOm86VzpnOn86lLCDOoM6lzqHOk86fzqMgzpzOn86dzp/Ops6RzqTOo86Zzp/OpSDOl86hzpHOms6bzpXOmc6fzqUsIM6hzp/OpM6RzqPOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6kzpXOps6VzpvOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6kzp/Opc6hzpvOqc6kzpcgzpfOoc6RzprOm86VzpnOn86lLCDOpM6hzpXOmc6jIM6VzprOms6bzpfOo86ZzpXOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6kzqPOn86lzqTOo86fzqXOoc6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOps6RzpLOoc6ZzpHOnc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqbOmc6bzpnOoM6gzp/OmSDOl86hzpHOms6bzpXOmc6fzqUsIM6nzpHOoc6RzprOkc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqfOkc6hzpHOms6Zzp8gzpfOoc6RzprOm86VzpnOn86lJywgUHJlZmVjdHVyZTogJ86Xz4HOsc66zrvOtc6vzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzAwMTInLCBBcmVhOiAnzpHOk86Zzp/OmSDOlM6VzprOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6RzpzOoM6VzpvOn86lzpbOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOoM6VzqPOqc6azpHOoc6Zzp8gzpfOoc6RzprOm86VzpnOn86lLCDOkc6kzqPOmc6gzpHOlM6VzqMgzpfOoc6RzprOm86VzpnOn86lLCDOks6RzpPOmc6fzp3Omc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpLOkc6bzpfOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6SzpHOo86ZzpvOmc6azpEgzpHOnc6pzpPOlc6ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOks6RzqPOmc6bzpnOms6XIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpLOn86lzqHOks6fzqXOm86ZzqTOl86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpPOms6RzpPOms6RzpvOlc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpnOnc6ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOms6Rzp3OlM6XzpvOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6azpHOo86kzpXOm86bzpkgzprOkc6Zzp3On86lzqHOk86Zzp/OpSDOl86hzpHOms6bzpXOmc6fzqUsIM6azp/Opc6czpHOo86RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpvOn86lzprOmc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOl86kzqHOn86gzp/Om86XIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOkc6gzpHOlM6fzpPOmc6Rzp3Onc6XzqMgzpfOoc6RzprOm86VzpnOn86lLCDOoM6bzpHOpM6Rzp3On86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOm86fzqXOpM6XIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOm86pzqHOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6jzqTOn86bzp/OmSDOl86hzpHOms6bzpXOmc6fzqUsIM6kzqHOpc6gzpfOpM6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqbOm86RzpjOmc6RzprOlc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqfOn86lzqPOpM6fzqXOm86ZzpHOnc6RIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcwMDEzJywgQXJlYTogJ86RzpPOmc6RIM6VzpnOoc6Xzp3OlyDOms6hzp/Opc6jzqnOnc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOk86Zzp/OoyDOnM6lzqHOqc6dzpHOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6Rzp3OqSDOkc6jzpnOpM6VzqMgzpfOoc6RzprOm86VzpnOn86lLCDOks6fzqXOpM6VzqMgzpfOoc6RzprOm86VzpnOn86lLCDOmc6VzqHOkSDOnM6fzp3OlyDOk86fzqHOk86fzpvOkc6qzp3OlyDOl86hzpHOms6bzpXOmc6fzqUsIM6azpHOpM6pIM6RzqPOmc6kzpXOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6azpnOmM6RzqHOmc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzp3Omc6jzpcgzpfOoc6RzprOm86VzpnOn86lLCDOoM6Vzp3OpM6RzpzOn86UzpkgzpfOoc6RzprOm86VzpnOn86lLCDOoM6VzqTOoc6fzprOlc6mzpHOm86fIM6TzpHOls6Zzp/OpSDOl86hzpHOms6bzpXOmc6fzqUsIM6gzqXOoc6Tzp/OpSDOl86hzpHOms6bzpXOmc6fzqUsIM6jzpHOoc6nzp/OoyDOl86hzpHOms6bzpXOmc6fzqUsIM6jzqTOkc6lzqHOkc6azpnOkSDOl86hzpHOms6bzpXOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzpfPgc6xzrrOu861zq/Ov8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MDAxNCcsIEFyZWE6ICfOkc6TzpnOkSDOoM6VzpvOkc6TzpnOkSDOoM6VzpTOmc6RzpTOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOp86VzqHOo86fzp3Ol86jzp/OpSDOl86hzpHOms6bzpXOmc6fzqUsIM6RzpPOms6ZzqPOkc6hzpHOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6RzpPOoc6ZzpHOnc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOnc6RzpvOl86ozpcgzpfOoc6RzprOm86VzpnOn86lLCDOkc6dzpnOo86jzpHOoc6RzqMgzpfOoc6RzprOm86VzpnOn86lLCDOkc6gzp/Oo86VzpvOlc6czpfOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6Szp/Ooc6fzqMgzpPOn86lzpLOqc6dIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpLOoc6RzqfOn86azpfOoM6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOk86fzqXOks6VzqMgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzpvOnyDOp86pzqHOmc6fIM6Tzp/Opc6SzqnOnSDOl86hzpHOms6bzpXOmc6fzqUsIM6azpHOpM6pIM6Tzp/Opc6SzpXOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6azp/Ons6RzqHOlyDOl86hzpHOms6bzpXOmc6fzqUsIM6azp/Opc6kzp/Opc6bzp/Opc6mzpHOoc6ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpvOmc6czpXOnc6RzqMgzqfOlc6hzqPOn86dzpfOo86fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOoM6VzpvOlc6azpfOpM6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOmc6jzprOn86gzpnOkc6dzp8gzpfOoc6RzprOm86VzpnOn86lLCDOo86azp/OpM6VzpnOnc6fIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqfOkc6hzpHOo86fIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqfOkc6kzpbOkc6dzpEgzpfOoc6RzprOm86VzpnOn86lLCDOp86VzqHOo86fzp3Ol86jzp/OoyDOl86hzpHOms6bzpXOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzpfPgc6xzrrOu861zq/Ov8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MDAxNicsIEFyZWE6ICfOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6czp/Onc6fzqbOkc6kzqPOmc6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzpzOn86dzp/Ops6RzqTOo86Zzp/OpSDOl86hzpHOms6bzpXOmc6fzqUsIM6RzprOkc6czqnOpM6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOkc6gzp/Omc6dzpnOnyDOl86hzpHOms6bzpXOmc6fzqUsIM6RzqPOl86czpkgzpzOn86dzp/Ops6RzqTOo86Zzp/OpSDOl86hzpHOms6bzpXOmc6fzqUsIM6SzpXOm86fzqXOm86ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpTOmc6fzp3Opc6jzpkgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzqDOlc6kzpHOnc6ZzpHOnc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpvOn86lzqHOlc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOlc6kzp/Op86ZzpEgzqPOn86azpHOoc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOn86hzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6gzpHOnc6RzpPOmc6RIM6czp/Onc6fzqbOkc6kzqPOmc6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOo86fzprOkc6hzpHOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6jzqTOkc6SzpnOlc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqPOpM6VzqHOnc6VzqMgzpfOoc6RzprOm86VzpnOn86lLCDOps6fzqXOoc6dzp/Ops6RzqHOkc6TzpPOnyDOl86hzpHOms6bzpXOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzpfPgc6xzrrOu861zq/Ov8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MDEwMCcsIEFyZWE6ICfOkc6TzpnOlc6jIM6gzpHOoc6RzqPOms6ZzpXOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6RzpPOmc6fzqMgzpLOkc6jzpnOm86VzpnOn86jIE5JS09ZIEtBWkFOVFpBS0ggzpfOoc6RzprOm86VzpnOn86lLCDOkc6czqDOlc6bzpEgzpfOoc6RzprOm86VzpnOn86lLCDOkc6jzqTOoc6RzprOn86ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpLOkc6YzqXOoM6VzqTOoc6fIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpXOoM6Rzp3OqSDOkc6hzqfOkc6dzpXOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6azpHOm86bzp/Onc6XIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6hzp3Okc6hzpkgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzqTOkc6bzpHOk86RzqHOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6azpHOpM6pIM6RzqHOp86Rzp3Olc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOlc6bzpvOmc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOlc6hzpEgzpXOm86RzpnOn86lzqPOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6azp/Opc6dzpHOks6fzpkgzpfOoc6RzprOm86VzpnOn86lLCDOnM6lzqHOpM6ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOoM6RzqTOo86ZzpTOlc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOlc6WzpEgzpfOoc6RzprOm86VzpnOn86lLCDOp86fzqXOlM6VzqTOo86ZIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcwMjAwJywgQXJlYTogJ86RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzqTOpc6czqDOkc6azpnOn86lIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpLOqc6hzp/OmSDOl86hzpHOms6bzpXOmc6fzqUsIM6TzqHOl86Tzp/Ooc6ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzpvOkc6czpHOms6ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6bzp/Op86pzqHOkc6mzpnOpM6XzqMgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzpvOpc6SzpnOkSDOpM6lzpzOoM6RzprOmc6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzpzOl86bzpHOoc6ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOmc6jzqPOn86ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOm86XzpzOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6azp/Oms6azpnOnc6fzqMgzqDOpc6hzpPOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpvOkc6Tzp/Om86ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOkc6TzpHOoc6ZzprOkc6hzpkgzpfOoc6RzprOm86VzpnOn86lLCDOnM6RzqTOkc6bzpEgzpfOoc6RzprOm86VzpnOn86lLCDOnc6Vzp8gzprOkc6bzpHOnM6RzprOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6gzpnOpM6jzpnOlM6ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOo86ZzpLOkc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqPOms6fzqXOoc6Szp/Opc6bzpEgzpfOoc6RzprOm86VzpnOn86lLCDOpM6lzpzOoM6RzprOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6mzpHOnc6VzqHOqc6czpXOnc6XIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcwMzAwJywgQXJlYTogJ86RzpPOmc6RIM6jzpXOnM6dzpcgzpfOoc6RzprOm86VzpnOn86lLCDOkc6bzpHOk86dzpkgzpfOoc6RzprOm86VzpnOn86lLCDOkc6czp/Opc6hzpPOlc6bzpvOlc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOnc6pIM6gzp/Opc6bzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6RzqHOms6RzpvOn86nzqnOoc6ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOoc6nzp/Onc6kzpnOms6fIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOo86kzqHOmc6kzqPOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6RzqXOm86XIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpLOkc6azpnOqc6kzpXOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6TzpHOoc6ZzqDOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6UzqHOkc6gzpXOpM6ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpbOmc6dzqTOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6Zzp3Omc6fIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6bzp8gzqfOqc6hzpnOnyDOkc6hzprOkc6bzp/Op86pzqHOmc6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzpvOpc6SzpnOkSDOnM6fzp3On86mzpHOpM6jzpnOn86lIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6hzpHOks6RzpTOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6jzpHOnc6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzqTOqSDOoM6fzqXOm86ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOms6hzpHOo86RzqMgzpfOoc6RzprOm86VzpnOn86lLCDOm86RzpPOn86lzqTOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6bzpXOpc6azp/Op86pzqHOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6czpHOp86RzpnOoc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOlc6bzpXOo86VzqMgzpfOoc6RzprOm86VzpnOn86lLCDOnM6ZzprOoc6RIM6VzqDOmc6jzprOn86gzpcgzpfOoc6RzprOm86VzpnOn86lLCDOnM6ZzpvOm86ZzpHOoc6XzqPOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6czp/Onc6RzqPOpM6XzqHOkc6azpkgzpfOoc6RzprOm86VzpnOn86lLCDOnM6fzqXOo86fzqXOpM6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOoM6RzpTOmc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzp3Omc6gzpnOlM6ZzqTOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOkc6dzpHOk86ZzpEgzqDOlc6UzpnOkc6Uzp/OoyDOl86hzpHOms6bzpXOmc6fzqUsIM6gzpHOnc6fzqHOkc6czpEgzpfOoc6RzprOm86VzpnOn86lLCDOoM6RzqHOpM6ZzqHOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6gzpHOpM6jzpnOlM6VzqHOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqHOn86lzqPOo86fzqfOqc6hzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6jzprOmc6dzpnOkc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqPOpM6ZzqHOn86dzpHOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6mzpnOm86ZzqPOmc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqfOkc6dzpTOoc6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOp86fzqXOnM6VzqHOmc6fIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcwNDAwJywgQXJlYTogJ86RzpPOmc6fzqMgzpHOnc6kzqnOnc6Zzp/OoyDOl86hzpHOms6bzpXOmc6fzqUsIM6RzpPOmc6fzqMgzpzOkc6hzprOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOoM6fzpvOpc6nzp3On86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpPOkc6bzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6azpHOoM6gzpHOoc6ZzpHOnc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOn86lzqPOlc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpvOmc6jzqTOkc6hzp/OoyDOl86hzpHOms6bzpXOmc6fzqUsIM6czpHOms6hzp/Onc6XzqPOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6czpnOms6hzp/Onc6XzqPOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6czp/Omc6hzpXOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6czp/Onc6XIM6azpHOm86lzpLOmc6Rzp3Ol86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOn86dzp/Op86pzqHOnyDOl86hzpHOms6bzpXOmc6fzqUsIM6gzpXOpM6hzp/Oms6VzqbOkc6bzp8gzpzOn86ZzqHOqc6dIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqHOn86lzqbOkc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqTOoc6RzqbOn86jIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcxMjAxJywgQXJlYTogJ86XzqHOkc6azpvOlc6Zzp8gzpfOoc6RzprOm86VzpnOn86lJywgUHJlZmVjdHVyZTogJ86Xz4HOsc66zrvOtc6vzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzEyMDInLCBBcmVhOiAnzpTOoc6RzprOn86lzpvOmc6RzqHOl86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpvOn86mzp/Opc6gzp/Om86XIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqPOlc6czpXOm86XIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcxMzAxJywgQXJlYTogJ86XzqHOkc6azpvOlc6Zzp/OpSDOl86hzpHOms6bzpXOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzpfPgc6xzrrOu861zq/Ov8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MTMwMycsIEFyZWE6ICfOl86hzpHOms6bzpXOmc6fIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcxMzA0JywgQXJlYTogJ86TzpHOls6ZIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcxMzA1JywgQXJlYTogJ86XzqHOkc6azpvOlc6Zzp8gzpfOoc6RzprOm86VzpnOn86lJywgUHJlZmVjdHVyZTogJ86Xz4HOsc66zrvOtc6vzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzEzMDYnLCBBcmVhOiAnzpfOoc6RzprOm86VzpnOnyDOl86hzpHOms6bzpXOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzpfPgc6xzrrOu861zq/Ov8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MTMwNycsIEFyZWE6ICfOl86hzpHOms6bzpXOmc6fIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcxNDA1JywgQXJlYTogJ86czpHOm86VzpLOpc6WzpnOn86lIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcxNDA4JywgQXJlYTogJ86XzqHOkc6azpvOlc6Zzp/OpSDOl86hzpHOms6bzpXOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzpfPgc6xzrrOu861zq/Ov8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MTQwOScsIEFyZWE6ICfOl86hzpHOms6bzpXOmc6fIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcxNTAwJywgQXJlYTogJ86RzpPOmc6RIM6VzpnOoc6Xzp3OlyDOpM6VzpzOlc6dzp/Opc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOk86ZzpEgzpzOkc6hzpnOnc6RIM6czpHOm86VzpLOmc6WzpnOn86lIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOk86ZzpEgzqDOkc6hzpHOo86azpXOpc6XIEJJQU5PWSDOl86hzpHOms6bzpXOmc6fzqUsIM6RzpPOmc6RIM6gzpXOm86RzpPOmc6RIM6TzpHOls6Zzp/OpSDOl86hzpHOms6bzpXOmc6fzqUsIM6RzpPOmc6fzpkgzpjOlc6fzpTOqc6hzp/OmSDOl86hzpHOms6bzpXOmc6fzqUsIM6RzpPOmc6fzqMgzpLOm86RzqPOmc6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyBCSUFOT1kgzpfOoc6RzprOm86VzpnOn86lLCDOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOk86RzpbOmc6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOoc6fzpTOmc6RzqMgzpfOoc6RzprOm86VzpnOn86lLCDOkc6TzpnOn86jIM6gzpHOnc6kzpXOm86VzpfOnM6pzp0gzpPOkc6WzpnOn86lIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOk86Zzp/OoyDOo86lzpvOm86RzqMgzpfOoc6RzprOm86VzpnOn86lLCDOkc6YzpHOnc6RzqTOn86ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOnM6czp/Opc6UzpHOoc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOo86kzqHOmc6dzp8gzpfOoc6RzprOm86VzpnOn86lLCDOkc6nzpvOkc6UzpEgzpfOoc6RzprOm86VzpnOn86lLCDOks6RzqPOmc6bzpXOmc6VzqMgzpfOoc6RzprOm86VzpnOn86lLCDOks6bzqXOp86ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOk86Zzp/Ops6lzqHOkc6azpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6Tzp/Opc6hzp3Olc6jIM6Tzp/Opc6SzqnOnSDOl86hzpHOms6bzpXOmc6fzqUsIM6Tzp/Opc6hzp3Olc6jIM6XzqHOkc6azpvOlc6Zzp/OpSDOl86hzpHOms6bzpXOmc6fzqUsIM6UzpHOnM6RzqPOpM6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpXOoc6TzpHOpM6ZzprOlc6jIM6azpHOpM6fzpnOms6ZzpXOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6WzpXOoc6Szp/OpSDOnM6VzqTOn86nzpkgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzpLOoc6fzqfOqc6hzpkgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzpvOm86ZzpjOlc6RIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6czpHOoc6ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6czqDOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6gzpXOpM6Rzp3Okc6azpkgzpzOlc6kzp/Op86ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOkc6hzqTOlc6hzp/OoyDOms6RzpvOm86ZzpjOlc6RzqMgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzqTOqSDOms6RzpvOlc6jzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6azpHOpM6pIM6bzp/Opc6kzqHOkc6azpkgzpfOoc6RzprOm86VzpnOn86lLCDOms6VzqHOkc6czp/Opc6kzqPOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6azpXOps6RzpvOn86TzpnOkc6dzp3Ol86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOnc6pzqPOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzprOn86bzpvOpc6SzpHOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6azp/Ooc6RzprOn86Szp/Opc6dzpkgzpfOoc6RzprOm86VzpnOn86lLCDOms6fzqHOps6VzqMgzpfOoc6RzprOm86VzpnOn86lLCDOm86Zzp3On86gzpXOoc6RzpzOkc6kzpEgzpfOoc6RzprOm86VzpnOn86lLCDOm86fzqXOpM6hzpHOms6ZIM6czpHOm86VzpLOmc6WzpnOn86lIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOkc6bzpHOlM6VzqMgzpfOoc6RzprOm86VzpnOn86lLCDOnM6RzqHOkc6YzpnOpM6XzqMgzpfOoc6RzprOm86VzpnOn86lLCDOnM6RzqHOkc6Yzp/OoyDOl86hzpHOms6bzpXOmc6fzqUsIM6czp/Onc6XIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOn86dzpcgzqPOkc6SzpLOkc6YzpnOkc6dzqnOnSDOl86hzpHOms6bzpXOmc6fzqUsIM6ezpXOoc6fzqDOn86kzpHOnM6fzqMgzpfOoc6RzprOm86VzpnOn86lLCDOoM6RzpvOkc6Zzp/Oms6RzqPOpM6hzp8gzpfOoc6RzprOm86VzpnOn86lLCDOoM6Rzp3OpM6Rzp3Okc6jzqPOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6gzpHOoM6RIM6kzpnOpM6fzqUgzpzOlc6kzp/Op86ZIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOkc6hzpHOm86ZzpEgzqbOn86UzpXOm86VIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOoc6RzqPOkc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOoc6fzqbOl86kzpfOoyDOl86bzpnOkc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqHOn86UzpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6jzpnOm86RzpzOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqPOms6RzpvOkc6dzpkgzpfOoc6RzprOm86VzpnOn86lLCDOo86gzpfOm86ZzpEgzpfOoc6RzprOm86VzpnOn86lLCDOpM6jzpHOk86azpHOoc6RzprOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6kzqXOm86ZzqPOn86jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqbOn86UzpXOm86VIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqbOn86Zzp3Omc6azpnOkSDOl86hzpHOms6bzpXOmc6fzqUsIM6nzpHOnc6ZIM6azp/Oms6azpnOnc6XIM6XzqHOkc6azpvOlc6Zzp/OpScsIFByZWZlY3R1cmU6ICfOl8+BzrHOus67zrXOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ2MDMwJywgQXJlYTogJ86RzpPOmc6fzqMgzqDOkc6dzqTOlc6bzpXOl86czqnOnSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzpHOoc6ZzpvOm86RzqMgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6VzpvOlc6lzpjOlc6hzpkgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6azpHOm86fzpTOmc6azpkgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6azpHOoc6kzpXOoc6ZIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOms6RzqTOkc6Szp/OmM6hzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6czpHOls6RzqHOkc6azpnOkSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzpzOkc6hzpPOkc6hzpnOpM6ZIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOnM6VzqPOn86Szp/Opc6dzpnOnyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzpzOl86bzp/Oms6fzprOms6ZzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6gzpHOm86RzpnOn86azpHOo86kzqHOnyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqDOkc6dzpHOmc6dzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6gzpXOoc6UzpnOms6RIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOoM6lzqHOk86ZIM6YzpXOo86gzqHOqc6kzpnOkc6jJywgUHJlZmVjdHVyZTogJ86YzrXPg8+Az4HPic+Ezq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0NjEwMCcsIEFyZWE6ICfOkc6TzpnOkSDOnM6RzqHOmc6dzpEgzpjOpc6RzpzOmc6Uzp/OoyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzpHOk86Zzp/OoyDOks6bzpHOo86Zzp/OoyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6gzpHOoc6RzqDOn86kzpHOnM6fzqUgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6RzpzOoM6VzpvOmc6RIM6dzpXOkc6jIM6jzpXOm86VzqXOms6VzpnOkc6jIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOkc6hzpPOpc6hzp/OpM6fzqDOn86jIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOks6RzqPOmc6bzpnOms6fzqMgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6SzqHOpc6jzpcgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6TzqHOkc6ZzprOn86nzqnOoc6ZIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOlM6ZzpvOn86mzp8gzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6UzqHOkc6czpXOo86XIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOlM6hzpnOnM6ZzqTOo86RIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOlM6hzp/Oo86ZzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6VzpjOnc6ZzprOlyDOkc6dzqTOmc6jzqTOkc6jzpcgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6XzpPOn86lzpzOlc6dzpnOpM6jzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6azpHOoc6RzpLOn86jzqTOkc6jzpkgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6azpHOo86kzqHOmSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzprOkc6kzqkgzprOn86hzpnOpM6ZzpHOnc6XIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOms6VzqPOpM6hzpnOnc6XIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOms6fzpTOoc6RIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOms6fzqHOmc6kzpnOkc6dzpcgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6azqHOpc6fzpLOoc6lzqPOlyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzpvOkc6Uzp/Op86pzqHOmSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzpvOkc6azprOkSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzpvOmc6fzqbOpc6kzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6czpHOpc6hzp/Opc6UzpkgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6czqXOm86fzpkgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6dzpXOkSDOo86VzpvOlc6lzprOlc6ZzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6dzp/Opc6dzpXOo86RzqTOmSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqDOkc6hzpHOoM6fzqTOkc6czp/OoyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqDOlc6jzqTOkc6dzpnOqc6kzpnOms6RIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOoM6XzpPOkc6UzpkgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6gzpvOkc6kzpHOoc6ZzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6gzp/Om86lzp3Olc6hzpkgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6hzpHOk86Zzp8gzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6jzpXOnM6VzqHOmc6WzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6jzprOn86hzqDOmc6pzp3OkSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqPOpc6Szp/OpM6RIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOps6RzqPOms6fzpzOl86bzpnOkSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqbOmc6bzp/OmM6VzpcgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6mzqHOkc6TzpzOkSDOms6RzpvOkc6czpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4DPgc+Jz4TOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ2MjAwJywgQXJlYTogJ86RzpLOkc6hzpnOpM6jzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6RzpPOmc6RIM6azqXOoc6ZzpHOms6XIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzp3Olc6fzqfOqc6hzpnOn86lIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzqDOkc6hzpHOnM6lzpjOmc6RzqMgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6RzpPOmc6fzqMgzpTOn86dzpHOpM6fzqMgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6RzpPOn86hzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6RzpzOoM6VzpvOmc6RIM6jzp/Opc6bzpnOn86lIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOkc6jzqbOkc6azpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6SzpHOm86Rzp3Omc6UzpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6SzqHOpc6jzp/OoM6fzqXOm86RIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOk86azqHOmc6azpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6UzpHOps6dzp/Opc6bzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6VzpvOkc6kzpHOoc6ZzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6WzpXOoc6Szp/Op86pzqHOmSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzprOkc6azp/Om86RzprOms6fzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzpvOm86ZzpjOlc6RIM6gzpHOoc6RzpzOpc6YzpnOkc6jIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOms6RzpzOmc6dzpkgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6azpHOoc6Szp/Opc6dzpHOoc6ZIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOms6RzqHOmc6pzqTOmSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzprOkc6kzpHOnM6RzqfOlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpXOps6RzpvOn86SzqHOpc6jzp8gzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6azqHOpc6jzqTOkc6bzpvOn86gzpfOk86XIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOms6lzqHOkSDOoM6Rzp3Okc6TzpnOkSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzp3Olc6fzqfOqc6hzpkgzqDOkc6hzpHOnM6lzpjOmc6RzqMgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6dzpXOoc6RzpnOlM6RIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOns6XzqHOn86bzp/Ops6fzqMgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6gzpHOk86azqHOkc6kzpXOoyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqDOkc6hzpHOnM6lzpjOmc6RIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOoM6RzqHOlM6RzpvOmc6kzqPOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpXOnc6kzpUgzpXOms6azpvOl86jzpnOlc6jIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOoM6VzqTOn86lzqPOmSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqDOlc6kzqHOn86SzpnOpM6jzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6gzpfOm86fzpPOoc6Rzp3Omc6kzqPOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpvOkc6azqnOpM6XIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOoM6hzp/OlM6hzp/OnM6Zzp8gzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6gzqHOn86mzpfOpM6XzqMgzpfOm86ZzpHOoyDOks6RzpvOkc6dzpnOlM6ZzpHOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6hzpHOoM6Zzp8gzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6hzpHOp86fzqXOm86ZIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOo86RzpvOn86dzpnOms6XIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOo86VzpLOkc6jzqTOnyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqPOms6Rzp3OlM6RzpvOnyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqfOoc6lzqPOkc6lzpPOlyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqjOkc6azpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4DPgc+Jz4TOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ2MzAwJywgQXJlYTogJ86RzpPOmc6RIM6kzqHOmc6RzpTOkSDOps6ZzpvOmc6RzqTOqc6dIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOkc6TzpnOn86jIM6RzqHOo86Vzp3Omc6fzqMgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6RzpXOpM6fzqMgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6Rzp3OqSDOoM6RzpvOkc6Zzp/Oms6azpvOl86jzpkgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6RzqPOoM6hzp/Oms6azpvOl86jzpkgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6RzqfOm86RzpTOmc6RIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOks6hzqXOo86VzpvOm86RIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOks6hzqXOo86fzqXOm86RIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOk86VzqHOn86gzpvOkc6kzpHOnc6fzqMgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6TzpnOoc6fzpzOlc6hzpkgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6Tzp/Om86RIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOlM6RzqbOnc6XIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOlM6fzp3Okc6kzp/OoyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzpXOm86RzpnOkSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzprOkc6czqDOn86jIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOms6RzqTOqSDOns6VzqfOqc6hzp8gzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6azpHOpM6pIM6gzpHOm86RzpnOn86azprOm86XzqPOmSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzprOlc6hzpHOo86fzqfOqc6hzpkgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6azp/Oms6azpnOnc6ZzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6azqXOoM6RzqHOmc6jzqPOnyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzprOqc6kzqPOmc6azpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6czpHOpc6hzp/Onc6VzqHOmSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzp7Olc6nzqnOoc6fIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOoM6RzpvOkc6Zzp/Op86pzqHOmSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqDOkc6bzpHOnM6gzpHOoyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqDOl86TzpHOlM6fzqXOm86ZzpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6gzpvOkc6ZzqPOmc6fIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOoM6fzqTOkc6czpnOkSDOps6ZzpvOmc6RzqTOqc6dIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOoc6ZzpbOnyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqHOn86Uzp/Oo86kzpnOks6RIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOo86RzpPOmc6RzpTOkSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqPOmc6UzpXOoc6XIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOo86ZzqTOkc6dzpnOkSDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqPOnM6VzqHOpM6fzqMgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6kzqHOmc6azp/Ooc6lzqbOnyDOmM6VzqPOoM6hzqnOpM6ZzpHOoywgzqTOo86RzqTOo86fzqXOm86RzpnOmc6azpEgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6mzpHOnc6VzqHOqc6czpXOnc6XIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOps6ZzpvOmc6RzqTOlc6jIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOps6fzpnOnc6ZzprOmc6fIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOp86bzp/OnM6fzqMgzqHOmc6Wzp/OpSDOmM6VzqPOoM6hzqnOpM6ZzpHOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPgM+Bz4nPhM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDY0MDQnLCBBcmVhOiAnzprOkc6SzpHOm86RzqMgzprOkc6SzpHOm86RzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4DPgc+Jz4TOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU0MjQ4JywgQXJlYTogJ86YzpXOo86jzpHOm86fzp3Omc6azpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NDI0OScsIEFyZWE6ICfOmM6VzqPOo86RzpvOn86dzpnOms6XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTQyNTAnLCBBcmVhOiAnzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU0MjUyJywgQXJlYTogJ86YzpXOo86jzpHOm86fzp3Omc6azpfOoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NDM1MScsIEFyZWE6ICfOmM6VzqPOo86RzpvOn86dzpnOms6XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTQzNTInLCBBcmVhOiAnzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU0NDUzJywgQXJlYTogJ86YzpXOo86jzpHOm86fzp3Omc6azpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NDQ1NCcsIEFyZWE6ICfOmM6VzqPOo86RzpvOn86dzpnOms6XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTQ1MDAnLCBBcmVhOiAnzpTOoc6lzpzOn86jIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpXOm86ZzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOm86RzpPOpc6dzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOm86XzqTOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6czpXOo86RzpnOnyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6czp/Onc6fzpvOn86mzp8gzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOnc6VzpEgzqbOmc6bzpHOlM6VzpvOps6VzpnOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6dzpXOn86nzqnOoc6fzqXOlM6RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzqDOkc6bzpHOmc6fzqfOqc6hzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOoM6Rzp3OpM6VzpvOlc6XzpzOqc6dzpHOoyDOms6ZzpvOms6ZzqMsIM6gzpXOnc6kzpHOm86fzqbOn86jIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzqDOlc6kzqHOqc6kzp8gzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTQ2MjEnLCBBcmVhOiAnzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU0NjIyJywgQXJlYTogJ86YzpXOo86jzpHOm86fzp3Omc6azpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NDYyMycsIEFyZWE6ICfOmM6VzqPOo86RzpvOn86dzpnOms6XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTQ2MjQnLCBBcmVhOiAnzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU0NjI1JywgQXJlYTogJ86YzpXOo86jzpHOm86fzp3Omc6azpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NDYyNicsIEFyZWE6ICfOmM6VzqPOo86RzpvOn86dzpnOms6XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTQ2MjcnLCBBcmVhOiAnzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU0NjI4JywgQXJlYTogJ86czpXOnc6VzpzOlc6dzpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NDYyOScsIEFyZWE6ICfOmM6VzqPOo86RzpvOn86dzpnOms6XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTQ2MzAnLCBBcmVhOiAnzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU0NjMxJywgQXJlYTogJ86YzpXOo86jzpHOm86fzp3Omc6azpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NDYzMicsIEFyZWE6ICfOmM6VzqPOo86RzpvOn86dzpnOms6XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTQ2MzMnLCBBcmVhOiAnzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU0NjM0JywgQXJlYTogJ86YzpXOo86jzpHOm86fzp3Omc6azpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NDYzNScsIEFyZWE6ICfOmM6VzqPOo86RzpvOn86dzpnOms6XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTQ2MzYnLCBBcmVhOiAnzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU0NjM4JywgQXJlYTogJ86YzpXOo86jzpHOm86fzp3Omc6azpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NDYzOScsIEFyZWE6ICfOmM6VzqPOo86RzpvOn86dzpnOms6XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTQ2NDAnLCBBcmVhOiAnzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU0NjQxJywgQXJlYTogJ86YzpXOo86jzpHOm86fzp3Omc6azpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NDY0MicsIEFyZWE6ICfOmM6VzqPOo86RzpvOn86dzpnOms6XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTQ2NDMnLCBBcmVhOiAnzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU0NjQ0JywgQXJlYTogJ86YzpXOo86jzpHOm86fzp3Omc6azpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NDY0NScsIEFyZWE6ICfOmM6VzqPOo86RzpvOn86dzpnOms6XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTQ2NDYnLCBBcmVhOiAnzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU0NjU1JywgQXJlYTogJ86YzpXOo86jzpHOm86fzp3Omc6azpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NTEzMScsIEFyZWE6ICfOms6RzpvOkc6czpHOoc6ZzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NTEzMicsIEFyZWE6ICfOms6RzpvOkc6czpHOoc6ZzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NTEzMycsIEFyZWE6ICfOms6RzpvOkc6czpHOoc6ZzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NTEzNCcsIEFyZWE6ICfOms6RzpvOkc6czpHOoc6ZzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NTEzNScsIEFyZWE6ICfOms6RzpvOkc6czpHOoc6ZzpHOoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NTIzNicsIEFyZWE6ICfOoM6lzpvOkc6ZzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTUzMzcnLCBBcmVhOiAnzqTOoc6ZzpHOnc6UzqHOmc6RIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTU0MzcnLCBBcmVhOiAnzp3Olc6RzqDOn86bzpfOoyAtIM6jzqXOms6VzqnOnSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NTQzOCcsIEFyZWE6ICfOkc6TzpnOn86jIM6gzpHOpc6bzp/OoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NTUzNCcsIEFyZWE6ICfOmM6VzqPOo86RzpvOn86dzpnOms6XzqMgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOoM6lzpvOkc6ZzpHOoyAtIM6nzp/Ooc6kzpnOkc6kzpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTU1MzUnLCBBcmVhOiAnzqDOkc6dzp/Ooc6RzpzOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NTUzNicsIEFyZWE6ICfOoM6lzpvOkc6ZzpHOoyAtIM6nzp/Ooc6kzpnOkc6kzpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTYxMjEnLCBBcmVhOiAnzpHOnM6gzpXOm86fzprOl86gzp/OmSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NjEyMicsIEFyZWE6ICfOnM6Vzp3Olc6czpXOnc6XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTYxMjMnLCBBcmVhOiAnzpHOnM6gzpXOm86fzprOl86gzp/OmSDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU2MjI0JywgQXJlYTogJ86VzqXOn86jzpzOnyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU2MjI1JywgQXJlYTogJ86azp/Ooc6UzpXOm86Zzp/OpSAtIM6VzqXOn86jzpzOn86lIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU2MjI2JywgQXJlYTogJ86azp/Ooc6UzpXOm86Zzp/OpSAtIM6VzqXOn86jzpzOn86lIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU2MjM4JywgQXJlYTogJ86azp/Ooc6UzpXOm86Zzp/OpSAtIM6VzqXOn86jzpzOn86lIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU2MzM0JywgQXJlYTogJ86VzpvOlc6lzpjOlc6hzpnOnyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU2MzM1JywgQXJlYTogJ86gzpHOpc6bzp/OpSDOnM6VzpvOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NjQwNCcsIEFyZWE6ICfOmM6VzqPOo86RzpvOn86dzpnOms6XIM6gzpXOmc6hzpHOmc6RzqMgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTY0MjknLCBBcmVhOiAnzpHOnc6Yzp/Oms6XzqDOn86ZIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU2NDMwJywgQXJlYTogJ86jzqTOkc6lzqHOn86lzqDOn86bzpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NjQzMScsIEFyZWE6ICfOo86kzpHOpc6hzp/Opc6gzp/Om86XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTY0MzYnLCBBcmVhOiAnzqDOkc6lzpvOn86lIM6czpXOm86RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU2NDM3JywgQXJlYTogJ86gzpHOpc6bzp/OpSDOnM6VzpvOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NjUzMicsIEFyZWE6ICfOoM6fzpvOmc6nzp3OlyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU2NTMzJywgQXJlYTogJ86gzp/Om86ZzqfOnc6XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTY1MzUnLCBBcmVhOiAnzqDOkc6lzpvOn86lIM6czpXOm86RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU2NjI1JywgQXJlYTogJ86jzqXOms6ZzpXOoyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU2NjI2JywgQXJlYTogJ86jzqXOms6ZzpXOoyDOmM6VzqPOo86RzpvOn86dzpnOms6XIC0gzqDOoc6fzpHOo86kzpnOkScsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU2NzI3JywgQXJlYTogJ86dzpXOkc6gzp/Om86XIM6YzpXOo86jzpHOm86fzp3Omc6azpcgLSDOoM6hzp/Okc6jzqTOmc6RJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTY3MjgnLCBBcmVhOiAnzp3Olc6RzqDOn86bzpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOlyAtIM6gzqHOn86RzqPOpM6ZzpEnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NzAwMScsIEFyZWE6ICfOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOmM6VzqHOnM6XIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpnOqc6Rzp3Onc6XzqMgzpjOlc6fzpvOn86Tzp/OoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6czpfOm86ZzpXOoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6dzpXOkSDOoc6RzpnOlM6VzqPOpM6fzqMgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOnc6Vzp8gzqHOpc6jzpnOnyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6jzqXOms6VzpXOoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6kzpHOk86RzqHOkc6UzpXOoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6kzqHOmc6RzpTOmc6fIM6YzpXOoc6czpfOoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6mzpHOoc6czpHOms6RzpnOmc6azpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTcwMDInLCBBcmVhOiAnzpHOoc6VzpjOn86lzqPOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6RzqHOlc6kzpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOkc6lzpPOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6azqHOpc6fzp3Olc6hzpkgzpvOkc6TzprOkc6UzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOm86VzqXOms6fzqXOlM6RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpvOmc6czp3OlyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6bzp/Ops6ZzqPOms6fzqMgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOnM6RzqXOoc6fzqXOlM6RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzqPOms6VzqDOkc6jzqTOnyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6jzp/Op86fzqMgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOo86kzpXOps6Rzp3Omc6RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU3MDAzJywgQXJlYTogJ86RzpPOmc6fzqMgzpHOmM6Rzp3Okc6jzpnOn86jIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU3MDA0JywgQXJlYTogJ86dzpXOkSDOms6VzqHOkc6jzpnOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6dzpXOkSDOnM6XzqfOkc6dzpnOqc6dzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTcwMDYnLCBBcmVhOiAnzpHOk86Zzp/OoyDOkc6dzqTOqc6dzpnOn86jIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpLOkc6jzpnOm86ZzprOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6TzpHOm86RzqHOmc6dzp/OoyAgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOm86RzprOms6ZzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOm86ZzpLOkc6UzpkgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOm86fzqXOpM6hzpEgzpjOlc6hzpzOl86jIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpzOn86dzp/OoM6XzpPOkc6Uzp8gzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOoM6VzqHOmc6jzqTOlc6hzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOoM6hzpnOnc6fzqfOqc6hzpkgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6jzp/Opc6hzqnOpM6XIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU3MDA3JywgQXJlYTogJ86RzpTOlc6dzpTOoc6fIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpLOkc6bzqTOn86nzqnOoc6ZIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpLOoc6RzqfOmc6RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpXOm86Vzp/Opc6jzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOm86fzqXOlM6ZzpHOoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6czpnOms6hzp8gzpzOn86dzpHOo86kzpfOoc6ZIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzqDOkc6hzpjOlc6dzpkgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOp86RzpvOms6XzpTOqc6dzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTcwMDgnLCBBcmVhOiAnzpnOqc6dzpnOkSDOmM6VzqMvzp3Omc6azpfOoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NzAwOScsIEFyZWE6ICfOms6RzpvOn86nzqnOoc6ZIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU3MDEwJywgQXJlYTogJ86RzqPOks6VzqPOpM6fzqfOqc6hzpkgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTcwMTEnLCBBcmVhOiAnzpHOk86nzpnOkc6bzp/OoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6RzprOoc6fzqDOn86kzpHOnM6fzqMgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOks6RzpjOpc6bzpHOms6azp/OoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6TzpXOps6lzqHOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6azpHOo86kzpHOnc6RzqMgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOnM6gzpHOm86RzpnOmc6azpEgzprOmc6bzprOmc6jLCDOnc6VzpEgzpzOlc6jzpfOnM6SzqHOmc6RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzp7Ol86hzp/Op86pzqHOmSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6gzpXOpc6azp/OlM6RzqPOn86jIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzqDOoc6fzqfOqc6czpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTcwMTInLCBBcmVhOiAnzpHOk86Zzp/OoyDOp86RzqHOkc6bzpHOnM6gzp/OoyDOo86RzqHOkc6azpfOnc6RzqMgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOkc6UzpHOnCDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6RzqHOlM6RzpzOlc6hzpnOnyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6SzpHOo86ZzpvOn86lzpTOmSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6TzpXOoc6RzprOkc6hzp/OpSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6WzpHOk86azpvOmc6SzpXOoc6ZIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzprOkc6bzpHOnM6pzqTOnyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6azqHOl86czp3OlyDOp86RzpvOms6ZzpTOmc6azpfOoywgzpzOkc6hzpHOmM6fzqXOo86jzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6czpXOm86ZzqPOo86fzqXOoc6Tzp/OoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6czpXOo86fzprOqc6czp8gzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOoM6VzqTOoc6fzprOlc6hzpHOo86RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzqDOm86RzqTOkc6dzp/Op86pzqHOmSDOp86RzpvOms6ZzpTOmc6azpfOoywgzqDOm86RzqTOlc6ZzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOo86RzqHOkc6azpfOnc6RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU3MDEzJywgQXJlYTogJ86pzqHOkc6Zzp/Oms6RzqPOpM6hzp8gzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTcwMTQnLCBBcmVhOiAnzpHOnc6pIM6jzqTOkc6lzqHOn86jIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpLOkc6czpLOkc6azpnOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6azpHOm86lzpLOmc6RIM6SzpHOoc6SzpHOoc6RzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6czpnOms6hzpcgzpLOn86bzpLOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6czp/OlM6ZIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzp3Olc6RIM6czpHOlM6lzqTOn86jIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzp/Om86lzpzOoM6ZzpHOlM6RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzqHOlc6dzqTOmc6dzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOo86kzpHOpc6hzp/OoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6nzqHOpc6jzpcgzpHOms6kzpcgzqfOkc6bzprOmc6UzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NzAxNycsIEFyZWE6ICfOks6VzqHOpM6ZzqPOms6fzqMgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOlM6fzqHOms6RzpTOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6VzpvOm86Xzp3Omc6azp8gzprOmc6bzprOmc6jLCDOlc6lzpHOk86TzpXOm86ZzqPOpM6hzpnOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6YzpXOn86Uzp/Oo86ZzpEgzprOmc6bzprOmc6jLCDOmM6VzqHOkc6gzpXOpc6kzpfOoc6Zzp8gzqTOn86ezpnOms6fzpzOkc6dzqnOnSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6ZzqPOqc6czpEgzprOmc6bzprOmc6jLCDOms6RzqHOpM6VzqHOlc6jIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzprOlc6mzpHOm86fzqfOqc6hzpkgzqPOlc6hzqHOqc6dLCDOms6lzpTOqc6dzpnOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6bzpHOp86Rzp3Okc6jIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpvOlc6lzprOn86nzqnOoc6ZIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpzOkc6lzqHOn86hzqHOkc6nzpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOnM6VzpvOkc6dzpjOmc6fIM6azpnOm86azpnOoywgzp3Omc6azp/OoM6fzpvOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6ezqXOm86fzqDOn86bzpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOoc6ZzpbOkc6dzpEgzprOmc6bzprOmc6jLCDOo86kzpHOpc6hzp/Opc6gzp/Om86XIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU3MDE5JywgQXJlYTogJ86RzpPOk86VzpvOn86nzqnOoc6ZIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpHOk86ZzpEgzqTOoc6ZzpHOlM6RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpvOmc6SzpHOlM6RzprOmSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6dzpXOn86ZIM6VzqDOmc6SzpHOpM6VzqMgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOoM6VzqHOkc6ZzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTcwMjEnLCBBcmVhOiAnzpHOo86gzqHOn86SzpHOm86kzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOks6hzpHOo86dzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOnc6VzpEgzpLOoc6RzqPOnc6RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU3MTAwJywgQXJlYTogJ86RzpPOoc6fzqPOpc6azpnOkSDOoM6VzpvOm86XzqMsIM6RzpjOpc6hzpEgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOlM6lzqTOmc6azp8gzqDOlc6bzpvOl86jLCDOms6fzqXOps6RzpvOmc6RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpvOmc6SzpHOlM6ZzqTOo86RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzqHOkc6nzqnOnc6RIM6gzpXOm86bzpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU3MjAwJywgQXJlYTogJ86RzpPOmc6RIM6SzpHOoc6SzpHOoc6RIM6gzpXOoc6ZzpLOn86bzpHOms6Zzp/OpSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6RzpPOmc6fzqMgzpLOkc6jzpnOm86VzpnOn86jIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpHOnc6RzpvOl86ozpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOkc6jzqPOl86hzp/OoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6TzpHOm86Xzp3OlyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6UzqHOkc6azp/Onc6kzpnOnyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6Vzp7Okc6czpnOm86Zzp8gzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOlc6lzpHOk86TzpXOm86ZzqPOnM6fzqMgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOl86hzpHOms6bzpXOmc6fIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzprOkc6SzpHOm86bzpHOoc6Zzp8gzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOms6fzpvOp86ZzprOnyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6azqHOmc6YzpnOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6bzpHOk86azpHOlM6RzqMgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOnM6ZzprOoc6fzprOqc6czpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOn86jzqPOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6gzpXOnc6kzpUgzpLOoc6lzqPOlc6jIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzqDOlc6hzpnOks6fzpvOkc6azpkgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOoM6fzpvOpc6UzpXOnc6UzqHOmSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6gzqHOn86mzpfOpM6XzqMgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOo86kzpnOks6fzqMgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOo86nzp/Om86RzqHOmSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6nzqHOpc6jzpHOpc6TzpcgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86YzrXPg8+DzrHOu86/zr3Or866zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTczMDAnLCBBcmVhOiAnzpHOnc6RzqTOn86bzpnOms6fIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzprOpc6czpnOnc6RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzp3Olc6RIM6czpHOm86TzpHOoc6RIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzqfOkc6bzpHOo86kzqHOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NzQwMCcsIEFyZWE6ICfOks6RzpvOpM6fzqTOn86gzp/OoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6jzpnOnc6Uzp/OoyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzpjOtc+Dz4POsc67zr/Ovc6vzrrOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1NzUwMCcsIEFyZWE6ICfOkc6dzqkgzqPOp86fzpvOkc6hzpkgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOlc6gzpHOnc6fzpzOlyDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6azpHOoc6UzpnOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6azpHOpM6pIM6jzqfOn86bzpHOoc6ZIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoywgzpzOlc6jzpfOnM6VzqHOmSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMsIM6gzpvOkc6TzpnOkc6hzpkgzpjOlc6jzqPOkc6bzp/Onc6ZzprOl86jLCDOpM6hzpnOm86fzqbOn86jIM6YzpXOo86jzpHOm86fzp3Omc6azpfOoycsIFByZWZlY3R1cmU6ICfOmM61z4PPg86xzrvOv869zq/Ous63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ0MDAxJywgQXJlYTogJ86azpHOm86RzqHOmc6kzpXOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpfOoM6Zzp3OkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azp/OnM6czpHOpM6RzprOmc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOkc6kzqPOn86lzprOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czpXOm86ZzqPOo86fzqXOoc6Tzp/OmSDOkc6hzqTOkc6jLCDOnM6lzqPOpM6hzpHOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpvOkc6kzpHOnc6ZzpEgzpzOkc6kzqPOn86lzprOmc6fzqUgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoM6hzpHOnM6Rzp3OpM6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOoc6fzqPOl86bzpnOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6jzpnOoc6RzprOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6kzqPOn86gzpXOm86RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqbOoc6Rzp7On86jIM6gzqHOkc6czpHOnc6kzqnOnSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6nzqHOmc6jzqTOn86ZIM6ZzqnOkc6dzp3Omc6dzqnOnScsIFByZWZlY3R1cmU6ICfOmc+JzrHOvc69zq/Ovc+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ0MDAyJywgQXJlYTogJ86RzpPOmc6RIM6czpHOoc6Zzp3OkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzqHOk86lzqHOn86nzqnOoc6ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpLOoc6ZzqPOpM6fzpLOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6UzpXOm86SzpnOnc6RzprOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6UzpnOnM6fzprOn86hzpnOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6WzpHOks6hzp/Op86fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOkc6jzqTOkc6dzpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzqPOpM6Rzp3Omc6Rzp3OlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpHOpM6pIM6bzpHOks6UzpHOnc6XIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOlc6hzpHOo86fzpLOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azqTOmc6jzpzOkc6kzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOm86RzpLOlM6Rzp3OlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czpHOpc6hzp/OoM6fzqXOm86fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzp3Olc6fzqfOqc6hzpkgzqDOqc6TzqnOnc6Zzp/OpSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpXOoc6ZzqPOpM6VzqHOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6jzqTOkc6lzqHOn86UzqHOn86czpkgzqDOqc6TzqnOnc6Zzp/OpSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6jzqTOoc6RzqTOmc6dzpnOo86kzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOpM6VzqHOmc6RzqfOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6mzpHOoc6RzpPOk86ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqfOkc6hzpHOpc6TzpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOp86hzqXOo86fzpTOn86lzpvOlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6ozpfOm86fzprOkc6jzqTOoc6fIM6ZzqnOkc6dzp3Omc6dzqnOnScsIFByZWZlY3R1cmU6ICfOmc+JzrHOvc69zq/Ovc+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ0MDAzJywgQXJlYTogJ86RzpPOmc6fzqMgzprOqc6dzqPOpM6Rzp3OpM6Zzp3On86jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpHOlc6kzp/OoM6VzqTOoc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpHOoc6RzqfOqc6SzpnOpM6jzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOks6RzqPOmc6bzp/OoM6fzqXOm86fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpLOkc6kzpHOpM6RzpTOlc6jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpLOm86RzqfOkc6kzpHOnc6fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpLOn86lzqTOo86RzqHOkc6jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpLOoc6fzp3OpM6ZzqPOnM6Vzp3OlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6TzpHOks6hzpnOo86Zzp/OmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6TzqHOkc6dzpnOpM6jzp/OoM6fzqXOm86RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpTOkc6mzp3On86mzqXOpM6fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpTOlc6jzqDOn86kzpnOms6fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpTOoc6RzpPOn86lzpzOlyAgKM6gzpHOm86Zzp/Opc6hzpcpIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpXOms6azpvOl86jzp/Op86pzqHOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6WzpnOpM6jzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOmc6VzqHOn86czp3Ol86czpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzpvOn86nzqnOoc6ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOkc6hzpnOpM6jzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzqPOpM6hzpkgzpLOkc6jzpnOm86fzqDOn86lzpvOn86lIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOkc6kzpHOoc6hzpHOms6kzpfOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpHOpM6pIM6RzpXOpM6fzqDOlc6kzqHOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpvOl86czpHOpM6ZzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6fzqXOoc6dzp/Ooc6hzpHOp86XIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpvOlc6lzprOn86YzpXOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6bzpnOk86fzqjOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6bzpnOmM6Zzp3OnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czpHOls6RzqHOkc6azpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6VzpvOmc6jzqPOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czpnOms6hzp8gzqPOn86lzpvOn86gzp/Opc6bzp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnc6Vzp/Op86pzqHOmSDOlM6pzpTOqc6dzpfOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpHOm86Zzp/Opc6hzpcgzpHOk86Zzp/OpSDOnc6ZzprOn86bzpHOn86lIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOkc6bzpnOn86lzqHOlyDOlM6pzpTOqc6dzpfOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpXOpM6jzpHOm86ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOoc6pzqTOn86gzpHOoM6gzpHOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6hzpHOmc6azp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoc6ZzpHOp86fzpLOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6hzpnOls6fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqPOkc6azpXOm86bzpHOoc6ZzprOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6jzp/Opc6bzp/OoM6fzqXOm86fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqbOqc6kzpXOmc6dzp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOp86hzqXOo86fzqHOoc6RzqfOlyDOmc6pzpHOnc6dzpnOnc6pzp0nLCBQcmVmZWN0dXJlOiAnzpnPic6xzr3Ovc6vzr3Pic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0NDAwNCcsIEFyZWE6ICfOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzpTOn86bzpnOkc6dzqnOnSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzpvOqc6dzpHOms6ZzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6dzqkgzqDOkc6hzpHOms6RzpvOkc6czp/OoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6Rzp3OqSDOoc6RzpLOlc6dzpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzqHOlc6kzpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOks6ZzpPOm86RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpTOn86bzpnOkc6dzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOlc6bzpHOmc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOkc6bzqDOkc6azpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzqTOqSDOoc6RzpLOlc6dzpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azp/Opc6azpvOmc6fzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6fzqfOm86Zzp/OmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6bzpnOn86lzpzOoM6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOkc6lzqHOn86Szp/Opc6dzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6RzqXOoc6fzp3On86hzp/OoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czpXOo86fzpLOn86lzp3OmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czp/Onc6XIM6TzpXOnc6dzpfOo86Zzp/OpSDOmM6Vzp/OpM6fzprOn86lIM6SzpXOm86bzpHOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czp/Oo86nzp/OnM6Rzp3OpM6jzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6gzp/Om86RzpnOmc6azpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnc6VzpPOoc6RzpTOlc6jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOkc6XzpTOn86dzpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpHOoc6RzprOkc6bzpHOnM6fzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoc6VzqDOlc6kzpnOo86kzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOo86ZzqTOkc6hzpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6jzqTOkc6lzqHOn86UzqHOn86czpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOpM6jzpHOoM6RzqHOkSDOmc6pzpHOnc6dzpnOnc6pzp0nLCBQcmVmZWN0dXJlOiAnzpnPic6xzr3Ovc6vzr3Pic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0NDAwNicsIEFyZWE6ICfOms6VzqbOkc6bzp/Oks6hzqXOo86fIM6ZzqnOkc6dzp3Omc6dzqnOnScsIFByZWZlY3R1cmU6ICfOmc+JzrHOvc69zq/Ovc+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ0MDEwJywgQXJlYTogJ86SzqHOpc6jzp/Op86pzqHOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6TzqXOps6kzp/Oms6RzpzOoM6fzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOl86bzpnOn86nzqnOoc6ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpvOkc6ZzqPOpM6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqPOms6RzpzOnc6VzpvOm86ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqTOo86VzqDOlc6bzp/Oks6fIM6ZzqnOkc6dzp3Omc6dzqnOnScsIFByZWZlY3R1cmU6ICfOmc+JzrHOvc69zq/Ovc+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ0MDEzJywgQXJlYTogJ86RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOnM6fzp3On86bzpnOmM6Zzp/OpSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzpXOpM6fzqHOoc6RzqfOlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6UzpHOps6dzpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOlM6RzqbOnc6pzqTOlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6VzpvOm86Xzp3Omc6azp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOls6pzp/OlM6fzqfOn86jIM6gzpfOk86XIM6gzpvOkc6kzpHOnc6fzqXOo86jzpfOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpHOm86Vzp3OpM6WzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6fzqHOmc6kzpnOkc6dzpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6pzqPOpM6XzqTOo86ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpvOkc6WzpHOmc6dzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6RzqfOkc6bzpHOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czp/Onc6fzpvOmc6YzpnOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czqDOn86lzprOn86hzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnc6ZzqPOpM6fzqHOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6ezpfOoc6fzpLOn86lzp3OmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpHOpM6VzqHOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpfOk86RzpTOmc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOm86RzpnOo86ZzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoM6bzpHOpM6Rzp3On86lzqPOo86RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqbOkc6dzpXOoc6pzpzOlc6dzpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOps6fzqHOpM6fzqPOmSDOmc6pzpHOnc6dzpnOnc6pzp0nLCBQcmVmZWN0dXJlOiAnzpnPic6xzr3Ovc6vzr3Pic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0NDAxNCcsIEFyZWE6ICfOkc6TzpnOkSDOks6RzqHOks6RzqHOkSDOlM6VzpzOkc6kzpnOn86lIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6UzpXOnM6RzqTOmc6fzqUgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6czqDOlc6bzp/OoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6Szp/Oks6fzqXOo86RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpLOn86lzqTOkc6dzqPOkc6Zzp/OmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6TzqHOlc6SzpXOnc6ZzqTOmc6fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpTOlc6czpHOpM6ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpTOlc6hzpLOlc6dzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOlM6ZzpvOkc6azprOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6Uzp/Om86ZzpHOnc6XIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpXOm86RzqTOn86nzqnOoc6ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpnOpM6VzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzqPOpM6Rzp3Oqc6dzpHOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6bzpnOkc6gzpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6RzprOoc6Zzp3OnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6dzpXOnyDOnM6RzqHOn86lzqPOmSAgKM6Uzp/Om86ZzpHOnc6XKSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6kzqHOmc6jzqTOlc6dzp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOpM6jzpnOoM6ZzpHOnc6XICAozpHOnM6gzpXOm86fzqMpIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqbOm86RzpzOoM6fzqXOoc6RzqHOmc6fIM6ZzqnOkc6dzp3Omc6dzqnOnScsIFByZWZlY3R1cmU6ICfOmc+JzrHOvc69zq/Ovc+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ0MTAwJywgQXJlYTogJ86RzpPOmc6RIM6SzpHOoc6SzpHOoc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpHOlc6kzp/OoM6VzqTOoc6RIM6azp/Onc6ZzqTOo86XzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6XzpTOn86dzp/Op86pzqHOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzpzOkc6hzpHOnc6kzp/OoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6Vzp7On86nzpcgzprOn86dzpnOpM6jzpfOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6XzpvOmc6fzqHOoc6RzqfOlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpHOks6RzqPOmc6bzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzpvOm86ZzpjOlc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOkc6bzp/Oks6hzqXOo86XIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOkc6bzqXOks6ZzpEgzprOn86dzpnOpM6jzpfOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpvOlc6ZzpTOqc6dzpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azp/Onc6ZzqTOo86RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpvOn86lzqTOoc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOkc6WzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6VzpvOmc6jzqPOn86gzpXOpM6hzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6fzpvOpc6SzpTOn86jzprOlc6gzpHOo86kzp/OoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czqDOn86lzqHOkc6WzpHOnc6ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzp3Omc6azpHOnc6pzqHOkc6jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOl86TzpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoM6lzp7Okc6hzpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzqXOoc6Tzp/OoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6jzpnOkc6dzp/Oks6fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqPOpM6hzpHOpM6jzpnOkc6dzpcgICjOoM6lzqHOk86fzqMgzprOn86dzpnOpM6jzpHOoykgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOpM6hzpHOoM6VzpbOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6mzqXOpM6fzpogzpnOqc6Rzp3Onc6Zzp3Oqc6dJywgUHJlZmVjdHVyZTogJ86Zz4nOsc69zr3Or869z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDQyMDAnLCBBcmVhOiAnzpHOk86ZzpEgzqDOkc6hzpHOo86azpXOpc6XIM6gzpXOpM6hzpHOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzpzOoM6VzpvOmc6RIM6nzqHOpc6jzp/Oks6ZzqTOo86RzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6dzpHOm86XzqjOlyDOp86hzqXOo86fzpLOmc6kzqPOkc6jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpHOnc6XzpvOmc6fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpHOnc6Yzp/Op86pzqHOmSDOnM6VzqTOo86fzpLOn86lIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpLOn86kzp/Onc6fzqPOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6TzpnOkc6hzpHOms6RzqHOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpHOm86bzpnOmM6VzpEgzqDOlc6kzqHOkc6jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOlc6kzqPOn86Szp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6XzpvOmc6RIM6czpXOpM6jzp/Oks6fzqUgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6ZzprOoc6fIM6gzpXOoc6ZzqPOpM6VzqHOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czqXOm86fzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnc6Vzp8gzpPOlc6hzpHOms6RzqHOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6ezpfOoc6ZzprOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpHOm86RzpnOn86nzqnOoc6ZIM6czpnOms6hzp/OpSDOoM6VzqHOmc6jzqTOlc6hzpnOn86lIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOlc6kzqHOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzqHOn86jzpfOm86ZzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoM6hzp/Ops6XzqTOl86jIM6XzpvOmc6RzqMgzpHOnc6XzpvOmc6fzqUgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoc6RzqfOn86lzpvOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6jzpnOpM6jzpHOmc6dzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOo86ZzqnOm86RzpTOlc6jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqTOkc6czqDOn86lzqHOmc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqfOoc6lzqPOn86SzpnOpM6jzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dJywgUHJlZmVjdHVyZTogJ86Zz4nOsc69zr3Or869z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDUyMjEnLCBBcmVhOiAnzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6Rzp3Okc6kzp/Om86XzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dJywgUHJlZmVjdHVyZTogJ86Zz4nOsc69zr3Or869z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDUyMjInLCBBcmVhOiAnzpnOqc6Rzp3Onc6ZzqTOqc6dIM6ZzqnOkc6dzp3Omc6dzqnOnScsIFByZWZlY3R1cmU6ICfOmc+JzrHOvc69zq/Ovc+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ1MzMyJywgQXJlYTogJ86ZzqnOkc6dzp3Omc6dzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dJywgUHJlZmVjdHVyZTogJ86Zz4nOsc69zr3Or869z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDUzMzMnLCBBcmVhOiAnzpnOqc6Rzp3Onc6Zzp3OkSDOmc6pzpHOnc6dzpnOnc6pzp0nLCBQcmVmZWN0dXJlOiAnzpnPic6xzr3Ovc6vzr3Pic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0NTQ0NCcsIEFyZWE6ICfOmc6pzpHOnc6dzpnOnc6RIM6ZzqnOkc6dzp3Omc6dzqnOnScsIFByZWZlY3R1cmU6ICfOmc+JzrHOvc69zq/Ovc+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ1NDQ1JywgQXJlYTogJ86ZzqnOkc6dzp3Omc6dzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dJywgUHJlZmVjdHVyZTogJ86Zz4nOsc69zr3Or869z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDU1MDAnLCBBcmVhOiAnzpHOks6Tzp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6TzpnOkSDOkc6dzpHOo86kzpHOo86ZzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6TzpnOkSDOms6lzqHOmc6RzprOlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzpPOmc6RIM6czpHOoc6Zzp3OkSDOms6hzqXOkc6jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpHOk86ZzpEgzqDOkc6hzpHOo86azpXOpc6XIM6czpXOm86ZzpHOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzpPOmc6RIM6kzqHOmc6RzpTOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzpPOmc6RIM6kzqHOmc6RzpTOkSDOnM6VzpvOmc6TzqnOnSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzpPOmc6fzpkgzpHOnc6RzqHOk86lzqHOn86ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpHOk86Zzp/OmSDOkc6gzp/Oo86kzp/Om86fzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzqPOms6bzpnOks6Rzp3Ol86jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpHOk86Zzp/OoyDOlM6XzpzOl86kzqHOmc6fzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6TzpnOn86jIM6czpfOnc6RzqMgzpzOmc6azqHOl86jIM6Tzp/OpM6ZzqPOpM6RzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6TzpnOn86jIM6nzqHOmc6jzqTOn86mzp/Ooc6fzqMgzpPOmc6fzqXOoc6TzpHOnc6ZzqPOpM6RzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6TzpnOn86jIM6nzqHOmc6jzqTOn86mzp/Ooc6fzqMgzqPOms6bzpnOks6Rzp3Ol86jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpHOnM6czp/OoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzpzOoM6VzpvOkc6azpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzpzOoM6VzpvOlc6ZzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6czqbOmc6YzpXOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6Rzp3Okc6hzpPOpc6hzp/OmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6Rzp3Okc6kzp/Om86ZzprOlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6Rzp3OmM6fzqfOqc6hzpkgzpTOqc6UzqnOnc6XzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6dzqkgzpvOkc6ozpnOo86kzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6dzqkgzpzOn86lzqPOmc6pzqTOmc6kzqPOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzqHOpM6fzqDOn86lzpvOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6RzqPOks6VzqPOpM6fzqfOqc6hzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6jzqDOoc6fzqfOqc6czpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6jzqDOoc6fzqfOqc6hzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6jzqbOkc6azpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOkc6lzqfOlc6dzpHOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6SzpHOk86Vzp3Omc6kzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOks6RzpjOpc6gzpXOlM6fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpLOkc6gzqTOmc6jzqTOl86jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpLOkc6hzpvOkc6RzpwgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOks6RzqPOkc6ZzpnOms6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpLOkc6jzpnOm86ZzprOlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6SzpXOm86ZzqPOo86RzqHOmc6fzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOks6fzqXOm86ZzpHOo86kzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOks6fzqXOnc6fzqDOm86RzpPOmc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpLOoc6lzqPOlyDOoM6RzqPOmc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpPOlc6hzpHOms6RzqHOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6TzpnOn86lzqHOk86Rzp3Omc6jzqTOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6TzprOkc6bzp3OpM6VzqHOmc6czpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOk86azp/Ooc6kzqPOmc6VzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOk86fzqHOmc6kzqPOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6Tzp/Opc6bzpHOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6TzqHOkc6czpzOlc6dzp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOlM6RzqbOnc6fzqXOm86RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpTOlc6bzpLOmc6dzpHOms6fzqDOn86lzpvOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6UzqHOkc6Tzp/OqM6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpTOoc6RzpzOlc6jzpnOn86ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpTOoc6ZzqPOms6fzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOlM6hzp/Oo86fzqfOqc6hzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOlM6pzpTOqc6dzpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOlc6ZzqPOn86UzpnOkSDOmM6Vzp/OpM6fzprOn86lIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpXOm86Vzp/Opc6jzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOlc6bzpXOpc6YzpXOoc6fzqfOqc6hzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOlc6ezp/Op86XIM6gzpXOoc6RzpzOkc6kzp/OoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6VzqDOmc6jzprOn86gzpnOms6fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpbOkc6dzpHOmc6fzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOls6fzqHOk86ZzpHOnc6dzpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOls6pzp/OlM6fzqfOn86jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpbOqc6fzpTOn86nzp/OoyDOoM6XzpPOlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6XzpvOmc6fzprOkc6bzpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOmM6VzqHOmc6RzprOl86jzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzpLOkc6bzpvOkc6hzpnOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpHOnM6gzp/OoyDOqM6Xzp3Okc6jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOkc6dzp3Olc6kzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzqHOkc6UzpfOnM6RzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzqHOlM6RzpzOmc6kzqPOmc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOkc6hzqXOlc6jIM6Rzp3Okc6kzp/Om86ZzprOn86lIM6WzpHOk86fzqHOmc6fzqUgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzqHOpc6VzqMgzpHOo86mzpHOms6RzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzqHOpc6fzqbOpc6kzp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzqPOpM6hzpkgzpzOlc6TzpHOm86fzqUgzqDOlc6hzpnOo86kzpXOoc6Zzp/OpSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpHOo86kzqHOmc6kzqPOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpHOpM6RzpLOn86YzqHOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpHOpM6jzpnOms6RzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzqTOqSDOkc6jzqDOoc6fzqfOqc6hzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzqTOqSDOms6hzqXOps6fzpLOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azpHOpM6pIM6bzpHOqM6ZzqPOpM6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOkc6kzqkgzpzOkc6hzpzOkc6hzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6RzqTOqSDOnM6fzqXOo86ZzqnOpM6ZzqTOo86RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOkc6kzqkgzp3Olc6fzqfOqc6hzp/OoM6fzqXOm86fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOlc6UzqHOn86jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOlc6hzpHOo86ZzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6XzqDOn86ZIM6czpHOls6ZzpHOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azp/Oms6azpnOnc6fzqfOqc6czpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6fzpvOpc6WzqnOkc6Zzp/OmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azp/Om86pzp3Omc6RzqTOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azp/Onc6kzpnOnc6fzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6fzp3OpM6jzpnOms6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOn86gzpHOnc6XIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOn86hzpTOn86bzp/Omc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOn86jzpzOl86hzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6fzqTOn86czpnOo86kzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6fzqXOm86fzqXOoc6RzpnOmc6azpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6fzqXOnM6RzqHOmc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOn86lzqHOlc6dzqTOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azp/Opc6kzqPOlc6bzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6hzpHOnc6fzqXOm86RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOoc6RzqjOlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azqHOpc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOoc6lzp/Oks6hzqXOo86XIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzprOoc6lzqbOn86Szp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOms6lzqDOkc6hzpnOo86jzpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6azqnOo86kzpHOnc6ZzpHOnc6XIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpvOkc6TzprOmc6pzqTOmc6jzqPOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6bzpHOm86ZzpbOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6bzpXOoc6fzqXOo86azp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOm86ZzpPOms6ZzpHOlM6VzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOm86fzpPOk86RzpTOlc6jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpvOn86mzpnOo86azp/OoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6bzqXOk86Tzp/OoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6bzqXOms6fzqPOpM6Rzp3OlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6bzqXOms6fzqPOpM6fzpzOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6bzqXOms6fzqTOoc6ZzqfOmSAgKM6RzpMuzpzOkc6hzpnOnc6RIM6azqHOpc6RKSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czpHOks6ZzpvOm86XzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6RzpbOmc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOkc6dzpTOoc6VzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6Rzp3On86bzpnOkc6jzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6Rzp3OpM6VzpnOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czpHOoc6czpHOoc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOlc6TzpHOm86XIM6Tzp/OpM6ZzqPOpM6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOlc6TzpHOm86fIM6TzpHOoc6UzpnOms6ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOlc6TzpHOm86fIM6gzpXOoc6ZzqPOpM6VzqHOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czpXOm86ZzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6VzpvOmc6TzpPOn86ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOlc6jzp/Opc6hzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6VzqTOkc6czp/Ooc6mzqnOo86XICAoz4DPgc+OzrfOvSDOms6RzqHOpc6VzqMpIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOl86bzpnOlc6jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOl86bzpnOqc6kzpHOlM6VzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6ZzprOoc6RIM6Tzp/OpM6ZzqPOpM6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOmc6azqHOnyDOk86RzqHOlM6ZzprOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czpnOp86RzpvOmc6kzqPOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czp/Om86lzpLOkc6UzpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czp/Oo86gzpnOnc6RICAozpvOpc6TzpPOn86jKSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czp/Opc6WzpHOms6RzpnOn86ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOn86lzqPOmc6pzqTOmc6kzqPOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czqDOkc6TzpHOmc6fzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6gzpHOm86kzp/Opc6czpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6gzpHOn86lzqPOmc6fzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6gzpHOpM6WzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6gzpHOps6hzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6gzpXOoc6azp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6gzpnOls6Rzp3OmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6czqDOn86lzpvOnM6fzqUgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnM6lzqHOn86UzpHOps6dzpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOnc6VzpEgzpzOn86lzqPOmc6pzqTOmc6kzqPOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6dzpXOnyDOnM6gzpnOls6Rzp3OmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6dzpXOn86azpHOmc6jzpHOoc6VzpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6dzpXOn86nzqnOoc6fzqDOn86lzpvOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6dzpfOo86fzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzp/Om86lzpzOoM6ZzpHOlM6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOkc6bzpHOmc6fzpPOms6fzqHOpM6jzpnOkSDOms6hzpHOqM6XzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoM6RzpvOkc6Zzp/Op86pzqHOmSDOkc6SzpPOn86lIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOkc6bzpHOmc6fzqfOqc6hzpkgzprOn86gzpHOnc6XzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoM6RzpvOkc6Zzp/Op86pzqHOmSDOo86ZzqHOkc6azp/OpSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpHOm86ZzpEgzpHOm86pzp3Okc6azpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpXOlM6Zzp3OlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpXOnc6kzpXOm86XIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOlc6hzpHOnM6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOlc6hzpHOpM6XzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoM6VzqHOlM6ZzprOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpXOoc6ZzpLOm86VzqDOpM6fzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoM6VzqPOmc6czp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoM6VzqPOpM6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOlc6kzqHOkc6bzqnOnc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOlc6kzqHOn86Szp/Opc6dzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoM6VzqTOo86RzpvOlyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzpvOkc6kzpHOnc6ZzpEgzpPOlc6hzpHOms6RzqHOmc6fzqUgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoM6bzpHOpM6Rzp3Omc6RIM6UzqnOlM6pzp3Ol86jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOm86RzqTOkc6dzp/OoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzp/Om86lzpPOpc6hzp/OoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzp/Om86lzpvOn86mzp8gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoM6fzqTOkc6czpnOkSDOms6hzqXOn86SzqHOpc6jzpfOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzp/OpM6RzpzOmc6RIM6czqDOkc6bzqTOn86lzpzOkc6jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOn86kzpnOo86kzpnOms6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqDOn86lzqHOnc6RzqHOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6gzqHOn86mzpfOpM6XzqMgzpfOm86ZzpHOoyDOo86azpvOmc6SzpHOnc6XzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoc6RzpLOlc6dzpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6hzpHOp86XIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqHOkc6ozpHOmc6fzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoc6ZzpbOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6hzp/Oks6ZzpvOmc6jzqTOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6hzp/OlM6fzqTOn86gzpkgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOo86VzqHOks6ZzpHOnc6RIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqPOmc6fzqXOpM6jzp/OoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6jzprOm86ZzpLOkc6dzpcgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOo86gzpfOm86RzpnOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6jzqDOn86Yzp/OmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6jzqTOkc6czpHOpM6XzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOo86kzpHOpc6hzpHOms6ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqPOpM6RzqXOoc6fzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOo86lzp3On86ZzprOmc6jzpzOn86jIM6azp/Onc6kzqPOmc6azpHOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6kzpHOns6ZzpHOoc6nzpXOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6kzpXOoc6fzpLOnyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6kzqHOmc6Rzp3OpM6RzqbOpc6bzpvOn86jIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqTOo86ZzpzOn86Szp8gICjOp86RzqHOn86azp/OoM6ZKSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6kzqPOmc6mzpvOmc6azp/OoM6fzqXOm86fIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqTOpc6hzpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6mzpnOm86fzpjOlc6XIM6RzpzOoM6VzpvOlc6ZzpHOoyDOmc6pzpHOnc6dzpnOnc6pzp0sIM6mzqTOlc6bzpnOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6nzpHOnc6ZIM6kzpXOoc6fzpLOn86lIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzqfOkc6hzp/Oms6fzqDOmSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6nzpnOnc6azpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOp86Zzp/Onc6RzqPOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6nzp/Opc6bzpnOkc6hzpHOlM6VzqMgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOp86pzqHOkSDOmc6pzpHOnc6dzpnOnc6pzp0sIM6ozpfOnc6RIM6ZzqnOkc6dzp3Omc6dzqnOnScsIFByZWZlY3R1cmU6ICfOmc+JzrHOvc69zq/Ovc+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ1NTUwJywgQXJlYTogJ86ZzqnOkc6dzp3Omc6kzqnOnSDOmc6pzpHOnc6dzpnOnc6pzp0nLCBQcmVmZWN0dXJlOiAnzpnPic6xzr3Ovc6vzr3Pic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0NTU2MCcsIEFyZWE6ICfOmc6pzpHOnc6dzpnOpM6pzp0gzpnOqc6Rzp3Onc6Zzp3Oqc6dJywgUHJlZmVjdHVyZTogJ86Zz4nOsc69zr3Or869z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDU1NzAnLCBBcmVhOiAnzpnOqc6Rzp3Onc6ZzqTOqc6dIM6ZzqnOkc6dzp3Omc6dzqnOnScsIFByZWZlY3R1cmU6ICfOmc+JzrHOvc69zq/Ovc+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ1NTgwJywgQXJlYTogJ86ZzqnOkc6dzp3Omc6kzqnOnSDOmc6pzpHOnc6dzpnOnc6pzp0nLCBQcmVmZWN0dXJlOiAnzpnPic6xzr3Ovc6vzr3Pic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2NDAwMScsIEFyZWE6ICfOkc6TzpnOn86jIM6nzqHOmc6jzqTOn86mzp/Ooc6fzqMgzprOkc6SzpHOm86RzqMsIM6TzpXOqc6hzpPOmc6Rzp3OlyDOms6RzpLOkc6bzpHOoywgzp3Omc6azpfOo86ZzpHOnc6XIM6azpHOks6RzpvOkc6jJywgUHJlZmVjdHVyZTogJ86azrHOss6szrvOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2NDAwMicsIEFyZWE6ICfOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzpvOmc6czpXOnc6RzqHOmc6pzp0gIM6YzpHOo86fzqUgzprOkc6SzpHOm86RzqMsIM6RzqPOpM6hzpnOoyAgzprOkc6SzpHOm86RzqMsIM6YzqXOnM6pzp3Omc6RICDOms6RzpLOkc6bzpHOoywgzprOkc6jzqTOoc6fICDOms6RzpLOkc6bzpHOoywgzpvOmc6czpXOnc6RzqHOmc6RICDOmM6RzqPOn86lIM6azpHOks6RzpvOkc6jLCDOnM6RzqHOmc6VzqMgIM6azpHOks6RzpvOkc6jLCDOoM6VzqXOms6RzqHOmSAgzprOkc6SzpHOm86RzqMsIM6gzp/OpM6fzqMgIM6azpHOks6RzpvOkc6jLCDOo86azpHOm86RIM6czpHOoc6ZzqnOnSAgzprOkc6SzpHOm86RzqMnLCBQcmVmZWN0dXJlOiAnzprOsc6yzqzOu86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzY0MDAzJywgQXJlYTogJ86RzpXOoc6fzpTOoc6fzpzOmc6fIM6azpHOks6RzpvOkc6jICjOoM6RzpvOmc6fKSDOms6RzpLOkc6bzpHOoywgzpLOn86lzp3On86nzqnOoc6ZIM6azpHOks6RzpvOkc6jLCDOks6hzqXOo86fzqXOm86RIM6azpHOks6RzpvOkc6jLCDOlM6RzqTOnyDOms6RzpLOkc6bzpHOoywgzprOoc6Xzp3Omc6UzpXOoyDOms6RzpLOkc6bzpHOoywgzpvOmc6czp3Omc6RIM6azpHOks6RzpvOkc6jLCDOm86lzpTOmc6RIM6azpHOks6RzpvOkc6jLCDOnM6ZzprOoc6fzqfOqc6hzpkgzprOkc6SzpHOm86RzqMsIM6gzp/Om86lzqPOpM6lzpvOnyDOms6RzpLOkc6bzpHOoywgzqDOoc6fzqPOps6lzpPOlc6jIM6azpHOks6RzpvOkc6jLCDOps6ZzpvOmc6gzqDOn86ZIM6azpHOks6RzpvOkc6jJywgUHJlZmVjdHVyZTogJ86azrHOss6szrvOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2NDAwNCcsIEFyZWE6ICfOkc6bzqXOms6XIM6azpHOks6RzpvOkc6jLCDOk86bzqXOps6RzpTOkSAgzprOkc6SzpHOm86RzqMsIM6YzpHOo86fzqMgzprOkc6SzpHOm86RzqMsIM6azp/Omc6dzqXOoc6RIM6YzpXOn86bzp/Ok86fzqUgzprOkc6SzpHOm86RzqMsIM6azp/Omc6dzqXOoc6RIM6dzpfOo86fzqMgzprOkc6SzpHOm86RzqMsIM6bzpXOpc6azpcgzpjOkc6jzp/OpSDOms6RzpLOkc6bzpHOoywgzpzOkc6azqHOpc6RzpzOnM6fzqMgIM6azpHOks6RzpvOkc6jLCDOnM6VzpPOkc6bzp/OoyDOoM6hzpnOnc6fzqMgzprOkc6SzpHOm86RzqMsIM6czp/Onc6XIM6RzqHOp86RzpPOk86VzpvOn86lICDOms6RzpLOkc6bzpHOoywgzqDOkc6bzpHOmc6fzqfOqc6hzpkgIM6YzpHOo86fzqUgzprOkc6SzpHOm86RzqMsIM6gzpHOnc6RzpPOmc6RIM6YzpHOo86fzqUgzprOkc6SzpHOm86RzqMsIM6gzp/OpM6RzpzOmc6RIM6azpHOks6RzpvOkc6jLCDOp86hzqXOo86XIM6RzprOpM6XICDOms6RzpLOkc6bzpHOoywgzqfOoc6lzqPOlyDOkc6czpzOn86lzpTOmc6RIM6azpHOks6RzpvOkc6jJywgUHJlZmVjdHVyZTogJ86azrHOss6szrvOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2NDAwNicsIEFyZWE6ICfOkc6dzqkgzpvOlc6lzprOlyDOms6RzpLOkc6bzpHOoywgzpvOlc6lzprOlyDOnc6VzpHOoyDOms6RzqHOks6RzpvOl86jIM6azpHOks6RzpvOkc6jLCDOnc6VzpEgzprOkc6hzpLOkc6bzpcgzprOkc6SzpHOm86RzqMsIM6nzpHOm86azpXOoc6fIM6azpHOks6RzpvOkc6jJywgUHJlZmVjdHVyZTogJ86azrHOss6szrvOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2NDAwNycsIEFyZWE6ICfOkc6TzpnOn86jIM6RzpjOkc6dzpHOo86Zzp/OoyDOms6RzpLOkc6bzpHOoywgzpHOoM6fzpLOkc6YzqHOkSDOms6RzpLOkc6bzpHOoywgzpXOm86RzpnOn86nzqnOoc6ZIM6azpHOks6RzpvOkc6jLCDOlc6bzpXOpc6YzpXOoc6VzqMgzprOkc6SzpHOm86RzqMsIM6czqXOoc6kzp/Ops6lzqTOnyDOms6RzpLOkc6bzpHOoywgzp3Olc6RIM6XzqHOkc6azpvOmc6kzqPOkSDOms6RzpLOkc6bzpHOoywgzp3Olc6RIM6gzpXOoc6RzpzOn86jIM6azpHOks6RzpvOkc6jLCDOoM6RzqHOkc6bzpnOkSDOlc6bzpHOmc6fzqfOqc6hzpnOn86lIM6azpHOks6RzpvOkc6jLCDOoM6RzqHOkc6bzpnOkSDOnM6lzqHOpM6fzqbOpc6kzp/OpSDOms6RzpLOkc6bzpHOoywgzqDOpc6hzpPOn86jIM6azpHOks6RzpvOkc6jLCDOo86RzqHOkc6dzqTOkSDOms6RzpLOkc6bzpHOoywgzqbOqc6bzpXOkSDOms6RzpLOkc6bzpHOoycsIFByZWZlY3R1cmU6ICfOms6xzrLOrM67zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjQwMDgnLCBBcmVhOiAnzpHOms6hzp/OoM6fzqTOkc6czp/OoyDOms6RzpLOkc6bzpHOoywgzpHOpc6bzpcgzprOkc6SzpHOm86RzqMsIM6SzqHOpc6jzpcgzprOkc6SzpHOm86RzqMsIM6TzpHOm86XzqjOn86jIM6azpHOks6RzpvOkc6jLCDOlM6pzpzOkc6kzpnOkSDOms6RzpLOkc6bzpHOoywgzprOkc6hzpHOks6RzpPOk86VzpvOl86jIM6azpHOks6RzpvOkc6jLCDOms6RzqHOmc6Rzp3OlyDOms6RzpLOkc6bzpHOoywgzprOn86azprOmc6dzp/Op86pzqHOmSDOms6RzpLOkc6bzpHOoywgzpvOn86lzqTOoc6RIM6VzpvOlc6lzpjOlc6hzqnOnSDOms6RzpLOkc6bzpHOoywgzpzOlc6TzpHOoyDOkc6bzpXOns6Rzp3OlM6hzp/OoyAgzprOkc6SzpHOm86RzqMsIM6czpXOm86ZzqPOo86fzprOn86czpXOmc6fIM6azpHOks6RzpvOkc6jLCDOnM6VzqPOn86hzp/OoM6XIM6azpHOks6RzpvOkc6jLCDOnM6fzqXOo86YzpXOnc6XIM6azpHOks6RzpvOkc6jLCDOn86hzqbOkc6dzpnOnyDOms6RzpLOkc6bzpHOoywgzp/Ops6hzqXOnc6Zzp8gzprOkc6SzpHOm86RzqMsIM6gzpHOoc6RzpvOmc6RIM6fzqbOoc6lzp3Omc6fzqUgzprOkc6SzpHOm86RzqMsIM6gzpvOkc6kzpHOnc6fzqTOn86gzp/OoyDOms6RzpLOkc6bzpHOoywgzqDOn86Uzp/Op86pzqHOmSDOms6RzpLOkc6bzpHOoywgzqDOpc6hzpPOn86nzqnOoc6ZIM6azpHOks6RzpvOkc6jLCDOo86ZzpTOl86hzp/Op86pzqHOmSDOms6RzpLOkc6bzpHOoycsIFByZWZlY3R1cmU6ICfOms6xzrLOrM67zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjQwMDknLCBBcmVhOiAnzpHOk86Zzp/OoyDOms6fzqPOnM6RzqMgzprOkc6SzpHOm86RzqMsIM6UzpnOoM6fzqTOkc6czp/OoyDOms6RzpLOkc6bzpHOoywgzprOlc6nzqHOn86azpHOnM6gzp/OoyDOms6RzpLOkc6bzpHOoywgzpvOlc6azpHOnc6XIM6azpHOks6RzpvOkc6jLCDOnc6ZzprOl86kzpXOoyDOms6RzpLOkc6bzpHOoywgzqDOm86RzqTOkc6czqnOnc6RzqMgzprOkc6SzpHOm86RzqMsIM6gzpvOkc6kzpHOnc6ZzpEgzprOkc6SzpHOm86RzqMsIM6jzprOn86gzp/OoyDOms6RzpLOkc6bzpHOoycsIFByZWZlY3R1cmU6ICfOms6xzrLOrM67zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjQwMTAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6hzpHOp86pzp3Omc6fzqUgzprOkc6SzpHOm86RzqMsIM6RzprOpM6XIM6azpHOks6RzpvOkc6jLCDOmc6VzqHOkSDOnM6fzp3OlyDOkc6TzpnOn86lIM6gzpHOnc6kzpXOm86VzpfOnM6pzp3OkSDOmM6RzqPOn86lIM6azpHOks6RzpvOkc6jLCDOms6RzpvOm86ZzqHOkc6nzpcgIM6azpHOks6RzpvOkc6jLCDOnM6ZzprOoc6fzqMgzqDOoc6Zzp3On86jICDOms6RzpLOkc6bzpHOoywgzp/Ooc6czp/OoyDOoM6hzpnOnc6fzqUgIM6YzpHOo86fzqUgzprOkc6SzpHOm86RzqMsIM6gzpHOp86lzqMgIM6azpHOks6RzpvOkc6jLCDOoM6hzpnOnc6fzqMgIM6azpHOks6RzpvOkc6jLCDOoc6RzqfOqc6dzpkgIM6azpHOks6RzpvOkc6jLCDOo86azpHOm86RIM6azpHOm86bzpnOoc6RzqfOl86jIM6azpHOks6RzpvOkc6jLCDOo86azpHOm86RIM6hzpHOp86pzp3Omc6fzqUgIM6azpHOks6RzpvOkc6jLCDOo86azpHOm86RIM6jzqnOpM6XzqHOn86jICDOms6RzpLOkc6bzpHOoywgzqPOqc6kzpfOoc6fzqMgIM6azpHOks6RzpvOkc6jJywgUHJlZmVjdHVyZTogJ86azrHOss6szrvOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2NDAxMicsIEFyZWE6ICfOkc6czqXOk86UzpHOm86VzqnOnc6RzqMgzprOkc6SzpHOm86RzqMnLCBQcmVmZWN0dXJlOiAnzprOsc6yzqzOu86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzY0MTAwJywgQXJlYTogJ86RzpPOmc6fzqMgzpHOnc6UzqHOlc6RzqMgzprOkc6SzpHOm86RzqMsIM6RzpzOmc6jzpnOkc6dzpEgzprOkc6SzpHOm86RzqMsIM6Rzp3OpM6ZzqbOmc6bzpnOoM6gzp/OmSDOms6RzpLOkc6bzpHOoywgzpHOnc6pIM6nzp/Ooc6kzp/Oms6fzqDOmSDOms6RzpLOkc6bzpHOoywgzpLOm86RzqfOmc6azp8gKM6dzpXOnyDOo86lzqHOkc6azp8pIM6azpHOks6RzpvOkc6jLCDOlc6bzpXOpc6YzpXOoc6fzqXOoM6fzpvOlyDOms6RzpLOkc6bzpHOoywgzpXOns6fzqfOlyDOms6RzpLOkc6bzpHOoywgzpnOlc6hzpEgzpzOn86dzpcgzpHOk86Zzp/OpSDOoM6Rzp3OpM6VzpvOlc6XzpzOqc6dzpEgzqDOkc6TzpPOkc6Zzp/OpSDOms6RzpLOkc6bzpHOoywgzprOl86gzpnOkSDOms6RzpLOkc6bzpHOoywgzprOn86azprOmc6dzp/Op86pzpzOkSDOms6RzpLOkc6bzpHOoywgzpzOlc6bzpnOo86jzpEgzprOkc6SzpHOm86RzqMsIM6czpXOo86ZzpEgzprOkc6SzpHOm86RzqMsIM6gzpHOm86RzpnOn86nzqnOoc6ZIM6gzpHOk86TzpHOmc6fzqUgzprOkc6SzpHOm86RzqMsIM6gzpHOnc6RzpPOmc6RIM6gzpHOk86TzpHOmc6fzqUgzprOkc6SzpHOm86RzqMsIM6nzp/Ooc6kzp/Oms6fzqDOmSDOms6RzpLOkc6bzpHOoywgzqfOoc6lzqPOn86azpHOo86kzqHOnyDOms6RzpLOkc6bzpHOoycsIFByZWZlY3R1cmU6ICfOms6xzrLOrM67zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjQyMDAnLCBBcmVhOiAnzpHOks6hzpHOnM6XzpvOmc6RIM6azpHOks6RzpvOkc6jLCDOkc6VzqHOn86UzqHOn86czpnOnyDOnM6VzpPOkc6jIM6RzpvOlc6ezpHOnc6UzqHOn86jIM6azpHOks6RzpvOkc6jLCDOkc6dzqkgzqDOn86dzqTOn86bzpnOks6RzpTOnyDOms6RzpLOkc6bzpHOoywgzpPOlc6hzp/Onc6kzpHOoyDOms6RzpLOkc6bzpHOoywgzpPOoc6RzpLOn86lzp3OkSAgzprOkc6SzpHOm86RzqMsIM6UzpHOnM6RzqPOms6Xzp3Omc6RIM6azpHOks6RzpvOkc6jLCDOlM6ZzpHOm86VzprOpM6fIM6azpHOks6RzpvOkc6jLCDOlM6lzqPOks6RzqTOnyDOms6RzpLOkc6bzpHOoywgzpXOms6RzpvOlyDOms6RzpLOkc6bzpHOoywgzpXOms6bzpXOms6kzp8gzprOkc6SzpHOm86RzqMsIM6VzpvOkc6mzp/Op86pzqHOmSDOms6RzpLOkc6bzpHOoywgzpXOoc6RzqTOlc6Zzp3OnyDOms6RzpLOkc6bzpHOoywgzpbOkc6hzprOkc6UzpnOkSDOms6RzpLOkc6bzpHOoywgzprOoc6Xzp3OlyDOms6RzpLOkc6bzpHOoywgzprOoc6lzp/Onc6VzqHOmSDOn86hzpXOmc6dzp/OpSDOms6RzpLOkc6bzpHOoywgzpzOkc6azqHOpc6nzqnOoc6ZIM6azpHOks6RzpvOkc6jLCDOnc6VzpEgzprOkc6hzqXOkSDOms6RzpLOkc6bzpHOoywgzp3Olc6RIM6azqnOnM6XIM6azpHOks6RzpvOkc6jLCDOnc6Vzp/OoyDOns6VzqHOmc6RzqMgzprOkc6SzpHOm86RzqMsIM6gzpHOoc6RzpTOlc6ZzqPOn86jIM6azpHOks6RzpvOkc6jLCDOoM6VzqHOnc6XIM6azpHOks6RzpvOkc6jLCDOoM6VzqTOoc6fzqDOl86TzpcgzprOkc6SzpHOm86RzqMsIM6gzp/Onc6kzp/Om86ZzpLOkc6Uzp8gzprOkc6SzpHOm86RzqMsIM6jzqTOlc6Tzp3OnyDOms6RzpLOkc6bzpHOoywgzqPOpM6hzpHOpM6pzp3Olc6jIM6azpHOks6RzpvOkc6jLCDOp86hzqXOo86fzqXOoM6fzpvOlyDOms6RzpLOkc6bzpHOoywgzqfOoc6lzqPOn86nzqnOoc6ZIM6azpHOks6RzpvOkc6jJywgUHJlZmVjdHVyZTogJ86azrHOss6szrvOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2NTIwMScsIEFyZWE6ICfOkc6TzpnOkSDOnM6RzqHOmc6dzpEgzprOkc6SzpHOm86RzqMsIM6RzqPOoM6hzpcgzpHOnM6czp/OoyDOms6RzpLOkc6bzpHOoycsIFByZWZlY3R1cmU6ICfOms6xzrLOrM67zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjUzMDInLCBBcmVhOiAnzprOkc6SzpHOm86RIM6azpHOks6RzpvOkc6jLCDOo86Rzp3Okc6kzp/Ooc6Zzp8gzprOkc6SzpHOm86RzqMnLCBQcmVmZWN0dXJlOiAnzprOsc6yzqzOu86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzY1MzAzJywgQXJlYTogJ86azpHOks6RzpvOkc6jIM6azpHOks6RzpvOkc6jJywgUHJlZmVjdHVyZTogJ86azrHOss6szrvOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2NTQwMycsIEFyZWE6ICfOms6RzpLOkc6bzpEgzprOkc6SzpHOm86RzqMnLCBQcmVmZWN0dXJlOiAnzprOsc6yzqzOu86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzY1NDA0JywgQXJlYTogJ86azpHOks6RzpvOkSDOms6RzpLOkc6bzpHOoycsIFByZWZlY3R1cmU6ICfOms6xzrLOrM67zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjU1MDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOo86lzpvOm86RzqMgzprOkc6SzpHOm86RzqMsIM6WzqXOk86fzqMgzprOkc6SzpHOm86RzqMsIM6azp/Ooc6lzqbOlc6jIM6azpHOks6RzpvOkc6jLCDOms6hzpHOnc6fzqfOqc6hzpkgzprOkc6SzpHOm86RzqMsIM6azqHOpc6fzp3Olc6hzpkgzqbOmc6bzpnOoM6gzqnOnSDOms6RzpLOkc6bzpHOoywgzpvOpc6azp/Oo86kzp/OnM6fIM6azpHOks6RzpvOkc6jLCDOoM6RzpvOkc6ZzpEgzprOkc6SzpHOm86RIM6azpHOks6RzpvOkc6jLCDOoM6RzpvOkc6Zzp8gzqTOo86ZzqbOm86ZzprOmSDOms6RzpLOkc6bzpHOoywgzqDOn86bzqXOnc6VzqHOnyDOms6RzpLOkc6bzpHOoycsIFByZWZlY3R1cmU6ICfOms6xzrLOrM67zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDMwNjAnLCBBcmVhOiAnzpHOnM6lzpPOlM6RzpvOlyDOms6RzqHOlM6ZzqTOo86XzqMsIM6Rzp3OmM6fzqfOqc6hzpkgzprOkc6hzpTOmc6kzqPOl86jLCDOkc6dzp/Omc6ezpnOkc6kzpnOms6fIM6azpHOoc6UzpnOpM6jzpfOoywgzpHOoc6gzpHOms6ZzpEgzprOkc6hzpTOmc6kzqPOl86jLCDOks6RzpPOlc6dzpnOkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6SzpHOpM6jzp/Opc6dzpnOkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6TzpXOm86Rzp3OmM6XIM6azpHOoc6UzpnOpM6jzpfOoywgzpPOlc6pzqHOk86Zzp/OoyDOms6RzqHOkc6ZzqPOms6RzprOl86jIM6azpHOoc6UzpnOpM6jzpfOoywgzpPOoc6RzpLOmc6RIM6azpHOoc6UzpnOpM6jzpfOoywgzpTOkc6mzp3OlyDOn86ezqXOkc6jIM6azpHOoc6UzpnOpM6jzpfOoywgzpTOoc6RzprOn86kzqHOpc6gzpEgzprOkc6hzpTOmc6kzqPOl86jLCDOlc6bzpvOl86dzp/Oms6RzqPOpM6hzp8gzprOkc6hzpTOmc6kzqPOl86jLCDOls6RzpzOkc6dzpHOpM6ZzprOnyDOms6RzqHOlM6ZzqTOo86XzqMsIM6azpXOoc6RzpzOkc6hzpPOmc6pIM6azpHOoc6UzpnOpM6jzpfOoywgzprOn86lzqHOkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6azqHOpc6fzqDOl86TzpcgzprOkc6hzpTOmc6kzqPOl86jLCDOm86RzpbOkc6hzpnOnc6RIM6azpHOoc6UzpnOpM6jzpfOoywgzpvOkc6azprOlc6jIM6azpHOoc6UzpnOpM6jzpfOoywgzpzOkc6dzqTOls6Zzp/Opc6hzpHOmc6qzprOkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6czpHOoc6kzpnOnc6ZIM6azpHOoc6UzpnOpM6jzpfOoywgzpzOkc6lzqHOn86czpzOkc6kzpkgzprOkc6hzpTOmc6kzqPOl86jLCDOnM6VzpPOkc6bzpcgzpLOoc6lzqPOlyDOms6RzqHOlM6ZzqTOo86XzqMsIM6czpXOm86ZzpPOn86jIM6azpHOoc6UzpnOpM6jzpfOoywgzpzOlc6jzp/Ooc6hzpHOp86XIM6fzp7Opc6RzqMgzprOkc6hzpTOmc6kzqPOl86jLCDOnM6VzqPOn86hzqHOkc6nzpcgzqDOlc6kzqHOmc6dzp/OpSDOms6RzqHOlM6ZzqTOo86XzqMsIM6czpfOm86VzpXOoyDOms6RzqHOlM6ZzqTOo86XzqMsIM6czp/Onc6XIM6RzpPOmc6RzqMgzqTOoc6ZzpHOlM6RzqMgzprOkc6hzpTOmc6kzqPOl86jLCDOnM6fzp3OlyDOkc6TzpnOn86lIM6TzpXOqc6hzpPOmc6fzqUgzprOkc6hzpTOmc6kzqPOl86jLCDOnM6fzqXOls6RzprOmSDOms6RzqHOlM6ZzqTOo86XzqMsIM6dzpfOo86ZzpEgzprOkc6hzpTOmc6kzqPOl86jLCDOns6XzqHOn86azpHOnM6gzp/OoyDOms6RzqHOlM6ZzqTOo86XzqMsIM6fzp7Opc6RIM6azpHOoc6UzpnOpM6jzpfOoywgzqDOkc6UzpcgzprOkc6hzpTOmc6kzqPOl86jLCDOoM6RzpvOkc6ZzpHOnM6gzpXOm86RIM6azpHOoc6UzpnOpM6jzpfOoywgzqDOkc6bzpHOmc6fzprOkc6jzqTOoc6fIM6azpHOoc6UzpnOpM6jzpfOoywgzqDOkc6bzpHOmc6fzqfOqc6hzpkgzprOkc6hzpTOmc6kzqPOkc6jIM6azpHOoc6UzpnOpM6jzpfOoywgzqDOkc6bzpHOmc6fzqfOqc6hzpkgzp/Ons6lzpHOoyDOms6RzqHOlM6ZzqTOo86XzqMsIM6gzpHOm86RzpnOn86nzqnOoc6ZIM6mzp/Opc6dzqTOqc6kzp/OpSDOms6RzqHOlM6ZzqTOo86XzqMsIM6gzpXOpM6hzqnOpM6RIM6azpHOoc6UzpnOpM6jzpfOoywgzqDOlc6lzprOn86mzqXOpM6fIM6azpHOoc6UzpnOpM6jzpfOoywgzqDOm86RzqTOkc6dzpHOms6fzqMgzprOkc6hzpTOmc6kzqPOl86jLCDOoM6bzpHOpM6Rzp3Omc6RIM6azpHOoc6UzpnOpM6jzpfOoywgzqDOn86hzqTOlyDOms6RzqHOlM6ZzqTOo86XzqMsIM6jzp/Opc6bzpEgzprOkc6hzpTOmc6kzqPOl86jLCDOo86gzpHOmM6VzqMgzprOkc6hzpTOmc6kzqPOl86jLCDOpM6hzqXOk86fzp3OkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6kzqPOkc6hzp/Opc6nzpcgzprOkc6hzpTOmc6kzqPOl86jLCDOp86RzqHOkc6lzpPOlyDOms6RzqHOlM6ZzqTOo86XzqMnLCBQcmVmZWN0dXJlOiAnzprOsc+BzrTOr8+Ez4POsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MzA2MScsIEFyZWE6ICfOkc6TzpnOkSDOpM6hzpnOkc6UzpEgzprOkc6hzpTOmc6kzqPOl86jLCDOkc6Tzp3Okc6dzqTOlc6hzp8gzprOkc6hzpTOmc6kzqPOl86jLCDOms6RzpvOn86TzqHOmc6Rzp3OkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6azp/Ooc6UzpEgzprOkc6hzpTOmc6kzqPOl86jLCDOnM6RzqHOkc6YzpXOkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6gzpXOlM6Zzp3OnyDOms6RzqHOlM6ZzqTOo86XzqMsIM6hzpnOls6fzpLOn86lzp3OmSDOms6RzqHOlM6ZzqTOo86XzqMsIM6jzpXOoc6SzqnOpM6RIM6kzqHOmc6azpHOm86pzp0nLCBQcmVmZWN0dXJlOiAnzprOsc+BzrTOr8+Ez4POsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MzA2MycsIEFyZWE6ICfOkc6dzpHOks6hzpEgzprOkc6hzpTOmc6kzqPOl86jLCDOkc6jzpfOnM6fzqfOqc6hzpkgzprOkc6hzpTOmc6kzqPOl86jLCDOkc6nzpvOkc6UzpnOkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6azpHOpM6pIM6azqTOmc6czpXOnc6XIM6azpHOoc6UzpnOpM6jzpfOoywgzprOpM6ZzpzOlc6dzpcgzprOkc6hzpTOmc6kzqPOl86jLCDOm86Vzp/Onc6kzpHOoc6ZIM6azpHOoc6UzpnOpM6jzpfOoycsIFByZWZlY3R1cmU6ICfOms6xz4HOtM6vz4TPg86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQzMDcwJywgQXJlYTogJ86gzqHOn86RzqPOpM6Zzp8gzprOkc6hzpTOmc6kzqPOl86jJywgUHJlZmVjdHVyZTogJ86azrHPgc60zq/PhM+DzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDMxMDAnLCBBcmVhOiAnzpHOk86ZzpEgzpHOk86RzpjOlyDOms6RzqHOlM6ZzqTOo86XzqMsIM6RzpPOmc6RIM6czpHOoc6Zzp3OkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6RzpPOmc6fzqDOl86TzpcgzprOkc6hzpTOmc6kzqPOl86jLCDOkc6TzpnOn86jIM6RzpjOkc6dzpHOo86Zzp/OoyDOm86RzpzOoM6VzqHOn86lIM6azpHOoc6UzpnOpM6jzpfOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6azpHOoc6UzpnOpM6jzpfOoywgzpHOk86Zzp/OoyDOmM6Vzp/OlM6pzqHOn86jIM6azpHOoc6UzpnOpM6jzpfOoywgzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6czp/Oo86nzpHOpM6fzqUgzprOkc6hzpTOmc6kzqPOl86jLCDOkc6czpHOoc6Rzp3OpM6fzqMgzprOkc6hzpTOmc6kzqPOl86jLCDOkc6czqDOlc6bzpHOms6ZzpEgzprOkc6hzpTOmc6kzqPOl86jLCDOkc6czqDOlc6bzpnOms6fIM6azpHOoc6UzpnOpM6jzpfOoywgzpHOnc6YzpfOoc6fIM6azpHOoc6fzqDOm86VzqPOmc6fzqUgzprOkc6hzpTOmc6kzqPOl86jLCDOkc6gzpnOlM6VzpEgzprOkc6hzpTOmc6kzqPOl86jLCDOkc6hzqTOlc6jzpnOkc6dzp8gzprOkc6hzpTOmc6kzqPOl86jLCDOk86VzqnOoc6TzpnOms6fIM6azpHOoc6UzpnOpM6jzpfOoywgzpPOmc6Rzp3Onc6fzqXOo86RzpnOmc6azpEgzprOkc6hzpTOmc6kzqPOl86jLCDOlM6RzqbOnc6fzqPOoM6XzpvOmc6RIM6azpHOoc6UzpnOpM6jzpfOoywgzpbOkc6ZzpzOmc6fIM6azpHOoc6UzpnOpM6jzpfOoywgzpbOqc6TzqHOmSDOms6RzqHOlM6ZzqTOo86XzqMsIM6ZzqTOkc6czp/OoyDOms6RzqHOlM6ZzqTOo86XzqMsIM6azpHOm86bzpnOmM6XzqHOnyDOms6RzqHOlM6ZzqTOo86XzqMsIM6azpHOm86bzpnOps6pzp3Omc6fIM6azpHOoc6UzpnOpM6jzpfOoywgzprOkc6hzpTOmc6kzqPOkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6azpHOoc6UzpnOpM6jzp/OnM6RzpPOn86lzpvOkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6azpHOoc6fzqDOm86VzqPOmSDOms6RzqHOlM6ZzqTOo86XzqMsIM6azpHOoc6gzp/Op86pzqHOmSDOms6RzqHOlM6ZzqTOo86XzqMsIM6azpHOo86kzpHOnc6VzpEgzprOkc6hzpTOmc6kzqPOl86jLCDOms6RzqTOkc6mzqXOk86ZIM6azpHOoc6UzpnOpM6jzpfOoywgzprOn86lzprOms6RzpnOmc6azpEgzprOkc6hzpTOmc6kzqPOl86jLCDOms6fzqXOpM6jzp/Opc6hzp8gzprOkc6hzpTOmc6kzqPOl86jLCDOms6hzqXOkSDOks6hzqXOo86XIM6azpHOoc6UzpnOpM6jzpfOoywgzpvOkc6czqDOlc6hzp8gzprOkc6hzpTOmc6kzqPOl86jLCDOnM6RzprOoc6lzqfOqc6hzpkgzprOkc6hzpTOmc6kzqPOl86jLCDOnM6RzqXOoc6fzp3Olc6hzpkgzprOkc6hzpTOmc6kzqPOl86jLCDOnM6VzpPOkc6jIM6bzpHOms6azp/OoyDOms6RzqHOlM6ZzqTOo86XzqMsIM6czpXOm86ZzqPOo86RIM6azpHOoc6UzpnOpM6jzpfOoywgzpzOl86kzqHOn86gzp/Om86XIM6azpHOoc6UzpnOpM6jzpfOoywgzpzOn86bzp/Op86RIM6azpHOoc6UzpnOpM6jzpfOoywgzpzOn86dzpcgzprOn86hzqnOnc6XzqMgzprOkc6hzpTOmc6kzqPOl86jLCDOnM6fzqPOp86RzqTOnyDOms6RzqHOlM6ZzqTOo86XzqMsIM6czqXOoc6Zzp3OkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6dzpXOoc6RzpnOlM6RIM6azpHOoc6UzpnOpM6jzpHOoyDOms6RzqHOlM6ZzqTOo86XzqMsIM6ezpnOnc6fzp3Olc6hzpkgzprOkc6hzpTOmc6kzqPOl86jLCDOoM6RzpvOkc6Zzp/Ols6fzpPOm86fzqDOmSDOms6RzqHOlM6ZzqTOo86XzqMsIM6gzpHOm86RzpnOn86azprOm86XzqPOmSDOms6RzqHOlM6ZzqTOo86XzqMsIM6gzpHOnc6fzqHOkc6czpEgzprOkc6hzpTOmc6kzqPOl86jLCDOoM6RzqHOkc6TzqnOk86ZzprOnyDOms6RzqHOlM6ZzqTOo86XzqMsIM6gzpXOpM6hzpHOm86pzp3OkSDOkc6TzqHOkc6mzqnOnSDOlc6lzqHOpc6kzpHOnc6ZzpHOoywgzqDOn86hzqTOmc6kzqPOkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6gzqHOn86UzqHOn86czp/OoyDOms6RzqHOlM6ZzqTOo86XzqMsIM6gzqTOlc6bzp/OoM6fzqXOm86RIM6azpHOoc6UzpnOpM6jzpfOoywgzqHOkc6nzp/Opc6bzpEgzprOkc6hzpTOmc6kzqPOl86jLCDOoc6fzqXOo86jzp8gzprOkc6hzpTOmc6kzqPOl86jLCDOo86RzqHOkc6dzqTOkc6gzp/Ooc6fIM6azpHOoc6UzpnOpM6jzpfOoywgzqPOpM6RzqXOoc6fzqMgzprOkc6hzpTOmc6kzqPOkc6jIM6azpHOoc6UzpnOpM6jzpfOoywgzqTOo86RzqHOlM6RzprOmSDOms6RzqHOlM6ZzqTOo86XzqMsIM6mzqHOkc6TzprOnyDOms6RzqHOlM6ZzqTOo86XzqMnLCBQcmVmZWN0dXJlOiAnzprOsc+BzrTOr8+Ez4POsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MzE1MCcsIEFyZWE6ICfOms6RzpvOjs6SzpnOkSDOnM6gzpXOls6fzo7Om86RzqMgzprOkc6hzpTOmc6kzqPOkc6jLCDOms6RzpvOjs6SzpnOkSDOps6lzpvOkc6azqTOic6jIM6azpHOoc6UzpnOpM6jzpHOoywgzprOkc6gzqDOhs6jIM6azpHOoc6UzpnOpM6jzpHOoywgzprOkc6hzpLOkc6jzpHOoc6GzqMgzprOkc6hzpTOmc6kzqPOkc6jLCDOms6RzqHOis6kzqPOkSDOlM6fzpvOn86gzo/OnSDOms6RzqHOlM6ZzqTOo86RzqMsIM6azpXOoc6RzqPOiM6RIM6azpHOoc6UzpnOpM6jzpHOoywgzprOn86lzqTOo86fzpTOic6czp/OoyDOms6RzqHOlM6ZzqTOo86RzqMsIM6azp/Opc6kzqPOn86gzobOoM6fzqXOm86fzqMgzprOkc6hzpTOmc6kzqPOkc6jLCDOms6hzqXOn86dzojOoc6Zzp/OnSDOms6RzqHOlM6ZzqTOo86RzqMsIM6czojOk86RIM6hzpXOjs6czpEgzprOkc6hzpTOmc6kzqPOkc6jLCDOnM6VzqPOlc6dzpnOms6MzpvOkc6jIM6azpHOoc6UzpnOpM6jzpHOoywgzpzOn86hzqbOn86Szp/Ojs6dzpnOn86dIM6azpHOoc6UzpnOpM6jzpHOoywgzpzOoM6VzpvOn86azp/OnM6KzqTOlyDOms6RzqHOlM6ZzqTOo86RzqMsIM6dzpXOn86nzo/Ooc6Zzp/OnSDOms6RzqHOlM6ZzqTOo86RzqMsIM6dzpXOoc6GzqrOlM6RIM6czqDOlc6Wzp/Ojs6bzpHOoyDOms6RzqHOlM6ZzqTOo86RzqMsIM6gzpXOls6fzo7Om86RIM6azpHOoc6UzpnOpM6jzpHOoywgzqDOlc6kzqHOqc6kzozOnSDOms6RzqHOis6kzqPOl86jIM6Uzp8gzprOkc6hzpTOmc6kzqPOkc6jLCDOoM6bzpHOms6pzqTOjM6dIM6azpHOoc6UzpnOpM6jzpHOoywgzqHOkc6mzonOnc6RIM6azpHOoc6UzpnOpM6jzpHOoywgzqbOkc6dzobOoc6ZIM6azpHOoc6UzpnOpM6jzpHOoywgzqbOpc6bzpHOms6kzokgzprOkc6hzpTOmc6kzqPOkc6jJywgUHJlZmVjdHVyZTogJ86azrHPgc60zq/PhM+DzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDMyMDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOlM6XzpzOl86kzqHOmc6fzqMgzprOkc6hzpTOmc6kzqPOl86jLCDOks6bzp/Op86fzqMgzprOkc6hzpTOmc6kzqPOl86jLCDOk86fzqHOk86fzpLOmc6kzpXOoyDOms6RzqHOlM6ZzqTOo86XzqMsIM6VzqHOnM6XzqTOo86ZIM6azpHOoc6UzpnOpM6jzpfOoywgzprOkc6bzqXOks6RzprOmc6RIM6azpHOoc6UzpnOpM6jzpfOoywgzprOn86jzprOmc6dzpHOoyDOms6RzqHOlM6ZzqTOo86XzqMsIM6bzqXOms6fzqHOlc6czpEgzprOkc6hzpTOmc6kzqPOl86jLCDOnM6RzqHOms6fzqMgzprOkc6hzpTOmc6kzqPOl86jLCDOnM6VzqTOkc6czp/Ooc6mzqnOo86XIM6azpHOoc6UzpnOpM6jzpHOoyDOms6RzqHOlM6ZzqTOo86XzqMsIM6gzpHOm86RzpzOkc6jIM6azpHOoc6UzpnOpM6jzpfOoywgzqjOkc6Yzp/Op86pzqHOmSDOms6RzqHOlM6ZzqTOo86XzqMnLCBQcmVmZWN0dXJlOiAnzprOsc+BzrTOr8+Ez4POsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MzMwMCcsIEFyZWE6ICfOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzprOkc6hzpTOmc6kzqPOl86jLCDOkc6TzpnOn86jIM6SzpfOo86jzpHOoc6Zzp/OoyDOms6RzqHOlM6ZzqTOo86XzqMsIM6RzpzOoM6VzpvOn86jIM6azpHOoc6UzpnOpM6jzpfOoywgzpHOnc6pzpPOlc6Zzp8gzprOkc6hzpTOmc6kzqPOl86jLCDOk86VzqbOpc6hzpnOkSDOms6RzqHOlM6ZzqTOo86XzqMsIM6TzqHOkc6czpzOkc6kzpnOms6fIM6azpHOoc6UzpnOpM6jzpfOoywgzpTOkc6jzp/Op86pzqHOmSDOms6RzqHOlM6ZzqTOo86XzqMsIM6YzqHOkc6ozpnOnM6ZIM6azpHOoc6UzpnOpM6jzpfOoywgzprOkc6gzqDOkc6Uzp/Oms6ZzprOnyDOms6RzqHOlM6ZzqTOo86XzqMsIM6azpXOlM6hzp/OoyDOms6RzqHOlM6ZzqTOo86RzqMgzprOkc6hzpTOmc6kzqPOl86jLCDOms6VzpTOoc6fzqMgzpzOoM6VzpvOn86azp/OnM6ZzqTOlyDOms6RzqHOlM6ZzqTOo86XzqMsIM6azqXOqM6VzpvOlyDOms6RzqHOlM6ZzqTOo86XzqMsIM6bzp/Opc6kzqHOnyDOms6RzqHOlM6ZzqTOo86XzqMsIM6czpHOo86nzp/Om86fzqXOoc6Zzp8gzprOkc6hzpTOmc6kzqPOl86jLCDOnM6RzqTOkc6hzpHOk86azpEgzprOkc6hzpTOmc6kzqPOl86jLCDOnM6RzqXOoc6RzqfOkc6UzpXOoyDOms6RzqHOlM6ZzqTOo86XzqMsIM6czpXOm86ZzqPOo86fzqfOqc6hzpkgzprOkc6hzpTOmc6kzqPOl86jLCDOnc6Vzp8gzpnOms6fzp3Omc6fIM6azpHOoc6UzpnOpM6jzpfOoywgzqDOkc6bzpnOn86lzqHOmSDOms6RzqHOlM6ZzqTOo86XzqMsIM6gzpHOo86nzpHOm86ZzqTOo86RIM6azpHOoc6UzpnOpM6jzpfOoywgzqDOpc6hzpPOn86jIM6azpnOlc6hzpnOn86lIM6azpHOoc6UzpnOpM6jzpfOoywgzqPOn86mzpHOlM6VzqMgzprOkc6hzpTOmc6kzqPOl86jLCDOpM6RzqXOoc6pzqDOn86jIM6azpHOoc6UzpnOpM6jzpfOoywgzqbOmc6bzpnOkSDOms6RzqHOlM6ZzqTOo86XzqMnLCBQcmVmZWN0dXJlOiAnzprOsc+BzrTOr8+Ez4POsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1MjA1MCcsIEFyZWE6ICfOkc6TzpnOkSDOms6lzqHOmc6RzprOlyDOms6RzqPOpM6fzqHOmc6RzqMsIM6RzprOn86dzqTOmc6fIM6azpHOo86kzp/Ooc6ZzpHOoywgzpTOlc6dzpTOoc6fzqfOqc6hzpkgzprOkc6jzqTOn86hzpnOkc6jLCDOmc6VzqHOn86gzpfOk86XIM6azpHOo86kzp/Ooc6ZzpHOoywgzprOkc6bzp/Op86pzqHOmSDOms6RzqPOpM6fzqHOmc6RzqMsIM6azpHOpM6pIM6gzqTOlc6hzpnOkSDOms6RzqPOpM6fzqHOmc6RzqMsIM6azp/Om86fzprOpc6dzpjOn86lIM6azpHOo86kzp/Ooc6ZzpHOoywgzpzOlc6jzp/OoM6fzqTOkc6czpnOkSDOms6RzqPOpM6fzqHOmc6RzqMsIM6fzpnOnc6fzpcgzprOkc6jzqTOn86hzpnOkc6jLCDOoM6fzpvOpc6Rzp3Olc6czp8gzprOkc6jzqTOn86hzpnOkc6jLCDOoM6kzpXOoc6ZzpEgzprOkc6jzqTOn86hzpnOkc6jJywgUHJlZmVjdHVyZTogJ86azrHPg8+Ezr/Pgc65zqzPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTIwNTEnLCBBcmVhOiAnzpHOk86ZzpEgzpHOnc6dzpEgzprOkc6jzqTOn86hzpnOkc6jLCDOk86ZzpHOnc6dzp/Op86pzqHOmSDOms6RzqPOpM6fzqHOmc6RzqMsIM6azpHOpM6pIM6gzqTOlc6bzpXOkSDOms6RzqPOpM6fzqHOmc6RzqMsIM6azqHOkc6dzp/Op86pzqHOmSDOms6RzqPOpM6fzqHOmc6RzqMsIM6bzpXOmc6SzpHOlM6fzqTOn86gzpkgzprOkc6jzqTOn86hzpnOkc6jLCDOnM6fzp3On86gzqXOm86fIM6azpHOo86kzp/Ooc6ZzpHOoywgzp3Olc6RIM6azp/OpM6lzpvOlyDOms6RzqPOpM6fzqHOmc6RzqMsIM6dzpXOo86kzp/Ooc6Zzp8gzprOkc6jzqTOn86hzpnOkc6jLCDOoM6VzqXOms6fzqMgzprOkc6jzqTOn86hzpnOkc6jLCDOoM6kzpXOm86VzpEgzprOkc6jzqTOn86hzpnOkc6jLCDOo86kzpXOnc6RIM6azpHOo86kzp/Ooc6ZzpHOoywgzqTOoc6ZzpvOn86mzp/OoyDOms6RzqPOpM6fzqHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzprOsc+Dz4TOv8+BzrnOrM+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1MjA1MicsIEFyZWE6ICfOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzprOkc6jzqTOn86hzpnOkc6jLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzprOn86hzpfOo86fzqUgzprOkc6jzqTOn86hzpnOkc6jLCDOks6RzqPOmc6bzpXOmc6RzpTOkSDOms6RzqPOpM6fzqHOmc6RzqMsIM6SzpXOoc6TzpEgzprOkc6jzqTOn86hzpnOkc6jLCDOms6fzqHOl86jzp/OoyDOms6RzqPOpM6fzqHOmc6RzqMsIM6bzpnOmM6ZzpEgzprOkc6jzqTOn86hzpnOkc6jLCDOnM6VzpvOmc6jzqPOn86kzp/OoM6fzqMgzprOkc6jzqTOn86hzpnOkc6jLCDOnM6fzp3OlyDOkc6TzpnOqc6dIM6Rzp3Okc6hzpPOpc6hzqnOnSDOms6RzqPOpM6fzqHOmc6RzqMsIM6jzqTOkc6lzqHOn86gzp/OpM6RzpzOn86jIM6azpHOo86kzp/Ooc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOms6xz4PPhM6/z4HOuc6sz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzUyMDU1JywgQXJlYTogJ86RzpPOmc6fzqMgzpHOnc6kzqnOnc6Zzp/OoyDOms6RzqPOpM6fzqHOmc6RzqMsIM6Rzp3OqSDOnM6VzpvOkc6jIM6azpHOo86kzp/Ooc6ZzpHOoywgzpzOkc6azqHOn86nzqnOoc6ZIM6azpHOo86kzp/Ooc6ZzpHOoywgzpzOkc6lzqHOn86azpHOnM6gzp/OoyDOms6RzqPOpM6fzqHOmc6RzqMsIM6czpXOm86RzqMgzprOkc6jzqTOn86hzpnOkc6jLCDOp86RzpvOkc6hzpEgzprOkc6jzqTOn86hzpnOkc6jJywgUHJlZmVjdHVyZTogJ86azrHPg8+Ezr/Pgc65zqzPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTIwNTYnLCBBcmVhOiAnzprOoc6VzqDOlc6dzpcgzprOkc6jzqTOn86hzpnOkc6jLCDOnM6RzqXOoc6fzqfOqc6hzpkgzprOkc6jzqTOn86hzpnOkc6jLCDOoM6fzpvOpc6azpHOoc6gzpcgzprOkc6jzqTOn86hzpnOkc6jJywgUHJlZmVjdHVyZTogJ86azrHPg8+Ezr/Pgc65zqzPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTIwNTcnLCBBcmVhOiAnzpTOmc6jzqDOl86bzpnOnyDOms6RzqPOpM6fzqHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzprOsc+Dz4TOv8+BzrnOrM+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1MjA1OScsIEFyZWE6ICfOks6lzqPOo86Zzp3Olc6RIM6azpHOo86kzp/Ooc6ZzpHOoywgzpzOlc6kzpHOnM6fzqHOps6pzqPOlyDOms6RzqPOpM6fzqHOmc6RzqMsIM6fzp7Opc6RIM6azpHOo86kzp/Ooc6ZzpHOoywgzqDOn86bzqXOms6VzqHOkc6jzp8gzprOkc6jzqTOn86hzpnOkc6jLCDOo86ZzpTOl86hzp/Op86pzqHOmSDOms6RzqPOpM6fzqHOmc6RzqMsIM6kzp/Omc6nzpnOnyDOms6RzqPOpM6fzqHOmc6RzqMsIM6mzqnOpM6VzpnOnc6XIM6azpHOo86kzp/Ooc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOms6xz4PPhM6/z4HOuc6sz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzUyMTAwJywgQXJlYTogJ86RzpzOoM6VzpvOn86azpfOoM6fzpkgzprOkc6jzqTOn86hzpnOkc6jLCDOkc6gzp/Oo86azpXOoM6fzqMgzprOkc6jzqTOn86hzpnOkc6jLCDOms6RzqPOpM6fzqHOmc6RIM6azpHOo86kzp/Ooc6ZzpHOoywgzprOlc6mzpHOm86RzqHOmSDOms6RzqPOpM6fzqHOmc6RzqMsIM6azp/Ooc6fzpzOl86bzpXOkSDOms6RzqPOpM6fzqHOmc6RzqMsIM6bzpXOpc6azpcgzprOkc6jzqTOn86hzpnOkc6jLCDOnM6Rzp3Omc6RzprOn86ZIM6azpHOo86kzp/Ooc6ZzpHOoywgzpzOl86bzpnOpM6jzpEgzprOkc6jzqTOn86hzpnOkc6jLCDOnc6VzpEgzpvOlc6lzprOlyDOms6RzqPOpM6fzqHOmc6RzqMsIM6nzpvOn86XIM6azpHOo86kzp/Ooc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOms6xz4PPhM6/z4HOuc6sz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzUyMjAwJywgQXJlYTogJ86RzpPOmc6fzqMgzpfOm86ZzpHOoyDOms6RzqPOpM6fzqHOmc6RzqMsIM6RzpzOnM6fzqXOlM6RzqHOkSDOms6RzqPOpM6fzqHOmc6RzqMsIM6RzpzOoM6VzpvOn86nzqnOoc6ZIM6azpHOo86kzp/Ooc6ZzpHOoywgzpHOnc6YzpfOoc6fIM6azpHOo86kzp/Ooc6ZzpHOoywgzpHOnc6pIM6gzpXOoc6ZzpLOn86bzpkgzprOkc6jzqTOn86hzpnOkc6jLCDOkc6hzpPOn86jIM6fzqHOlc6jzqTOmc6azp8gzprOkc6jzqTOn86hzpnOkc6jLCDOkc6jzqDOoc6fzprOms6bzpfOo86ZzpEgzprOkc6jzqTOn86hzpnOkc6jLCDOkc6jzqDOoc6fzp3Olc6hzpkgzprOkc6jzqTOn86hzpnOkc6jLCDOkc6lzpPOlyDOms6RzqPOpM6fzqHOmc6RzqMsIM6SzpXOm86fzqMgzprOkc6jzqTOn86hzpnOkc6jLCDOks6fzqTOkc6dzpnOn86dIM6azpHOo86kzp/Ooc6ZzpHOoywgzpLOoc6RzqfOn86jIM6azpHOo86kzp/Ooc6ZzpHOoywgzpPOkc6SzqHOn86jIM6azpHOo86kzp/Ooc6ZzpHOoywgzpPOlc6hzpzOkc6jIM6azpHOo86kzp/Ooc6ZzpHOoywgzpPOoc6RzpzOn86jIM6azpHOo86kzp/Ooc6ZzpHOoywgzpTOmc6RzpvOlc6azqTOnyDOms6RzqPOpM6fzqHOmc6RzqMsIM6WzpXOpc6Tzp/Oo86kzpHOo86ZIM6azpHOo86kzp/Ooc6ZzpHOoywgzpbOn86lzpbOn86lzpvOlyDOms6RzqPOpM6fzqHOmc6RzqMsIM6azpHOo86kzpHOnc6fzqbOpc6kzp8gzprOkc6jzqTOn86hzpnOkc6jLCDOms6VzqHOkc6jzqnOnc6RIM6azpHOo86kzp/Ooc6ZzpHOoywgzprOoc6Rzp3Omc6pzp3Okc6jIM6azpHOo86kzp/Ooc6ZzpHOoywgzprOoc6VzpzOkc6jzqTOnyDOms6RzqPOpM6fzqHOmc6RzqMsIM6azqHOpc6RIM6dzpXOoc6RIM6azpHOo86kzp/Ooc6ZzpHOoywgzprOpc6ozpXOm86XIM6azpHOo86kzp/Ooc6ZzpHOoywgzprOqc6jzqTOkc6hzpHOls6ZIM6azpHOo86kzp/Ooc6ZzpHOoywgzpvOkc6TzprOkSDOms6RzqPOpM6fzqHOmc6RzqMsIM6bzpHOms6azqnOnM6RzqTOkSDOms6RzqPOpM6fzqHOmc6RzqMsIM6bzpHOp86Rzp3On86azpfOoM6fzpkgzprOkc6jzqTOn86hzpnOkc6jLCDOnM6VzpvOkc6dzpjOmSDOms6RzqPOpM6fzqHOmc6RzqMsIM6dzpXOnyDOms6pzqPOpM6RzqHOkc6WzpkgzprOkc6jzqTOn86hzpnOkc6jLCDOnc6Vzp/OoyDOn86ZzprOmc6jzpzOn86jIM6azpHOo86kzp/Ooc6ZzpHOoywgzp3Omc6azpcgzprOkc6jzqTOn86hzpnOkc6jLCDOnc6fzqPOpM6ZzpzOnyDOms6RzqPOpM6fzqHOmc6RzqMsIM6fzpzOn86hzqbOn86azprOm86XzqPOmc6RIM6azpHOo86kzp/Ooc6ZzpHOoywgzqDOlc6dzqTOkc6SzqHOpc6jzp8gzprOkc6jzqTOn86hzpnOkc6jLCDOoM6VzqTOoc6fzqDOn86lzpvOkc6azpkgzprOkc6jzqTOn86hzpnOkc6jLCDOoM6fzqHOlc6ZzpEgzprOkc6jzqTOn86hzpnOkc6jLCDOo86azpHOm86fzqfOqc6hzpkgzprOn86WzpHOnc6XzqMsIM6jzqDOl86bzpHOmc6RIM6azpHOo86kzp/Ooc6ZzpHOoywgzqPOoM6XzpvOmc6fzqMgzprOkc6jzqTOn86hzpnOkc6jLCDOpM6jzpHOms6fzp3OlyDOms6RzqPOpM6fzqHOmc6RzqMsIM6lzqjOl86bzp8gzprOkc6jzqTOn86hzpnOkc6jLCDOp86ZzpvOmc6fzpTOlc6dzpTOoc6fIM6azpHOo86kzp/Ooc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOms6xz4PPhM6/z4HOuc6sz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ5MDgwJywgQXJlYTogJ86RzpPOmc6RIM6RzpnOms6RzqTOlc6hzpnOnc6XIM6azpXOoc6azqXOoc6RzqMsIM6RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOoM6VzqTOoc6ZzqTOl86jIM6azpXOoc6azqXOoc6RzqMsIM6RzpPOmc6fzpkgIM6YzpXOn86UzqnOoc6fzpkgzprOlc6hzprOpc6hzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6RzqHOk86lzqHOkc6UzqnOnSDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOn86jIM6Tzp/Ooc6UzpnOn86jICjOm86VzqXOms6ZzpzOnM6RzpnOqc6dKSDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzprOlc6hzprOpc6hzpHOoyDOms6VzqHOms6lzqHOkc6jLCDOkc6bzqXOms6VzqMgzpvOlc6lzprOmc6czpzOl86jIM6azpXOoc6azqXOoc6RzqMsIM6RzqHOk86lzqHOkc6UzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOks6RzqPOmc6bzpHOpM6ZzprOkSDOms6VzqHOms6lzqHOkc6jLCDOks6ZzqTOkc6bzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzpLOoc6RzpPOms6Rzp3Omc6pzqTOmc6azpEgzprOlc6hzprOpc6hzpHOoywgzpPOkc6hzpTOlc6dzp/OoyDOms6VzqHOms6lzqHOkc6jLCDOlM6hzpHOk86pzqTOmc6dzpEgzprOlc6hzprOpc6hzpHOoywgzprOkc6Szp/OoyDOms6VzqHOms6lzqHOkc6jLCDOms6RzpvOpc6SzpnOqc6kzpfOoyDOoM6VzqHOmc6Szp/Om86Zzp/OpSDOms6VzqHOms6lzqHOkc6jLCDOms6RzqTOqSDOo86gzpfOm86RzpnOnyDOms6VzqHOms6lzqHOkc6jLCDOms6fzqHOkc6azpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzprOn86lzqPOoM6RzpTOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6azqHOl86kzpnOms6RIM6azpXOoc6azqXOoc6RzqMsIM6azqHOmc6dzpnOkc6jIM6azpXOoc6azqXOoc6RzqMsIM6bzpXOpc6azpnOnM6czpcgzprOlc6hzprOpc6hzpHOoywgzpvOmc6dzpnOkSDOms6VzqHOms6lzqHOkc6jLCDOnM6RzqHOkc6YzpnOkc6jIM6azpXOoc6azqXOoc6RzqMsIM6czpXOm86ZzprOmc6RIM6azpXOoc6azqXOoc6RzqMsIM6czpXOo86fzpPOk86XIM6azpXOoc6azqXOoc6RzqMsIM6czqDOkc6jzqTOkc6kzpnOms6RIM6azpXOoc6azqXOoc6RzqMsIM6czqDOn86lzprOkc6hzpfOoyDOms6VzqHOms6lzqHOkc6jLCDOnM6pzpvOn86jIM6azpXOoc6azqXOoc6RzqMsIM6dzpXOn86nzqnOoc6RzprOmSDOms6VzqHOms6lzqHOkc6jLCDOnc6Vzp/Op86pzqHOmSDOms6VzqHOms6lzqHOkc6jLCDOnc6fzqTOn86jIM6azpXOoc6azqXOoc6RzqMsIM6gzpHOm86RzpnOn86nzqnOoc6ZIM6azpXOoc6azqXOoc6RzqMsIM6gzpXOoc6ZzpLOn86bzpkgzprOlc6hzprOpc6hzpHOoywgzqDOlc6kzqHOmc6kzpcgzprOlc6hzprOpc6hzpHOoywgzqDOn86kzpHOnM6ZICDOms6VzqHOms6lzqHOkc6jLCDOoM6fzqTOkc6czpnOkSDOoM6VzqHOmc6Szp/Om86Zzp/OpSDOms6VzqHOms6lzqHOkc6jLCDOoc6ZzpPOk86bzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzqHOn86lzpzOkc6dzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzqPOoM6RzqHOpM6VzqHOkSDOms6VzqHOms6lzqHOkc6jLCDOp86bzp/OnM6RzqTOmc6Rzp3OkSDOms6VzqHOms6lzqHOkc6jLCDOp86bzp/OnM6fzqMgzprOlc6hzprOpc6hzpHOoywgzqjOkc6hzpHOoyDOms6VzqHOms6lzqHOkc6jJywgUHJlZmVjdHVyZTogJ86azq3Pgc66z4XPgc6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ5MDgxJywgQXJlYTogJ86RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOkc6TzqHOkc6mzqnOnSDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOkSDOoM6VzpvOkc6TzpnOkSDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOn86ZIM6Uzp/Opc6bzp/OmSDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzpHOoc6czpXOnc6RzpTOqc6dIM6azpXOoc6azqXOoc6RzqMsIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzprOlc6hzprOpc6hzpHOoywgzpHOk86Zzp/OoyDOo86gzqXOoc6ZzpTOqc6dzpHOoyDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOn86jIM6jzqTOlc6mzpHOnc6fzqMgzpHOpc6bzpnOqc6kzqnOnSDOms6VzqHOms6lzqHOkc6jLCDOkc6TzqHOkc6mzp/OmSDOms6VzqHOms6lzqHOkc6jLCDOkc6dzqTOmc6gzpXOoc6dzp/OmSDOms6VzqHOms6lzqHOkc6jLCDOkc6hzpnOm86bzpHOoyDOms6RzpLOks6RzpTOkc6UzqnOnSDOms6VzqHOms6lzqHOkc6jLCDOkc6hzpnOm86bzpHOoyDOnM6RzpPOn86lzpvOkc6UzqnOnSDOms6VzqHOms6lzqHOkc6jLCDOkc6hzpzOlc6dzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzpHOo86kzqHOkc6azpXOoc6XIM6azpXOoc6azqXOoc6RzqMsIM6RzqXOm86ZzqnOpM6VzqMgzprOlc6hzprOpc6hzpHOoywgzpHOps6ZzqnOnSDOms6VzqHOms6lzqHOkc6jLCDOks6RzpvOkc6dzpXOmc6fIM6azpXOoc6azqXOoc6RzqMsIM6SzpXOm86fzp3Okc6UzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOk86RzpLOoc6RzpTOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6TzpHOoc6dzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzpPOn86lzqPOkc6UzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOlM6RzqbOnc6XIM6azpXOoc6azqXOoc6RzqMsIM6VzqDOmc6jzprOn86gzpcgzprOlc6hzprOpc6hzpHOoywgzprOkc6SzpHOm86bzp/Opc6hzpkgzprOlc6hzprOpc6hzpHOoywgzprOkc6SzpLOkc6UzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzprOkc6hzp/Opc6jzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzprOm86XzpzOkc6kzpnOkSDOms6VzqHOms6lzqHOkc6jLCDOms6fzqXOms6dzpnOms6RzpTOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6azp/Opc6dzpHOks6RzpTOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6azqXOoM6hzpnOkc6dzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzpvOmc6SzpHOlM6ZIM6azpXOoc6azqXOoc6RzqMsIM6czpHOk86fzqXOm86RzpTOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6czpXOk86RIM6lzpTOoc6ZIM6azpXOoc6azqXOoc6RzqMsIM6dzqXOnM6mzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOns6Rzp3OmM6RzqTOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6gzpXOoc6fzqXOm86RzpTOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6gzpvOkc6kzqnOnc6RzqMgzprOlc6hzprOpc6hzpHOoywgzqDOn86lzpvOl86czpHOpM6VzqMgzprOlc6hzprOpc6hzpHOoywgzqHOkc6nzqTOkc6UzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOoc6fzpTOkSDOms6RzqHOn86lzqPOkc6UzqnOnSDOms6VzqHOms6lzqHOkc6jLCDOoc6fzpTOkSDOms6VzqHOms6lzqHOkc6jIM6azpXOoc6azqXOoc6RzqMsIM6jzpHOn86lzpvOkc6kzpnOms6RIM6azpXOoc6azqXOoc6RzqMsIM6jzpnOlM6RzqHOmc6fIM6azpXOoc6azqXOoc6RzqMsIM6jzpnOnc6ZzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOo86kzpHOn86lzqPOkSDOms6VzqHOms6lzqHOkc6jLCDOo86mzpHOms6VzqHOkSDOms6VzqHOms6lzqHOkc6jLCDOpM6jzp/Opc6azpHOm86Zzp8gzprOlc6hzprOpc6hzpHOoywgzqjOkc6YzqXOm86RzqMgzprOlc6hzprOpc6hzpHOoycsIFByZWZlY3R1cmU6ICfOms6tz4HOus+Fz4HOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0OTA4MicsIEFyZWE6ICfOkc6dzpXOnM6fzpPOmc6Rzp3Onc6RzqTOmc6azpEgIM6gzpHOns6pzp0gzprOlc6hzprOpc6hzpHOoywgzpHOnc6kzpnOoM6Rzp7On86jIM6azpXOoc6azqXOoc6RzqMsIM6RzqDOlc6hzpPOkc6kzpnOms6RICDOoM6Rzp7Oqc6dIM6azpXOoc6azqXOoc6RzqMsIM6RzqHOks6Rzp3Omc6kzpHOms6RzpnOmc6azpEgIM6gzpHOns6pzp0gzprOlc6hzprOpc6hzpHOoywgzpHOoc6pzp3Okc6kzpnOms6RICDOoM6Rzp7Oqc6dIM6azpXOoc6azqXOoc6RzqMsIM6SzpXOm86ZzpHOnc6ZzqTOkc6kzpnOms6RICDOoM6Rzp7Oqc6dIM6azpXOoc6azqXOoc6RzqMsIM6SzpvOkc6nzp/OoM6fzqXOm86RzqTOmc6azpEgIM6gzpHOns6pzp0gzprOlc6hzprOpc6hzpHOoywgzpPOkc6Zzp/OoyDOms6VzqHOms6lzqHOkc6jLCDOk86hzpHOnM6czpHOpM6ZzprOkc6ZzpnOms6RICDOoM6Rzp7Oqc6dIM6azpXOoc6azqXOoc6RzqMsIM6UzpHOm86ZzpXOpM6RzqTOmc6azpEgIM6gzpHOns6pzp0gzprOlc6hzprOpc6hzpHOoywgzpTOlc6dzpTOmc6RzqTOmc6azpEgIM6gzpHOns6pzp0gzprOlc6hzprOpc6hzpHOoywgzpnOlc6hzp/OnM6fzp3Okc6nzp/OoyAgzqDOkc6ezqnOnSDOms6VzqHOms6lzqHOkc6jLCDOms6RzpPOms6RzqTOmc6azpEgIM6gzpHOns6pzp0gzprOlc6hzprOpc6hzpHOoywgzprOkc6kzqPOmc6czpHOpM6ZzprOkSAgzqDOkc6ezqnOnSDOms6VzqHOms6lzqHOkc6jLCDOms6fzp3OpM6fzpPOmc6Rzp3Onc6RzqTOmc6azpEgIM6gzpHOns6pzp0gzprOlc6hzprOpc6hzpHOoywgzprOn86lzqHOpM6RzpnOmc6azpEgIM6gzpHOns6pzp0gzprOlc6hzprOpc6hzpHOoywgzprOn86lzqTOo86Zzp8gIM6gzpHOns6pzp0gzprOlc6hzprOpc6hzpHOoywgzpvOkc6azprOkSDOoM6Rzp7Oqc6dIM6azpXOoc6azqXOoc6RzqMsIM6bzp/Ok86Tzp/OoyAgzqDOkc6ezqnOnSDOms6VzqHOms6lzqHOkc6jLCDOnM6RzpPOkc6WzpnOkSAgzqDOkc6ezqnOnSDOms6VzqHOms6lzqHOkc6jLCDOnM6RzprOoc6RzqTOmc6azpEgIM6gzpHOns6pzp0gzprOlc6hzprOpc6hzpHOoywgzpzOkc6dzpXOo86RzqTOmc6azpEgIM6gzpHOns6pzp0gzprOlc6hzprOpc6hzpHOoywgzpzOkc6jzqTOn86hzpHOpM6ZzprOkSAgzqDOkc6ezqnOnSDOms6VzqHOms6lzqHOkc6jLCDOnM6fzqXOk86azpXOm86RzqTOmc6azpEgIM6gzpHOns6pzp0gzprOlc6hzprOpc6hzpHOoywgzpzOoM6fzpPOlM6Rzp3Okc6kzpnOms6RICDOoM6Rzp7Oqc6dIM6azpXOoc6azqXOoc6RzqMsIM6czqDOn86ZzprOkc6kzpnOms6RICDOoM6Rzp7Oqc6dIM6azpXOoc6azqXOoc6RzqMsIM6fzpbOmc6RzqMgzprOlc6hzprOpc6hzpHOoywgzp/Ons6ZzpHOoyDOoM6Rzp7Oqc6dIM6azpXOoc6azqXOoc6RzqMsIM6gzpHOnc6RzpPOmc6RICDOnc6XzqPOn86jIM6azpXOoc6azqXOoc6RzqMsIM6gzpHOns6fzpkgzprOlc6hzprOpc6hzpHOoywgzqDOlc6kzqHOkc6kzpnOms6RICDOoM6Rzp7Oqc6dIM6azpXOoc6azqXOoc6RzqMsIM6gzpvOkc6kzpHOnc6fzqMgIM6gzpHOns6pzp0gzprOlc6hzprOpc6hzpHOoycsIFByZWZlY3R1cmU6ICfOms6tz4HOus+Fz4HOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0OTA4MycsIEFyZWE6ICfOkc6TzpnOkSDOkc6dzp3OkSDOkc6bzpXOmc6czpzOkc6kzpHOlM6pzp0gzprOlc6hzprOpc6hzpHOoywgzpHOk86Zzp/OoyDOkc6YzpHOnc6RzqPOmc6fzqMgzprOlc6hzprOpc6hzpHOoywgzpHOk86Zzp/OoyDOks6RzqPOmc6bzpXOmc6fzqMgzprOlc6hzprOpc6hzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6gzpHOk86pzp0gzprOlc6hzprOpc6hzpHOoywgzpHOk86Zzp/OoyDOnM6RzqHOms6fzqMgzprOlc6hzprOpc6hzpHOoywgzpHOk86hzp/OoyDOms6VzqHOms6lzqHOkc6jLCDOkc6bzpXOmc6czpzOkc6kzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzpHOnc6RzpvOl86ozpcgzprOlc6hzprOpc6hzpHOoywgzpHOnc6pIM6azp/Ooc6RzprOmc6Rzp3OkSDOms6VzqHOms6lzqHOkc6jLCDOkc6hzprOkc6UzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzpHOo86gzpnOqc6kzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzpHOps6ZzqnOnc6ZzqTOmc6azpEgzprOlc6hzprOpc6hzpHOoywgzpLOkc6kzqnOnc6ZzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOks6ZzqPOpM6pzp3Okc6jIM6azpXOoc6azqXOoc6RzqMsIM6TzpHOls6RzqTOmc6azpEgzprOlc6hzprOpc6hzpHOoywgzpPOkc6hzpTOlc6bzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzpPOlc6mzqXOoc6RIM6azpXOoc6azqXOoc6RzqMsIM6Uzp/Opc6azpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzpTOoc6fzqPOkc6kzp8gzprOlc6hzprOpc6hzpHOoywgzpbOpc6Tzp/OoyDOms6VzqHOms6lzqHOkc6jLCDOms6RzqPOpM6VzpvOm86Rzp3On86ZIM6TzqXOoc6fzqUgzprOlc6hzprOpc6hzpHOoywgzprOkc6kzqkgzpHOk86Zzp/OoyDOnM6RzqHOms6fzqMgzprOlc6hzprOpc6hzpHOoywgzprOkc6kzqkgzprOn86hzpHOms6ZzpHOnc6RIM6azpXOoc6azqXOoc6RzqMsIM6azp/OqM6fzqfOlc6ZzpvOkc6UzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOms6hzpfOnc6XIM6azpXOoc6azqXOoc6RzqMsIM6bzpHOms6pzp3Olc6jIM6azpXOoc6azqXOoc6RzqMsIM6bzpnOkc6gzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzpvOmc6czp3OlyDOms6VzqHOms6lzqHOkc6jLCDOnM6RzprOoc6RzpTOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6czpHOnc6RzqTOkc6UzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOnM6VzqPOkc6hzpnOkSDOms6VzqHOms6lzqHOkc6jLCDOoM6RzpPOn86ZIM6azpXOoc6azqXOoc6RzqMsIM6gzpHOm86RzpnOn86azpHOo86kzqHOmc6kzqPOkSDOms6VzqHOms6lzqHOkc6jLCDOoM6RzqDOkc6YzpHOnc6RzqTOmc6azpEgzprOlc6hzprOpc6hzpHOoywgzqDOl86bzpnOlM6RIM6azpXOoc6azqXOoc6RzqMsIM6gzp/Opc6bzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzqDOoc6Zzp3Opc6bzpHOoyDOms6VzqHOms6lzqHOkc6jLCDOoM6lzqHOk86ZIM6azpXOoc6azqXOoc6RzqMsIM6hzpHOps6RzpvOkc6UzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOo86azqHOmc6gzpXOoc6fIM6azpXOoc6azqXOoc6RzqMsIM6jzqnOms6hzpHOms6ZIM6azpXOoc6azqXOoc6RzqMsIM6kzpXOoc6czpXOnc6RzpTOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6kzqHOn86lzpzOoM6VzqTOpM6RzqMgzprOlc6hzprOpc6hzpHOoywgzqXOqM6fzqMgzprOlc6hzprOpc6hzpHOoywgzqbOlc6bzpXOms6RzqMgzprOlc6hzprOpc6hzpHOoywgzqfOqc6hzpXOoM6ZzqPOms6fzqDOn86ZIM6azpXOoc6azqXOoc6RzqMnLCBQcmVmZWN0dXJlOiAnzprOrc+BzrrPhc+BzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDkwODQnLCBBcmVhOiAnzpHOk86Zzp/OmSDOlM6VzprOkSDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzpLOmc6hzp/OpSDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOn86jIM6Tzp/Ooc6UzpnOn86jICjOoM6RzqHOlc6bzpnOqc6dKSDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6gzpXOoc6ZzqPOpM6VzqHOqc6dIM6azpXOoc6azqXOoc6RzqMsIM6RzpPOmc6fzqMgzpzOkc6kzpjOkc6Zzp/OoyDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOn86jIM6gzqHOn86azp/OoM6Zzp/OoyDOms6VzqHOms6lzqHOkc6jLCDOkc6bzpXOoM6fzqfOqc6hzpkgzprOlc6hzprOpc6hzpHOoywgzpHOnc6pIM6TzpHOoc6fzqXOnc6RIM6azpXOoc6azqXOoc6RzqMsIM6Rzp3OqSDOoM6RzqXOm86ZzpHOnc6RIM6azpXOoc6azqXOoc6RzqMsIM6RzqPOoM6VzqMgzprOlc6hzprOpc6hzpHOoywgzpLOkc6hzqXOoM6RzqTOkc6UzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOks6ZzqHOn86jIM6azpXOoc6azqXOoc6RzqMsIM6Szp/Opc6dzpnOkc6kzpHOlM6VzqMgzprOlc6hzprOpc6hzpHOoywgzpPOkc6jzqTOn86lzqHOmSDOms6VzqHOms6lzqHOkc6jLCDOlM6RzqbOnc6RzqTOkSDOms6VzqHOms6lzqHOkc6jLCDOlc6gzpnOo86azp/OoM6ZzpHOnc6RIM6azpXOoc6azqXOoc6RzqMsIM6VzqPOpM6RzqXOoc6pzpzOlc6dzp/OoyDOms6VzqHOms6lzqHOkc6jLCDOms6RzpvOkc6mzpHOpM6ZzqnOnc6VzqMgzprOlc6hzprOpc6hzpHOoywgzprOkc6czpHOoc6RIM6azpXOoc6azqXOoc6RzqMsIM6azpHOoc6UzpHOnM6RzqTOmc6azpEgzprOlc6hzprOpc6hzpHOoywgzprOkc6jzqTOkc6dzpXOkSDOms6VzqHOms6lzqHOkc6jLCDOms6RzqPOpM6VzpvOm86Rzp3On86ZIM6czpXOo86XzqMgzprOlc6hzprOpc6hzpHOoywgzprOkc6kzqkgzpPOkc6hzp/Opc6dzpEgzprOlc6hzprOpc6hzpHOoywgzprOkc6kzqkgzqDOkc6lzpvOmc6Rzp3OkSDOms6VzqHOms6lzqHOkc6jLCDOms6fzpzOmc6Rzp3Okc6kzpEgzprOlc6hzprOpc6hzpHOoywgzprOn86dzqTOn86TzpnOkc6bzp/OoyDOms6VzqHOms6lzqHOkc6jLCDOms6fzqHOnc6RzqTOkSDOms6VzqHOms6lzqHOkc6jLCDOms6fzqXOoc6RzpzOkc6UzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOms6lzp3On86gzpnOkc6jzqTOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6bzp/Opc6azpHOpM6RIM6azpXOoc6azqXOoc6RzqMsIM6czpHOms6hzpHOpM6RIM6azpXOoc6azqXOoc6RzqMsIM6czqDOkc6jzqTOn86lzp3Omc6fzp0gzprOlc6hzprOpc6hzpHOoywgzpzOoM6Vzp3Omc6kzqPOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6czqnOoc6RzpnOpM6ZzprOkSDOms6VzqHOms6lzqHOkc6jLCDOoM6RzqHOkc6czp/Onc6RzqMgzprOlc6hzprOpc6hzpHOoywgzqDOlc6dzqTOkc6kzpkgzprOlc6hzprOpc6hzpHOoywgzqDOlc6hzpHOnM6RIM6TzpHOo86kzp/Opc6hzpnOn86lIM6azpXOoc6azqXOoc6RzqMsIM6gzpnOms6fzqXOm86RzqTOmc6azpEgzprOlc6hzprOpc6hzpHOoywgzqPOmc6dzpHOoc6RzpTOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6jzprOkc6bzpEgzprOlc6hzprOpc6hzpHOoywgzqPOn86lzpvOkc6ZzpnOms6RIM6azpXOoc6azqXOoc6RzqMsIM6jzqTOkc6lzqHOn86jIM6azpXOoc6azqXOoc6RzqMsIM6jzqTOoc6fzpPOk86lzpvOlyDOmM6Zzp3Okc6bzpnOn86lIM6azpXOoc6azqXOoc6RzqMsIM6jzqTOoc6fzpPOk86lzpvOlyDOms6VzqHOms6lzqHOkc6jIM6azpXOoc6azqXOoc6RzqMsIM6nzpHOm86ZzpTOmc6RzqTOkSDOms6VzqHOms6lzqHOkc6jLCDOp86RzpvOmc6azp/Opc6dzpHOoyDOms6VzqHOms6lzqHOkc6jLCDOp86hzqXOo86XzpnOlM6RIM6azpXOoc6azqXOoc6RzqMnLCBQcmVmZWN0dXJlOiAnzprOrc+BzrrPhc+BzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDkxMDAnLCBBcmVhOiAnzpHOks6hzpHOnM6XzqMgzprOlc6hzprOpc6hzpHOoywgzpHOk86ZzpEgzqTOoc6ZzpHOlM6RIM6azpXOoc6azqXOoc6RzqMsIM6RzpPOmc6fzqMgzpLOm86RzqPOmc6fzqMgzprOlc6hzprOpc6hzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6azpHOo86jzpnOn86gzpfOoyDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOn86jIM6XzpvOmc6RzqMgzprOlc6hzprOpc6hzpHOoywgzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOms6RzqHOn86lzqPOkc6UzqnOnSDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOn86jIM6czpHOoc6kzpnOnc6fzqMgzprOlc6hzprOpc6hzpHOoywgzpHOk86Zzp/OoyDOn86dzp/Opc6mzqHOmc6fzqMgzprOlc6hzprOpc6hzpHOoywgzpHOk86Zzp/OoyDOoM6Rzp3OpM6VzpvOlc6XzpzOqc6dIM6azpXOoc6azqXOoc6RzqMsIM6RzpPOmc6fzqMgzqPOpM6VzqbOkc6dzp/OoyDOms6VzqHOms6lzqHOkc6jLCDOkc6TzpnOn86jIM6jzqTOlc6mzpHOnc6fzqMgzqPOmc6dzpnOqc6dIM6azpXOoc6azqXOoc6RzqMsIM6RzpPOnc6ZzqTOo86Zzp3OlyDOms6VzqHOms6lzqHOkc6jLCDOkc6bzpXOoM6fzqUgzprOlc6hzprOpc6hzpHOoywgzpHOm86lzprOlc6jIM6gzp/OpM6RzpzOn86lIM6azpXOoc6azqXOoc6RzqMsIM6Rzp3Okc6gzpHOpc6kzpfOoc6ZzpEgzprOlc6hzprOpc6hzpHOoywgzpHOnc6pIM6gzpXOoc6ZzpjOlc6ZzpEgzprOlc6hzprOpc6hzpHOoywgzpHOoM6fzpvOpc6jzp/OmSDOms6VzqHOms6lzqHOkc6jLCDOkc6gzqHOkc6fzqMgzprOlc6hzprOpc6hzpHOoywgzpHOps6hzpEgzprOlc6hzprOpc6hzpHOoywgzpHOp86RzqHOkc6SzpcgzprOlc6hzprOpc6hzpHOoywgzpLOkc6YzqUgzprOlc6hzprOpc6hzpHOoywgzpLOkc6jzpnOm86ZzprOkSDOmM6Zzp3Okc6bzpnOn86lIM6azpXOoc6azqXOoc6RzqMsIM6SzpHOo86ZzpvOmc6azpEgzqDOkc6hzpXOm86ZzqnOnSDOms6VzqHOms6lzqHOkc6jLCDOks6RzqTOn86jIM6azpXOoc6azqXOoc6RzqMsIM6SzpnOk86TzpvOkSDOms6VzqHOms6lzqHOkc6jLCDOks6ZzpPOk86bzpHOpM6fzqXOoc6ZIM6azpXOoc6azqXOoc6RzqMsIM6SzpvOkc6nzpHOpM6ZzprOkSDOms6VzqHOms6lzqHOkc6jLCDOks6fzqXOnc6fIM6azpXOoc6azqXOoc6RzqMsIM6SzqHOkc6nzpvOlc6hzpcgzprOlc6hzprOpc6hzpHOoywgzpLOoc6lzqnOnc6XIM6azpXOoc6azqXOoc6RzqMsIM6TzpnOkc6dzp3Okc6UzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOk86ZzpzOkc6hzpkgzprOlc6hzprOpc6hzpHOoywgzpPOm86lzqbOkc6UzpEgzprOlc6hzprOpc6hzpHOoywgzpPOn86lzpLOmc6RIM6azpXOoc6azqXOoc6RzqMsIM6UzpHOnc6ZzpvOmc6RIM6azpXOoc6azqXOoc6RzqMsIM6UzpHOo86ZzpEgzprOlc6hzprOpc6hzpHOoywgzpTOkc6mzp3Omc6bzpHOoyDOms6VzqHOms6lzqHOkc6jLCDOlM6ZzpHOms6fzqDOnyDOnM6RzpjOoc6RzprOmc6fzqUgzprOlc6hzprOpc6hzpHOoywgzpTOmc6RzqDOm86fIM6czpHOmM6hzpHOms6Zzp/OpSDOms6VzqHOms6lzqHOkc6jLCDOlM6hzp/Oo86VzqHOlyDOms6VzqHOms6lzqHOkc6jLCDOlc6SzqHOn86gzp/Opc6bzp/OmSDOms6VzqHOms6lzqHOkc6jLCDOlc6gzpnOo86azpXOqM6XIM6azpXOoc6azqXOoc6RzqMsIM6VzqHOlc6ZzprOn86lzqPOo86RIM6dzpfOo86fzqMgzprOlc6hzprOpc6hzpHOoywgzpXOoc6ZzpLOkSDOms6VzqHOms6lzqHOkc6jLCDOlc6hzpzOn86dzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOl86czpXOoc6fzpvOmc6RIM6azpXOoc6azqXOoc6RzqMsIM6azpHOks6RzpvOm86VzqHOkc6Zzp3OkSDOms6VzqHOms6lzqHOkc6jLCDOms6RzpvOkc6czpkgzprOlc6hzprOpc6hzpHOoywgzprOkc6dzpHOms6RzpTOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6azpHOnc6RzpvOmSDOms6VzqHOms6lzqHOkc6jLCDOms6Rzp3On86dzpkgzprOlc6hzprOpc6hzpHOoywgzprOkc6hzp3Omc6RzqHOl86jIM6azpXOoc6azqXOoc6RzqMsIM6azpHOoc6lzqnOpM6ZzprOnyDOms6VzqHOms6lzqHOkc6jLCDOms6RzqPOo86Zzp/OoM6XIM6azpXOoc6azqXOoc6RzqMsIM6azpHOpM6RzpLOn86bzp/OoyDOms6VzqHOms6lzqHOkc6jLCDOms6RzqTOqSDOoM6VzqHOmc6YzpXOmc6RIM6azpXOoc6azqXOoc6RzqMsIM6azpXOm86bzpnOkSDOms6VzqHOms6lzqHOkc6jLCDOms6Vzp3OpM6hzqnOnM6RIM6azpXOoc6azqXOoc6RzqMsIM6azpXOoc6azqXOoc6RIM6azpXOoc6azqXOoc6RzqMsIM6azp/Oms6azpnOnc6XIM6azpXOoc6azqXOoc6RzqMsIM6azp/Oms6azpnOnc6Zzp8gzprOlc6hzprOpc6hzpHOoywgzprOn86azprOmc6dzp/Ok86VzpnOkSDOms6VzqHOms6lzqHOkc6jLCDOms6fzprOms6fzprOpc6bzpHOoyDOms6VzqHOms6lzqHOkc6jLCDOms6fzpzOoM6ZzqTOo86ZIM6azpXOoc6azqXOoc6RzqMsIM6azp/Onc6kzp/Oms6RzpvOmSDOms6VzqHOms6lzqHOkc6jLCDOms6fzqXOm86fzqXOoc6RIM6azpXOoc6azqXOoc6RzqMsIM6azp/Opc6hzpHOnM6RzpTOmc6kzpnOms6RIM6azpXOoc6azqXOoc6RzqMsIM6azp/Opc6hzprOn86lzpvOkc6ZzpnOms6RIM6azpXOoc6azqXOoc6RzqMsIM6azqHOlc6czpnOmM6RzqMgzprOlc6hzprOpc6hzpHOoywgzprOpc6hzpEgzqfOoc6lzqPOmc6azp/OpSDOms6VzqHOms6lzqHOkc6jLCDOm86RzpbOkc6hzpHOpM6ZzprOkSDOms6VzqHOms6lzqHOkc6jLCDOm86RzpbOkc6hzpXOpM6fIM6azpXOoc6azqXOoc6RzqMsIM6bzpHOpc6azpkgzprOlc6hzprOpc6hzpHOoywgzpvOmc6YzpnOkc6jzpzOlc6dzp/OoyDOms6VzqHOms6lzqHOkc6jLCDOm86fzqXOpM6jzpXOoyDOms6VzqHOms6lzqHOkc6jLCDOnM6RzpPOkc6hzpnOms6RIM6azpXOoc6azqXOoc6RzqMsIM6czpHOmM6hzpHOms6ZIM6dzpfOo86fzqMgzprOlc6hzprOpc6hzpHOoywgzpzOkc6dzpTOn86lzprOmSDOms6VzqHOms6lzqHOkc6jLCDOnM6RzqHOnM6RzqHOnyDOms6VzqHOms6lzqHOkc6jLCDOnM6VzpPOk86fzqXOm86RzqMgzprOlc6hzprOpc6hzpHOoywgzpzOn86dzpcgzqXOoM6VzqHOkc6TzpnOkc6jIM6YzpXOn86kzp/Oms6fzqUgzpzOpc6hzqTOmc6UzpnOqc6dIM6azpXOoc6azqXOoc6RzqMsIM6czqDOkc6hzpzOoM6RzqTOmSDOms6VzqHOms6lzqHOkc6jLCDOnc6XzqPOkc6azpkgzprOlc6hzprOpc6hzpHOoywgzp/OmM6pzp3On86ZIM6dzpfOo86fzqMgzprOlc6hzprOpc6hzpHOoywgzp/OnM6RzpvOlyDOms6VzqHOms6lzqHOkc6jLCDOoM6VzpvOlc6azpHOoyDOms6VzqHOms6lzqHOkc6jLCDOoM6VzpvOlc6azpfOpM6fIM6azpXOoc6azqXOoc6RzqMsIM6gzpXOoc6RzpzOkSDOms6VzqHOms6lzqHOkc6jLCDOoM6VzqHOmc6YzpXOmc6RIM6azpXOoc6azqXOoc6RzqMsIM6gzpXOoc6ZzqPOpM6VzqHOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6gzpXOoc6fzqXOm86Zzp/OnSDOms6VzqHOms6lzqHOkc6jLCDOoM6VzqTOkc6bzpXOmc6RIM6azpXOoc6azqXOoc6RzqMsIM6gzpfOk86XIM6azpXOoc6azqXOoc6RzqMsIM6gzpnOmM6fzqMgzprOlc6hzprOpc6hzpHOoywgzqDOm86RzpPOmc6RIM6azpXOoc6azqXOoc6RzqMsIM6gzpvOkc6azqnOpM6fIM6azpXOoc6azqXOoc6RzqMsIM6gzpvOkc6kzpXOmc6RIM6azpXOoc6azqXOoc6RzqMsIM6gzp/OlM6fzpvOkc6azprOn86jIM6azpXOoc6azqXOoc6RzqMsIM6gzp/Onc6kzpnOms6fzp3Ol86jzpkgzprOlc6hzprOpc6hzpHOoywgzqDOn86hzqTOkSDOms6VzqHOms6lzqHOkc6jLCDOoM6fzqTOkc6czp/OoyDOms6VzqHOms6lzqHOkc6jLCDOoM6hzpnOps6kzpnOkc6kzpnOms6RIM6azpXOoc6azqXOoc6RzqMsIM6gzqTOpc6nzpnOkSDOnc6XzqPOn86jIM6azpXOoc6azqXOoc6RzqMsIM6hzpHOp86XIM6azpXOoc6azqXOoc6RzqMsIM6hzpnOm86ZzpHOpM6ZzprOkSDOms6VzqHOms6lzqHOkc6jLCDOoc6fzqUgzprOlc6hzprOpc6hzpHOoywgzqPOkc6dzqTOkSDOms6VzqHOms6lzqHOkc6jLCDOo86RzqHOkc6azpfOnc6RzqTOmc6azpEgzprOlc6hzprOpc6hzpHOoywgzqPOk86fzpzOoM6fzqUgzprOlc6hzprOpc6hzpHOoywgzqPOk86fzqXOoc6RzpTOlc6jIM6azpXOoc6azqXOoc6RzqMsIM6jzqDOkc6hzqTOpc6bzpHOoyDOms6VzqHOms6lzqHOkc6jLCDOo86kzqHOmc6dzqXOm86RzqMgzprOlc6hzprOpc6hzpHOoywgzqTOlc6czqDOm86fzp3OmSDOms6VzqHOms6lzqHOkc6jLCDOpM6WzpHOks6hzp/OoyDOms6VzqHOms6lzqHOkc6jLCDOpM6hzpHOp86VzpnOkSDOnM6RzpjOoc6RzprOmc6fzqUgzprOlc6hzprOpc6hzpHOoywgzqTOoc6ZzprOm86Zzp3OnyDOms6VzqHOms6lzqHOkc6jLCDOpM6hzpnOnM6fzpTOmSDOms6VzqHOms6lzqHOkc6jLCDOpM6hzpnOpM6jzpnOnyDOms6VzqHOms6lzqHOkc6jLCDOpM6jzpHOoc6fzqUgzprOlc6hzprOpc6hzpHOoywgzqbOn86lzqHOnc6ZIM6azpXOoc6azqXOoc6RzqMsIM6ozpHOp86dzpnOkSDOms6VzqHOms6lzqHOkc6jLCDOqM6lzpvOm86fzqMgzpTOpc6fIM6azpXOoc6azqXOoc6RzqMsIM6ozqXOm86bzp/OoyDOlc6dzpEgzprOlc6hzprOpc6hzpHOoycsIFByZWZlY3R1cmU6ICfOms6tz4HOus+Fz4HOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyODA4MCcsIEFyZWE6ICfOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpPOoc6ZzpbOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpTOmc6TzpHOm86VzqTOnyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOls6VzqHOks6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOms6RzqHOkc6Szp/OnM6lzpvOn86jIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6azpHOpM6RzqDOn86UzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6azp/Opc6bzp/Opc6hzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6gzp/Opc6bzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6gzqXOoc6TzpkgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzqPOkc6czpcgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzqTOls6Rzp3Olc6kzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6kzqPOkc6azpHOoc6ZzqPOmc6Rzp3OnyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOp86RzpvOmc6pzqTOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOms61z4bOsc67zrvOt869zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyODA4MScsIEFyZWE6ICfOkc6TzpnOkSDOlc6lzqbOl86czpnOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOkc6TzpnOkSDOo86fzqbOmc6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6Rzp3OpM6ZzqDOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpLOkc6bzpnOkc6dzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6SzpHOo86ZzpvOn86gzp/Opc6bzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6TzpXOqc6hzpPOkc6azpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6UzpXOnc6UzqHOmc6dzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6UzpnOks6RzqHOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpTOoc6RzprOn86gzp/Opc6bzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6azpHOm86fzpPOl86hzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOms6fzpzOmc6kzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6bzpHOnM6gzqHOmc6dzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOm86fzqXOms6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOnM6RzprOoc6ZzqnOpM6ZzprOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOnM6fzpTOmc6fIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6dzpXOn86nzqnOoc6ZIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6ezpfOoc6fzqDOn86kzpHOnM6fzqMgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzqDOlc6kzpHOm86RzqMgzp3Ol86jzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOoM6ZzqPOpM6hzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOoM6fzqTOkc6czpnOkc6dzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6gzqHOkc6jzp8gzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzqPOn86mzpnOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOo86pzqHOn86jIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6mzpXOoc6Vzp3OpM6Zzp3Okc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzqbOmc6bzpnOoM6gzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86azrXPhs6xzrvOu863zr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI4MDg0JywgQXJlYTogJ86RzpPOmc6RIM6ZzpXOoc6fzqXOo86RzpvOl86cIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6RzpPOoc6ZzpvOmc6RzqMgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpHOnc6kzpnOoM6RzqTOkSDOlc6hzpnOo86fzqUgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpHOo86kzpXOoc6ZzqMgzp3Ol86jzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOks6Vzp3OpM6fzqXOoc6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOks6ZzpPOm86ZIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6TzpXOoc6czpXOnc6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOlc6lzqHOlc6kzpcgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpbOkc6czqDOlc6bzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6azpHOpM6jzpHOoc6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOm86RzpLOqc6dzpnOms6VzqMgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpzOkc6TzpPOkc6dzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOnM6RzqHOms6Rzp3OpM6pzp3Okc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpzOkc6hzprOn86lzpvOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpzOkc6kzqPOn86lzprOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpzOoM6RzqHOls6fzqXOms6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOo86kzpXOm86ZzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6kzpbOkc6czpHOoc6VzpvOm86RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOpM6fzqXOm86ZzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6kzqPOlc6bzpXOnc6kzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6mzpnOo86azpHOoc6Uzp8gzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzqfOkc6bzpnOms6VzqHOlyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOqM6ZzpvOmc6YzqHOmc6RzqMgzprOlc6mzpHOm86bzpfOnc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOms61z4bOsc67zrvOt869zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyODA4NicsIEFyZWE6ICfOkc6TzpnOkSDOlc6ZzqHOl86dzpcgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpHOo86gzqHOn86TzpXOoc6RzprOkc6jIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6czp/Onc6XIM6lzqDOlc6hzpHOk86ZzpHOoyDOmM6Vzp/OpM6fzprOn86lIM6RzqTOoc6fzqUgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzqDOn86hzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOpM6WzpHOnc6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86azrXPhs6xzrvOu863zr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI4MTAwJywgQXJlYTogJ86RzpPOmc6fzpkgzpHOoM6fzqPOpM6fzpvOn86ZIM6SzpHOm86jzpHOnM6RzqTOqc6dIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6RzpPOmc6fzqMgzpXOm86VzqXOmM6VzqHOmc6fzqMgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpHOk86azqnOnc6RzqMgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpHOoc6Tzp/Oo86kzp/Om86ZIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6SzpHOm86jzpHOnM6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOlM6RzqXOk86RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOlM6VzpzOn86lzqTOo86Rzp3OpM6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOlM6ZzpvOmc6dzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6UzqHOkc6gzpHOnc6fIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6VzqDOkc6dzqnOp86pzqHOmSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOls6VzqHOks6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOls6fzpvOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOms6RzqHOlM6RzprOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzprOn86azp/Om86RzqTOkSDOkc6hzpPOn86jzqTOn86bzpnOn86lIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6azp/OnM6gzp/OmM6VzprOoc6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOms6fzqXOm86fzqXOnM6ZIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6azp/Opc6hzp/Opc6azpvOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpvOkc6azpfOmM6hzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpvOkc6jzqPOlyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOm86fzpPOkc6hzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6czpXOnc6VzpPOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpzOlc6kzpHOns6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOnM6Xzp3Omc6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6czpnOpM6RzprOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpzOmc6nzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6czp/Onc6XIM6RzpPOmc6fzqUgzpPOlc6hzpHOo86ZzpzOn86lIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6dzqXOps6Zzp8gzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzp/OnM6RzpvOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOoM6bzpHOpM6lzqMgzpPOmc6RzpvOn86jIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6gzqHOn86azp/OoM6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOoc6RzpbOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzqHOmc6WzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzqPOks6fzqHOqc6dzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6kzqHOqc6ZzpHOnc6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOps6RzqHOkc6azpvOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzqbOkc6hzqPOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOps6hzpHOk86azpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzprOtc+GzrHOu867zrfOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjgyMDAnLCBBcmVhOiAnzpHOk86ZzpEgzpjOlc6azpvOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOkc6TzpnOn86jIM6SzpHOo86ZzpvOlc6Zzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6gzpHOm86XzqMgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpHOmM6VzqHOkc6jIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6SzpHOoc6UzpnOkc6dzp/OmSDOnc6XzqPOn86jIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6SzpnOm86RzqTOqc6hzpnOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOks6bzqXOp86RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOks6fzpLOpc6azpXOoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOks6fzqXOnc6Zzp8gzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpTOkc6czp/Opc6bzpnOkc6dzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6UzpXOm86RzqDOn86hzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOlM6VzpvOm86RzqDOn86hzqTOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpTOlc6czpHOpM6fzqHOkc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzprOkc6bzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6azpHOnM6Zzp3Okc6hzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6azpHOpM6VzqHOlc6bzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6azp/Onc6kzp/Ok86Vzp3Okc6UzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzprOn86lzpLOkc6bzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6azp/Opc6czp/OoM6VzqTOoc6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6bzpXOoM6VzpTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOm86Xzp7On86lzqHOmSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOm86ZzpLOkc6UzpkgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpvOn86TzpPOn86jIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6bzp/Opc6azpXOoc6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOnM6Rzp3OpM6WzpHOks6Zzp3Okc6kzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpzOlc6TzpEgzpvOkc6azp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOnM6ZzqfOkc6bzpnOpM6jzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6czp/Onc6XIM6lzqDOlc6hzpHOk86ZzpHOoyDOmM6Vzp/OpM6fzprOn86lIM6azpfOoM6fzqXOoc6RzpnOqc6dIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6czp/Onc6fzqDOn86bzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6ezpkgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzqDOkc6hzpnOo86RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOoM6VzqTOkc6dzp/OmSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOoc6ZzqbOmc6fIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6jzprOmc6dzpXOkc6jIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6jzp/Opc6bzpvOkc6hzp/OmSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOpM6lzqDOkc6bzpTOkc6kzp8gzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzqbOkc6SzpHOpM6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOp86RzpLOlM6RzqTOkSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOp86RzpLOoc6ZzpHOpM6RIM6azpXOps6RzpvOm86Xzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzprOtc+GzrHOu867zrfOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjgzMDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOkc6VzqTOn86jIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6Rzp3Oqc6TzpcgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpHOoc6azp/Opc6Uzpkgzp3Ol86jzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOkc6kzp/Oms6fzqMgzp3Ol86jzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOks6hzp/OnM6pzp3Okc6jIM6dzpfOo86fzqMgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpTOoc6RzprOn86dzpXOoc6RIM6dzpfOo86fzqMgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpXOns6pzpPOlyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOmc6YzpHOms6XIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6azpHOoc6bzp/Onc6XzqPOmSDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOms6Zzp/Onc6ZIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6bzpHOls6RzqHOlc6kzp8gzp3Ol86jzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOm86VzqXOms6XIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6bzqXOk86ZzpEgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzpzOkc6azqHOlyDOnc6XzqPOn86jIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6czp/Onc6XIM6azpHOmM6RzqHOqc6dIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6fzp7Olc6ZzpEgzp3Ol86jzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOoM6VzqHOkc6nzqnOoc6ZIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6gzpvOkc6kzqHOlc6ZzpjOmc6RzqMgzprOlc6mzpHOm86bzpfOnc6ZzpHOoywgzqDOn86dzqTOmc6azp/OoyDOnc6XzqPOn86jIM6azpXOps6RzpvOm86Xzp3Omc6RzqMsIM6gzqHOn86SzpHOpM6Zzp8gzp3Ol86jzp/OoyDOms6VzqbOkc6bzpvOl86dzpnOkc6jLCDOps6hzpnOms6VzqMgzprOlc6mzpHOm86bzpfOnc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOms61z4bOsc67zrvOt869zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2MTAwMicsIEFyZWE6ICfOkc6TzpnOkSDOms6lzqHOmc6RzprOlyDOms6ZzpvOms6ZzqMsIM6VzpvOlc6lzpjOlc6hzp/Op86pzqHOmSDOms6ZzpvOms6ZzqMsIM6XzpvOmc6fzqbOqc6kzp8gzprOmc6bzprOmc6jLCDOms6RzpvOmc6dzpTOoc6ZzpEgzprOmc6bzprOmc6jLCDOms6fzqHOn86czpfOm86ZzpEgzprOmc6bzprOmc6jLCDOnM6VzpPOkc6bzpcgzqPOpM6VzqHOnc6RIM6azpnOm86azpnOoywgzpzOmc6nzpHOm86ZzqTOo86ZIM6azpnOm86azpnOoywgzqDOm86RzpPOmc6RIM6azpnOm86azpnOoyDOms6ZzpvOms6ZzqMsIM6gzpvOkc6TzpnOkSDOoM6RzpnOn86dzpnOkc6jIM6azpnOm86azpnOoywgzqPOn86lzpvOpM6fzpPOmc6Rzp3Onc6RzpnOmc6azpEgzprOmc6bzprOmc6jLCDOp86VzqHOo86fIM6azpnOm86azpnOoycsIFByZWZlY3R1cmU6ICfOms65zrvOus6vz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYxMDAzJywgQXJlYTogJ86RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOms6ZzpvOms6ZzqMsIM6RzpPOmc6fzqMgzqfOkc6hzpHOm86RzpzOoM6fzqMgzprOmc6bzprOmc6jLCDOkc6azpHOms6ZzpXOoyDOms6ZzpvOms6ZzqMsIM6RzprOoc6ZzqTOkc6jIM6azpnOm86azpnOoywgzpHOm86Vzp7Okc6dzpTOoc6RIM6azpnOm86azpnOoywgzpHOnM6RzqHOkc6dzqTOkSDOms6ZzpvOms6ZzqMsIM6Rzp3OqSDOo86fzqXOoc6czpXOnc6RIM6azpnOm86azpnOoywgzpTOn86ZzqHOkc6dzpcgzprOmc6bzprOmc6jLCDOlM6hzp/Oo86RzqTOnyDOms6ZzpvOms6ZzqMsIM6azpHOks6RzpvOm86RzqHOl86jIM6azpnOm86azpnOoywgzprOkc6bzpvOmc6hzqHOn86XIM6azpnOm86azpnOoywgzprOkc6kzqkgzqPOn86lzqHOnM6Vzp3OkSDOms6ZzpvOms6ZzqMsIM6azp/Ooc6lzqbOlyDOms6ZzpvOms6ZzqMsIM6czpnOms6hzp/Oks6hzqXOo86XIM6azpnOm86azpnOoywgzpzOn86lzqHOmc6VzqMgzprOmc6bzprOmc6jLCDOnM6lzqHOmc6fzqbOpc6kzp8gzprOmc6bzprOmc6jLCDOnc6Vzp8gzpzOpc6hzpnOn86mzqXOpM6fIM6azpnOm86azpnOoywgzqHOn86UzqnOnc6RzqMgzprOmc6bzprOmc6jLCDOo86kzpHOmM6czp/OoyDOnM6fzqXOoc6ZzqnOnSDOms6ZzpvOms6ZzqMsIM6jzqXOms6RzpzOmc6dzpXOkSDOms6ZzpvOms6ZzqMsIM6ozqXOp86fzpLOoc6lzqPOlyDOms6ZzpvOms6ZzqMnLCBQcmVmZWN0dXJlOiAnzprOuc67zrrOr8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2MTAwNCcsIEFyZWE6ICfOms6ZzpvOms6ZzqMgzprOmc6bzprOmc6jJywgUHJlZmVjdHVyZTogJ86azrnOu866zq/PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjEwMDcnLCBBcmVhOiAnzpXOpc6hzqnOoM6fzqMgzprOmc6bzprOmc6jJywgUHJlZmVjdHVyZTogJ86azrnOu866zq/PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjExMDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOkc6dzqTOqc6dzpnOn86jIM6azpnOm86azpnOoywgzpHOk86Zzp/OoyDOnM6RzqHOms6fzqMgzprOmc6bzprOmc6jLCDOkc6azqHOn86gzp/OpM6RzpzOmc6RIM6azpnOm86azpnOoywgzpHOnc6RzpLOoc6lzqTOnyDOms6ZzpvOms6ZzqMsIM6Rzp3OmM6fzqbOpc6kzp8gzprOmc6bzprOmc6jLCDOkc6dzqTOmc6Tzp/Onc6VzpnOkSDOms6ZzpvOms6ZzqMsIM6Rzp3OqSDOkc6gzp/Oo86kzp/Om86fzpkgzprOmc6bzprOmc6jLCDOkc6dzqkgzqDOn86kzpHOnM6ZzpEgzprOmc6bzprOmc6jLCDOkc6hzpPOpc6hzp/Opc6gzp/Om86XIM6azpnOm86azpnOoywgzpLOkc6gzqTOmc6jzqTOl86jIM6azpnOm86azpnOoywgzpPOkc6SzqHOkSDOms6ZzpvOms6ZzqMsIM6TzpHOm86bzpnOms6fzqMgzprOmc6bzprOmc6jLCDOlM6RzqbOnc6fzqfOqc6hzpkgzprOmc6bzprOmc6jLCDOlM6ZzqDOn86kzpHOnM6fzqMgzprOmc6bzprOmc6jLCDOlc6gzqTOkc6bzp/Ops6fzqMgzprOmc6bzprOmc6jLCDOlc6lzprOkc6hzqDOmc6RIM6azpnOm86azpnOoywgzpbOkc6nzpHOoc6RzqTOnyDOms6ZzpvOms6ZzqMsIM6XzpvOmc6fzpvOn86lzqPOpM6fIM6azpnOm86azpnOoywgzprOkc6bzp/Om86ZzpLOkc6Uzp8gzprOmc6bzprOmc6jLCDOms6RzpzOoM6Rzp3Ol86jIM6azpnOm86azpnOoywgzprOkc6jzqTOkc6dzpnOlc6jIM6azpnOm86azpnOoywgzprOkc6kzqkgzpHOoM6fzqPOpM6fzpvOn86ZIM6azpnOm86azpnOoywgzprOkc6kzqkgzqDOn86kzpHOnM6ZzpEgzprOmc6bzprOmc6jLCDOms6Vzp3OpM6hzpnOms6fIM6azpnOm86azpnOoywgzprOmc6bzprOmc6jIM6azpnOm86azpnOoywgzprOn86ZzpvOkc6UzpkgzprOmc6bzprOmc6jLCDOms6fzprOms6Zzp3Omc6RIM6azpnOm86azpnOoywgzprOn86bzqfOmc6UzpEgzprOmc6bzprOmc6jLCDOms6fzqHOqc6dzp/Opc6UzpEgzprOmc6bzprOmc6jLCDOms6hzpfOo86kzqnOnc6XIM6azpnOm86azpnOoywgzprOpc6hzpnOkc6azpHOmc6ZzprOkSDOms6ZzpvOms6ZzqMsIM6bzpHOn86UzpnOms6Xzp3OnyDOms6ZzpvOms6ZzqMsIM6bzpXOks6Vzp3OpM6fzqfOqc6hzpkgzprOmc6bzprOmc6jLCDOm86VzpnOqM6lzpTOoc6Zzp8gzprOmc6bzprOmc6jLCDOnM6Rzp3OlM6hzpXOoyDOms6ZzpvOms6ZzqMsIM6czpHOpc6hzp/Onc6VzqHOmSDOms6ZzpvOms6ZzqMsIM6czpHOpc6hzp/OoM6bzpHOk86ZzpEgzprOmc6bzprOmc6jLCDOnM6VzpPOkc6bzpcgzpLOoc6lzqPOlyDOms6ZzpvOms6ZzqMsIM6czpXOm86ZzqPOo86fzqXOoc6TzpXOmc6fIM6azpnOm86azpnOoywgzpzOlc6jzpnOkc6dzp8gzprOmc6bzprOmc6jLCDOnM6VzqPOn86ZIM6RzqDOn86jzqTOn86bzp/OmSDOms6ZzpvOms6ZzqMsIM6czpXOpM6RzpvOm86ZzprOnyDOms6ZzpvOms6ZzqMsIM6czpXOpM6Rzp7On86nzqnOoc6ZIM6azpnOm86azpnOoywgzpzOmc6azqHOn86azpHOnM6gzp/OoyDOms6ZzpvOms6ZzqMsIM6czp/Onc6fzpvOmc6YzpkgzprOmc6bzprOmc6jLCDOnM6gzpHOms6RzpnOmc6azpEgzprOmc6bzprOmc6jLCDOnM6lzpvOn86jIM6azpnOm86azpnOoywgzpzOpc6bzp/Op86pzqHOmSDOms6ZzpvOms6ZzqMsIM6dzpXOkSDOo86Rzp3OpM6RIM6azpnOm86azpnOoywgzp3Olc6fIM6RzpPOmc6fzp3Olc6hzpkgzprOmc6bzprOmc6jLCDOnc6Vzp8gzpPOpc6dzpHOmc6azp/Oms6RzqPOpM6hzp8gzprOmc6bzprOmc6jLCDOns6XzqHOn86SzqHOpc6jzpcgzprOmc6bzprOmc6jLCDOns6lzpvOn86azpXOoc6RzqTOlc6RIM6azpnOm86azpnOoywgzqDOkc6bzpHOmc6fIM6RzpPOmc6fzp3Olc6hzpkgzprOmc6bzprOmc6jLCDOoM6RzpvOkc6Zzp8gzpPOpc6dzpHOmc6azp/Oms6RzqPOpM6hzp8gzprOmc6bzprOmc6jLCDOoM6RzpvOkc6kzpnOkc6dzp8gzprOmc6bzprOmc6jLCDOoM6RzqHOn86nzpjOmc6fIM6azpnOm86azpnOoywgzqDOlc6UzpnOnc6fIM6azpnOm86azpnOoywgzqDOlc6hzpnOnc6Yzp/OoyDOms6ZzpvOms6ZzqMsIM6gzpXOoc6ZzqPOpM6VzqHOmSDOms6ZzpvOms6ZzqMsIM6gzpXOpM6hzpHOlM6VzqMgzprOmc6bzprOmc6jLCDOoM6ZzprOoc6fzpvOmc6czp3OlyDOms6ZzpvOms6ZzqMsIM6gzpvOkc6TzpnOn86nzqnOoc6ZIM6azpnOm86azpnOoywgzqDOn86dzqTOn86azpXOoc6RzqPOmc6RIM6azpnOm86azpnOoywgzqDOpc6hzpPOqc6kzp/OoyDOms6ZzpvOms6ZzqMsIM6jzpXOks6RzqPOpM6fIM6azpnOm86azpnOoywgzqPOpM6RzqXOoc6fzqfOqc6hzpkgzprOmc6bzprOmc6jLCDOpM6VzqHOoM6lzpvOm86fzqMgzprOmc6bzprOmc6jLCDOpM6hzpnOoM6fzqTOkc6czp/OoyDOms6ZzpvOms6ZzqMsIM6mzpHOnc6RzqHOmSDOms6ZzpvOms6ZzqMsIM6nzpXOmc6czpHOlM6Zzp8gzprOmc6bzprOmc6jLCDOp86hzqXOo86fzqDOlc6kzqHOkSDOms6ZzpvOms6ZzqMsIM6nzqnOoc6lzpPOmSDOms6ZzpvOms6ZzqMnLCBQcmVmZWN0dXJlOiAnzprOuc67zrrOr8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2MTIwMCcsIEFyZWE6ICfOkc6ezpnOn86nzqnOoc6ZIM6azpnOm86azpnOoywgzpHOo86gzqHOn86jIM6azpnOm86azpnOoywgzpLOkc6azp/Opc6mzpkgzprOmc6bzprOmc6jLCDOks6RzpvOpM6fzqXOlM6ZIM6azpnOm86azpnOoywgzpLOkc6mzpnOn86nzqnOoc6ZIM6azpnOm86azpnOoywgzpXOmc6hzpfOnc6ZzprOnyDOms6ZzpvOms6ZzqMsIM6VzqXOls6pzp3On86ZIM6azpnOm86azpnOoywgzprOkc6jzqTOoc6fIM6azpnOm86azpnOoywgzprOn86azpHOoc6kzpbOkSDOms6ZzpvOms6ZzqMsIM6azp/Ooc6pzp3OkSDOms6ZzpvOms6ZzqMsIM6azp/OpM6lzpvOmSDOms6ZzpvOms6ZzqMsIM6azp/Opc6bzpnOnc6RzpnOmc6azpEgzprOmc6bzprOmc6jLCDOm86RzqTOn86czpXOmc6fIM6azpnOm86azpnOoywgzpvOmc6czp3On86kzp/OoM6fzqMgzprOmc6bzprOmc6jLCDOnM6VzqTOkc6czp/Ooc6mzqnOo86XIM6azpnOm86azpnOoywgzpzOmc6azqHOnyDOlM6RzqPOn86jIM6azpnOm86azpnOoywgzp3Olc6RIM6azpHOks6RzpvOkSDOms6ZzpvOms6ZzqMsIM6dzpXOnyDOo86lzqHOkc6azpkgzprOmc6bzprOmc6jLCDOns6XzqHOn86bzpHOms6azp/OoyDOms6ZzpvOms6ZzqMsIM6gzpXOpc6azp/OlM6RzqPOn86jIM6azpnOm86azpnOoywgzqDOm86RzqTOkc6dzpnOkSDOlc6lzpbOqc6dzqnOnSDOms6ZzpvOms6ZzqMsIM6gzpvOkc6kzpHOnc6ZzpXOoyDOms6ZzpvOms6ZzqMsIM6gzp/Om86lzprOkc6jzqTOoc6fIM6azpnOm86azpnOoywgzqDOn86dzqTOn86XzqHOkc6azpvOlc6ZzpEgzprOmc6bzprOmc6jLCDOo86ZzqTOkc6hzpnOkSDOms6ZzpvOms6ZzqMsIM6nzpXOoc6jzp/OpM6fzqDOmSDOms6ZzpvOms6ZzqMsIM6nzqHOpc6jzp/Oms6RzpzOoM6fzqMgzprOmc6bzprOmc6jJywgUHJlZmVjdHVyZTogJ86azrnOu866zq/PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjEzMDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOoM6VzqTOoc6fzqMgzprOmc6bzprOmc6jLCDOk86VzqHOkc6azqnOnc6RzqMgzprOmc6bzprOmc6jLCDOk86fzqXOnM6Vzp3Omc6jzqPOkSDOms6ZzpvOms6ZzqMsIM6TzqHOmc6SzpEgzprOmc6bzprOmc6jLCDOms6RzqHOoM6XIM6azpnOm86azpnOoywgzprOkc6jzqTOkc6dzpXOoc6XIM6azpnOm86azpnOoywgzpvOmc6SzpHOlM6ZzpEgzprOmc6bzprOmc6jLCDOn86czpHOm86fIM6azpnOm86azpnOoywgzqDOlc6dzqTOkc6bzp/Ops6fzqMgzprOmc6bzprOmc6jLCDOps6ZzpvOpc6hzpnOkSDOms6ZzpvOms6ZzqMnLCBQcmVmZWN0dXJlOiAnzprOuc67zrrOr8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1MDAwMScsIEFyZWE6ICfOkc6XzpTOn86dzp/Op86pzqHOmSDOms6fzpbOkc6dzpfOoywgzpHOm86ZzpHOms6czqnOnc6RzqMgzprOn86WzpHOnc6XzqMsIM6Rzp7Omc6fzprOkc6jzqTOoc6fIM6azp/Ols6Rzp3Ol86jLCDOkc6jzqDOoc6fzqXOm86RIM6azp/Ols6Rzp3Ol86jLCDOks6VzpvOkc6dzpnOlM6ZzpEgzprOn86WzpHOnc6XzqMsIM6azpHOm86bzpnOo86kzqHOkc6kzpkgzprOn86WzpHOnc6XzqMsIM6azpvOl86czpEgzprOn86WzpHOnc6XzqMsIM6azqHOpc6fzp3Olc6hzpkgzprOn86WzpHOnc6XzqMsIM6czpXOm86ZzpTOn86dzpkgzprOn86WzpHOnc6XzqMsIM6czpXOo86fzpvOn86TzpPOn86jIM6azp/Ols6Rzp3Ol86jLCDOnM6fzpvOn86nzpEgzprOn86WzpHOnc6XzqMsIM6dzpXOkc6gzp/Om86XIM6azp/Ols6Rzp3Ol86jLCDOoM6Rzp3Okc6TzpnOkSDOp86fzqHOl86Tzp/OpSDOms6fzpbOkc6dzpfOoywgzqDOkc6dzpHOoc6VzqTOlyDOms6fzpbOkc6dzpfOoywgzqDOlc6gzp/Onc6ZzpEgzprOn86WzpHOnc6XzqMsIM6gzpXOoc6ZzqPOpM6VzqHOkSDOms6fzpbOkc6dzpfOoywgzqDOm86RzqTOkc6dzpnOkSDOms6fzpbOkc6dzpfOoywgzqDOn86bzqXOm86RzprOms6fIM6azp/Ols6Rzp3Ol86jLCDOoM6lzpvOqc6hzpkgzprOn86WzpHOnc6XzqMsIM6jzpfOnM6Rzp3OpM6hzp8gzprOn86WzpHOnc6XzqMsIM6jzqTOlc6hzp3OkSDOms6fzpbOkc6dzpfOoywgzqTOoc6RzqDOlc6WzpnOpM6jzpEgzprOn86WzpHOnc6XzqMsIM6nzpXOmc6czpXOoc6Zzp3OnyDOms6fzpbOkc6dzpfOoywgzqfOn86hzpfOk86fzqMgzprOn86WzpHOnc6XzqMnLCBQcmVmZWN0dXJlOiAnzprOv862zqzOvc63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzUwMDAyJywgQXJlYTogJ86RzpPOmc6RIM6jzqnOpM6XzqHOkSDOms6fzpbOkc6dzpfOoywgzpHOk86ZzpHOo86czpEgzprOn86WzpHOnc6XzqMsIM6RzpPOmc6fzpkgzpHOnc6RzqHOk86lzqHOn86ZIM6azp/Ols6Rzp3Ol86jLCDOkc6TzpnOn86jIM6YzpXOn86UzqnOoc6fzqMgzprOn86WzpHOnc6XzqMsIM6Rzp3OmM6fzqXOo86RIM6azp/Ols6Rzp3Ol86jLCDOkc6dzpjOn86nzqnOoc6ZIM6azp/Ols6Rzp3Ol86jLCDOkc6gzpnOlM6VzpEgzprOn86WzpHOnc6XzqMsIM6RzqfOm86RzpTOmc6RIM6azp/Ols6Rzp3Ol86jLCDOks6fzqXOp86pzqHOmc6dzpEgzprOn86WzpHOnc6XzqMsIM6SzqHOn86dzqTOlyDOms6fzpbOkc6dzpfOoywgzpPOm86lzprOn86azpXOoc6RzqPOlc6RIM6azp/Ols6Rzp3Ol86jLCDOlM6RzpzOkc6jzprOl86dzpnOkSDOms6fzpbOkc6dzpfOoywgzpTOkc6mzp3OlyDOms6fzpbOkc6dzpfOoywgzpTOmc6nzpXOmc6czpHOoc6hzp8gzprOn86WzpHOnc6XzqMsIM6UzqHOkc6TzpHOo86ZzpEgzprOn86WzpHOnc6XzqMsIM6WzqnOnc6XIM6azp/Ols6Rzp3Ol86jLCDOms6bzpXOmc6jzqnOoc6VzpnOkSDOms6fzpbOkc6dzpfOoywgzprOn86ZzpvOkc6UzpEgzpHOk86ZzpHOo86czpHOpM6fzqMgzprOn86WzpHOnc6XzqMsIM6azp/Ooc6lzqbOlyDOms6fzpbOkc6dzpfOoywgzprOoc6ZzpzOl86dzpnOnyDOms6fzpbOkc6dzpfOoywgzpvOlc6lzprOkc6UzpkgzprOn86WzpHOnc6XzqMsIM6bzpXOpc6azpcgzprOn86WzpHOnc6XzqMsIM6bzpXOpc6azp/OmM6VzpEgzprOn86WzpHOnc6XzqMsIM6bzpnOms6dzpHOlM6VzqMgzprOn86WzpHOnc6XzqMsIM6bzp/Opc6SzqHOlyDOms6fzpbOkc6dzpfOoywgzpvOn86lzprOn86czpkgzprOn86WzpHOnc6XzqMsIM6czp/Ooc6mzpcgzprOn86WzpHOnc6XzqMsIM6fzpzOkc6bzpcgzprOn86WzpHOnc6XzqMsIM6gzpHOoc6fzqfOmM6Zzp8gzprOn86WzpHOnc6XzqMsIM6gzpvOkc6azpnOlM6RIM6azp/Ols6Rzp3Ol86jLCDOoM6fzpvOpc6azpHOo86kzpHOnc6fIM6azp/Ols6Rzp3Ol86jLCDOoc6fzpTOn86nzqnOoc6ZIM6azp/Ols6Rzp3Ol86jLCDOoc6fzprOkc6jzqTOoc6fIM6azp/Ols6Rzp3Ol86jLCDOo86kzpHOpc6hzp/OlM6hzp/OnM6ZIM6azp/Ols6Rzp3Ol86jLCDOpM6hzpnOkc6UzpEgzprOn86WzpHOnc6XzqMsIM6kzqPOn86kzpnOm86ZIM6azp/Ols6Rzp3Ol86jLCDOps6lzqTOqc6azpnOnyDOms6fzpbOkc6dzpfOoywgzqfOoc6lzqPOkc6lzpPOlyDOms6fzpbOkc6dzpfOoycsIFByZWZlY3R1cmU6ICfOms6/zrbOrM69zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTAwMDMnLCBBcmVhOiAnzpTOoc6lzp/Oks6fzqXOnc6fIM6azp/Ols6Rzp3Ol86jLCDOlc6hzpHOpM6lzqHOkSDOms6fzpbOkc6dzpfOoywgzp3Okc6czpHOpM6RIM6azp/Ols6Rzp3Ol86jLCDOoM6VzpvOlc6azpHOnc6fzqMgzprOn86WzpHOnc6XzqMsIM6jzpnOo86Rzp3Omc6fIM6azp/Ols6Rzp3Ol86jJywgUHJlZmVjdHVyZTogJ86azr/Ots6szr3Ot8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1MDAwNCcsIEFyZWE6ICfOkc6ZzpHOnc6XIM6azp/Ols6Rzp3Ol86jLCDOms6VzqHOkc6jzpXOkSDOms6fzpbOkc6dzpfOoywgzprOpM6Vzp3OmSDOms6fzpbOkc6dzpfOoywgzqfOoc6pzpzOmc6fIM6azp/Ols6Rzp3Ol86jJywgUHJlZmVjdHVyZTogJ86azr/Ots6szr3Ot8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1MDAwNScsIEFyZWE6ICfOkc6dzpHOoc6hzpHOp86XIM6azp/Ols6Rzp3Ol86jLCDOks6RzqHOmc6azp8gzprOn86WzpHOnc6XzqMsIM6VzpzOoM6fzqHOmc6fIM6azp/Ols6Rzp3Ol86jLCDOms6hzqXOn86SzqHOpc6jzpcgzprOn86WzpHOnc6XzqMsIM6czpfOm86fzqfOqc6hzpkgzprOn86WzpHOnc6XzqMsIM6mzp/Opc6mzpHOoyDOms6fzpbOkc6dzpfOoycsIFByZWZlY3R1cmU6ICfOms6/zrbOrM69zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTAwMDcnLCBBcmVhOiAnzpLOpc6Yzp/OoyDOms6fzpbOkc6dzpfOoywgzpTOkc6jzqXOm86bzpnOnyDOk86hzpXOks6Vzp3Oqc6dLCDOlM6ZzpvOn86mzp8gzprOn86WzpHOnc6XzqMsIM6VzqDOpM6RzqfOqc6hzpkgzprOkc6jzqTOn86hzpnOkc6jLCDOoM6Vzp3OpM6RzpvOn86mzp/OoyDOms6fzpbOkc6dzpfOoywgzqDOlc6lzprOn86mzqXOpM6fIM6azpHOo86kzp/Ooc6ZzpHOoywgzqfOoc6lzqPOlyDOms6RzqPOpM6fzqHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzprOv862zqzOvc63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzUwMDEwJywgQXJlYTogJ86RzpzOpc6TzpTOkc6bzpnOkSDOms6fzpbOkc6dzpfOoywgzpHOnc6RzqTOn86bzpcgzprOn86WzpHOnc6XzqMsIM6Rzp3OqSDOms6pzpzOlyDOms6fzpbOkc6dzpfOoywgzprOkc6ZzqPOkc6hzpXOmc6RIM6azp/Ols6Rzp3Ol86jLCDOms6RzqTOqSDOms6pzpzOlyDOms6fzpbOkc6dzpfOoywgzprOl86gzp/OoyDOms6fzpbOkc6dzpfOoywgzprOn86dzqTOn86Szp/Opc6dzpkgzprOn86WzpHOnc6XzqMsIM6azqHOn86azp/OoyDOms6fzpbOkc6dzpfOoywgzpzOl86bzpXOkSDOms6fzpbOkc6dzpfOoywgzqDOpc6hzpPOn86jIM6azp/Ols6Rzp3Ol86jLCDOo86gzpHOoc6kzp8gzprOn86WzpHOnc6XzqMsIM6jzqTOkc6lzqHOqc6kzpcgzprOn86WzpHOnc6XzqMnLCBQcmVmZWN0dXJlOiAnzprOv862zqzOvc63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzUwMTAwJywgQXJlYTogJ86RzpPOmc6RIM6azqXOoc6ZzpHOms6XIM6azp/Ols6Rzp3Ol86jIM6azp/Ols6Rzp3Ol86jLCDOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzprOn86WzpHOnc6XzqMsIM6RzpPOmc6fIM6gzp3Olc6lzpzOkSDOms6fzpbOkc6dzpfOoywgzpHOk86Zzp/OmSDOmM6Vzp/OlM6pzqHOn86ZIM6gzp/Om86lzpzOpc6bzp/OpSDOms6fzpbOkc6dzpfOoywgzpHOk86Zzp/OoyDOlM6XzpzOl86kzqHOmc6fzqMgzprOn86WzpHOnc6XzqMsIM6RzpPOmc6fzqMgzqfOkc6hzpHOm86RzpzOoM6fzqMgzprOn86WzpHOnc6XzqMsIM6RzpXOoc6fzpTOoc6fzpzOmc6fIM6azp/Ols6Rzp3Ol86jLCDOkc6azqHOmc6dzpcgzprOn86WzpHOnc6XzqMsIM6RzprOoc6ZzqTOkc6jIM6azp/Ols6Rzp3Ol86jLCDOkc6bzqnOnc6RzprOmc6RIM6azp/Ols6Rzp3Ol86jLCDOkc6dzpHOpM6fzpvOmc6azp8gzprOkc6gzp3On86nzqnOoc6Zzp/OpSDOms6fzpbOkc6dzpfOoywgzpHOnc6Yzp/OpM6fzqDOn86jIM6azp/Ols6Rzp3Ol86jLCDOkc6hzpPOmc6bzp/OoyDOms6fzpbOkc6dzpfOoywgzpHOpc6TzpcgzprOn86WzpHOnc6XzqMsIM6RzqXOoc6RIM6azp/Ols6Rzp3Ol86jLCDOks6RzpjOpc6bzpHOms6azp/OoyDOms6fzpbOkc6dzpfOoywgzpLOkc6kzpXOoc6fIM6azp/Ols6Rzp3Ol86jLCDOks6fzqPOms6fzqfOqc6hzpkgzprOn86WzpHOnc6XzqMsIM6TzpHOm86Rzp3Omc6fIM6azp/Ols6Rzp3Ol86jLCDOk86XzqHOn86azp/OnM6VzpnOnyDOms6fzpbOkc6dzpfOoywgzpTOoc6VzqDOkc6dzp8gzprOn86WzpHOnc6XzqMsIM6Vzp7On86nzpcgzprOn86WzpHOnc6XzqMsIM6WzqnOn86Uzp/Op86fzqMgzqDOl86TzpcgzprOn86WzpHOnc6XzqMsIM6YzqXOnM6RzqHOmc6RIM6azp/Ols6Rzp3Ol86jLCDOmc6VzqHOkSDOnM6fzp3OlyDOkc6dzpHOm86XzqjOlc6pzqMgzprOn86WzpHOnc6XzqMsIM6ZzpzOlc6hzpEgzprOn86WzpHOnc6XzqMsIM6azpHOm86RzpzOmc6RIM6azp/Ols6Rzp3Ol86jLCDOms6RzqDOnc6fzqfOqc6hzpkgzprOn86WzpHOnc6XzqMsIM6azpHOoc6lzpTOmc6kzqPOkSDOms6fzpbOkc6dzpfOoywgzprOl86gzpHOoc6Zzp8gzprOn86WzpHOnc6XzqMsIM6azp/Ols6Rzp3OlyDOms6fzpbOkc6dzpfOoywgzprOn86ZzpvOkSDOms6fzpbOkc6dzpfOoywgzprOn86ZzpvOkc6UzpEgzprOn86WzpHOnc6XzqMgzprOn86WzpHOnc6XzqMsIM6azp/Oms6azpnOnc6RzqHOkc6jIM6azp/Ols6Rzp3Ol86jLCDOms6fzqXOks6fzqXOms6bzpnOkSDOms6fzpbOkc6dzpfOoywgzprOoc6VzpzOkc6jzqTOlyDOms6fzpbOkc6dzpfOoywgzpvOlc6SzpXOnc6kzpfOoyDOms6fzpbOkc6dzpfOoywgzpvOlc6lzprOkc6hzpEgzprOn86WzpHOnc6XzqMsIM6bzpXOpc6azp/Oks6hzqXOo86XIM6azp/Ols6Rzp3Ol86jLCDOm86VzqXOms6fzqDOl86TzpcgzprOn86WzpHOnc6XzqMsIM6bzpnOks6VzqHOkSDOms6fzpbOkc6dzpfOoywgzpvOpc6TzpXOoc6XIM6azp/Ols6Rzp3Ol86jLCDOnM6VzpvOmc6jzqPOmc6RIM6azp/Ols6Rzp3Ol86jLCDOnM6VzqPOmc6Rzp3OlyDOms6fzpbOkc6dzpfOoywgzpzOlc6kzpHOnM6fzqHOps6pzqPOlyDOms6fzpbOkc6dzpfOoywgzp3Olc6RIM6dzpnOms6fzqDOn86bzpcgzprOn86WzpHOnc6XzqMsIM6dzpXOkSDOp86RzqHOkc6lzpPOlyDOms6fzpbOkc6dzpfOoywgzp3Olc6hzpHOmc6UzpEgzprOn86WzpHOnc6XzqMsIM6ezpfOoc6fzpvOmc6czp3OlyDOms6fzpbOkc6dzpfOoywgzp/Omc6dzp/OlyDOms6fzpbOkc6dzpfOoywgzqDOlc6kzqHOkc6dzpEgzprOn86WzpHOnc6XzqMsIM6gzp/Om86lzpzOpc6bzp/OoyDOms6fzpbOkc6dzpfOoywgzqDOoc6fzqbOl86kzpfOoyDOl86bzpnOkc6jIM6azp/Ols6Rzp3Ol86jLCDOoM6hzqnOpM6fzqfOqc6hzpkgzprOn86WzpHOnc6XzqMsIM6gzqTOlc6bzpXOkSDOlc6fzqHOlM6RzpnOkc6jIM6azp/Ols6Rzp3Ol86jLCDOoM6kzpXOm86VzpEgzprOn86WzpHOnc6XzqMgzprOn86WzpHOnc6XzqMsIM6hzp/OlM6ZzpHOnc6XIM6azp/Ols6Rzp3Ol86jLCDOoc6fzpTOmc6kzpfOoyDOms6fzpbOkc6dzpfOoywgzqHOpc6RzprOmSDOms6fzpbOkc6dzpfOoywgzqPOmc6UzpXOoc6RzqMgzprOn86WzpHOnc6XzqMsIM6jzprOkc6mzpcgzprOn86WzpHOnc6XzqMsIM6jzprOl86kzpcgzprOn86WzpHOnc6XzqMsIM6jzqDOmc6dzpHOoc6XzqMgKM6azpvOmc6dzpnOms6XKSDOms6fzpbOkc6dzpfOoywgzqPOp86fzpvOlc6jIM6fzpHOlc6UIM6azp/Ols6Rzp3Ol86jLCDOpM6VzqTOoc6RzpvOn86mzp/OoyDOms6fzpbOkc6dzpfOoywgzqTOo86VzpvOmc6azpHOoyDOms6fzpbOkc6dzpfOoywgzqbOpc6bzpHOms6Zzp8gzprOn86WzpHOnc6XzqMnLCBQcmVmZWN0dXJlOiAnzprOv862zqzOvc63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzUwMjAwJywgQXJlYTogJ86RzpPOmc6fzqMgzqfOoc6ZzqPOpM6fzqbOn86hzp/OoyDOms6fzpbOkc6dzpfOoywgzpHOnc6RzqHOk86lzqHOn86ZIM6mzpvOqc6hzpnOnc6RzqMsIM6Rzp3Okc6kzp/Om86ZzprOnyDOlc6fzqHOlM6RzpnOkc6jIM6azp/Ols6Rzp3Ol86jLCDOkc6hzpTOkc6jzqPOkSDOms6fzpbOkc6dzpfOoywgzpHOo86SzpXOo86kzp/OoM6VzqTOoc6RIM6azp/Ols6Rzp3Ol86jLCDOk86RzpvOkc6kzpXOmc6RIM6azp/Ols6Rzp3Ol86jLCDOk86Vzp3Omc6azp8gzp3On86jzp/Oms6fzpzOlc6Zzp8gzpzOoM6fzpTOn86jzpHOms6VzpnOnyDOms6fzpbOkc6dzpfOoywgzpTOoc6fzqPOlc6hzp8gzprOn86WzpHOnc6XzqMsIM6VzqHOnM6RzprOmc6RIM6azp/Ols6Rzp3Ol86jLCDOms6RzqHOlM6ZzpEgzprOn86WzpHOnc6XzqMsIM6azpHOoc6lzp/Op86pzqHOmSDOms6fzpbOkc6dzpfOoywgzprOm86VzpnOpM6fzqMgzprOn86WzpHOnc6XzqMsIM6azp/OnM6Rzp3On86jIM6azp/Ols6Rzp3Ol86jLCDOnM6RzqXOoc6fzpTOlc6dzpTOoc6ZIM6azp/Ols6Rzp3Ol86jLCDOnM6RzqXOoc6fzqDOl86TzpcgzprOn86WzpHOnc6XzqMsIM6ezpXOnc6fzpTOn86nzpXOmc6fIM6gzpHOnc6kzpXOm86ZzpTOl86jIM6azp/Ols6Rzp3Ol86jLCDOns6Vzp3On86Uzp/Op86VzpnOnyDOoM6kzp/Om86VzpzOkc6Zzp/OoyDOms6fzpbOkc6dzpfOoywgzp/Om86lzpzOoM6ZzpHOlM6RIM6azp/Ols6Rzp3Ol86jLCDOoM6RzpvOkc6ZzpEgzpHOnM6gzpXOm86ZzpEgzprOn86WzpHOnc6XzqMsIM6gzpXOnc6kzpHOks6hzqXOo86fzqMgzprOn86WzpHOnc6XzqMsIM6gzpXOoc6UzpnOms6azpHOoyDOms6fzpbOkc6dzpfOoywgzqDOn86dzqTOn86azqnOnM6XIM6azp/Ols6Rzp3Ol86jLCDOoM6hzp/Okc6jzqTOmc6fIM6azp/Ols6Rzp3Ol86jLCDOoM6kzp/Om86VzpzOkc6ZzpTOkSDOms6fzpbOkc6dzpfOoywgzqPOoM6XzpvOmc6RIM6azp/Ols6Rzp3Ol86jLCDOp86RzqHOkc6lzpPOlyAgzprOn86WzpHOnc6XzqMsIM6nzpHOoc6RzqXOk86XIM6azp/Omc6bzqnOnSDOms6fzpbOkc6dzpfOoycsIFByZWZlY3R1cmU6ICfOms6/zrbOrM69zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTAzMDAnLCBBcmVhOiAnzpPOkc6bzpHOpM6Zzp3OlyDOms6fzpbOkc6dzpfOoywgzpTOkc6mzp3Olc6hzp8gzprOn86WzpHOnc6XzqMsIM6azpHOm86fzp3Olc6hzpkgzprOn86WzpHOnc6XzqMsIM6czpnOms6hzp/Oms6RzqPOpM6hzp8gzprOn86WzpHOnc6XzqMsIM6czp/Onc6XIM6azp/Omc6czpfOo86VzqnOoyDOmM6Vzp/OpM6fzprOn86lIM6czpnOms6hzp/Oms6RzqPOpM6hzp/OpSDOms6fzpbOkc6dzpfOoywgzqDOkc6bzpHOmc6fzprOkc6jzqTOoc6fIM6azp/Ols6Rzp3Ol86jLCDOo86ZzpHOpM6ZzqPOpM6RIM6azp/Ols6Rzp3Ol86jJywgUHJlZmVjdHVyZTogJ86azr/Ots6szr3Ot8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1MDQwMCcsIEFyZWE6ICfOkc6TzpnOkSDOms6lzqHOmc6RzprOlyDOks6VzpvOks6Vzp3OpM6fzqUgzprOn86WzpHOnc6XzqMsIM6SzpXOm86SzpXOnc6kzp/OoyDOms6fzpbOkc6dzpfOoywgzprOkc6kzpHOps6lzpPOmc6fIM6azp/Ols6Rzp3Ol86jLCDOoM6RzpvOkc6Zzp/Ok86hzpHOpM6jzpHOnc6fIM6azp/Ols6Rzp3Ol86jLCDOoM6fzpvOpc6mzqXOpM6fIM6azp/Ols6Rzp3Ol86jJywgUHJlZmVjdHVyZTogJ86azr/Ots6szr3Ot8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1MDUwMCcsIEFyZWE6ICfOkc6lzpvOlc6jIM6azp/Ols6Rzp3Ol86jLCDOk86fzqXOm86VzqMgzprOn86WzpHOnc6XzqMsIM6VzpvOkc6kzpcgzprOn86WzpHOnc6XzqMsIM6azpHOo86kzpHOnc6ZzpEgzprOn86WzpHOnc6XzqMsIM6azqHOkc6dzpnOlM6ZzpEgzprOn86WzpHOnc6XzqMsIM6bzpHOks6RIM6azp/Ols6Rzp3Ol86jLCDOm86RzpbOkc6hzpHOlM6VzqMgzprOn86WzpHOnc6XzqMsIM6bzpnOks6RzpTOlc6hzp8gzprOn86WzpHOnc6XzqMsIM6czpXOpM6Rzp7Okc6jIM6azp/Ols6Rzp3Ol86jLCDOnM6ZzprOoc6fzpLOkc6bzqTOnyDOms6fzpbOkc6dzpfOoywgzpzOn86dzpcgzqPOpM6Rzp3On86lIM6azp/Ols6Rzp3Ol86jLCDOnc6VzpEgzpvOkc6SzpEgzprOn86WzpHOnc6XzqMsIM6gzpvOkc6kzpHOnc6fzqHOoc6VzqXOnM6RIM6azp/Ols6Rzp3Ol86jLCDOoM6fzpvOpc6hzqHOkc6nzp8gzprOn86WzpHOnc6XzqMsIM6gzqHOn86jzpfOm86Zzp8gzprOn86WzpHOnc6XzqMsIM6hzqXOnM6dzpnOnyDOms6fzpbOkc6dzpfOoywgzqPOlc6hzpLOmc6RIM6azp/Ols6Rzp3Ol86jLCDOpM6hzpHOnc6fzpLOkc6bzqTOnyDOms6fzpbOkc6dzpfOoywgzqTOoc6ZzpPOqc6dzpnOms6fIM6azp/Ols6Rzp3Ol86jLCDOps6hzp/Opc6hzpnOnyDOms6fzpbOkc6dzpfOoycsIFByZWZlY3R1cmU6ICfOms6/zrbOrM69zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjAwMDEnLCBBcmVhOiAnzpbOlc6lzpPOn86bzpHOpM6VzpnOnyDOms6fzqHOmc6dzpjOn86lLCDOms6RzpvOlc6dzqTOls6ZIM6azp/Ooc6Zzp3OmM6fzqUnLCBQcmVmZWN0dXJlOiAnzprOv8+BzrnOvc64zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyMDAwMicsIEFyZWE6ICfOks6VzpvOnyDOms6fzqHOmc6dzpjOn86lLCDOlc6bzpvOl86dzp/Op86pzqHOmSDOms6fzqHOmc6dzpjOn86lLCDOms6fzprOms6pzp3OmSDOms6fzqHOmc6dzpjOn86lLCDOms6hzpfOnc6VzqMgzprOn86hzpnOnc6Yzp/OpSwgzp3Olc6hzpHOnc6kzpbOkSDOms6fzqHOmc6dzpjOn86lLCDOo86RzqTOkc6ZzpnOms6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6jzqTOmc6czpHOk86azpEgzprOn86hzpnOnc6Yzp/OpSwgzqTOkc6hzqPOmc6dzpEgzprOn86hzpnOnc6Yzp/OpScsIFByZWZlY3R1cmU6ICfOms6/z4HOuc69zrjOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIwMDAzJywgQXJlYTogJ86RzpPOmc6fzpkgzpjOlc6fzpTOqc6hzp/OmSDOms6fzqHOmc6dzpjOn86lLCDOkc6hzqTOlc6czpnOlM6fzqMgzprOn86hzpnOnc6Yzp/OpSwgzpPOkc6bzpfOnc6XIM6azp/Ooc6Zzp3OmM6fzqUsIM6TzpXOoc6Rzp3Olc6ZzpEgzprOn86hzpnOnc6Yzp/OpSwgzprOkc6bzqXOks6ZzqTOo86VzqMgzprOn86hzpnOnc6Yzp/OpSwgzprOkc6czpnOnc6RzprOmSDOms6fzqHOmc6dzpjOn86lLCDOms6RzqTOo86ZzpLOmc6hzpkgzprOn86hzpnOnc6Yzp/OpSwgzprOn86azprOmc6dzpcgzqPOoM6XzpvOmc6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6bzpnOn86dzqTOkc6hzpkgzprOn86hzpnOnc6Yzp/OpSwgzpzOoM6VzprOkSDOms6ZzpHOps6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6czqDOlc6jzprOkc6azpcgzprOn86hzpnOnc6Yzp/OpSwgzp3Olc6RIM6gzp/Om86ZzqTOlc6ZzpEgzprOn86hzpnOnc6Yzp/OpSwgzqDOoc6fzqbOl86kzpfOoyDOl86bzpnOkc6jIM6azp/Ooc6Zzp3OmM6fzqUsIM6jzpXOo86ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6jzprOpc6hzqnOnc6ZzpTOkSDOms6fzqHOmc6dzpjOn86lLCDOo86fzqXOo86RzprOmSDOms6fzqHOmc6dzpjOn86lJywgUHJlZmVjdHVyZTogJ86azr/Pgc65zr3OuM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjAwMDQnLCBBcmVhOiAnzpHOk86TzpXOm86fzprOkc6jzqTOoc6fIM6azp/Ooc6Zzp3OmM6fzqUsIM6RzpPOmc6fzqMgzpLOm86RzqPOo86XzqMgzprOn86hzpnOnc6Yzp/OpSwgzpHOk86Zzp/OoyDOoM6VzqTOoc6fzqMgzprOn86hzpnOnc6Yzp/OpSwgzprOkc6Szp/OoyDOo86fzpvOpc6TzpXOmc6RzqMgzprOn86hzpnOnc6Yzp/OpSwgzprOmc6fzqXOoc6azpHOpM6ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6azp/Ooc6mzp/OoyDOms6fzqHOmc6dzpjOn86lLCDOnM6fzp3OlyDOkc6TzpnOkc6jIM6czpHOoc6Zzp3Okc6jIM6azp/Ooc6Zzp3OmM6fzqUsIM6gzpXOpc6azpHOm86ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6hzqXOpM6fIM6azp/Ooc6Zzp3OmM6fzqUsIM6jzp/Ops6ZzprOnyDOms6fzqHOmc6dzpjOn86lLCDOps6hzpHOk86azp/Om86ZzpzOkc6dzp8gzprOn86hzpnOnc6Yzp/OpScsIFByZWZlY3R1cmU6ICfOms6/z4HOuc69zrjOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIwMDA2JywgQXJlYTogJ86RzpPOmc6RIM6czpHOoc6Zzp3OkSDOms6fzqHOmc6dzpjOn86lLCDOkc6jzqPOn86jIM6azp/Ooc6Zzp3OmM6fzqUsIM6SzpXOm86Xzp3Omc6RzqTOmc6azpEgzprOn86hzpnOnc6Yzp/OpSwgzpLOn86nzpHOmc6azp8gzprOn86hzpnOnc6Yzp/OpSwgzpLOoc6RzqfOkc6kzpkgzprOn86hzpnOnc6Yzp/OpSwgzpXOpc6RzpPOk86VzpvOmc6jzqTOoc6ZzpEgzprOn86hzpnOnc6Yzp/OpSwgzprOkc6kzqkgzpHOo86jzp/OoyDOms6fzqHOmc6dzpjOn86lLCDOnM6gzp/Om86RzqTOmSDOms6fzqHOmc6dzpjOn86lLCDOoM6fzqXOm86bzpnOpM6jzpEgzprOn86hzpnOnc6Yzp/OpSwgzqPOn86lzpvOl86dzpHOoc6ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6nzpHOm86azpXOmc6fIM6azp/Ooc6Zzp3OmM6fzqUnLCBQcmVmZWN0dXJlOiAnzprOv8+BzrnOvc64zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyMDAwOCcsIEFyZWE6ICfOkc6TzpnOn86dzp/Ooc6ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6azpvOlc6dzpnOkSDOms6fzqHOmc6dzpjOn86lLCDOms6fzqXOpM6RzpvOkc6jIM6azp/Ooc6Zzp3OmM6fzqUsIM6czpHOqM6fzqMgzprOn86hzpnOnc6Yzp/OpSwgzqPOoM6RzpjOn86Szp/Opc6dzpkgzprOn86hzpnOnc6Yzp/OpSwgzqPOpM6VzqbOkc6dzpkgzprOn86hzpnOnc6Yzp/OpSwgzqfOmc6bzpnOn86czp/OlM6ZIM6azp/Ooc6Zzp3OmM6fzqUnLCBQcmVmZWN0dXJlOiAnzprOv8+BzrnOvc64zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyMDAwOScsIEFyZWE6ICfOkc6dzqkgzpHOmc6TzpnOkc6bzp/OoyDOms6fzqHOmc6dzpjOn86lLCDOlM6VzqHOks6Vzp3OmSDOms6fzqHOmc6dzpjOn86lLCDOlc6SzqHOn86jzqTOmc6dzpEgzprOn86hzpnOnc6Yzp/OpSwgzprOn86lzpzOkc6hzpnOkc6jIM6azp/Ooc6Zzp3OmM6fzqUsIM6bzqXOk86ZzpEgzprOn86hzpnOnc6Yzp/OpSwgzpzOkc6lzqHOkSDOm86ZzpjOkc6hzpnOkSDOms6fzqHOmc6dzpjOn86lLCDOnM6Vzp3OpM6fzqXOoc6TzpnOkc6dzpnOms6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6gzpXOpM6RzpvOn86lIM6azp/Ooc6Zzp3OmM6fzqUsIM6gzqXOoc6Tzp/OoyDOms6fzqHOmc6dzpjOn86lLCDOoc6fzpbOlc6dzpEgzprOn86hzpnOnc6Yzp/OpSwgzqPOpM6fzpzOmc6fIM6azp/Ooc6Zzp3OmM6fzqUsIM6nzpXOm86lzpTOn86hzpXOnyDOms6fzqHOmc6dzpjOn86lJywgUHJlZmVjdHVyZTogJ86azr/Pgc65zr3OuM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjAwMTEnLCBBcmVhOiAnzpvOlc6nzpHOmc6fIM6azp/Ooc6Zzp3OmM6fzqUsIM6gzpXOoc6ZzpPOmc6RzpvOmSDOms6fzqHOmc6dzpjOn86lJywgUHJlZmVjdHVyZTogJ86azr/Pgc65zr3OuM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjAwMTQnLCBBcmVhOiAnzpHOnM6lzpPOlM6RzpvOlc6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6Rzp3OqSDOpM6RzqHOo86fzqMgzprOn86hzpnOnc6Yzp/OpSwgzpHOoc6nzpHOmc6RIM6mzpXOnc6Vzp/OoyDOms6fzqHOmc6dzpjOn86lLCDOkc6nzpvOkc6UzpnOlc6jIM6azp/Ooc6Zzp3OmM6fzqUsIM6SzpnOm86ZzpEgzprOn86hzpnOnc6Yzp/OpSwgzpPOms6fzqXOoc6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6ZzpXOoc6RIM6czp/Onc6XIM6RzpPOmc6fzqUgzpPOlc6pzqHOk86Zzp/OpSDOps6Vzp3Olc6fzqUgzprOn86hzpnOnc6Yzp/OpSwgzprOkc6kzqkgzqTOkc6hzqPOn86jIM6azp/Ooc6Zzp3OmM6fzqUsIM6bzp/Opc6WzpnOnyDOms6fzqHOmc6dzpjOn86lLCDOnM6RzqTOmSDOms6fzqHOmc6dzpjOn86lLCDOnM6VzqPOmc6dzp8gzprOn86hzpnOnc6Yzp/OpSwgzpzOn86jzpnOkSDOms6fzqHOmc6dzpjOn86lLCDOoM6Rzp3On86hzpHOnM6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6jzpHOoc6Rzp3OpM6RzqDOl86nzp8gzprOn86hzpnOnc6Yzp/OpSwgzqPOpM6Vzp3OnyDOms6fzqHOmc6dzpjOn86lLCDOps6Vzp3Olc6fzqMgzprOn86hzpnOnc6Yzp/OpScsIFByZWZlY3R1cmU6ICfOms6/z4HOuc69zrjOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIwMDE2JywgQXJlYTogJ86UzqHOn86jzp/OoM6XzpPOlyDOms6fzqHOmc6dzpjOn86lLCDOms6RzpvOmc6Rzp3On86ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6azpHOoc6kzpXOoc6ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6azpHOo86kzpHOnc6VzpEgzprOn86hzpnOnc6Yzp/OpSwgzprOlc6mzpHOm86RzqHOmSDOms6fzqHOmc6dzpjOn86lLCDOms6Zzp/Onc6ZzpEgzprOn86hzpnOnc6Yzp/OpSwgzprOpc6bzpvOl86dzpcgzprOn86hzpnOnc6Yzp/OpSwgzpvOkc6lzprOkSDOms6fzqHOmc6dzpjOn86lLCDOnM6ZzprOoc6fzqMgzpzOkc6nzpHOm86RzqMgzprOn86hzpnOnc6Yzp/OpSwgzqPOpM6lzpzOps6RzpvOmc6RIM6azp/Ooc6Zzp3OmM6fzqUnLCBQcmVmZWN0dXJlOiAnzprOv8+BzrnOvc64zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyMDEwMCcsIEFyZWE6ICfOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzp7Opc6bzp/Oms6VzqHOmc6WzpfOoyDOms6fzqHOmc6dzpjOn86lLCDOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOns6lzpvOn86azpXOoc6ZzpbOkc6jIM6azp/Ooc6Zzp3OmM6fzqUsIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzprOn86hzpnOnc6Yzp/OpSwgzpHOk86Zzp/OoyDOms6fzqPOnM6RzqMgzpXOns6RzpzOmc6bzpnOqc6dIM6azp/Ooc6Zzp3OmM6fzqUsIM6RzpvOkc6czpHOnc6dzp/OoyDOms6fzqHOmc6dzpjOn86lLCDOkc6dzqkgzpHOm86czqXOoc6XIM6azp/Ooc6Zzp3OmM6fzqUsIM6RzqHOkc6azp/Opc6azpnOkSDOms6fzqHOmc6dzpjOn86lLCDOkc6hzqfOkc6Zzp8gzpvOmc6czpHOnc6ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6SzpHOm86kzp/OoyDOk86bzqXOps6RzpTOkc6jIM6azp/Ooc6Zzp3OmM6fzqUsIM6SzpvOkc6jzpHOmc6ZzprOkSDOms6fzqHOmc6dzpjOn86lLCDOk86RzpvOkc6kzpHOms6ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6TzpXOps6lzqHOkSDOmc6jzpjOnM6fzqUgzprOn86hzpnOnc6Yzp/OpSwgzpTOkc6mzp3OlyDOlc6ezpHOnM6ZzpvOmc6pzp0gzprOn86hzpnOnc6Yzp/OpSwgzpXOns6RzpzOmc6bzpnOkSDOms6fzqHOmc6dzpjOn86lLCDOmM6lzpzOkc6hzpnOqc6dzpEgzprOn86hzpnOnc6Yzp/OpSwgzpnOlc6hzpEgzpzOn86dzpcgIM6RzpPOmc6RzqMgzqTOoc6ZzpHOlM6RzqMgzprOn86hzpnOnc6Yzp/OpSwgzprOkc6Szp/OoyDOms6fzqHOmc6dzpjOn86lLCDOms6RzqTOkc6azpHOm86ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6azpHOpM6pIM6RzpvOnM6lzqHOlyDOms6fzqHOmc6dzpjOn86lLCDOms6RzqTOqSDOlc6ezpHOnM6ZzpvOmc6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6azpXOp86hzpnOlc6jIM6azp/Ooc6Zzp3OmM6fzqUsIM6azp/Ooc6Zzp3OmM6fzqMgzprOn86hzpnOnc6Yzp/OpSwgzprOpc6hzpEgzpLOoc6lzqPOlyDOms6fzqHOmc6dzpjOn86lLCDOm86fzqXOpM6hzp8gzpXOm86Vzp3Ol86jIM6azp/Ooc6Zzp3OmM6fzqUsIM6czqDOlc6azpnOkc6dzpnOms6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6czqXOoc6kzpXOls6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6dzpXOkSDOkc6bzpzOpc6hzpcgzprOn86hzpnOnc6Yzp/OpSwgzp3OpM6hzpHOo86jzpEgzprOn86hzpnOnc6Yzp/OpSwgzp7Opc6bzp/Oms6VzqHOmc6WzpEgzprOn86hzpnOnc6Yzp/OpSwgzqDOkc6bzpHOmc6fIM6azpHOm86RzpzOkc6azpkgzprOn86hzpnOnc6Yzp/OpSwgzqDOkc6hzpHOlM6VzpnOo86fzqMgzprOn86hzpnOnc6Yzp/OpSwgzqPOmc6UzpXOoc6pzp3OkSDOms6fzqHOmc6dzpjOn86lLCDOo86fzpvOn86czp/OoyDOms6fzqHOmc6dzpjOn86lJywgUHJlZmVjdHVyZTogJ86azr/Pgc65zr3OuM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjAyMDAnLCBBcmVhOiAnzpHOnc6RzqTOn86bzpnOms6XIM6kzqHOkc6TzpHOnc6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6SzpHOm86kzqPOkc6ZzpnOms6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6UzpnOnM6Xzp3Omc6fIM6azp/Ooc6Zzp3OmM6fzqUsIM6Uzp/Opc6hzpLOkc6kzpnOqc6dzpEgzprOn86hzpnOnc6Yzp/OpSwgzpjOkc6bzpXOoc6fIM6azp/Ooc6Zzp3OmM6fzqUsIM6azpHOpM6pIM6UzpnOnM6Xzp3Omc6fIM6azp/Ooc6Zzp3OmM6fzqUsIM6azpnOkc6kzp8gzprOn86hzpnOnc6Yzp/OpSwgzprOn86azprOmc6dzpnOkSDOms6fzqHOmc6dzpjOn86lLCDOm86RzpvOmc6pzqTOl86jIM6azp/Ooc6Zzp3OmM6fzqUsIM6czpXOm86ZzqPOo86ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6czp/Opc6bzprOmc6fIM6azp/Ooc6Zzp3OmM6fzqUsIM6fzpnOms6fzpTOn86czpnOms6fzqMgzqPOpc6dzpXOpC7Opc6gzpHOm86bzpfOm86pzp0gzpTOlc6XIM6azp/Ooc6Zzp3OmM6fzqUsIM6gzpHOoc6RzpvOmc6RIM6UzpnOnM6Xzp3Omc6fzqUgzprOn86hzpnOnc6Yzp/OpSwgzqDOkc6jzpnOnyDOms6fzqHOmc6dzpjOn86lLCDOo86ZzprOpc6pzp0gzprOn86hzpnOnc6Yzp/OpScsIFByZWZlY3R1cmU6ICfOms6/z4HOuc69zrjOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIwMzAwJywgQXJlYTogJ86RzpPOmc6RIM6jzqnOpM6XzqHOkSDOms6fzqHOmc6dzpjOn86lLCDOkc6bzprOpc6fzp3OkSDOms6fzqHOmc6dzpjOn86lLCDOkc6bzprOpc6fzp3Omc6UzpXOoyDOnc6XzqPOn86ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6RzqPOoM6hzp/Oms6RzpzOoM6fzqMgzpvOn86lzqTOoc6RzprOmc6fzqUgzprOn86hzpnOnc6Yzp/OpSwgzpLOkc6czpLOkc6azpXOoyDOms6fzqHOmc6dzpjOn86lLCDOlc6ZzqHOl86dzpcgzprOn86hzpnOnc6Yzp/OpSwgzprOkc6bzpvOmc6YzpXOkSDOm86fzqXOpM6hzpHOms6Zzp/OpSDOms6fzqHOmc6dzpjOn86lLCDOm86ZzpzOnc6XIM6Szp/Opc6bzpnOkc6TzpzOlc6dzpfOoyDOms6fzqHOmc6dzpjOn86lLCDOm86fzqXOpM6hzpHOms6ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6czpHOpc6hzp/Om86ZzpzOnc6XIM6azp/Ooc6Zzp3OmM6fzqUsIM6czp/Onc6XIM6RzpPOmc6fzqUgzpnOqc6Rzp3Onc6XIM6azp/Ooc6Zzp3OmM6fzqUsIM6czp/Onc6XIM6fzqPOmc6fzqUgzqDOkc6kzpHOoM6Zzp/OpSDOms6fzqHOmc6dzpjOn86lLCDOoM6VzqHOkc6nzqnOoc6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6gzpnOo86ZzpEgzprOn86hzpnOnc6Yzp/OpSwgzqPOms6RzpvOqc6czpEgzprOn86hzpnOnc6Yzp/OpSwgzqPOp86Zzp3On86jIM6azp/Ooc6Zzp3OmM6fzqUnLCBQcmVmZWN0dXJlOiAnzprOv8+BzrnOvc64zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyMDQwMCcsIEFyZWE6ICfOkc6czqbOmc6YzpXOkSDOms6fzqHOmc6dzpjOn86lLCDOkc6dzqkgzqTOoc6ZzprOkc6bzpEgzprOn86hzpnOnc6Yzp/OpSwgzpLOkc6bzqTOn86jIM6hzpnOls6XzqMgzprOn86hzpnOnc6Yzp/OpSwgzpPOlc6bzpnOnc6ZzpHOpM6ZzprOkSDOms6fzqHOmc6dzpjOn86lLCDOk86VzqnOoc6TzpHOnc6kzpHOmc6ZzprOkSDOms6fzqHOmc6dzpjOn86lLCDOlM6Vzp3OlM6hzp8gzprOn86hzpnOnc6Yzp/OpSwgzpbOlc6czpXOnc6fIM6azp/Ooc6Zzp3OmM6fzqUsIM6WzpfOoc6VzpnOkSDOms6fzqHOmc6dzpjOn86lLCDOl86bzpnOn86jIM6azp/Ooc6Zzp3OmM6fzqUsIM6azpHOoc6ZzqnOpM6ZzprOkSDOms6RzqHOpc6RzqMgzprOn86hzpnOnc6Yzp/OpSwgzprOkc6hzqXOkSDOms6fzqHOmc6dzpjOn86lLCDOms6RzqTOqSDOo86lzp3On86ZzprOmc6RIM6kzqHOmc6azpHOm86pzp0gzprOn86hzpnOnc6Yzp/OpSwgzpvOkc6TzprOkc6UzpHOmc6ZzprOkSDOms6fzqHOmc6dzpjOn86lLCDOnM6VzqHOpM6ZzprOkc6ZzpnOms6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6czpXOo86XIM6jzqXOnc6fzpnOms6ZzpEgzqTOoc6ZzprOkc6bzqnOnSDOms6fzqHOmc6dzpjOn86lLCDOns6Rzp3OmM6fzqfOqc6hzpkgzprOn86hzpnOnc6Yzp/OpSwgzp7Opc6bzp/Oms6RzqPOpM6hzp8gzprOn86hzpnOnc6Yzp/OpSwgzqDOlc6bzpvOl86dzpcgzprOn86hzpnOnc6Yzp/OpSwgzqHOlc6YzpnOnyDOms6fzqHOmc6dzpjOn86lLCDOoc6ZzpbOkSDOms6fzqHOmc6dzpjOn86lLCDOo86ZzpPOlc6hzpnOpM6jzpEgzprOn86hzpnOnc6Yzp/OpSwgzqPOn86mzpnOkc6dzpEgzprOn86hzpnOnc6Yzp/OpSwgzqPOoM6RzqHOpM6Zzp3Okc6ZzpnOms6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6jzqXOms6VzpEgzprOn86hzpnOnc6Yzp/OpSwgzqfOkc6hzqTOo86ZzpHOnc6ZzprOkSDOms6fzqHOmc6dzpjOn86lJywgUHJlZmVjdHVyZTogJ86azr/Pgc65zr3OuM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjA1MDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOks6RzqPOmc6bzpXOmc6fzqMgzprOn86hzpnOnc6Yzp/OpSwgzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6RzqHOk86fzqXOoyDOkc6hzpPOn86bzpnOlM6RzqMsIM6RzpfOlM6fzp3Omc6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6RzpvOlc6RIM6RzqHOk86fzpvOmc6UzpHOoywgzpHOoc6nzpHOmc6RIM6dzpXOnM6VzpEgzprOn86hzpnOnc6Yzp/OpSwgzpHOoc6nzpHOmc6VzqMgzprOm86VzqnOnc6VzqMgzprOn86hzpnOnc6Yzp/OpSwgzpHOo86gzqHOn86azpHOnM6gzp/OoyDOnc6VzpzOlc6RzqMgzprOn86hzpnOnc6Yzp/OpSwgzpPOkc6bzpHOpM6RzqMgzprOn86hzpnOnc6Yzp/OpSwgzpPOpc6czp3OnyDOkc6hzpPOn86bzpnOlM6RzqMsIM6UzpHOps6dzpcgzp3Olc6czpXOkc6jIM6azp/Ooc6Zzp3OmM6fzqUsIM6UzpXOoc6SzpXOnc6RzprOmc6RIM6azp/Ooc6Zzp3OmM6fzqUsIM6Vzp7On86nzpcgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOms6RzqPOpM6hzpHOms6ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6azp/Opc6kzqPOmc6fIM6azp/Ooc6Zzp3OmM6fzqUsIM6azp/Opc6kzqPOn86czp/OlM6ZIM6azp/Ooc6Zzp3OmM6fzqUsIM6bzpXOn86dzqTOmc6fIM6azp/Ooc6Zzp3OmM6fzqUsIM6czqDOn86WzpnOms6RzqMgzprOn86hzpnOnc6Yzp/OpSwgzp3Olc6czpXOkSDOms6fzqHOmc6dzpjOn86lLCDOoM6VzqTOoc6Zzp8gzprOn86hzpnOnc6Yzp/OpSwgzqDOm86RzqTOkc6dzpkgzpHOoc6Tzp/Om86ZzpTOkc6jLCDOo86azp/OpM6VzpnOnc6XIM6RzqHOk86fzpvOmc6UzpHOoywgzqTOmc6kzpHOnc6XIM6azp/Ooc6Zzp3OmM6fzqUsIM6mzqHOn86lzqPOmc6fzqXOnc6RIM6RzqHOk86fzpvOmc6UzpHOoywgzqjOkc6hzpnOnyDOms6fzqHOmc6dzpjOn86lJywgUHJlZmVjdHVyZTogJ86azr/Pgc65zr3OuM6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnODQwMDEnLCBBcmVhOiAnzpHOk86ZzpEgzpjOlc6fzpTOn86kzpcgzpnOn86lIM6azqXOms6bzpHOlM6pzp0sIM6VzqDOkc6dzqkgzprOkc6czqDOn86jIM6Zzp/OpSDOms6lzprOm86RzpTOqc6dLCDOmc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzprOn86lzpzOoM6RzqHOkSDOms6lzprOm86RzpTOqc6dLCDOnM6RzpPOk86Rzp3Okc6hzpkgICDOmc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpzOoM6fzqXOoc6XzqMgIM6azqXOms6bzpHOlM6pzp0sIM6czqXOm86fzqDOn86kzpHOoyAgzpnOn86lIM6azqXOms6bzpHOlM6pzp0sIM6gzpXOpM6RzpvOmc6UzpkgzprOpc6azpvOkc6UzqnOnSwgzqjOkc6YzpcgIM6Zzp/OpSDOms6lzprOm86RzpTOqc6dJywgUHJlZmVjdHVyZTogJ86az4XOus67zqzOtM+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg0MDAyJywgQXJlYTogJ86RzpPOmc6RIM6czpHOoc6Zzp3OkSDOms6VzpHOoyDOms6lzprOm86RzpTOqc6dLCDOkc6TzpnOkSDOnM6RzqXOoc6RIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOmc6fzqMgzpjOlc6fzpTOqc6hzp/OoyDOms6lzprOm86RzpTOqc6dLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzpnOn86lzpvOmc6Uzp/OoyDOms6VzpHOoyDOms6lzprOm86RzpTOqc6dLCDOkc6TzpnOn86jIM6jzqXOnM6VzqnOnSDOms6VzpHOoyDOms6lzprOm86RzpTOqc6dLCDOkc6jzqTOoc6RzqMgzprOpc6azpvOkc6UzqnOnSwgzpLOn86lzqHOms6RzqHOmSDOms6lzprOm86RzpTOqc6dLCDOlc6bzpvOl86dzpnOms6RICDOms6lzprOm86RzpTOqc6dLCDOls6pzp/OlM6fzqfOn86jIM6gzpfOk86XIM6azpXOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6Zzp/Opc6bzpnOlM6RIM6azqXOms6bzpHOlM6pzp0sIM6azpHOm86RzpzOn86jIM6azpXOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6azpHOnM6gzpkgzprOlc6RzqMgzprOpc6azpvOkc6UzqnOnSwgzprOkc6jzqTOkc6dzpnOlc6jIM6azpXOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6azpHOo86kzqHOmc6Rzp3OlyDOms6lzprOm86RzpTOqc6dLCDOms6RzqTOqSDOnM6VzqHOmc6RIM6azqXOms6bzpHOlM6pzp0sIM6azp/Oms6azpnOnc6RzpTOkSDOms6lzprOm86RzpTOqc6dLCDOms6fzqHOl86jzqPOmc6RIM6azqXOms6bzpHOlM6pzp0sIM6azp/Opc6azp/Opc6SzpHOk86ZzpEgzprOpc6azpvOkc6UzqnOnSwgzprOn86lzp3OlM6fzqXOoc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzpvOmc6TzpnOkSDOms6lzprOm86RzpTOqc6dLCDOnM6RzprOoc6fzp3Ol86jzp/OoyDOms6lzprOm86RzpTOqc6dLCDOnM6RzqHOkc6UzpXOoyDOms6lzprOm86RzpTOqc6dLCDOnM6RzqXOoc6RzpzOoM6VzpvOmSDOms6lzprOm86RzpTOqc6dLCDOnM6RzqXOoc6fIM6azqXOms6bzpHOlM6pzp0sIM6czpXOm86ZzqPOo86RzprOmSDOms6lzprOm86RzpTOqc6dLCDOnM6lzpvOn86ZIM6azpXOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6czqXOm86fzqDOn86kzpHOnM6fzqMgzprOlc6RzqMgzprOpc6azpvOkc6UzqnOnSwgzp/Ooc6azp/OoyDOms6lzprOm86RzpTOqc6dLCDOn86kzpbOmc6RzqMgzprOpc6azpvOkc6UzqnOnSwgzqDOlc6hzpEgzpzOlc6hzpnOkSDOms6lzprOm86RzpTOqc6dLCDOoM6XzqPOo86VzqMgzprOpc6azpvOkc6UzqnOnSwgzqDOm86RzpPOmc6RIM6azqXOms6bzpHOlM6pzp0sIM6jzqDOkc6YzpkgzprOpc6azpvOkc6UzqnOnSwgzqPOpM6RzqXOoc6fzqXOlM6RzprOmSDOms6lzprOm86RzpTOqc6dLCDOps6pzqTOl86czpHOoc6ZIM6azqXOms6bzpHOlM6pzp0sIM6nzpHOks6fzqXOnc6RIM6azqXOms6bzpHOlM6pzp0nLCBQcmVmZWN0dXJlOiAnzprPhc66zrvOrM60z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODQwMDMnLCBBcmVhOiAnzpHOk86ZzpEgzpzOkc6hzpnOnc6RIM6jzpnOps6dzp/OpSDOms6lzprOm86RzpTOqc6dLCDOkc6gzp/Om86bzqnOnc6ZzpEgzqPOmc6mzp3On86lIM6azqXOms6bzpHOlM6pzp0sIM6RzqHOpM6VzpzOqc6dIM6azqXOms6bzpHOlM6pzp0sIM6SzpHOmM6lIM6azqXOms6bzpHOlM6pzp0sIM6azpHOnM6RzqHOlc6jIM6jzpnOps6dzp/OpSDOms6lzprOm86RzpTOqc6dLCDOms6RzqPOpM6hzp8gzprOpc6azpvOkc6UzqnOnSwgzprOkc6kzqkgzqDOlc6kzpHOm86ZIM6azqXOms6bzpHOlM6pzp0sIM6azpnOpM6hzpnOkc6dzpcgzp3Ol86jzp/OoyDOms6lzprOm86RzpTOqc6dLCDOoM6bzpHOpM6lzqMgzpPOmc6RzpvOn86jIM6jzpnOps6dzp/OpSDOms6lzprOm86RzpTOqc6dLCDOpM6hzp/Opc6bzpHOms6ZIM6azqXOms6bzpHOlM6pzp0sIM6mzpHOoc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzqfOlc6hzqHOn86dzpfOo86fzqMgzprOpc6azpvOkc6UzqnOnSwgzqfOoc6lzqPOn86gzpfOk86XIM6azqXOms6bzpHOlM6pzp0nLCBQcmVmZWN0dXJlOiAnzprPhc66zrvOrM60z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODQwMDQnLCBBcmVhOiAnzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6azpnOnM6pzpvOn86lIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOmc6fzqMgzpXOpc6jzqTOkc6YzpnOn86jIM6azpnOnM6pzpvOn86lIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOms6ZzpzOqc6bzp/OpSDOms6lzprOm86RzpTOqc6dLCDOkc6bzqXOms6XIM6azpnOnM6pzpvOn86lIM6azqXOms6bzpHOlM6pzp0sIM6Tzp/Opc6gzpEtzprOkc6hzpEgzprOmc6czqnOm86fzqUgzprOpc6azpvOkc6UzqnOnSwgzprOkc6bzpHOnM6ZzqTOo86ZIM6azpnOnM6pzpvOn86lIM6azqXOms6bzpHOlM6pzp0sIM6azpnOnM6pzpvOn86jIM6azqXOms6bzpHOlM6pzp0sIM6gzp/Om86lzpHOmc6Tzp/OoyDOms6ZzpzOqc6bzp/OpSDOms6lzprOm86RzpTOqc6dLCDOoM6hzpHOo86jzpEgzprOmc6czqnOm86fzqUgzprOpc6azpvOkc6UzqnOnSwgzqjOkc6YzpcgzprOmc6czqnOm86fzqUgzprOpc6azpvOkc6UzqnOnScsIFByZWZlY3R1cmU6ICfOms+FzrrOu86szrTPic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NDAwNScsIEFyZWE6ICfOkc6SzqXOo86jzpHOm86fzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOo86VzqHOmc6mzp/OpSDOms6lzprOm86RzpTOqc6dLCDOks6fzqXOoyDOms6lzprOm86RzpTOqc6dLCDOk86RzpvOkc6dzpcgzprOpc6azpvOkc6UzqnOnSwgzpPOkc6dzpXOnM6RIM6azqXOms6bzpHOlM6pzp0sIM6TzpvOkc6hzp/Onc6XzqPOmSDOo86VzqHOmc6mzp/OpSDOms6lzprOm86RzpTOqc6dLCDOms6Vzp3OpM6RzqHOp86fzqMgzprOpc6azpvOkc6UzqnOnSwgzprOn86lzqTOkc6bzpHOoyDOms6lzprOm86RzpTOqc6dLCDOm86ZzpLOkc6UzpkgzqPOlc6hzpnOps6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpzOlc6TzpHOm86fIM6bzpnOks6RzpTOmSDOms6lzprOm86RzpTOqc6dLCDOnM6VzpPOkc6bzp8gzqfOqc6hzpnOnyDOms6lzprOm86RzpTOqc6dLCDOnM6fzp3OlyDOlc6lzpHOk86TzpXOm86ZzqPOpM6hzpnOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6czp/Onc6XIM6kzpHOns6ZzpHOoc6nzqnOnSDOms6lzprOm86RzpTOqc6dLCDOoM6Rzp3Okc6TzpnOkSDOo86VzqHOmc6mzp/OpSDOms6lzprOm86RzpTOqc6dLCDOoM6bzpHOpM6lzqMgzpPOmc6RzpvOn86jIM6jzpXOoc6ZzqbOn86lIM6azqXOms6bzpHOlM6pzp0sIM6hzpHOnM6fzqMgzprOpc6azpvOkc6UzqnOnSwgzqPOlc6hzpnOps6fzqDOn86lzpvOkSDOnc6XzqPOn86jIM6azqXOms6bzpHOlM6pzp0sIM6jzpXOoc6ZzqbOn86jIM6azqXOms6bzpHOlM6pzp0sIM6jzqXOms6RzpzOmc6RIM6azqXOms6bzpHOlM6pzp0nLCBQcmVmZWN0dXJlOiAnzprPhc66zrvOrM60z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODQwMDYnLCBBcmVhOiAnzpHOk86ZzpEgzpXOmc6hzpfOnc6XIM6azqXOmM6dzp/OpSDOms6lzprOm86RzpTOqc6dLCDOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOms6lzpjOnc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpHOk86Zzp/OoyDOo86kzpXOps6Rzp3On86jIM6azqXOmM6dzp/OpSDOms6lzprOm86RzpTOqc6dLCDOkc6fzqPOkSDOms6lzprOm86RzpTOqc6dLCDOkc6gzp/Oms6hzpnOo86XIM6azqXOms6bzpHOlM6pzp0sIM6TzpHOnc6kzqHOn86czpHOnc6kzqHOkSDOms6lzprOm86RzpTOqc6dLCDOlM6hzqXOn86gzpnOlM6RIM6azqXOms6bzpHOlM6pzp0sIM6VzqDOmc6jzprOn86gzpcgzprOpc6Yzp3On86lIM6azqXOms6bzpHOlM6pzp0sIM6azpHOm86fIM6bzpnOks6RzpTOmSDOms6lzprOm86RzpTOqc6dLCDOms6Rzp3Okc6bzpEgzprOpc6azpvOkc6UzqnOnSwgzprOpc6Yzp3On86jIM6azqXOms6bzpHOlM6pzp0sIM6bzpXOpc6azpXOoyDOms6lzpjOnc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpvOmc6fzqTOoc6ZzpLOmSDOms6lzprOm86RzpTOqc6dLCDOm86fzqXOpM6hzpEgzprOpc6Yzp3On86lIM6azqXOms6bzpHOlM6pzp0sIM6czpXOoc6ZzqfOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6gzpnOoM6VzqHOmSDOms6lzprOm86RzpTOqc6dLCDOo86azqXOm86fzqMgzprOpc6Yzp3On86lIM6azqXOms6bzpHOlM6pzp0sIM6mzpvOkc6czqDOn86lzqHOmc6RIM6azqXOms6bzpHOlM6pzp0nLCBQcmVmZWN0dXJlOiAnzprPhc66zrvOrM60z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODQwMDcnLCBBcmVhOiAnzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6Rzp3OpM6ZzqDOkc6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOkc6dzqTOmc6gzpHOoc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOoM6Rzp3OpM6XzpzOkSDOkc6dzqTOmc6gzpHOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpPOm86lzqbOkSDOkc6dzqTOmc6gzpHOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpTOlc6jzqDOn86kzpnOms6fIM6Rzp3OpM6ZzqDOkc6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOms6RzpLOn86lzqHOkc6jIM6Rzp3OpM6ZzqDOkc6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOms6RzpzOoM6fzqMgzpHOnc6kzpnOoM6RzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6hzpXOpc6czpHOpM6fzp3Ol86jzpkgzpHOnc6kzpnOoM6RzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6jzqTOoc6fzpPOk86lzpvOlyDOnc6XzqPOn86jIM6azqXOms6bzpHOlM6pzp0sIM6jzqnOoc6fzqMgzpHOnc6kzpnOoM6RzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6kzqPOmc6czpfOnc6kzpfOoc6ZIM6Rzp3OpM6ZzqDOkc6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOps6VzpnOoc6RIM6Rzp3OpM6ZzqDOkc6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOps6hzpHOk86azp/OoM6RzqDOkc6UzpXOoyDOkc6dzqTOmc6gzpHOoc6fzqUgzprOpc6azpvOkc6UzqnOnScsIFByZWZlY3R1cmU6ICfOms+FzrrOu86szrTPic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NDAwOCcsIEFyZWE6ICfOkc6TzpnOn86jIM6gzpHOpc6bzp/OoyDOkc6ZzpPOmc6RzpvOl86jIM6azqXOms6bzpHOlM6pzp0sIM6RzpnOk86ZzpHOm86XIM6azqXOms6bzpHOlM6pzp0sIM6RzpzOn86hzpPOn86jIM6azqXOms6bzpHOlM6pzp0sIM6Rzp3OqSDOkc6dzqTOmc6azpXOoc6ZIM6azqXOms6bzpHOlM6pzp0sIM6RzqHOms6VzqPOmc6dzpcgzpHOnM6fzqHOk86fzqUgzprOpc6azpvOkc6UzqnOnSwgzpLOoc6fzqXOpM6jzpfOoyDOkc6czp/Ooc6Tzp/OpSDOms6lzprOm86RzpTOqc6dLCDOk86hzpHOnM6Szp/Opc6jzqPOkSDOkc6czp/Ooc6Tzp/OpSDOms6lzprOm86RzpTOqc6dLCDOk86hzpHOnM6gzp/Onc6XzqPOmc6fIM6azqXOms6bzpHOlM6pzp0sIM6Yzp/Om86RzqHOmc6RIM6RzpzOn86hzpPOn86lIM6azqXOms6bzpHOlM6pzp0sIM6azpHOm86fzqTOkc6hzpnOpM6ZzqPOo86RIM6RzpzOn86hzpPOn86lIM6azqXOms6bzpHOlM6pzp0sIM6azpHOm86fzqbOkc6dzpEgzpHOnM6fzqHOk86fzqUgzprOpc6azpvOkc6UzqnOnSwgzprOkc6czpHOoc6ZIM6RzpzOn86hzpPOn86lIM6azqXOms6bzpHOlM6pzp0sIM6azpHOo86kzpXOm86fzqDOlc6kzqHOkSDOms6lzprOm86RzpTOqc6dLCDOms6RzqTOkc6gzp/Om86RIM6RzpzOn86hzpPOn86lIM6azqXOms6bzpHOlM6pzp0sIM6azpHOpM6pIM6Rzp3OpM6ZzprOlc6hzpkgzpHOnM6fzqHOk86fzqUgzprOpc6azpvOkc6UzqnOnSwgzprOlc6hzp/OoyDOms6fzqXOps6fzp3Ol86jzpnOn86lIM6azqXOms6bzpHOlM6pzp0sIM6bzpHOk86azpHOlM6RIM6RzpnOk86ZzpHOm86XzqMgzprOpc6azpvOkc6UzqnOnSwgzpvOlc6lzprOlc6jIM6RzpzOn86hzpPOn86lIM6azqXOms6bzpHOlM6pzp0sIM6czpHOpc6hzpcgzpzOpc6kzpcgzpHOnM6fzqHOk86fzqUgzprOpc6azpvOkc6UzqnOnSwgzp3Olc6hzpEgzpHOnM6fzqHOk86fzqUgzprOpc6azpvOkc6UzqnOnSwgzp3Omc6azp/Opc6hzpnOkSDOms6lzprOm86RzpTOqc6dLCDOns6lzpvOn86azpXOoc6RzqTOmc6UzpkgzpHOnM6fzqHOk86fzqUgzprOpc6azpvOkc6UzqnOnSwgzp/Ooc6czp/OoyDOkc6ZzpPOmc6RzpvOl86jIM6azqXOms6bzpHOlM6pzp0sIM6gzpHOoc6RzpvOmc6RIM6Yzp/Om86RzqHOmc6pzp0gIM6RzpzOn86hzpPOn86lIM6azqXOms6bzpHOlM6pzp0sIM6gzpXOoc6RIM6hzpHOp86ZzpTOmSDOkc6czp/Ooc6Tzp/OpSDOms6lzprOm86RzpTOqc6dLCDOoM6fzqTOkc6czp/OoyDOkc6ZzpPOmc6RzpvOl86jIM6azqXOms6bzpHOlM6pzp0sIM6hzpHOp86ZzpTOmSDOkc6czp/Ooc6Tzp/OpSDOms6lzprOm86RzpTOqc6dLCDOoc6RzqfOn86lzpvOkSDOkc6czp/Ooc6Tzp/OpSDOms6lzprOm86RzpTOqc6dLCDOpM6jzpXOo86VzpzOlc6jIM6RzpzOn86hzpPOn86lIM6azqXOms6bzpHOlM6pzp0sIM6mzpXOm86fzqXOms6RIM6azqXOms6bzpHOlM6pzp0sIM6nzqHOmc6jzqTOn86lzpvOkc6azpkgzpHOnM6fzqHOk86fzqUgzprOpc6azpvOkc6UzqnOnSwgzqjOkc6bzpnOlM6RIM6azqXOms6bzpHOlM6pzp0nLCBQcmVmZWN0dXJlOiAnzprPhc66zrvOrM60z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODQwMDknLCBBcmVhOiAnzpHOnc6RzqbOlyDOms6lzprOm86RzpTOqc6dLCDOms6bzpfOo86ZzpTOmSDOkc6dzpHOps6XzqMgzprOpc6azpvOkc6UzqnOnSwgzpzOkc6azqHOkSDOkc6dzpHOps6XzqMgzprOpc6azpvOkc6UzqnOnSwgzp/Ooc6czp/OoyDOkc6TzpnOn86lIM6dzpnOms6fzpvOkc6fzqUgzpHOnc6RzqbOl86jIM6azqXOms6bzpHOlM6pzp0sIM6gzpHOp86VzpnOkSDOkc6dzpHOps6XzqMgzprOpc6azpvOkc6UzqnOnSwgzqbOpM6Vzp3OkSDOms6lzprOm86RzpTOqc6dJywgUHJlZmVjdHVyZTogJ86az4XOus67zqzOtM+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg0MDEwJywgQXJlYTogJ86RzpLOn86bzpHOlM6fzp3Ol86jzpnOnyDOms6lzprOm86RzpTOqc6dLCDOkc6bzp/OoM6hzp/Onc6fzpnOkSDOo86ZzprOmc6dzp/OpSDOms6lzprOm86RzpTOqc6dLCDOms6RzpvOn86TzpXOoc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzprOkc6hzpHOks6fzqMgzprOpc6azpvOkc6UzqnOnSwgzprOkc6hzpTOmc6pzqTOmc6jzqPOkSDOms6lzprOm86RzpTOqc6dLCDOo86ZzprOmc6dzp/OoyDOms6lzprOm86RzpTOqc6dJywgUHJlZmVjdHVyZTogJ86az4XOus67zqzOtM+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg0MDExJywgQXJlYTogJ86RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOps6fzpvOlc6TzpHOnc6UzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzqbOn86bzpXOk86Rzp3OlM6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOkc6TzprOkc6bzpcgzqbOn86bzpXOk86Rzp3OlM6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOkc6dzqkgzpzOlc6hzpnOkSDOps6fzpvOlc6TzpHOnc6UzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6UzqHOkc6azp/Onc6XzqPOmc6fIM6azqXOms6bzpHOlM6pzp0sIM6azpHOoc6RzpLOn86jzqTOkc6jzpfOoyDOps6fzpvOlc6TzpHOnc6UzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6bzpnOks6RzpTOmSDOps6fzpvOlc6TzpHOnc6UzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6kzqHOmc6RIM6RzpTOlc6bzqbOmc6RIM6azqXOms6bzpHOlM6pzp0sIM6mzp/Om86VzpPOkc6dzpTOoc6fzqMgzprOpc6azpvOkc6UzqnOnScsIFByZWZlY3R1cmU6ICfOms+FzrrOu86szrTPic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NDEwMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOo86lzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOoc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOlM6VzpnOkc6kzpEgzprOpc6azpvOkc6UzqnOnSwgzpHOls6fzpvOmc6czp3On86jIM6SzpHOoc6XzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOls6fzpvOmc6czp3On86jIM6czpHOnc6dzpEgzprOpc6azpvOkc6UzqnOnSwgzpHOlyDOnM6ZzqfOkc6bzpfOoyDOms6lzprOm86RzpTOqc6dLCDOkc6bzpfOmM6Zzp3OlyDOms6lzprOm86RzpTOqc6dLCDOkc6dzqkgzpzOkc6dzp3OkSDOms6lzprOm86RzpTOqc6dLCDOkc6dzqkgzqPOpc6hzp/OoyDOms6lzprOm86RzpTOqc6dLCDOkc6jzqDOoc6fIM6jzqXOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpLOkc6hzpLOkc6hzp/Opc6jzpEgzprOpc6azpvOkc6UzqnOnSwgzpLOkc6hzpcgzprOpc6azpvOkc6UzqnOnSwgzpLOl86jzqPOkSDOms6lzprOm86RzpTOqc6dLCDOk86RzpvOl86jzqPOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6TzqXOkc6hzp/OoyDOnc6XzqPOn86jIM6azqXOms6bzpHOlM6pzp0sIM6UzpHOnc6RzprOn86jIM6jzqXOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpTOmc6UzqXOnM6XIM6dzpfOo86fzqMgzprOpc6azpvOkc6UzqnOnSwgzpXOoM6ZzqPOms6fzqDOlc6Zzp8gzqPOpc6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOlc6hzpzOn86lzqDOn86bzpcgzprOpc6azpvOkc6UzqnOnSwgzprOmc6dzpnOnyDOms6lzprOm86RzpTOqc6dLCDOnM6Rzp3Onc6RIM6azqXOms6bzpHOlM6pzp0sIM6czpXOk86RzqMgzpPOmc6RzpvOn86jIM6SzpHOoc6XzqMgzprOpc6azpvOkc6UzqnOnSwgzpzOlc6TzpHOoyDOk86ZzpHOm86fzqMgzqDOn86jzpXOmc6UzqnOnc6ZzpHOoyDOms6lzprOm86RzpTOqc6dLCDOnM6VzqPOkc6hzpnOkSDOo86lzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6czqXOpM6kzpHOms6RzqMgzprOpc6azpvOkc6UzqnOnSwgzp3Okc6kzpEgzprOpc6azpvOkc6UzqnOnSwgzqDOkc6Tzp/OoyDOms6lzprOm86RzpTOqc6dLCDOoM6RzqDOn86lzqHOmSDOms6lzprOm86RzpTOqc6dLCDOoM6RzqHOkc6azp/OoM6XIM6azqXOms6bzpHOlM6pzp0sIM6gzpvOkc6kzqUgzpLOn86lzp3OmSDOms6lzprOm86RzpTOqc6dLCDOoM6fzqPOlc6ZzpTOqc6dzpnOkSDOms6lzprOm86RzpTOqc6dLCDOo86nzpnOnc6fzp3Ol86jzpkgzqDOn86jzpXOmc6UzqnOnc6ZzpHOoyDOms6lzprOm86RzpTOqc6dLCDOpM6RzpvOkc6dzqTOkSDOms6lzprOm86RzpTOqc6dLCDOps6fzpnOnc6ZzprOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6mzp/Omc6dzpnOms6ZzpEgzpHOnc6pIM6jzqXOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzqfOkc6bzpHOnc6UzqHOmc6Rzp3OlyDOms6lzprOm86RzpTOqc6dLCDOp86hzp/Opc6jzpEgzprOpc6azpvOkc6UzqnOnScsIFByZWZlY3R1cmU6ICfOms+FzrrOu86szrTPic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NDIwMCcsIEFyZWE6ICfOkc6TzpHOoM6XIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOmc6RIM6SzpHOoc6SzpHOoc6RIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOpM6Xzp3On86lIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOmc6fzqMgzqHOqc6czpHOnc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOk86Zzp/OoyDOo86pzqPOpM6XzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOk86Zzp/OoyDOps6pzprOkc6jIM6kzpfOnc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpHOlc6kzp/Ops6pzptJzpEgzprOpc6azpvOkc6UzqnOnSwgzpHOoc6dzpHOlM6fzqMgzprOpc6azpvOkc6UzqnOnSwgzpLOqc6bzpHOniDOpM6Xzp3On86lIM6azqXOms6bzpHOlM6pzp0sIM6UzqXOnyDOp86pzqHOmc6RIM6azqXOms6bzpHOlM6pzp0sIM6azpHOm86bzp/Onc6XIM6kzpfOnc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzprOkc6czqDOn86jIM6kzpfOnc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzprOkc6hzqXOkSDOms6lzprOm86RzpTOqc6dLCDOms6RzqTOqSDOms6bzpXOmc6jzpzOkSDOms6lzprOm86RzpTOqc6dLCDOms6VzqfOoc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzprOmc6fzp3Omc6RICDOms6lzprOm86RzpTOqc6dLCDOms6fzpvOpc6czqDOl86YzqHOkSDOpM6Xzp3On86lIM6azqXOms6bzpHOlM6pzp0sIM6azp/Opc6czpHOoc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzprOoc6fzprOn86jIM6azqXOms6bzpHOlM6pzp0sIM6azqTOmc6azpHOlM6fzqMgzprOpc6azpvOkc6UzqnOnSwgzprOqc6czpcgzprOpc6azpvOkc6UzqnOnSwgzpvOkc6fzqXOpM6XIM6azqXOms6bzpHOlM6pzp0sIM6bzpnOks6RzpTOkSDOms6lzprOm86RzpTOqc6dLCDOm86ZzpzOlc6dzpHOoyDOo86kzpHOpc6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOm86fzqXOpM6hzpEgzqTOl86dzp/OpSDOms6lzprOm86RzpTOqc6dLCDOm86lzqfOnc6RzqbOpM6ZzpEgzprOpc6azpvOkc6UzqnOnSwgzpzOlc6jzpcgzqTOl86dzp/OpSDOms6lzprOm86RzpTOqc6dLCDOnM6fzp3Okc6jzqTOl86hzpnOkSDOpM6Xzp3On86lIM6azqXOms6bzpHOlM6pzp0sIM6czp/Onc6XIM6azp/Omc6czpfOo86VzqnOoyDOmM6Vzp/OpM6fzprOn86lIM6azpXOp86hzp/Oks6fzqXOnc6Zzp/OpSDOms6lzprOm86RzpTOqc6dLCDOnM6fzqXOnc6kzpHOlM6fzqMgzprOpc6azpvOkc6UzqnOnSwgzpzOoM6VzqHOlM6VzpzOmc6RzqHOn86jICDOms6lzprOm86RzpTOqc6dLCDOnM6lzqHOo86Zzp3OlyDOms6lzprOm86RzpTOqc6dLCDOns6Zzp3Okc6hzpEgzprOpc6azpvOkc6UzqnOnSwgzp/Ooc6czp/OoyDOkc6TzpnOn86lIM6ZzqnOkc6dzp3OlyDOpM6Xzp3On86lIM6azqXOms6bzpHOlM6pzp0sIM6gzpXOoc6RzqPOpM6hzpEgzprOpc6azpvOkc6UzqnOnSwgzqDOn86kzpHOnM6ZzpEgzprOpc6azpvOkc6UzqnOnSwgzqDOpc6hzpPOn86jIM6kzpfOnc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzqPOms6RzpvOkc6Uzp/OoyAgzprOpc6azpvOkc6UzqnOnSwgzqPOms6bzpHOks6fzqfOqc6hzpkgzprOpc6azpvOkc6UzqnOnSwgzqPOnM6RzqHOlM6RzprOmSDOms6lzprOm86RzpTOqc6dLCDOo86gzpXOoc6RzpTOn86jICDOms6lzprOm86RzpTOqc6dLCDOo86kzpXOnc6XIM6azqXOms6bzpHOlM6pzp0sIM6kzpHOoc6RzpzOoM6RzpTOn86jIM6azqXOms6bzpHOlM6pzp0sIM6kzpbOkc6Uzp/OoyDOms6lzprOm86RzpTOqc6dLCDOpM6Xzp3On86jIM6azqXOms6bzpHOlM6pzp0sIM6kzqHOmc6Rzp3OpM6RzqHOn86jIM6azqXOms6bzpHOlM6pzp0sIM6kzqHOmc6gzp/OpM6RzpzOn86jIM6azqXOms6bzpHOlM6pzp0sIM6mzpHOm86RzqTOkc6Uzp/OoyDOms6lzprOm86RzpTOqc6dLCDOps6VzqHOnyDOp86pzqHOmc6fIM6azqXOms6bzpHOlM6pzp0sIM6nzpHOpM6WzpnOoc6RzpTOn86jIM6azqXOms6bzpHOlM6pzp0nLCBQcmVmZWN0dXJlOiAnzprPhc66zrvOrM60z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODQzMDAnLCBBcmVhOiAnzpHOk86ZzpEgzpHOnc6dzpEgzprOpc6azpvOkc6UzqnOnSwgzpHOk86Zzp/OmSDOoM6Rzp3OpM6VzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOk86Zzp/OoyDOkc6dzpTOoc6VzpHOoyDOms6fzqXOps6fzp3Ol86jzpnOn86lIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOmc6fzqMgzpHOoc6jzpXOnc6Zzp/OoyAgzprOpc6azpvOkc6UzqnOnSwgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6XzqHOkc6azpvOlc6ZzpHOoyDOms6lzprOm86RzpTOqc6dLCDOkc6TzpnOn86jIM6YzpHOm86VzpvOkc6Zzp/OoyDOms6lzprOm86RzpTOqc6dLCDOkc6TzpnOn86jIM6gzqHOn86azp/OoM6Zzp/OoyDOms6lzprOm86RzpTOqc6dLCDOkc6TzprOmc6UzpnOkSDOms6lzprOm86RzpTOqc6dLCDOkc6dzqkgzqDOn86kzpHOnM6ZzpEgzp3Okc6ezp/OpSDOms6lzprOm86RzpTOqc6dLCDOkc6dzqkgzqPOkc6TzprOoc6ZIM6azqXOms6bzpHOlM6pzp0sIM6RzqHOk86ZzpvOn86jIM6azqXOms6bzpHOlM6pzp0sIM6SzpXOnc6VzqTOmc6azp8gzprOpc6azpvOkc6UzqnOnSwgzpLOmc6SzpvOn86jIM6azqXOms6bzpHOlM6pzp0sIM6Szp/Opc6bzpPOkc6hzpcgzprOpc6azpvOkc6UzqnOnSwgzpPOkc6bzpHOnc6RzpTOnyDOms6lzprOm86RzpTOqc6dLCDOk86RzpvOl86dzpcgzprOpc6azpvOkc6UzqnOnSwgzpPOm86RzqHOn86dzpfOo86ZIM6azp/Opc6mzp/Onc6XzqPOmc6pzp0gzprOpc6azpvOkc6UzqnOnSwgzpPOm86Zzp3Okc6Uzp8gzprOpc6azpvOkc6UzqnOnSwgzpTOn86dzp/Opc6jzpEgzprOpc6azpvOkc6UzqnOnSwgzpXOk86TzpHOoc6VzqMgzprOpc6azpvOkc6UzqnOnSwgzpfOoc6RzprOm86VzpnOkSDOms6lzprOm86RzpTOqc6dLCDOms6RzpvOn86kzpHOoc6ZzqTOmc6jzqPOkSDOlM6fzp3On86lzqPOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6azpHOnc6RzprOkc6hzpkgzprOpc6azpvOkc6UzqnOnSwgzprOkc6jzqTOoc6RzprOmSAgzprOpc6azpvOkc6UzqnOnSwgzprOkc6kzqkgzprOn86lzqbOn86dzpfOo86ZIM6azqXOms6bzpHOlM6pzp0sIM6azpHOpM6pIM6gzp/OpM6RzpzOmc6RIM6dzpHOns6fzqUgzprOpc6azpvOkc6UzqnOnSwgzprOkc6kzqkgzqPOkc6TzprOoc6ZIM6azqXOms6bzpHOlM6pzp0sIM6azpvOmc6Uzp/Opc6hzpEgzprOpc6azpvOkc6UzqnOnSwgzprOn86lzqHOn86lzp3On86nzqnOoc6ZIM6azqXOms6bzpHOlM6pzp0sIM6azp/Opc6mzp/Onc6XzqPOmSDOms6lzprOm86RzpTOqc6dLCDOm86RzpbOkc6hzp/OoyDOms6lzprOm86RzpTOqc6dLCDOnM6RzqHOkc6TzprOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6czpHOo86kzp/Ooc6RzprOl86jIM6azqXOms6bzpHOlM6pzp0sIM6czpHOp86RzpnOoc6VzqMgzprOpc6azpvOkc6UzqnOnSwgzpzOlc6TzpHOm86XIM6gzpvOkc6azpEgzprOpc6azpvOkc6UzqnOnSwgzpzOlc6TzpHOm86fzqMgzpHOks6VzpvOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6czpXOm86Rzp3Olc6jIM6azqXOms6bzpHOlM6pzp0sIM6czpXOoc6jzpnOnc6XIM6Uzp/Onc6fzqXOo86RzqMgzprOpc6azpvOkc6UzqnOnSwgzpzOlc6jzpHOoc6ZzpEgzqPOp86fzpnOnc6fzqXOo86jzpHOoyDOms6lzprOm86RzpTOqc6dLCDOnM6VzqPOlyDOoM6fzqTOkc6czpnOkSDOms6lzprOm86RzpTOqc6dLCDOnM6ZzprOoc6XIM6SzpnOk86bzpEgzprOpc6azpvOkc6UzqnOnSwgzpzOmc6azqHOn86jIM6RzpLOlc6bzpHOoyDOms6lzprOm86RzpTOqc6dLCDOnM6fzp3OlyDOp86hzqXOo86fzqPOpM6fzpzOn86lIM6azqXOms6bzpHOlM6pzp0sIM6czqXOm86fzpkgzp3Okc6ezp/OpSDOms6lzprOm86RzpTOqc6dLCDOnc6Rzp7On86jIM6azqXOms6bzpHOlM6pzp0sIM6fzqbOlc6ZzpTOn86lzqPOo86RIM6azqXOms6bzpHOlM6pzp0sIM6gzpHOnc6RzpPOmc6RIM6dzpHOns6fzqUgzprOpc6azpvOkc6UzqnOnSwgzqDOm86RzprOkSDOnc6Rzp7On86lIM6azqXOms6bzpHOlM6pzp0sIM6gzpvOkc6azpcgzprOn86lzqbOn86dzpfOo86ZzqnOnSDOms6lzprOm86RzpTOqc6dLCDOoM6hzpHOo86fzqXOoc6RIM6azqXOms6bzpHOlM6pzp0sIM6jzprOpc6bzp/Onc6XzqPOmSDOlM6fzp3On86lzqPOl86jIM6azqXOms6bzpHOlM6pzp0sIM6jzqTOlc6bzpnOlM6RIM6azqXOms6bzpHOlM6pzp0sIM6jzqTOoc6fzpPOk86lzpvOlyDOnc6XzqPOn86jIM6azqXOms6bzpHOlM6pzp0sIM6jzqfOn86Zzp3On86lzqPOo86RIM6azqXOms6bzpHOlM6pzp0sIM6kzqPOn86lzpvOn86lzqbOmSDOms6lzprOm86RzpTOqc6dLCDOps6fzpnOnc6ZzprOkc6jIM6azp/Opc6mzp/Onc6XzqPOmc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzqfOkc6hzpHOpc6TzpcgzpTOn86dzp/Opc6jzpHOoyDOms6lzprOm86RzpTOqc6dJywgUHJlZmVjdHVyZTogJ86az4XOus67zqzOtM+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg0MzAyJywgQXJlYTogJ86RzpPOmc6RzqPOo86fzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOls6RzpvOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6RzpkgzpPOmc6Rzp3Onc6XzqMgzpvOlc6lzprOqc6dzpfOoyDOms6lzprOm86RzpTOqc6dLCDOkc6azqHOqc6kzpfOoc6ZIM6dzpHOns6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpHOoM6VzpnOoc6RzpjOn86jIM6azqXOms6bzpHOlM6pzp0sIM6Szp/Opc6hzpLOn86lzqHOmc6RIM6azqXOms6bzpHOlM6pzp0sIM6UzpHOnM6RzpvOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6UzpHOnM6RzqHOmc6pzp3Okc6jIM6azqXOms6bzpHOlM6pzp0sIM6UzpHOnc6RzprOn86jIM6dzpHOns6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpbOqc6fzpTOn86nzp/OoyDOoM6XzpPOlyDOnc6Rzp7On86lIM6azqXOms6bzpHOlM6pzp0sIM6azpHOm86Rzp3OpM6fzqMgzprOpc6azpvOkc6UzqnOnSwgzprOkc6dzpHOms6ZIM6azqXOms6bzpHOlM6pzp0sIM6azpXOoc6RzpzOqc6kzpcgzprOpc6azpvOkc6UzqnOnSwgzprOmc6dzpnOlM6RzqHOn86jIM6azqXOms6bzpHOlM6pzp0sIM6azpvOlc6ZzpTOqSDOms6lzprOm86RzpTOqc6dLCDOm86lzpPOkc6hzpnOlM6ZzpEgzprOpc6azpvOkc6UzqnOnSwgzpzOn86dzpcgzprOpc6azpvOkc6UzqnOnSwgzpzOn86lzqTOo86fzqXOnc6RIM6azqXOms6bzpHOlM6pzp0sIM6gzpHOnc6VzqHOnM6fzqMgzprOpc6azpvOkc6UzqnOnSwgzqDOpc6hzpPOkc6azpkgzp3Okc6ezp/OpSDOms6lzprOm86RzpTOqc6dLCDOoc6RzqfOlyDOms6lzprOm86RzpTOqc6dLCDOo86ZzqbOqc6dzpXOoyDOms6lzprOm86RzpTOqc6dLCDOps6ZzpvOn86kzpkgzprOpc6azpvOkc6UzqnOnSwgzqfOkc6bzprOlc6Zzp8gzprOpc6azpvOkc6UzqnOnScsIFByZWZlY3R1cmU6ICfOms+FzrrOu86szrTPic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NDQwMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6RzqHOpM6VzpzOmc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOpM6hzqXOoM6XzqTOl86jIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOoM6RzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOmc6fzqMgzqPOoM6lzqHOmc6UzqnOnc6RzqMgzp3Ol86jzp/OoyDOms6lzprOm86RzpTOqc6dLCDOkc6TzpnOn86jIM6nzpHOoc6RzpvOkc6czqDOn86jIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOmc6pzp0gzpjOlc6fzpTOqc6hzqnOnSDOms6lzprOm86RzpTOqc6dLCDOkc6TzprOkc6ZzqHOmc6RIM6azqXOms6bzpHOlM6pzp0sIM6RzpvOpc6azpcgzqDOkc6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOkc6dzpXOoc6RzqTOls6RIM6azqXOms6bzpHOlM6pzp0sIM6RzqPOoM6hzp8gzqfOqc6hzpnOnyDOms6lzprOm86RzpTOqc6dLCDOks6fzqXOnc6ZzpEgzpvOlc6lzprOqc6dIM6azqXOms6bzpHOlM6pzp0sIM6Szp/Opc6dzpnOkSDOoM6RzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6Szp/Opc6kzpHOms6fzqMgzpHOk86azpHOmc6hzpnOkc6jIM6gzpHOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpLOn86lzqTOkc6azp/OoyDOms6lzprOm86RzpTOqc6dLCDOk86RzpnOlM6fzqXOoc6fzp3Ol86jzpkgzqDOkc6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOk86RzpvOmc6RzqTOo86fzqMgzprOpc6azpvOkc6UzqnOnSwgzpPOm86RzqHOn86czqDOn86lzqTOkSDOms6lzprOm86RzpTOqc6dLCDOk86bzpHOoc6fzqDOn86lzp3OpM6RIM6gzpHOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpPOm86lzqPOmc6UzpEgzprOpc6azpvOkc6UzqnOnSwgzpPOm86lzqbOkSDOoM6RzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6TzpvOpc6mzpHOlM6VzqMgzprOpc6azpvOkc6UzqnOnSwgzpTOoc6lzp/Onc6XzqPOmSDOms6lzprOm86RzpTOqc6dLCDOlM6hzqXOn86jIM6azqXOms6bzpHOlM6pzp0sIM6VzpLOoc6Zzp/Oms6RzqPOpM6hzp8gzprOpc6azpvOkc6UzqnOnSwgzpXOm86XzqTOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6ZzpXOoc6RIM6czp/Onc6XIM6YzpHOqM6Rzp3Oqc6dIM6azqXOms6bzpHOlM6pzp0sIM6ZzqPOpM6VzqHOnc6Zzp8gzprOpc6azpvOkc6UzqnOnSwgzprOkc6azpHOoM6VzqTOoc6RIM6azqXOms6bzpHOlM6pzp0sIM6azpHOm86RzpzOmSAgzqDOkc6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOms6RzpzOkc6hzpXOoyDOnc6Rzp/Opc6jzpHOoyDOoM6RzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6azpHOnM6RzqHOlc6jIM6gzpHOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzprOkc6czpHOoc6ZIM6RzpPOms6RzpnOoc6ZzpHOoyDOms6lzprOm86RzpTOqc6dLCDOms6RzpzOoM6fzpkgzqDOkc6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOms6RzpzOoM6fzqMgzqDOkc6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOms6fzqXOms6fzqXOnM6RzpvOlc6lzqMgzprOpc6azpvOkc6UzqnOnSwgzprOoc6pzqTOl86hzpkgzprOpc6azpvOkc6UzqnOnSwgzprOqc6jzqTOn86jIM6azqXOms6bzpHOlM6pzp0sIM6bzpHOk86azpHOlM6RIM6gzpHOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpvOlc6lzprOlc6jIM6gzpHOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpvOn86TzpHOoc6RzqMgzprOpc6azpvOkc6UzqnOnSwgzpzOkc6azqHOmc6RIM6czqXOpM6XIM6azqXOms6bzpHOlM6pzp0sIM6czpHOms6hzp/Onc6XzqPOmSDOms6lzprOm86RzpTOqc6dLCDOnM6RzqHOkc6YzpkgzprOpc6azpvOkc6UzqnOnSwgzpzOkc6hzpzOkc6hzpEgzprOpc6azpvOkc6UzqnOnSwgzpzOkc6hzqDOl86jzqPOkSDOms6lzprOm86RzpTOqc6dLCDOnM6RzqXOoc6fzp3Ol86jzpkgzprOpc6azpvOkc6UzqnOnSwgzpzOn86dzpcgzpHOk86ZzqnOnSDOmM6Vzp/OlM6pzqHOqc6dIM6azqXOms6bzpHOlM6pzp0sIM6czp/Onc6XIM6nzqHOmc6jzqTOn86lIM6UzpHOo86fzqXOoyDOms6lzprOm86RzpTOqc6dLCDOnM6pzpvOn86jIM6gzpHOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzqDOkc6dzqTOlc6hzp/Onc6XzqPOmSDOms6lzprOm86RzpTOqc6dLCDOoM6RzqHOkc6jzqDOn86hzp/OoyDOms6lzprOm86RzpTOqc6dLCDOoM6RzqHOn86jIM6azqXOms6bzpHOlM6pzp0sIM6gzpnOo86pIM6bzpnOks6RzpTOmSDOms6lzprOm86RzpTOqc6dLCDOoM6fzqXOnc6kzpEgzprOpc6azpvOkc6UzqnOnSwgzqDOoc6fzpTOoc6fzpzOn86jIM6azqXOms6bzpHOlM6pzp0sIM6gzqXOoc6TzpHOms6ZIM6gzpHOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzqPOkc6hzpHOms6Zzp3Omc6azp8gzprOpc6azpvOkc6UzqnOnSwgzqPOqc6kzpfOoc6VzqMgzprOpc6azpvOkc6UzqnOnSwgzqTOlc6kzpHOoc6kzp/Onc6XzqPOmSDOoM6RzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6kzpbOkc6dzpXOoyDOms6lzprOm86RzpTOqc6dLCDOpM6fzqXOoc6bzp/OoyDOnc6Rzp/Opc6jzpfOoyDOms6lzprOm86RzpTOqc6dLCDOpM6fzqXOoc6bzp/OoyDOoM6RzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6kzqPOn86lzprOkc6bzpHOoyDOms6lzprOm86RzpTOqc6dLCDOpM6jzp/Opc6azpHOm86ZzpEgzprOpc6azpvOkc6UzqnOnSwgzqXOo86kzpXOoc6dzpnOkSDOms6lzprOm86RzpTOqc6dLCDOps6ZzpvOmc6UzpkgzprOpc6azpvOkc6UzqnOnSwgzqbOn86Zzp3Omc6jzqPOlc6jIM6gzpHOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzqfOoc6lzqPOlyDOkc6azqTOlyDOoM6RzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6nzqnOoc6ZzpTOkc6azpkgzprOpc6azpvOkc6UzqnOnScsIFByZWZlY3R1cmU6ICfOms+FzrrOu86szrTPic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NDQwMScsIEFyZWE6ICfOkc6TzpnOkSDOms6RzpvOlyDOnc6XzqPOn86jIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOmc6fzqMgzpHOnc6UzqHOlc6RzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOnM6gzpXOm86RzqMgzprOpc6azpvOkc6UzqnOnSwgzprOn86bzqXOnM6gzpfOmM6hzpXOoyDOoM6RzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6bzpHOk86azpXOoc6XIM6azqXOms6bzpHOlM6pzp0sIM6bzpnOks6RzpTOmc6RIM6gzpHOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpzOn86dzpcgzpHOk86Zzp/OpSDOkc6dzqTOqc6dzpnOn86lIM6azqXOms6bzpHOlM6pzp0sIM6czp/Onc6XIM6bzp/Ok86Tzp/Oks6RzqHOlM6RzqMgzprOpc6azpvOkc6UzqnOnSwgzp3Okc6fzqXOo86RIM6gzpHOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzp7Omc6mzpHOoc6RIM6azqXOms6bzpHOlM6pzp0sIM6gzqHOqc6kzp/Ooc6TzpnOkSDOms6lzprOm86RzpTOqc6dJywgUHJlZmVjdHVyZTogJ86az4XOus67zqzOtM+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg0NTAwJywgQXJlYTogJ86RzpPOmc6RIM6VzpvOlc6fzqXOo86RIM6azqXOms6bzpHOlM6pzp0sIM6RzprOkc6czpHOpM6XzqMgzpHOnc6UzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6RzpvOkc6UzpnOnc6fIM6azqXOms6bzpHOlM6pzp0sIM6RzpvOkc6Uzp8gzprOpc6azpvOkc6UzqnOnSwgzpHOm86ZzprOkc6dzpTOoc6fIM6azqXOms6bzpHOlM6pzp0sIM6RzpzOn86bzp/Op86fzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOnc6UzqHOn86jIM6azqXOms6bzpHOlM6pzp0sIM6Rzp3OqSDOkc6gzqHOn86SzpHOpM6fIM6azqXOms6bzpHOlM6pzp0sIM6RzqDOn86ZzprOmc6RIM6azqXOms6bzpHOlM6pzp0sIM6SzpHOms6fzp3OmSDOnM6VzqPOo86RzqHOmc6RzqMgzprOpc6azpvOkc6UzqnOnSwgzpLOn86lzqHOms6pzqTOlyDOms6lzprOm86RzpTOqc6dLCDOks6hzpHOp86dzp/OoyDOms6lzprOm86RzpTOqc6dLCDOls6RzpPOkc6dzpnOkc6hzpfOoyDOms6lzprOm86RzpTOqc6dLCDOms6RzpvOkc6czpHOms6ZIM6azqXOms6bzpHOlM6pzp0sIM6azpHOpM6RzprOkc6bzpHOmc6fzpkgzprOpc6azpvOkc6UzqnOnSwgzprOkc6kzqkgzpHOoM6hzp/Oks6RzqTOnyDOms6lzprOm86RzpTOqc6dLCDOms6fzpvOpc6czqDOn86jIM6azqXOms6bzpHOlM6pzp0sIM6azp/Opc6czpHOnc6kzpcgzprOpc6azpvOkc6UzqnOnSwgzprOn86lzqHOlc6bzpkgzprOpc6azpvOkc6UzqnOnSwgzprOn86lzqTOo86Zzp8gzprOpc6azpvOkc6UzqnOnSwgzpvOkc6czqXOoc6RIM6azqXOms6bzpHOlM6pzp0sIM6bzpnOks6RzpTOmc6RIM6Rzp3OlM6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOnM6VzpvOmc6UzpEgzprOpc6azpvOkc6UzqnOnSwgzpzOlc6dzpfOpM6VzqMgzprOpc6azpvOkc6UzqnOnSwgzpzOlc6jzpEgzqfOqc6hzpnOnyDOms6lzprOm86RzpTOqc6dLCDOnM6VzqPOkc6Yzp/Opc6hzpkgIM6azqXOms6bzpHOlM6pzp0sIM6czpXOo86RzqHOmc6RIM6Rzp3OlM6hzp/OpSDOms6lzprOm86RzpTOqc6dLCDOnM6fzp3OlyDOkc6TzpnOn86lIM6dzpnOms6fzpvOkc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpzOn86dzpcgzqDOkc6dzpHOp86hzpHOnc6kzp/OpSDOms6lzprOm86RzpTOqc6dLCDOn86hzpXOmc6dzp8gzprOpc6azpvOkc6UzqnOnSwgzqDOkc6bzpHOmc6gzp/Om86XIM6azqXOms6bzpHOlM6pzp0sIM6gzpnOpM6hzp/Ops6fzqMgzprOpc6azpvOkc6UzqnOnSwgzqPOpM6Vzp3Omc6VzqMgzprOpc6azpvOkc6UzqnOnSwgzqPOpM6hzpHOoM6fzqXOoc6ZzpXOoyDOms6lzprOm86RzpTOqc6dLCDOo86lzp3Olc6kzpnOnyDOms6lzprOm86RzpTOqc6dLCDOpc6ozpfOm86RIM6azqXOms6bzpHOlM6pzp0sIM6mzpHOm86bzpnOms6RIM6azqXOms6bzpHOlM6pzp0nLCBQcmVmZWN0dXJlOiAnzprPhc66zrvOrM60z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODQ1MDEnLCBBcmVhOiAnzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOkc6dzpTOoc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpHOk86Zzp/OoyDOoM6VzqTOoc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOk86Zzp/OoyDOo86lzpzOlc6pzp0gzpHOnc6UzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6Rzp3OqSDOk86RzqXOoc6Zzp8gzprOpc6azpvOkc6UzqnOnSwgzpHOoc6dzpcgzprOpc6azpvOkc6UzqnOnSwgzpHOpM6Vzp3OlyDOkc6hzp3OkSDOms6lzprOm86RzpTOqc6dLCDOkc6kzpXOnc6XIM6azpHOpM6RzprOn86ZzpvOn86lICDOms6lzprOm86RzpTOqc6dLCDOks6RzqHOmc6UzpkgzprOpc6azpvOkc6UzqnOnSwgzpLOmc6kzpHOm86ZIM6azqXOms6bzpHOlM6pzp0sIM6TzpHOmc6UzpHOoc6fzqMgzpPOkc6lzqHOmc6fzqUgzpHOnc6UzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6TzpHOpc6hzpnOnyDOms6lzprOm86RzpTOqc6dLCDOk86ZzpTOlc6jIM6azqXOms6bzpHOlM6pzp0sIM6UzpHOnM6RzqPOms6Xzp3On86jIM6azqXOms6bzpHOlM6pzp0sIM6VzqDOkc6dzqkgzqbOlc6bzpvOn86jIM6azqXOms6bzpHOlM6pzp0sIM6azpHOm86lzpLOkc6hzpkgzprOpc6azpvOkc6UzqnOnSwgzprOkc6kzpHOms6fzpnOm86fzqMgzprOpc6azpvOkc6UzqnOnSwgzprOkc6kzqkgzpHOk86Zzp/OoyDOoM6VzqTOoc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzprOkc6kzqkgzprOkc6kzpHOms6fzpnOm86fzqMgzprOpc6azpvOkc6UzqnOnSwgzprOkc6kzqkgzqbOlc6bzpvOn86jIM6azqXOms6bzpHOlM6pzp0sIM6azp/Opc6czpHOoc6ZIM6azqXOms6bzpHOlM6pzp0sIM6azqXOoM6hzpkgzprOpc6azpvOkc6UzqnOnSwgzpzOkc6azqHOn86kzpHOnc6kzpHOm86fIM6azqXOms6bzpHOlM6pzp0sIM6czpXOk86RzpvOnyDOms6lzprOm86RzpTOqc6dLCDOnM6VzqHOnM6XzpPOms6ZzpXOoyDOms6lzprOm86RzpTOqc6dLCDOnM6fzp3OlyDOls6pzp/OlM6fzqfOn86lIM6gzpfOk86XzqMgzprOpc6azpvOkc6UzqnOnSwgzpzOoM6RzqTOo86ZIM6azqXOms6bzpHOlM6pzp0sIM6gzpHOm86RzpnOo86kzp8gzprOpc6azpvOkc6UzqnOnSwgzqDOmc6jzqkgzpvOmc6czp3Omc6pzp3Okc6jIM6azqXOms6bzpHOlM6pzp0sIM6gzpvOkc6kzqUgzpHOnc6UzqHOn86lIM6azqXOms6bzpHOlM6pzp0sIM6gzqHOkc6jzqPOnyDOms6lzprOm86RzpTOqc6dLCDOoc6VzqXOnM6RzqTOkSDOms6lzprOm86RzpTOqc6dLCDOo86kzpnOks6RzqHOmSDOms6lzprOm86RzpTOqc6dLCDOo86nzp/Om86XICDOms6lzprOm86RzpTOqc6dLCDOpM6fzqXOoc6bzpnOpM6XzqMgzprOpc6azpvOkc6UzqnOnSwgzqfOkc6hzqTOlc6jIM6azqXOms6bzpHOlM6pzp0nLCBQcmVmZWN0dXJlOiAnzprPhc66zrvOrM60z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODQ2MDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOnM6lzprOn86dzp/OpSDOms6lzprOm86RzpTOqc6dLCDOkc6TzpnOn86jIM6jzqTOlc6mzpHOnc6fzqMgzpzOpc6azp/Onc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpHOk86hzpHOoc6ZIM6azqXOms6bzpHOlM6pzp0sIM6Rzp3OqSDOnM6VzqHOkSDOms6lzprOm86RzpTOqc6dLCDOlM6XzpvOn86jIM6dzpfOo86fzqMgzprOpc6azpvOkc6UzqnOnSwgzpXOm86ZzpEgzprOpc6azpvOkc6UzqnOnSwgzprOkc6Szp/Opc6hzpHOoyDOnM6lzprOn86dzp/OpSDOms6lzprOm86RzpTOqc6dLCDOms6RzpvOkc6mzpHOpM6XIM6azqXOms6bzpHOlM6pzp0sIM6azpvOn86lzpLOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6azp/Opc6dzp/Opc6gzpHOoyDOms6lzprOm86RzpTOqc6dLCDOms6hzp/OnM6czqXOlM6ZIM6azqXOms6bzpHOlM6pzp0sIM6azqTOkc6gzp/OlM6ZzpEgzprOpc6azpvOkc6UzqnOnSwgzpvOmc6RIM6azqXOms6bzpHOlM6pzp0sIM6czpHOoc6czpHOoc6fzp3Ol86jzpkgzpzOpc6azp/Onc6fzqUgzprOpc6azpvOkc6UzqnOnSwgzpzOoM6Rzp/OoyDOnc6XzqPOn86jIM6azqXOms6bzpHOlM6pzp0sIM6czqXOms6fzp3On86jIM6azqXOms6bzpHOlM6pzp0sIM6fzqHOnc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzqDOm86RzqTOpc6jIM6TzpnOkc6bzp/OoyDOnM6lzprOn86dzp/OpSDOms6lzprOm86RzpTOqc6dLCDOoM6bzqXOnc6kzqHOmSDOms6lzprOm86RzpTOqc6dLCDOoc6Xzp3Olc6ZzpEgIM6dzpfOo86fzqMgzprOpc6azpvOkc6UzqnOnSwgzqPOps6fzp3OpM6XzpvOmSDOnM6lzprOn86dzp/OpSDOms6lzprOm86RzpTOqc6dLCDOpM6XzpPOkc6dzpkgzqHOkc6dzqTOkc6hIM6azqXOms6bzpHOlM6pzp0sIM6kzp/Opc6hzpvOn86jIM6czqXOms6fzp3On86lIM6azqXOms6bzpHOlM6pzp0sIM6kzqHOkc6Tzp/Onc6XzqPOmSDOms6lzprOm86RzpTOqc6dLCDOps6RzqHOn86jIM6RzqHOnM6Vzp3Omc6jzqTOl86jIM6azqXOms6bzpHOlM6pzp0sIM6ozpHOoc6hzp/OpSDOms6lzprOm86RzpTOqc6dJywgUHJlZmVjdHVyZTogJ86az4XOus67zqzOtM+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg0NzAwJywgQXJlYTogJ86RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOks6fzpjOqc6dzp/OoyAgzpjOl86hzpHOoyDOms6lzprOm86RzpTOqc6dLCDOkc6azqHOqc6kzpfOoc6ZIM6YzpfOoc6RzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOnc6lzpTOoc6fzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOo86azpHOnc6ZzpEgzpjOl86hzpHOoyDOms6lzprOm86RzpTOqc6dLCDOkc6jzqDOoc6fzp3Ol86jzpkgzpjOl86hzpHOoyDOms6lzprOm86RzpTOqc6dLCDOks6fzpjOqc6dzpHOoyDOms6lzprOm86RzpTOqc6dLCDOks6fzqXOoc6Szp/Opc6bzp/OoyDOms6lzprOm86RzpTOqc6dLCDOlc6ezqkgzpPOmc6RzpvOn86jIM6azpHOoc6kzpXOoc6RzpTOn86lIM6azqXOms6bzpHOlM6pzp0sIM6Vzp7OqSDOk86ZzpHOm86fzqMgzprOpc6azpvOkc6UzqnOnSwgzpXOns6pIM6TzqnOnc6ZzpEgzprOpc6azpvOkc6UzqnOnSwgzpXOns6pIM6azpHOpM6fzpnOms6ZzpXOoyDOms6lzprOm86RzpTOqc6dLCDOlc6gzpnOo86azp/OoM6XIM6TzqnOnc6ZzpHOoyDOmM6XzqHOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6VzqPOp86RzqTOlyDOms6lzprOm86RzpTOqc6dLCDOl86czpXOoc6fzpLOmc6TzpvOmSDOms6lzprOm86RzpTOqc6dLCDOmM6XzqHOkSDOms6lzprOm86RzpTOqc6dLCDOms6RzpzOkc6hzpkgzpXOoM6ZzqPOms6fzqDOl86jIM6TzqnOnc6ZzpHOoyDOms6lzprOm86RzpTOqc6dLCDOms6RzqHOpM6VzqHOkc6Uzp/OoyDOms6lzprOm86RzpTOqc6dLCDOnM6VzpPOkc6bzp/Op86pzqHOmSDOms6lzprOm86RzpTOqc6dLCDOnM6VzqPOkSDOms6RzqTOn86ZzprOmc6VzqMgzprOpc6azpvOkc6UzqnOnSwgzpzOlc6jzpHOoc6ZzpEgzpjOl86hzpHOoyDOms6lzprOm86RzpTOqc6dLCDOnM6fzp3On86bzpnOmM6fzqMgzprOpc6azpvOkc6UzqnOnSwgzp3Olc6RIM6azpHOnM6Vzp3OlyDOms6lzprOm86RzpTOqc6dLCDOn86hzpzOn86jIM6mzpfOoc6pzp0gzprOpc6azpvOkc6UzqnOnSwgzqDOkc6bzpHOmc6RICDOms6RzpzOlc6dzpcgzprOpc6azpvOkc6UzqnOnSwgzqDOkc6dzpHOk86ZzpEgzprOkc6bzp/OpSAgzprOpc6azpvOkc6UzqnOnSwgzqDOlc6hzpnOks6fzpvOmc6RIM6azqXOms6bzpHOlM6pzp0sIM6mzpfOoc6RIM6azqXOms6bzpHOlM6pzp0sIM6nzqHOmc6jzqTOmc6Rzp3OkSDOms6lzprOm86RzpTOqc6dLCDOp86hzpnOo86kzpnOkc6dzpcgzpjOl86hzpHOoyDOms6lzprOm86RzpTOqc6dJywgUHJlZmVjdHVyZTogJ86az4XOus67zqzOtM+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzg0NzAyJywgQXJlYTogJ86RzpPOmc6RIM6VzpnOoc6Xzp3OlyDOmM6XzqHOkc6jzpnOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6RzpPOoc6ZzpvOmc6RIM6YzpfOoc6RzqPOmc6RzqMgzprOpc6azpvOkc6UzqnOnSwgzpjOl86hzpHOo86ZzpEgzprOpc6azpvOkc6UzqnOnSwgzpjOn86bzp/OoyDOms6lzprOm86RzpTOqc6dLCDOms6fzpvOn86lzpzOoM6fzqMgzp/Omc6RzqMgzprOpc6azpvOkc6UzqnOnSwgzp/Omc6RIM6azqXOms6bzpHOlM6pzp0sIM6fzqHOnM6fzqMgzpHOnM6czp/Opc6UzpnOn86lIM6azqXOms6bzpHOlM6pzp0sIM6fzqHOnM6fzqMgzpHOoc6czpXOnc6XzqMgzprOpc6azpvOkc6UzqnOnSwgzp/Ooc6czp/OoyDOms6fzqHOps6fzqUgzp/Omc6RzqMgzprOpc6azpvOkc6UzqnOnSwgzqDOkc6hzpHOlM6VzpnOo86fzqMgzprOpc6azpvOkc6UzqnOnSwgzqDOn86kzpHOnM6fzqMgzpjOl86hzpHOo86ZzpHOoyDOms6lzprOm86RzpTOqc6dLCDOps6fzpnOnc6ZzprOmc6RIM6YzpfOoc6RzqMgzprOpc6azpvOkc6UzqnOnScsIFByZWZlY3R1cmU6ICfOms+FzrrOu86szrTPic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NDcwMycsIEFyZWE6ICfOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzpXOnM6gzp/Ooc6VzpnOn86lIM6azqXOms6bzpHOlM6pzp0sIM6SzpvOpc6nzpHOlM6RIM6azqXOms6bzpHOlM6pzp0sIM6VzpzOoM6fzqHOlc6Zzp/OoyDOmM6XzqHOkc6jIM6azqXOms6bzpHOlM6pzp0sIM6Vzp7Oqc6czqXOpM6XzqMgzprOpc6azpvOkc6UzqnOnSwgzqDOlc6hzpnOo86jzpEgzprOpc6azpvOkc6UzqnOnScsIFByZWZlY3R1cmU6ICfOms+FzrrOu86szrTPic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4NDgwMCcsIEFyZWE6ICfOkc6TzpnOn86ZIM6Rzp3Okc6hzpPOpc6hzp/OmSDOms6lzprOm86RzpTOqc6dLCDOkc6TzpnOn86jIM6TzpXOoc6RzqPOmc6czp/OoyDOms6lzprOm86RzpTOqc6dLCDOkc6azqHOkc6YzpkgzpzOl86bzp/OpSDOms6lzprOm86RzpTOqc6dLCDOkc6dzpHOnc6VzqMgzprOpc6azpvOkc6UzqnOnSwgzpHOnc6kzpnOnM6XzpvOn86jIM6azqXOms6bzpHOlM6pzp0sIM6RzqDOn86bzpvOqc6dzpnOkSAozqDOn86bzpvOqc6dzpnOkSkgzpzOl86bzp/OpSDOms6lzprOm86RzpTOqc6dLCDOkc6hzpXOpM6XIM6azqXOms6bzpHOlM6pzp0sIM6RzqHOms6RzpTOmc6fIM6azqXOms6bzpHOlM6pzp0sIM6Szp/Opc6UzpnOkSDOms6lzprOm86RzpTOqc6dLCDOk86bzpHOoc6fzp3Ol86jzpnOkSDOnM6XzpvOn86lIM6azqXOms6bzpHOlM6pzp0sIM6VzpzOoM6fzqHOlc6Zzp/OoyDOnM6XzpvOn86lIM6azqXOms6bzpHOlM6pzp0sIM6WzpXOps6lzqHOmc6RIM6azqXOms6bzpHOlM6pzp0sIM6YzpXOmc6pzqHOpc6nzpXOmc6RIM6azqXOms6bzpHOlM6pzp0sIM6azpHOnc6RzpLOkSDOms6lzprOm86RzpTOqc6dLCDOms6RzqTOo86RzqHOqc6dzpHOoyDOms6lzprOm86RzpTOqc6dLCDOms6bzpfOnM6RIM6czpfOm86fzqUgzprOpc6azpvOkc6UzqnOnSwgzprOn86czpnOkSDOms6lzprOm86RzpTOqc6dLCDOnM6Rzp3OlM6hzpHOms6ZzpEgzprOpc6azpvOkc6UzqnOnSwgzpzOl86bzp/OoyDOms6lzprOm86RzpTOqc6dLCDOnM6lzqTOmc6azpHOoyDOnM6XzpvOn86lIM6azqXOms6bzpHOlM6pzp0sIM6ezqXOm86fzprOlc6hzpHOpM6ZzpEgzprOpc6azpvOkc6UzqnOnSwgzqDOkc6bzpnOn86nzqnOoc6ZIM6azqXOms6bzpHOlM6pzp0sIM6gzpHOns6ZzpzOkc6UzpkgzpzOl86bzp/OpSDOms6lzprOm86RzpTOqc6dLCDOoM6RzqfOkc6Zzp3OkSDOms6lzprOm86RzpTOqc6dLCDOoM6VzqHOkSDOpM6hzpnOn86SzpHOo86RzpvOn86jIM6azqXOms6bzpHOlM6pzp0sIM6gzpfOm86fzp3Ol86jzpnOnyDOms6lzprOm86RzpTOqc6dLCDOoM6bzpHOms6RIM6czpfOm86fzqUgzprOpc6azpvOkc6UzqnOnSwgzqDOoc6RzqPOn86dzpfOo86ZIM6azqXOms6bzpHOlM6pzp0sIM6gzqHOn86SzpHOpM6RzqMgzprOpc6azpvOkc6UzqnOnSwgzqHOkc6bzpHOms6Zzp8gzqfOkc6bzpHOms6fzqMgzprOpc6azpvOkc6UzqnOnSwgzqPOp86Zzp3Oqc6gzpcgzprOpc6azpvOkc6UzqnOnSwgzqTOoc6Zzp/Oks6RzqPOkc6bzp/OoyDOms6lzprOm86RzpTOqc6dLCDOpM6hzqXOoM6XzqTOlyDOms6lzprOm86RzpTOqc6dLCDOps6fzqXOoc6azp/Oks6fzqXOnc6ZIM6azqXOms6bzpHOlM6pzp0sIM6mzqXOm86RzprOqc6gzpcgzprOpc6azpvOkc6UzqnOnSwgzqbOpc6hzp/OoM6fzqTOkc6czp/OoyDOms6lzprOm86RzpTOqc6dLCDOqM6RzpjOkc6UzpnOms6RIM6azqXOms6bzpHOlM6pzp0nLCBQcmVmZWN0dXJlOiAnzprPhc66zrvOrM60z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjMwNTEnLCBBcmVhOiAnzpHOk86Zzp/OmSDOpM6Rzp7Omc6RzqHOp86VzqMgzpvOkc6azqnOnc6ZzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6gzpXOoc6ZzqPOpM6VzqHOmc6fzqUgzpvOkc6azqnOnc6ZzpHOoywgzpPOoc6RzpzOnM6fzqXOo86RIM6bzpHOms6pzp3Omc6RzqMsIM6bzpXOl86czp/Onc6RzqMgzpvOkc6azqnOnc6ZzpHOoywgzqDOkc6dzpfOk86lzqHOmc6jzqTOoc6RIM6bzpHOms6pzp3Omc6RzqMsIM6gzpXOoc6ZzqPOpM6VzqHOmSDOlc6gzpnOlM6RzqXOoc6fzqUgzpvOmc6czpfOoc6RzqMgzpvOkc6azqnOnc6ZzpHOoywgzqPOms6RzpvOkSDOm86RzprOqc6dzpnOkc6jLCDOo86fzqXOm86Zzp8gzpvOkc6azqnOnc6ZzpHOoywgzqPOpM6VzqbOkc6dzpnOkSDOm86RzprOqc6dzpnOkc6jLCDOpM6hzpnOnc6XzqPOkSDOm86RzprOqc6dzpnOkc6jLCDOps6ZzpvOl86jzpnOnyDOm86RzprOqc6dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86bzrHOus+Jzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIzMDUyJywgQXJlYTogJ86RzpPOk86VzpvOqc6dzpEgzpvOkc6azqnOnc6ZzpHOoywgzpXOm86RzpnOkSDOms6fzqXOnc6fzqUgzpvOkc6azqnOnc6ZzpHOoywgzpzOlc6kzpHOnM6fzqHOps6pzqPOlyDOm86RzprOqc6dzpnOkc6jLCDOnM6fzpvOkc6fzpkgzpvOkc6azqnOnc6ZzpHOoywgzqDOkc6azpnOkSDOm86RzprOqc6dzpnOkc6jLCDOo86lzprOlc6RIM6bzpHOms6pzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpvOsc66z4nOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjMwNTMnLCBBcmVhOiAnzpHOk86Zzp/OmSDOkc6gzp/Oo86kzp/Om86fzpkgzpvOkc6azqnOnc6ZzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6Szp/Omc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzpHOk86Zzp/OoyDOlc6bzpnOo86jzpHOmc6fzqMgzpvOkc6azqnOnc6ZzpHOoywgzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOlc6gzpnOlM6RzqXOoc6fzqUgzpvOmc6czpfOoc6RzqMgzpvOkc6azqnOnc6ZzpHOoywgzpHOk86Zzp/OoyDOms6pzp3Oo86kzpHOnc6kzpnOnc6fzqMgzpzOlc6jzp/Op86pzqHOmc6fzqUgzpvOkc6azqnOnc6ZzpHOoywgzpHOk86Zzp/OoyDOnM6RzpzOkc6jIM6bzpHOms6pzp3Omc6RzqMsIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOks6fzpnOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6RzpTOmc6RzprOn86gzp/OoyDOm86RzprOqc6dzpnOkc6jLCDOkc6dzqkgzprOkc6jzqTOkc6dzpXOkSDOm86RzprOqc6dzpnOkc6jLCDOkc6hzqfOkc6TzpPOlc6bzp/OoyDOm86RzprOqc6dzpnOkc6jLCDOks6RzpvOpM6RzprOmSDOm86RzprOqc6dzpnOkc6jLCDOks6RzqHOms6fIM6bzpHOms6pzp3Omc6RzqMsIM6SzpXOm86Rzp3Omc6UzpnOkSDOm86RzprOqc6dzpnOkc6jLCDOks6ZzpPOms6bzpHOps6ZzpEgzpvOkc6azqnOnc6ZzpHOoywgzpTOkc6ZzpzOn86dzpnOkSDOm86RzprOqc6dzpnOkc6jLCDOlM6VzqHOnM6RzqTOmc6Rzp3Omc6azpEgzpvOkc6azqnOnc6ZzpHOoywgzpXOm86RzqbOn86dzpfOo86fzqMgzpvOkc6azqnOnc6ZzpHOoywgzpXOm86ZzprOkSDOm86RzprOqc6dzpnOkc6jLCDOms6RzqDOkc6hzpkgzpvOkc6azqnOnc6ZzpHOoywgzprOkc6kzp/Opc6dzpnOkSDOm86RzprOqc6dzpnOkc6jLCDOms6RzqTOqSDOms6RzqPOpM6Rzp3Omc6RIM6bzpHOms6pzp3Omc6RzqMsIM6azpHOpM6pIM6dzpfOo86ZIM6bzpHOms6pzp3Omc6RzqMsIM6azp/Onc6kzqHOkc6mzp/Opc6hzpnOkc6dzpnOms6RIM6bzpHOms6pzp3Omc6RzqMsIM6azp/Ooc6RzprOkc6jIM6bzpHOms6pzp3Omc6RzqMsIM6azqHOpc6fzpLOoc6lzqPOlyDOm86RzprOqc6dzpnOkc6jLCDOm86RzqfOmc6fIM6bzpHOms6pzp3Omc6RzqMsIM6bzpXOpc6azpcgzpvOkc6azqnOnc6ZzpHOoywgzpvOmc6czp3Olc6jIM6bzpHOms6pzp3Omc6RzqMsIM6bzpnOnM6dzpXOoyDOoM6Rzp3OpM6Rzp3Okc6jzqPOl86jIM6bzpHOms6pzp3Omc6RzqMsIM6czpHOnc6fzpvOkc6hzpnOkc6dzpnOms6RIM6bzpHOms6pzp3Omc6RzqMsIM6czpHOoc6RzpjOmc6RzqMgzpvOkc6azqnOnc6ZzpHOoywgzpzOlc6TzpHOm86XIM6jzqDOl86bzpnOkSDOm86RzprOqc6dzpnOkc6jLCDOnM6VzqPOn86nzqnOoc6ZIM6bzpHOms6pzp3Omc6RzqMsIM6dzpXOkc6gzp/Om86XIM6bzpHOms6pzp3Omc6RzqMsIM6gzpHOm86RzpnOn86azpHOo86kzqHOnyDOm86RzprOqc6dzpnOkc6jLCDOoM6Rzp3Okc6TzpnOkSDOks6fzpnOqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6gzpHOnc6kzpHOnc6RzqPOo86RIM6bzpHOms6pzp3Omc6RzqMsIM6gzpHOoc6RzpTOlc6ZzqPOmSDOm86RzprOqc6dzpnOkc6jLCDOoM6RzqHOkc6bzpnOkSDOlM6RzpnOnM6fzp3Omc6RzqMgzpvOkc6azqnOnc6ZzpHOoywgzqDOm86RzqTOkc6dzpnOkc6jIM6bzpHOms6pzp3Omc6RzqMsIM6gzp/Opc6dzqTOkSDOm86RzprOqc6dzpnOkc6jLCDOoM6hzp/Ops6XzqTOl86jIM6XzpvOmc6RzqMgzpLOn86ZzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOo86azpvOkc6Szp/Opc6dzpEgzpvOkc6azqnOnc6ZzpHOoywgzqTOo86fzqXOnM6RzpvOkSDOm86RzprOqc6dzpnOkc6jLCDOps6RzqHOkc6azpvOnyDOm86RzprOqc6dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86bzrHOus+Jzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIzMDU0JywgQXJlYTogJ86RzpPOmc6fzqMgzqfOoc6ZzqPOpM6fzqbOn86hzp/OoyDOm86RzprOqc6dzpnOkc6jLCDOkc6dzpjOn86nzqnOoc6ZIM6bzpHOms6pzp3Omc6RzqMsIM6Rzp3Oqc6TzpXOmc6RIM6bzpHOms6pzp3Omc6RzqMsIM6RzqHOnc6RIM6bzpHOms6pzp3Omc6RzqMsIM6SzpHOo86ZzpvOmc6azpcgzpvOkc6azqnOnc6ZzpHOoywgzpPOn86bzpEgzpvOkc6azqnOnc6ZzpHOoywgzpPOn86hzpHOnc6fzpkgzpvOkc6azqnOnc6ZzpHOoywgzpTOkc6mzp3OlyDOm86RzprOqc6dzpnOkc6jLCDOlM6ZzqDOn86kzpHOnM6RIM6bzpHOms6pzp3Omc6RzqMsIM6azpHOks6fzqXOoc6RzprOmSDOm86RzprOqc6dzpnOkc6jLCDOms6hzqXOn86dzpXOoc6ZIM6bzpHOms6pzp3Omc6RzqMsIM6azqXOlM6pzp3Omc6RIM6bzpHOms6pzp3Omc6RzqMsIM6azqXOlM6pzp3Omc6kzqPOkSDOm86RzprOqc6dzpnOkc6jLCDOm86VzqXOms6XIM6Rzp3Oqc6TzpXOmc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzpvOlc6lzprOn86nzqHOqc6czpEgzpvOkc6azqnOnc6ZzpHOoywgzpvOmc6Rzp3OpM6Zzp3OkSDOm86RzprOqc6dzpnOkc6jLCDOnM6fzp3OlyDOls6VzqHOnM6gzpnOpM6jzpfOoyDOm86RzprOqc6dzpnOkc6jLCDOns6XzqHOn86azpHOnM6gzpkgzpvOkc6azqnOnc6ZzpHOoywgzqDOkc6bzpHOmc6fzqDOkc6dzpHOk86ZzpEgzpvOkc6azqnOnc6ZzpHOoywgzqDOkc6bzpHOmc6fzqfOqc6hzpkgzpTOkc6mzp3Ol86jIM6bzpHOms6pzp3Omc6RzqMsIM6gzpXOnc6kzpHOpc6bzp/OmSDOm86RzprOqc6dzpnOkc6jLCDOoM6fzpvOn86SzpnOpM6jzpEgzpvOkc6azqnOnc6ZzpHOoywgzqDOn86kzpHOnM6ZzpEgzpvOkc6azqnOnc6ZzpHOoywgzqPOoM6RzqHOpM6ZzpEgzpvOkc6azqnOnc6ZzpHOoywgzqPOqc6kzpfOoc6RIM6bzpHOms6pzp3Omc6RzqMsIM6kzp/Ooc6ZzpbOkSDOm86RzprOqc6dzpnOkc6jLCDOpM6hzpHOoM6VzpbOn86dzqTOlyDOm86RzprOqc6dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86bzrHOus+Jzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIzMDU5JywgQXJlYTogJ86RzpvOlc6lzqHOn86lIM6bzpHOms6pzp3Omc6RzqMsIM6Szp/Ooc6Uzp/Onc6ZzpEgzpvOkc6azqnOnc6ZzpHOoywgzpPOmc6RzprOn86lzpzOkc6ZzpnOms6RIM6bzpHOms6pzp3Omc6RzqMsIM6VzqDOkc6dzqkgzqfOqc6hzpEgzpvOkc6azqnOnc6ZzpHOoywgzprOkc6czqDOn86jIM6bzpHOms6pzp3Omc6RzqMsIM6azpHOo86kzp/Ooc6VzpnOnyDOm86RzprOqc6dzpnOkc6jLCDOms6RzqPOpM6hzpkgzpvOkc6azqnOnc6ZzpHOoywgzprOkc6jzqTOqc6hIM6bzpHOms6pzp3Omc6RzqMsIM6azp/OpM6ZzqTOo86RIM6bzpHOms6pzp3Omc6RzqMsIM6bzp/OoM6VzqPOmSDOm86RzprOqc6dzpnOkc6jLCDOoM6RzqDOoM6RzpTOmc6Rzp3Omc6azpEgzpLOn86hzpTOn86dzpnOkc6jIM6bzpHOms6pzp3Omc6RzqMsIM6gzpXOoc6ZzpLOn86bzpnOkSDOm86RzprOqc6dzpnOkc6jLCDOo86fzqXOm86Xzp3OkSDOm86RzprOqc6dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86bzrHOus+Jzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIzMDYyJywgQXJlYTogJ86RzpLOoc6RzpzOmc6Rzp3Omc6azpEgzpvOkc6azqnOnc6ZzpHOoywgzpHOoc6Vzp/OoM6fzpvOlyDOm86RzprOqc6dzpnOkc6jLCDOkc6hzqbOmc6TzprOmc6RIM6bzpHOms6pzp3Omc6RzqMsIM6RzqHOp86ZzpEgzpvOkc6azqnOnc6ZzpHOoywgzpLOkc6nzp/OoyDOm86RzprOqc6dzpnOkc6jLCDOk86VzqHOnM6RIM6bzpHOms6pzp3Omc6RzqMsIM6UzqHOpc6RzpvOmc6RIM6bzpHOms6pzp3Omc6RzqMsIM6VzpvOkc6Zzp/Op86pzqHOmSDOm86RzprOqc6dzpnOkc6jLCDOms6RzpzOoM6Zzp3Okc6hzpXOoyDOm86RzprOqc6dzpnOkc6jLCDOms6RzqHOkc6Szp/Oo86kzpHOo86ZIM6fzpnOpM6lzpvOn86lIM6bzpHOms6pzp3Omc6RzqMsIM6azpHOoc6VzpEgzpvOkc6azqnOnc6ZzpHOoywgzprOkc6kzqkgzprOkc6hzpXOkSDOm86RzprOqc6dzpnOkc6jLCDOms6VzpvOlc6mzpEgzpvOkc6azqnOnc6ZzpHOoywgzprOoc6lzp/Onc6VzqHOmSDOkc6VzqHOn86gzp/Om86XzqMgzpvOkc6azqnOnc6ZzpHOoywgzpvOkc6Tzp/Oms6fzpnOm86Zzp8gzpvOkc6azqnOnc6ZzpHOoywgzpvOmc6czpXOnc6Zzp8gzpvOkc6azqnOnc6ZzpHOoywgzpzOkc6hzpzOkc6kzqPOn86lzprOkSDOm86RzprOqc6dzpnOkc6jLCDOnM6VzqHOnM6lzpPOms6ZzpHOnc6ZzprOkSDOm86RzprOqc6dzpnOkc6jLCDOnM6gzp/Opc6kzqPOlc6bzpnOkc6dzpnOms6RIM6bzpHOms6pzp3Omc6RzqMsIM6dzpXOnyDOn86ZzqTOpc6bzp8gzpvOkc6azqnOnc6ZzpHOoywgzp7Olc6gzpHOoM6RzpTOmc6Rzp3Omc6azpEgzpvOkc6azqnOnc6ZzpHOoywgzp7Olc6hzp/Om86RzprOms6fzqMgzpvOkc6azqnOnc6ZzpHOoywgzp/Omc6kzqXOm86fIM6bzpHOms6pzp3Omc6RzqMsIM6fzpzOkc6bzpXOoyDOm86RzprOqc6dzpnOkc6jLCDOo86azpHOm86RIM6fzpnOpM6lzpvOn86lIM6bzpHOms6pzp3Omc6RzqMsIM6jzqnOpM6XzqHOkc6jIM6bzpHOms6pzp3Omc6RzqMsIM6nzp/OpM6RzqPOmc6RIM6bzpHOms6pzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpvOsc66z4nOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjMwNzAnLCBBcmVhOiAnzpHOk86ZzpEgzprOpc6hzpnOkc6azpcgzpzOn86dzpXOnM6SzpHOo86ZzpHOoyDOm86RzprOqc6dzpnOkc6jLCDOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzpvOkc6azqnOnc6ZzpHOoywgzpHOk86Zzp/OoyDOlM6XzpzOl86kzqHOmc6fzqMgzpzOn86dzpXOnM6SzpHOo86ZzpHOoyDOm86RzprOqc6dzpnOkc6jLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzpzOn86dzpXOnM6SzpHOo86ZzpHOoyDOm86RzprOqc6dzpnOkc6jLCDOkc6TzpnOn86jIM6jzqTOlc6mzpHOnc6fzqMgzpvOkc6azqnOnc6ZzpHOoywgzpHOk86Zzp/OoyDOps6pzprOkc6jIM6bzpHOms6pzp3Omc6RzqMsIM6SzpXOm86ZzpXOoyDOm86RzprOqc6dzpnOkc6jLCDOk86VzqbOpc6hzpEgzpvOkc6azqnOnc6ZzpHOoywgzpXOm86bzpfOnc6ZzprOnyDOm86RzprOqc6dzpnOkc6jLCDOms6RzpvOpc6SzpXOoyDOm86RzprOqc6dzpnOkc6jLCDOms6RzqPOpM6VzpvOm86RIM6bzpHOms6pzp3Omc6RzqMsIM6azpvOl86hzp/Onc6fzpzOkc6ZzpnOms6RIM6bzpHOms6pzp3Omc6RzqMsIM6bzpnOoc6RIM6bzpHOms6pzp3Omc6RzqMsIM6czp/Onc6VzpzOks6RzqPOmc6RIM6bzpHOms6pzp3Omc6RzqMsIM6dzp/OnM6ZzpEgzqPOoM6RzqHOpM6XzqMgzpvOkc6azqnOnc6ZzpHOoywgzp7Omc6mzpnOkc6jIM6bzpHOms6pzp3Omc6RzqMsIM6gzpHOnc6RzpPOmc6kzqPOkSDOm86RzprOqc6dzpnOkc6jLCDOpM6RzpvOkc6dzqTOkSDOm86RzprOqc6dzpnOkc6jLCDOpM6VzqHOmc6RIM6bzpHOms6pzp3Omc6RzqMsIM6kzqHOn86nzpHOm86ZzpEgzpvOkc6azqnOnc6ZzpHOoywgzqbOm86fzprOkSDOm86RzprOqc6dzpnOkc6jLCDOps6fzqXOpM6ZzpEgzpvOkc6azqnOnc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOm86xzrrPic69zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyMzEwMCcsIEFyZWE6ICfOkc6TzpnOkSDOlc6ZzqHOl86dzpcgzpvOkc6azqnOnc6ZzpHOoywgzpHOk86ZzpEgzprOpc6hzpnOkc6azpcgzprOn86lzp3On86lIM6bzpHOms6pzp3Omc6RzqMsIM6RzpPOmc6RIM6azqXOoc6ZzpHOms6XIM6jzqDOkc6hzqTOl86jIM6bzpHOms6pzp3Omc6RzqMsIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzpvOkc6azpXOlM6RzpnOnM6fzp3On86jIM6bzpHOms6pzp3Omc6RzqMsIM6RzpPOoc6ZzpHOnc6fzpkgzpvOkc6azqnOnc6ZzpHOoywgzpHOnM6lzprOm86VzqMgzpvOkc6azqnOnc6ZzpHOoywgzpHOnc6RzpLOoc6lzqTOlyDOm86RzprOqc6dzpnOkc6jLCDOkc6mzpnOo86Zzp8gzpvOkc6azqnOnc6ZzpHOoywgzpLOkc6mzpXOmc6fIM6bzpHOms6pzp3Omc6RzqMsIM6SzpvOkc6nzp/Op86pzqHOmc6fIM6bzpHOms6pzp3Omc6RzqMsIM6TzprOn86hzpnOpM6jzpEgzpvOkc6azqnOnc6ZzpHOoywgzpPOn86lzp3Okc6hzpfOoyDOm86RzprOqc6dzpnOkc6jLCDOls6RzpPOkc6dzp8gzqDOm86RzqTOkc6dzpHOoyDOm86RzprOqc6dzpnOkc6jLCDOms6RzpvOkc6czpnOnyDOm86RzprOqc6dzpnOkc6jLCDOms6RzpvOm86fzp3OlyDOm86RzprOqc6dzpnOkc6jLCDOms6RzpvOpc6SzpnOkSDOo86fzqfOkc6jIM6bzpHOms6pzp3Omc6RzqMsIM6azpHOoc6RzpLOkc6jIM6bzp/Ok86TzpHOo86kzqHOkc6jIM6bzpHOms6pzp3Omc6RzqMsIM6azpHOoc6RzpLOkc6jIM6jzp/Opc6jzqTOmc6Rzp3Oqc6dIM6bzpHOms6pzp3Omc6RzqMsIM6azpHOoc6RzpLOkc6jIM6kzqHOpc6gzpfOoyDOm86RzprOqc6dzpnOkc6jLCDOms6RzqTOo86RzqHOn86jIM6bzpHOms6pzp3Omc6RzqMsIM6azpXOps6RzpvOkc6jIM6bzpHOms6pzp3Omc6RzqMsIM6azpvOkc6UzpHOoyDOm86RzprOqc6dzpnOkc6jLCDOms6fzprOms6Zzp3On86hzqHOkc6nzpcgzpvOkc6azqnOnc6ZzpHOoywgzpvOn86TzpPOkc6jzqTOoc6RIM6bzpHOms6pzp3Omc6RzqMsIM6czpHOk86fzqXOm86RIM6bzpHOms6pzp3Omc6RzqMsIM6czp/Onc6XIM6RzpPOmc6pzp0gzqTOlc6jzqPOkc6hzpHOms6fzp3OpM6RIM6bzpHOms6pzp3Omc6RzqMsIM6czp/Onc6XIM6mzpHOnc6VzqHOqc6czpXOnc6XzqMgzpvOkc6azqnOnc6ZzpHOoywgzpzOpc6jzqTOoc6RzqMgzpvOkc6azqnOnc6ZzpHOoywgzqDOkc6bzpHOmc6fzpvOn86TzpnOnyDOm86RzprOqc6dzpnOkc6jLCDOoM6RzqHOn86hzpXOmc6fIM6bzpHOms6pzp3Omc6RzqMsIM6gzpXOoc6ZzqPOpM6VzqHOmSDOkc6czqXOms6bzqnOnSDOm86RzprOqc6dzpnOkc6jLCDOoM6ZzprOn86lzpvOmc6Rzp3Omc6azpEgzpvOkc6azqnOnc6ZzpHOoywgzqDOm86RzqTOkc6dzpEgzpvOkc6azqnOnc6ZzpHOoywgzqDOn86bzqXOlM6hzp/Oo86fIM6bzpHOms6pzp3Omc6RzqMsIM6hzpnOks6ZzqnOpM6ZzqPOo86RIM6bzpHOms6pzp3Omc6RzqMsIM6hzpnOls6RIM6bzpHOms6pzp3Omc6RzqMsIM6jzpHOnc6RzqTOn86hzpnOnyDOnM6RzpPOn86lzpvOkc6jIM6bzpHOms6pzp3Omc6RzqMsIM6jzprOn86lzqHOkSDOm86RzprOqc6dzpnOkc6jLCDOo86fzqXOo86kzpnOkc6dzp/OmSDOm86RzprOqc6dzpnOkc6jLCDOo86fzqfOkSDOm86RzprOqc6dzpnOkc6jLCDOo86gzpHOoc6kzpcgzpvOkc6azqnOnc6ZzpHOoywgzqPOpM6RzqXOoc6fzqMgzpvOkc6azqnOnc6ZzpHOoywgzqTOkc6lzpPOlc6kzpcgzpvOkc6azqnOnc6ZzpHOoywgzqTOoc6lzqDOlyDOm86RzprOqc6dzpnOkc6jLCDOp86hzqXOo86RzqbOkSDOm86RzprOqc6dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86bzrHOus+Jzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzIzMjAwJywgQXJlYTogJ86RzpPOlc6hzpHOnc6fzqMgzpvOkc6azqnOnc6ZzpHOoywgzpHOk86ZzpEgzpzOkc6hzpnOnc6RIM6bzpHOms6pzp3Omc6RzqMsIM6RzpPOmc6fzqMgzpLOkc6jzpnOm86VzpnOn86jIM6TzqXOmM6VzpnOn86lIM6bzpHOms6pzp3Omc6RzqMsIM6RzpPOmc6fzqMgzpLOkc6jzpnOm86VzpnOn86jIM6dzpXOn86nzqnOoc6Zzp/OpSDOm86RzprOqc6dzpnOkc6jLCDOkc6TzpnOn86jIM6VzqXOo86kzqHOkc6kzpnOn86jIM6bzpHOms6pzp3Omc6RzqMsIM6RzpPOmc6fzqMgzprOqc6dzqPOpM6Rzp3OpM6Zzp3On86jIM6TzqXOmM6VzpnOn86lIM6bzpHOms6pzp3Omc6RzqMsIM6RzpnOk86ZzpXOoyDOm86RzprOqc6dzpnOkc6jLCDOkc6hzpLOkc6dzpnOpM6XzqMgzpvOkc6azqnOnc6ZzpHOoywgzpHOoc6nzp/Onc6kzpnOms6fIM6bzpHOms6pzp3Omc6RzqMsIM6RzqPOpM6VzqHOmSDOk86lzpjOlc6Zzp/OpSDOm86RzprOqc6dzpnOkc6jLCDOks6RzpjOpSDOm86RzprOqc6dzpnOkc6jLCDOks6fzqXOpM6hzp/Opc6SzpcgzpvOkc6azqnOnc6ZzpHOoywgzpLOoc6lzqPOlc6jIM6bzpHOms6pzp3Omc6RzqMsIM6TzpXOps6lzqHOkc6azpkgzpvOkc6azqnOnc6ZzpHOoywgzpPOpc6YzpXOmc6fIM6bzpHOms6pzp3Omc6RzqMsIM6TzqXOoc6ZzqPOpM6RIM6bzpHOms6pzp3Omc6RzqMsIM6UzpnOoc6fIM6bzpHOms6pzp3Omc6RzqMsIM6UzpnOp86fzpLOkSDOm86RzprOqc6dzpnOkc6jLCDOlM6hzp/Oo86fzqDOl86TzpcgzpvOkc6azqnOnc6ZzpHOoywgzpXOm86RzpnOkSDOnM6fzpvOkc6pzp0gzpvOkc6azqnOnc6ZzpHOoywgzprOkc6bzqXOks6ZzpEgzpPOpc6YzpXOmc6fzqUgzpvOkc6azqnOnc6ZzpHOoywgzprOkc6czpHOoc6VzqMgzpvOkc6azqnOnc6ZzpHOoywgzprOkc6hzpLOlc6bzpHOoyDOm86RzprOqc6dzpnOkc6jLCDOms6RzqHOpc6fzqXOoM6fzpvOlyDOm86RzprOqc6dzpnOkc6jLCDOms6RzqXOms6ZIM6bzpHOms6pzp3Omc6RzqMsIM6azp/Onc6RzprOmc6RIM6bzpHOms6pzp3Omc6RzqMsIM6azp/Opc6bzp/Opc6azpEgzpvOkc6azqnOnc6ZzpHOoywgzprOoc6Xzp3OlyDOm86RzprOqc6dzpnOkc6jLCDOm86RzpPOms6RzpTOkSDOm86RzprOqc6dzpnOkc6jLCDOm86VzpzOn86dzpXOkSDOm86RzprOqc6dzpnOkc6jLCDOm86ZzpzOnc6XIM6bzpHOms6pzp3Omc6RzqMsIM6bzqXOk86VzqHOlc6RzqMgzpvOkc6azqnOnc6ZzpHOoywgzpzOkc6bzpvOmc6RzqHOlyDOo86lzprOmc6RIM6bzpHOms6pzp3Omc6RzqMsIM6czpHOoc6RzpjOlc6RIM6bzpHOms6pzp3Omc6RzqMsIM6czpHOoc6fzqXOm86ZzpEgzpvOkc6azqnOnc6ZzpHOoywgzpzOlc6bzpnOpM6Zzp3OlyDOm86RzprOqc6dzpnOkc6jLCDOnM6VzqPOn86nzqnOoc6ZIM6jzpnOlM6XzqHOn86azpHOo86kzqHOn86lIM6TzqXOmM6VzpnOn86lIM6bzpHOms6pzp3Omc6RzqMsIM6czp/Onc6RzqfOlyDOo86lzprOmc6RIM6bzpHOms6pzp3Omc6RzqMsIM6czqXOoc6jzpnOnc6XIM6bzpHOms6pzp3Omc6RzqMsIM6dzpXOkSDOnM6RzqHOkc6YzpXOkSDOm86RzprOqc6dzpnOkc6jLCDOnc6Vzp/Op86pzqHOmSDOk86lzpjOlc6Zzp/OpSDOm86RzprOqc6dzpnOkc6jLCDOoM6RzpPOkc6dzpXOkSDOm86RzprOqc6dzpnOkc6jLCDOoM6RzpvOkc6Zzp/Oks6hzqXOo86XIM6bzpHOms6pzp3Omc6RzqMsIM6gzpHOoc6RzqPOpc6hzp/OoyDOm86RzprOqc6dzpnOkc6jLCDOoM6RzqPOo86RzpLOkc6jIM6bzpHOms6pzp3Omc6RzqMsIM6gzpXOpM6hzpnOnc6RIM6bzpHOms6pzp3Omc6RzqMsIM6gzpXOpM6hzp/Oks6fzqXOnc6ZIM6bzpHOms6pzp3Omc6RzqMsIM6gzpnOm86RzpvOkSDOm86RzprOqc6dzpnOkc6jLCDOoM6bzpHOpM6Rzp3On86jIM6bzpHOms6pzp3Omc6RzqMsIM6gzp/Om86lzpHOoc6RzpLOn86jIM6bzpHOms6pzp3Omc6RzqMsIM6gzqHOmc6kzqPOmc6pzqTOmc6azp8gzpvOkc6azqnOnc6ZzpHOoywgzqDOoc6fzqPOl86bzpnOnyDOm86RzprOqc6dzpnOkc6jLCDOoM6hzp/Ops6XzqTOl86jIM6XzpvOmc6RzqMgzpPOpc6YzpXOmc6fzqUgzpvOkc6azqnOnc6ZzpHOoywgzqDOoc6pzqTOn86SzpEgzpvOkc6azqnOnc6ZzpHOoywgzqPOlc6bzpnOnc6ZzqTOo86RIM6bzpHOms6pzp3Omc6RzqMsIM6jzpnOlM6XzqHOn86azpHOo86kzqHOnyDOm86RzprOqc6dzpnOkc6jLCDOo86Zzp3OkSDOm86RzprOqc6dzpnOkc6jLCDOo86azpHOnM6dzpHOms6ZIM6bzpHOms6pzp3Omc6RzqMsIM6jzprOkc6czp3Omc6kzqPOkSDOm86RzprOqc6dzpnOkc6jLCDOo86azp/Opc6kzpHOoc6ZIM6bzpHOms6pzp3Omc6RzqMsIM6jzprOpc6mzpnOkc6dzpnOms6RIM6bzpHOms6pzp3Omc6RzqMsIM6jzpzOl86dzp/OoyDOm86RzprOqc6dzpnOkc6jLCDOo86lzp3On86hzpEgzpvOkc6azqnOnc6ZzpHOoywgzqfOqc6jzpnOkc6hzpnOnyDOm86RzprOqc6dzpnOkc6jLCDOqM6RzpjOkc6azpnOkSDOm86RzprOqc6dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86bzrHOus+Jzr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQwMDAxJywgQXJlYTogJ86RzprOoc6XIM6bzpHOoc6ZzqPOl86jLCDOks6RzpvOkc6dzpnOlM6RIM6bzpHOoc6ZzqPOl86jLCDOms6VzqbOkc6bzp/Oks6hzqXOo86fIM6bzpHOoc6ZzqPOl86jLCDOms6bzpXOmc6jzp/Opc6hzpEgzpvOkc6hzpnOo86XzqMsIM6azqHOkc6dzpXOkSDOlc6bzpHOo86jzp/Onc6RzqMgzpvOkc6hzpnOo86XzqMsIM6bzp/Opc6kzqHOnyDOlc6bzpvOkc6jzp/Onc6RzqMgzpvOkc6hzpnOo86XzqMnLCBQcmVmZWN0dXJlOiAnzpvOrM+BzrnPg86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQwMDAyJywgQXJlYTogJ86SzpnOk86bzpEgzpvOkc6hzpnOo86XzqMsIM6bzpnOks6RzpTOmSDOm86RzqHOmc6jzpfOoywgzpvOn86mzp/OoyDOlc6bzpHOo86jzp/Onc6RzqMgzpvOkc6hzpnOo86XzqMnLCBQcmVmZWN0dXJlOiAnzpvOrM+BzrnPg86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQwMDAzJywgQXJlYTogJ86RzpPOmc6RIM6bzpHOoc6ZzqPOl86jIM6bzpHOoc6ZzqPOl86jLCDOkc6TzpnOn86azpHOnM6gzp/OoyDOm86RzqHOmc6jzpfOoywgzpHOlc6kzp/Om86fzqbOn86jIM6bzpHOoc6ZzqPOl86jLCDOkc6czqXOk86UzpHOm86XIM6bzpHOoc6ZzqPOl86jLCDOkc6dzpHOks6hzpEgzpvOkc6hzpnOo86XzqMsIM6Rzp3Okc6kzp/Om86XIM6bzpHOoc6ZzqPOl86jLCDOks6VzpvOmc6azpEgzpvOkc6hzpnOo86XzqMsIM6TzpXOoc6RzprOkc6hzpkgzpvOkc6hzpnOo86XzqMsIM6UzpfOnM6XzqTOoc6RIM6bzpHOoc6ZzqPOl86jLCDOlc6bzpHOps6fzqMgzpvOkc6hzpnOo86XzqMsIM6VzpvOlc6lzpjOlc6hzpkgzpvOkc6hzpnOo86XzqMsIM6ZzqPOmc6pzpzOkc6kzpEgzpvOkc6hzpnOo86XzqMsIM6azpHOm86RzpzOkc6azpkgzpvOkc6hzpnOo86XzqMsIM6azpHOo86kzqHOmSDOm86RzqHOmc6jzpfOoywgzprOkc6kzqkgzpHOnM6lzpPOlM6RzpvOlyDOm86RzqHOmc6jzpfOoywgzprOkc6kzqkgzqDOn86bzqXOlM6Vzp3OlM6hzpkgzpvOkc6hzpnOo86XzqMsIM6azpHOpM6pIM6jzqnOpM6XzqHOmc6kzqPOkSDOm86RzqHOmc6jzpfOoywgzprOn86azprOmc6dzp8gzp3Olc6hzp8gzpzOlc6bzpnOks6fzpnOkc6jIM6bzpHOoc6ZzqPOl86jLCDOms6fzqXOpM6jzp/Opc6gzpnOkSDOm86RzqHOmc6jzpfOoywgzpzOkc6hzpzOkc6hzpnOnc6XIM6bzpHOoc6ZzqPOl86jLCDOnM6VzpPOkc6bzp/Oks6hzqXOo86fIM6bzpHOoc6ZzqPOl86jLCDOnM6VzpvOmc6Szp/Omc6RIM6bzpHOoc6ZzqPOl86jLCDOnM6VzqTOkc6ezp/Op86pzqHOmSDOm86RzqHOmc6jzpfOoywgzp3Olc6fzqfOqc6hzpkgzpHOk86ZzpHOoyDOm86RzqHOmc6jzpfOoywgzp3Olc6hzp/OnM6lzpvOn86ZIM6bzpHOoc6ZzqPOl86jLCDOoM6RzpvOmc6fzqXOoc6ZzpEgzpvOkc6hzpnOo86XzqMsIM6gzp/OpM6RzpzOmc6RIM6bzpHOoc6ZzqPOl86jLCDOoM6hzpnOnc6ZzpHOoyDOm86RzqHOmc6jzpfOoywgzqHOkc6azp/OoM6fzqTOkc6czp/OoyDOm86RzqHOmc6jzpfOoywgzqPOms6XzqTOlyDOm86RzqHOmc6jzpfOoywgzqPOms6bzpfOmM6hzp8gzpvOkc6hzpnOo86XzqMsIM6jzqnOpM6XzqHOmc6kzqPOkSDOm86RzqHOmc6jzpfOoycsIFByZWZlY3R1cmU6ICfOm86sz4HOuc+DzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDAwMDUnLCBBcmVhOiAnzpHOnM6gzpXOm86ZzpEgzpvOkc6hzpnOo86XzqMsIM6SzpHOoc6azp/OoyDOm86RzqHOmc6jzpfOoywgzpLOlc6hzpTOmc6azp/Opc6jzqPOkSDOm86RzqHOmc6jzpfOoywgzprOn86lzqTOo86fzqXOps6bzpnOkc6dzpcgzpvOkc6hzpnOo86XzqMsIM6gzpHOm86ZzpHOnM6gzpXOm86RIM6bzpHOoc6ZzqPOl86jLCDOoM6RzpvOmc6RzqPOms6RIM6bzpHOoc6ZzqPOl86jJywgUHJlZmVjdHVyZTogJ86bzqzPgc65z4POsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MDAwNicsIEFyZWE6ICfOkc6azqHOmc6dzp8gzpvOkc6hzpnOo86XzqMsIM6VzpvOkc6kzpXOmc6RIM6bzpHOoc6ZzqPOl86jLCDOms6RzpvOn86nzqnOoc6ZIM6bzpHOoc6ZzqPOl86jLCDOms6fzqHOkc6azpHOoyDOm86RzqHOmc6jzpfOoywgzprOpc6ozpXOm86fzqfOqc6hzpnOnyDOm86RzqHOmc6jzpfOoywgzpzOkc6azqHOpc6nzqnOoc6ZIM6bzpHOoc6ZzqPOl86jLCDOnc6VzqPOo86pzp0gzpvOkc6hzpnOo86XzqMsIM6fzqPOo86RIM6bzpHOoc6ZzqPOl86jLCDOoM6fzqXOoc6dzpHOoc6ZIM6bzpHOoc6ZzqPOl86jLCDOo86gzpfOm86ZzpEgzpvOkc6hzpnOo86XzqMsIM6jzqXOms6fzqXOoc6ZIM6bzpHOoc6ZzqPOl86jLCDOp86VzpnOnM6RzpTOmSDOm86RzqHOmc6jzpfOoycsIFByZWZlY3R1cmU6ICfOm86sz4HOuc+DzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDAwMTAnLCBBcmVhOiAnzqTOo86RzqHOmc6kzqPOkc6dzpcgzpvOkc6hzpnOo86XzqMnLCBQcmVmZWN0dXJlOiAnzpvOrM+BzrnPg86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQwMTAwJywgQXJlYTogJ86Rzp3OqSDOkc6hzpPOpc6hzp/OoM6fzqXOm86VzpnOnyDOm86RzqHOmc6jzpfOoywgzpHOoc6TzqXOoc6fzqDOn86lzpvOlc6Zzp8gzpvOkc6hzpnOo86XzqMsIM6SzpvOkc6nzp/Ok86ZzpHOnc6dzpnOnyDOm86RzqHOmc6jzpfOoywgzpLOn86kzpHOnc6fzqfOqc6hzpkgzpvOkc6hzpnOo86XzqMsIM6UzpHOnM6RzqPOmc6fIM6bzpHOoc6ZzqPOl86jLCDOlM6RzpzOkc6jzp/Opc6bzpnOnyDOm86RzqHOmc6jzpfOoywgzpTOlc6bzpXOoc6ZzpEgzpvOkc6hzpnOo86XzqMsIM6azqHOmc6kzpfOoc6ZIM6bzpHOoc6ZzqPOl86jLCDOm86lzpPOkc6hzpnOkSDOm86RzqHOmc6jzpfOoywgzpzOlc6TzpEgzpXOm86VzqXOmM6VzqHOn86nzqnOoc6Zzp8gzpvOkc6hzpnOo86XzqMsIM6czpXOo86fzqfOqc6hzpkgzpvOkc6hzpnOo86XzqMsIM6gzpXOoc6ZzqfOqc6hzpEgzpvOkc6hzpnOo86XzqMsIM6hzp/OlM6ZzpEgzpvOkc6hzpnOo86XzqMsIM6kzqXOoc6dzpHOks6fzqMgzpvOkc6hzpnOo86XzqMnLCBQcmVmZWN0dXJlOiAnzpvOrM+BzrnPg86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQwMjAwJywgQXJlYTogJ86RzpPOmc6fzp3Olc6hzp8gzpvOkc6hzpnOo86XzqMsIM6RzpXOpM6fzqHOoc6RzqfOlyDOm86RzqHOmc6jzpfOoywgzpHOls6pzqHOn86jIM6Szp/Opc6SzpHOm86RIM6bzpHOoc6ZzqPOl86jLCDOkc6czp/Opc6hzpnOnyDOm86RzqHOmc6jzpfOoywgzpHOo86gzqHOn86nzqnOnM6RIM6bzpHOoc6ZzqPOl86jLCDOks6hzqXOo86fzqDOn86lzpvOlc6jIM6bzpHOoc6ZzqPOl86jLCDOk86RzpvOkc6dzp/Oks6hzqXOo86XIM6bzpHOoc6ZzqPOl86jLCDOk86VzqHOkc6dzpnOkSDOm86RzqHOmc6jzpfOoywgzpPOmc6Rzp3Onc6pzqTOkSDOm86RzqHOmc6jzpfOoywgzpTOn86bzpnOp86XIM6bzpHOoc6ZzqPOl86jLCDOlM6fzpzOlc6dzpnOms6fIM6bzpHOoc6ZzqPOl86jLCDOlM6hzqXOnM6fzqMgzpvOkc6hzpnOo86XzqMsIM6VzpvOkc6jzqPOn86dzpEgzpvOkc6hzpnOo86XzqMsIM6VzqXOkc6TzpPOlc6bzpnOo86czp/OoyDOlc6bzpHOo86jzp/Onc6RzqMgzpvOkc6hzpnOo86XzqMsIM6ZzpXOoc6RIM6czp/Onc6XIM6jzqDOkc6hzpzOn86lIM6bzpHOoc6ZzqPOl86jLCDOms6RzpvOm86ZzpjOlc6RIM6bzpHOoc6ZzqPOl86jLCDOms6RzpvOpc6SzpnOkSDOkc6dzpHOm86XzqjOlc6pzqMgzpvOkc6hzpnOo86XzqMsIM6azpHOm86lzpLOmc6RIM6azp/Oms6azpnOnc6fzqDOl86bzp/OpSDOm86RzqHOmc6jzpfOoywgzprOkc6hzqXOkSDOm86RzqHOmc6jzpfOoywgzprOn86azprOmc6dzp/Ok86VzpnOnyDOm86RzqHOmc6jzpfOoywgzprOn86azprOmc6dzp/OoM6XzpvOn86jIM6bzpHOoc6ZzqPOl86jLCDOms6hzqXOn86SzqHOpc6jzpcgzpvOkc6hzpnOo86XzqMsIM6bzpXOpc6azpcgzpvOkc6hzpnOo86XzqMsIM6bzqXOms6fzqXOlM6ZIM6bzpHOoc6ZzqPOl86jLCDOnM6RzpPOn86lzpvOkSDOm86RzqHOmc6jzpfOoywgzpzOl86bzpXOkSDOm86RzqHOmc6jzpfOoywgzpzOmc6azqHOnyDOlc6bzpXOpc6YzpXOoc6fzqfOqc6hzpkgzpvOkc6hzpnOo86XzqMsIM6fzpvOpc6czqDOmc6RzpTOkSDOm86RzqHOmc6jzpfOoywgzqDOkc6bzpHOmc6fzprOkc6jzqTOoc6fIM6bzpHOoc6ZzqPOl86jLCDOoM6VzqTOoc6pzqTOnyDOm86RzqHOmc6jzpfOoywgzqDOoc6RzpnOpM6pzqHOmc6fIM6bzpHOoc6ZzqPOl86jLCDOoM6lzpjOmc6fIM6bzpHOoc6ZzqPOl86jLCDOo86RzqHOkc6dzqTOkc6gzp/Ooc6fIM6bzpHOoc6ZzqPOl86jLCDOo86azp/OoM6ZzpEgzpvOkc6hzpnOo86XzqMsIM6jzqDOkc6hzpzOn86jIM6bzpHOoc6ZzqPOl86jLCDOo86kzpXOps6Rzp3On86Szp/Opc6dzp8gzpvOkc6hzpnOo86XzqMsIM6jzqXOms6RzpzOmc6dzpXOkSDOm86RzqHOmc6jzpfOoywgzqPOpc6azpXOkSDOm86RzqHOmc6jzpfOoywgzqPOpc6azpnOkSDOm86RzqHOmc6jzpfOoywgzqTOo86RzqDOn86lzqHOnc6ZzpEgzpvOkc6hzpnOo86XzqMsIM6mzpHOoc6czpHOms6XIM6bzpHOoc6ZzqPOl86jLCDOps6bzpHOnM6gzp/Opc6hzp8gzpvOkc6hzpnOo86XzqMnLCBQcmVmZWN0dXJlOiAnzpvOrM+BzrnPg86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQwMzAwJywgQXJlYTogJ86RzpPOmc6RIM6kzqHOmc6RzpTOkSDOo86azp/OpM6fzqXOo86jzpHOoyDOm86RzqHOmc6jzpfOoywgzpHOk86Zzp/OoyDOkc6dzqTOqc6dzpnOn86jIM6bzpHOoc6ZzqPOl86jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzqbOkc6hzqPOkc6bzqnOnSDOm86RzqHOmc6jzpfOoywgzpHOk86Zzp/OoyDOms6pzqPOpM6Rzp3OpM6Zzp3On86jIM6jzprOn86kzp/Opc6jzqPOkc6jIM6bzpHOoc6ZzqPOl86jLCDOkc6TzpnOn86jIM6nzpHOoc6RzpvOkc6czqDOn86jIM6bzpHOoc6ZzqPOl86jLCDOkc6czqDOlc6bzpXOmc6RIM6bzpHOoc6ZzqPOl86jLCDOkc6dzqkgzpLOkc6jzpnOm86ZzprOkSDOm86RzqHOmc6jzpfOoywgzpHOnc6pIM6jzprOn86kzp/Opc6jzpEgzpvOkc6hzpnOo86XzqMsIM6Rzp3Oqc6nzqnOoc6ZIM6bzpHOoc6ZzqPOl86jLCDOkc6hzpPOmc6YzpXOkSDOm86RzqHOmc6jzpfOoywgzpHOo86gzqHOn86TzpXOmc6RIM6bzpHOoc6ZzqPOl86jLCDOkc6lzqHOkSDOm86RzqHOmc6jzpfOoywgzpHOp86ZzpvOm86VzpnOnyDOps6RzqHOo86RzpvOqc6dIM6bzpHOoc6ZzqPOl86jLCDOks6RzpzOks6RzprOn86lIM6bzpHOoc6ZzqPOl86jLCDOks6RzqPOmc6bzpfOoyDOm86RzqHOmc6jzpfOoywgzpLOoc6lzqPOmc6RIM6bzpHOoc6ZzqPOl86jLCDOlM6RzqPOn86bzp/Ops6fzqMgzpvOkc6hzpnOo86XzqMsIM6UzpXOnc6UzqHOkSDOps6RzqHOo86RzpvOqc6dIM6bzpHOoc6ZzqPOl86jLCDOlM6Vzp3OlM6hzpHOms6ZIM6bzpHOoc6ZzqPOl86jLCDOlM6Vzp3OlM6hzp/Op86pzqHOmSDOm86RzqHOmc6jzpfOoywgzpTOmc6bzp/Ops6fIM6mzpHOoc6jzpHOm86pzp0gzpvOkc6hzpnOo86XzqMsIM6VzpvOm86Xzp3Omc6azp8gzpvOkc6hzpnOo86XzqMsIM6VzqHOlc6kzqHOmc6RIM6bzpHOoc6ZzqPOl86jLCDOls6pzp/OlM6fzqfOn86jIM6gzpfOk86XIM6bzpHOoc6ZzqPOl86jLCDOmM6VzqTOmc6UzpnOnyDOm86RzqHOmc6jzpfOoywgzprOkc6bzpvOmc6YzpXOkSDOps6RzqHOo86RzpvOqc6dIM6bzpHOoc6ZzqPOl86jLCDOms6RzqPOpM6hzpHOms6ZIM6bzpHOoc6ZzqPOl86jLCDOms6RzqTOqSDOks6RzqPOmc6bzpnOms6RIM6bzpHOoc6ZzqPOl86jLCDOms6RzqTOqSDOlM6RzqPOn86bzp/Ops6fzqMgzpvOkc6hzpnOo86XzqMsIM6azpHOpM6pzqfOqc6hzpkgzpvOkc6hzpnOo86XzqMsIM6azp/Oms6azpnOnc6pIM6bzpHOoc6ZzqPOl86jLCDOms6hzpfOnc6XIM6bzpHOoc6ZzqPOl86jLCDOm86fzqbOn86jIM6mzpHOoc6jzpHOm86pzp0gzpvOkc6hzpnOo86XzqMsIM6czpXOk86RIM6VzqXOpc6UzqHOmc6fIM6bzpHOoc6ZzqPOl86jLCDOnc6RzqHOmM6RzprOmSDOm86RzqHOmc6jzpfOoywgzp3Olc6hzpHOmc6UzpEgzpvOkc6hzpnOo86XzqMsIM6ezqXOm86RzpTOlc6jIM6bzpHOoc6ZzqPOl86jLCDOoM6RzpvOkc6Zzp/OnM6lzpvOn86jIM6bzpHOoc6ZzqPOl86jLCDOoM6bzpHOpM6Rzp3On86jIM6azpHOm86bzpnOmM6VzpHOoyDOm86RzqHOmc6jzpfOoywgzqDOn86bzqXOlM6RzpzOlc6Zzp8gzpvOkc6hzpnOo86XzqMsIM6gzp/Om86lzp3Olc6hzpkgzpvOkc6hzpnOo86XzqMsIM6gzqXOoc6TzpHOms6ZzpEgzpvOkc6hzpnOo86XzqMsIM6hzpXOpc6czpHOpM6ZzpEgzpvOkc6hzpnOo86XzqMsIM6hzpfOk86RzpnOnyDOm86RzqHOmc6jzpfOoywgzqHOpc6WzpnOnyDOm86RzqHOmc6jzpfOoywgzqPOlc6hzpnOps6XzqMgzpvOkc6hzpnOo86XzqMsIM6jzpnOpM6fzqfOqc6hzpkgzpvOkc6hzpnOo86XzqMsIM6jzprOn86kzp/Opc6jzqPOkSDOm86RzqHOmc6jzpfOoywgzqPOpM6RzpjOnM6fzqMgzqbOkc6hzqPOkc6bzqnOnSDOm86RzqHOmc6jzpfOoywgzqPOpM6RzqXOoc6fzqMgzpvOkc6hzpnOo86XzqMsIM6lzqDOlc6hzpXOmc6RIM6bzpHOoc6ZzqPOl86jLCDOps6RzqHOo86RzpvOkSDOm86RzqHOmc6jzpfOoywgzqfOkc6ZzpTOkc6hzpnOkSDOm86RzqHOmc6jzpfOoywgzqfOkc6bzprOmc6RzpTOlc6jIM6bzpHOoc6ZzqPOl86jJywgUHJlZmVjdHVyZTogJ86bzqzPgc65z4POsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MDQwMCcsIEFyZWE6ICfOkc6czqDOlc6bzqnOnc6RzqMgzpvOkc6hzpnOo86XzqMsIM6SzqHOpc6fzqTOn86gzp/OoyDOm86RzqHOmc6jzpfOoywgzpzOmc6azqHOn86bzpnOmM6fzqMgzpvOkc6hzpnOo86XzqMnLCBQcmVmZWN0dXJlOiAnzpvOrM+BzrnPg86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQxMDAwJywgQXJlYTogJ86bzpHOoc6ZzqPOo86RJywgUHJlZmVjdHVyZTogJ86bzqzPgc65z4POsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MTAwNScsIEFyZWE6ICfOms6ZzpvOlc6bzpXOoSDOm86RzqHOmc6jzpHOoywgzpvOkc6hzpnOo86RzpnOqc6dIM6bzpHOoc6ZzqPOkc6jJywgUHJlZmVjdHVyZTogJ86bzqzPgc65z4POsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MTIyMScsIEFyZWE6ICfOm86RzqHOmc6jzpEgzpvOkc6hzpnOo86XzqMnLCBQcmVmZWN0dXJlOiAnzpvOrM+BzrnPg86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQxMjIyJywgQXJlYTogJ86bzpHOoc6ZzqPOkSDOm86RzqHOmc6jzpfOoycsIFByZWZlY3R1cmU6ICfOm86sz4HOuc+DzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDEyMjMnLCBBcmVhOiAnzpPOkc6bzpfOnc6XIM6bzpHOoc6ZzqPOl86jJywgUHJlZmVjdHVyZTogJ86bzqzPgc65z4POsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MTIzNCcsIEFyZWE6ICfOm86RzqHOmc6jzpHOmc6pzp0gzpvOkc6hzpnOo86RzqMnLCBQcmVmZWN0dXJlOiAnzpvOrM+BzrnPg86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQxMjM2JywgQXJlYTogJ86bzpHOoc6ZzqPOkc6ZzqnOnSDOm86RzqHOmc6jzpHOoycsIFByZWZlY3R1cmU6ICfOm86sz4HOuc+DzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDEzMzQnLCBBcmVhOiAnzpvOkc6hzpnOo86RIM6bzpHOoc6ZzqPOl86jJywgUHJlZmVjdHVyZTogJ86bzqzPgc65z4POsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MTMzNScsIEFyZWE6ICfOm86RzqHOmc6jzpEgzpvOkc6hzpnOo86XzqMnLCBQcmVmZWN0dXJlOiAnzpvOrM+BzrnPg86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQxMzM2JywgQXJlYTogJ86bzpHOoc6ZzqPOkSDOm86RzqHOmc6jzpfOoycsIFByZWZlY3R1cmU6ICfOm86sz4HOuc+DzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDE0MzUnLCBBcmVhOiAnzpvOkc6hzpnOo86RzpnOqc6dIM6bzpHOoc6ZzqPOkc6jJywgUHJlZmVjdHVyZTogJ86bzqzPgc65z4POsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MTQ0NycsIEFyZWE6ICfOm86RzqHOmc6jzpEgzpvOkc6hzpnOo86XzqMnLCBQcmVmZWN0dXJlOiAnzpvOrM+BzrnPg86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQxNDQ4JywgQXJlYTogJ86bzpHOoc6ZzqPOkc6ZzqnOnSDOm86RzqHOmc6jzpHOoycsIFByZWZlY3R1cmU6ICfOm86sz4HOuc+DzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDE1MDAnLCBBcmVhOiAnzpHOk86ZzpEgzqDOkc6hzpHOo86azpXOpc6XIM6azqXOoM6RzqHOmc6jzqPOn86lIM6bzpHOoc6ZzqPOl86jLCDOkc6TzpnOkSDOo86fzqbOmc6RIM6UzpXOnc6UzqHOqc6dIM6bzpHOoc6ZzqPOl86jLCDOkc6TzpnOn86ZIM6Rzp3Okc6hzpPOpc6hzp/OmSDOm86RzqHOmc6jzpfOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6bzpHOoc6ZzqPOl86jLCDOkc6Tzp3Okc6dzqTOlc6hzpcgzpvOkc6hzpnOo86XzqMsIM6RzpPOoc6fzprOl86gzpnOnyDOm86RzqHOmc6jzpfOoywgzpHOnM6lzpPOlM6RzpvOlc6RIM6bzpHOoc6ZzqPOl86jLCDOkc6czqbOmc6YzpXOkSDOm86RzqHOmc6jzpfOoywgzpHOnc6RzpPOlc6dzp3Ol86jzpnOoyDOm86RzqHOmc6jzpfOoywgzpHOoc6TzpnOo86jzpEgzpvOkc6hzpnOo86XzqMsIM6RzqHOk86lzqHOn86czqXOm86fzqMgzpvOkc6hzpnOo86XzqMsIM6RzqHOnM6Vzp3Omc6fIM6bzpHOoc6ZzqPOl86jLCDOkc6nzpnOm86bzpXOmc6fIM6bzpHOoc6ZzqPOl86jLCDOk86ZzpHOnc6dzp/Opc6bzpcgzpvOkc6hzpnOo86XzqMsIM6TzpvOkc6lzprOlyDOm86RzqHOmc6jzpfOoywgzpPOpc6hzqTOqc6dzpcgzpvOkc6hzpnOo86XzqMsIM6UzpXOnc6UzqHOkSDOpM6lzqHOnc6RzpLOn86lIM6bzpHOoc6ZzqPOl86jLCDOlM6ZzpvOn86mzp8gzpvOkc6hzpnOo86XzqMsIM6Uzp/Ons6RzqHOkc6jIM6bzpHOoc6ZzqPOl86jLCDOlc6bzpXOpc6YzpXOoc6VzqMgzpvOkc6hzpnOo86XzqMsIM6WzpHOoM6gzpXOmc6fIM6bzpHOoc6ZzqPOl86jLCDOmM6VzqHOkc6gzpXOpc6kzpnOms6XIM6azp/Omc6dzp/OpM6XzqTOkSDOlc6ezp/OlM6fzqMgzpvOkc6hzpnOo86XzqMsIM6azpHOm86fIM6dzpXOoc6fIM6bzpHOoc6ZzqPOl86jLCDOms6RzpzOoM6fzqMgzpvOkc6hzpnOo86XzqMsIM6azpHOo86kzqHOnyDOm86RzqHOmc6jzpfOoywgzprOmc6bzpXOm86VzqEgzpvOkc6hzpnOo86XzqMsIM6azp/Omc6bzpHOlM6RIM6bzpHOoc6ZzqPOl86jLCDOms6fzprOms6Zzp3OkSDOm86RzqHOmc6jzpfOoywgzprOn86lzpvOn86lzqHOmSDOm86RzqHOmc6jzpfOoywgzprOn86lzqTOo86fzqfOlc6hzp8gzpvOkc6hzpnOo86XzqMsIM6azqHOkc6dzp3Oqc6dzpHOoyDOm86RzqHOmc6jzpfOoywgzprOoc6lzpEgzpLOoc6lzqPOlyDOm86RzqHOmc6jzpfOoywgzprOpc6gzpHOoc6ZzqPOo86ZzpEgzpvOkc6hzpnOo86XzqMsIM6azqXOoM6RzqHOmc6jzqPOn86jIM6bzpHOoc6ZzqPOl86jLCDOm86fzqXOpM6hzp8gzpvOkc6hzpnOo86XzqMsIM6bzp/Ops6ZzqPOms6fzqMgzpvOkc6hzpnOo86XzqMsIM6czpHOnc6UzqHOkSDOm86RzqHOmc6jzpfOoywgzpzOkc6lzqHOn86Szp/Opc6dzpnOnyDOm86RzqHOmc6jzpfOoywgzpzOlc6TzpEgzpzOn86dzpHOo86kzpfOoc6ZIM6bzpHOoc6ZzqPOl86jLCDOnM6VzpvOmc6RIM6bzpHOoc6ZzqPOl86jLCDOnM6VzpvOmc6jzqPOkSDOm86RzqHOmc6jzpfOoywgzpzOlc6bzpnOo86jzp/Op86pzqHOmSDOm86RzqHOmc6jzpfOoywgzpzOlc6jzp/Ooc6hzpHOp86XIM6bzpHOoc6ZzqPOl86jLCDOnM6ZzprOoc6fIM6Szp/Opc6dzp8gzpvOkc6hzpnOo86XzqMsIM6czp/OlM6VzqPOpM6fzqMgzpvOkc6hzpnOo86XzqMsIM6czp/Oo86nzp/Op86pzqHOmSDOm86RzqHOmc6jzpfOoywgzpzOpc6hzpEgzpvOkc6hzpnOo86XzqMsIM6dzpHOnM6RzqTOkSDOm86RzqHOmc6jzpfOoywgzp3Olc6RIM6bzpXOpc6azpcgzpvOkc6hzpnOo86XzqMsIM6dzpXOlc6jIM6azpHOoc6lzpXOoyDOm86RzqHOmc6jzpfOoywgzp3Olc6fIM6gzpXOoc6ZzpLOn86bzpkgzpvOkc6hzpnOo86XzqMsIM6dzpnOms6RzpnOkSDOm86RzqHOmc6jzpfOoywgzp3Omc6azpcgzpvOkc6hzpnOo86XzqMsIM6fzpzOn86hzqbOn86nzqnOoc6ZIM6bzpHOoc6ZzqPOl86jLCDOoM6bzpHOpM6Rzp3On86lzpvOmc6RIM6bzpHOoc6ZzqPOl86jLCDOoM6hzp/OlM6hzp/OnM6fzqMgzpvOkc6hzpnOo86XzqMsIM6hzpHOp86fzqXOm86RIM6bzpHOoc6ZzqPOl86jLCDOoc6VzqXOnM6RIM6bzpHOoc6ZzqPOl86jLCDOo86fzqbOnyDOm86RzqHOmc6jzpfOoywgzqPOpc6dzp/Omc6azpnOo86czp/OoyDOoM6hzp/Oo86mzqXOk86pzp0gzpvOkc6hzpnOo86XzqMsIM6jzqnOpM6XzqHOmc6fIM6bzpHOoc6ZzqPOl86jLCDOpM6VzqHOqM6ZzpjOlc6RIM6bzpHOoc6ZzqPOl86jLCDOp86RzpvOms6XIM6bzpHOoc6ZzqPOl86jLCDOp86RzqHOkSDOm86RzqHOmc6jzpfOoywgzqfOkc6jzpHOnM6gzpHOm86XIM6bzpHOoc6ZzqPOl86jLCDOqM6lzqfOmc6azp8gzpvOkc6hzpnOo86XzqMnLCBQcmVmZWN0dXJlOiAnzpvOrM+BzrnPg86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcyMDUyJywgQXJlYTogJ86RzpLOoc6RzprOn86dzqTOlc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6bzpHOo86ZzpjOmc6fzqUgzpfOoc6RzprOm86VzpnOn86lLCDOkc6TzpnOn86jIM6azqnOnc6jzqTOkc6dzqTOmc6dzp/OoyDOm86RzqPOmc6YzpnOn86lIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpHOk86Zzp/OoyDOp86RzqHOkc6bzpHOnM6gzp/OoyDOl86hzpHOms6bzpXOmc6fzqUsIM6RzqHOk86lzqHOnyDOnc6VzqHOnyDOl86hzpHOms6bzpXOmc6fzqUsIM6Vzp7OqSDOoM6fzqTOkc6czp/OmSDOl86hzpHOms6bzpXOmc6fzqUsIM6azpHOnM6Zzp3Okc6azpkgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzqTOqSDOnM6VzqTOn86nzpkgzpfOoc6RzprOm86VzpnOn86lLCDOm86RzpPOn86lIM6XzqHOkc6azpvOlc6Zzp/OpSwgzpzOkc6Tzp/Opc6bzpHOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6czpHOoc6czpHOms6VzqTOnyDOl86hzpHOms6bzpXOmc6fzqUsIM6czpXOo86RIM6bzpHOo86ZzpjOkc6azpkgzpfOoc6RzprOm86VzpnOn86lLCDOnM6VzqPOkSDOm86RzqPOmc6YzpkgzpfOoc6RzprOm86VzpnOn86lLCDOnM6VzqPOkSDOoM6fzqTOkc6czp/OmSDOl86hzpHOms6bzpXOmc6fzqUsIM6czp/Onc6XIM6azqHOpc6jzqTOkc6bzpvOlc6dzpnOkc6jIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOmc6dzpHOms6ZzpHOnc6fIM6XzqHOkc6azpvOlc6Zzp/OpSwgzqDOm86RzqTOlyDOl86hzpHOms6bzpXOmc6fzqUsIM6hzp/Opc6jzqPOkc6azpnOkc6dzpEgzpfOoc6RzprOm86VzpnOn86lLCDOpM6WzpXOoc6czpnOkc6Uzp8gzpfOoc6RzprOm86VzpnOn86lLCDOps6RzqHOo86RzqHOnyDOl86hzpHOms6bzpXOmc6fzqUsIM6ozqXOp86hzp8gzpfOoc6RzprOm86VzpnOn86lJywgUHJlZmVjdHVyZTogJ86bzrHPg865zrjOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcyMDUzJywgQXJlYTogJ86RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOm86RzqPOmc6YzpnOn86lLCDOks6RzpvOpM6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpLOm86ZzqfOkc6UzpnOkSDOm86RzqPOmc6YzpnOn86lLCDOks6hzp/Opc6nzpHOoyDOm86RzqPOmc6YzpnOn86lLCDOlc6bzp/Opc6dzqTOkSDOlc6gzpHOnc6pIM6bzpHOo86ZzpjOmc6fzqUsIM6VzpvOn86lzp3OpM6RIM6azpHOpM6pIM6bzpHOo86ZzpjOmc6fzqUsIM6VzpvOn86lzp3OpM6RzqMgzpHOk86ZzpEgzqDOkc6hzpHOo86azpXOpc6XIM6bzpHOo86ZzpjOmc6fzqUsIM6VzqDOkc6dzqkgzpvOn86lzpzOkc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6VzqDOkc6dzqkgzqDOmc6dzpXOoyDOm86RzqPOmc6YzpnOn86lLCDOms6RzqTOqSDOm86fzqXOnM6RzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzprOkc6kzqkgzqDOmc6dzpXOoyDOm86RzqPOmc6YzpnOn86lLCDOms6RzqTOqSDOo86VzpvOm86VzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpzOkc6lzqHOmc6azpnOkc6dzp8gzpvOkc6jzpnOmM6Zzp/OpSwgzpzOpc6hzqnOnc6ZzprOl86kzpHOoyDOm86RzqPOmc6YzpnOn86lLCDOoM6bzpHOms6RIM6bzpHOo86ZzpjOmc6fzqUsIM6jzpXOm86bzpXOoyDOm86RzqPOmc6YzpnOn86lLCDOo86azpnOnc6ZzpHOoyDOm86RzqPOmc6YzpnOn86lLCDOo86nzpnOo86czpEgzpXOm86fzqXOnc6kzpHOoyDOm86RzqPOmc6YzpnOn86lJywgUHJlZmVjdHVyZTogJ86bzrHPg865zrjOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcyMDU1JywgQXJlYTogJ86RzpPOmc6fzqMgzqDOkc6dzqTOlc6bzpXOl86czqnOnSDOn86hzpXOmc6dzp/OpSDOm86RzqPOmc6YzpnOn86lLCDOkc6TzpnOn86jIM6jzqTOlc6mzpHOnc6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpHOnc6RzpvOl86ozpcgzpvOkc6jzpnOmM6Zzp/OpSwgzpHOnc6UzqHOmc6Rzp3On86jIM6bzpHOo86ZzpjOmc6fzqUsIM6RzqPOoM6hzp/OoyDOoM6fzqTOkc6czp/OoyDOm86RzqPOmc6YzpnOn86lLCDOkc6nzpvOmc6RIM6bzpHOo86ZzpjOmc6fzqUsIM6TzpHOm86Xzp3OlyDOm86RzqPOmc6YzpnOn86lLCDOlM6RzqbOnc6XIM6bzpHOo86ZzpjOmc6fzqUsIM6VzqDOkc6dzqkgzprOoc6lzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzprOkc6bzqXOks6ZzqTOl86jIM6bzpHOo86ZzpjOmc6fzqUsIM6azpHOpM6pIM6azqHOpc6RIM6bzpHOo86ZzpjOmc6fzqUsIM6azp/Opc6kzqPOn86lzqHOkc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6bzpHOoM6ZzpjOn86jIM6bzpHOo86ZzpjOmc6fzqUsIM6czpHOms6hzqXOk86ZzpHOm86fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpzOkc6lzqHOn86jIM6azp/Om86lzpzOoM6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpzOoM6VzpzOoM6fzp3Okc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6fzqHOlc6Zzp3OnyDOm86RzqPOmc6YzpnOn86lLCDOoM6VzqXOms6fzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzqDOmc6bzpHOm86XzpzOkc6kzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzqHOmc6WzpEgzqPOl86kzpXOmc6RzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzqPOms6fzqHOlM6ZzpvOnyDOm86RzqPOmc6YzpnOn86lLCDOo86kzpHOpc6hzp/Op86pzqHOmSDOm86RzqPOmc6YzpnOn86lLCDOo86nzpnOnc6fzprOkc6ozpHOm86RIM6bzpHOo86ZzpjOmc6fzqUsIM6kzqPOmc6azprOkc6bzpHOoc6ZzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzqfOoc6lzqPOn86gzpfOk86XIM6bzpHOo86ZzpjOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzpvOsc+DzrnOuM6vzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzIxMDAnLCBBcmVhOiAnzpHOk86Zzp/OmSDOoM6Rzp3OpM6VzqMgzp3Ol86jzp/OoyDOm86RzqPOmc6YzpnOn86lLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpHOnM6czp/Opc6UzpHOoc6RIM6RzpMuzp3Omc6azp/Om86Rzp/OpSDOm86RzqPOmc6YzpnOn86lLCDOks6RzpjOpSDOm86RzqPOmc6YzpnOn86lLCDOks6bzpHOp86XzpTOlc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6SzqHOpc6fzp3Ol86jzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzpXOm86bzpfOnc6ZzprOkSDOm86RzqPOmc6YzpnOn86lLCDOlc6ezqkgzpvOkc6azprOqc6dzpnOkSDOm86RzqPOmc6YzpnOn86lLCDOmM6Vzp/Om86fzpPOn86jIM6bzpHOo86ZzpjOmc6fzqUsIM6ZzqPOpM6hzp8gzpvOkc6jzpnOmM6Zzp/OpSwgzprOkc6azp/Oms6RzpzOqc6kzpXOoyDOm86RzqPOmc6YzpnOn86lLCDOms6RzpvOnyDOp86pzqHOmc6fIM6RzpMuzp3Omc6azp/Om86Rzp/OpSDOm86RzqPOmc6YzpnOn86lLCDOms6RzpvOnyDOp86pzqHOmc6fIM6jzpfOpM6VzpnOkc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6azpHOm86lzpLOn86jIM6bzpHOo86ZzpjOmc6fzqUsIM6azpHOo86kzpXOm86ZIM6mzp/Opc6hzp3Ol86jIM6bzpHOo86ZzpjOmc6fzqUsIM6azpHOpM6jzpnOms6ZzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzprOlc6hzqTOlc6hzpfOlM6VzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzprOoc6fzqXOo86kzpHOoyDOm86RzqPOmc6YzpnOn86lLCDOnM6RzqHOk86ZzpXOm86ZIM6bzpHOo86ZzpjOmc6fzqUsIM6czpHOoc6UzpHOpM6ZIM6bzpHOo86ZzpjOmc6fzqUsIM6czpHOoc6dzpXOm86bzpfOlM6VzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpzOmc6azqHOn86dzpfOo86ZIM6bzpHOo86ZzpjOmc6fzqUsIM6ezpfOoc6fzprOkc6czqDOn86jIM6RzpMuzp3Omc6azp/Om86Rzp/OpSDOm86RzqPOmc6YzpnOn86lLCDOoM6VzqDOn86dzpfOlM6VzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzqDOmc6jzqPOmc6Uzp/OoyDOm86RzqPOmc6YzpnOn86lLCDOoM6hzpnOnc6RIM6bzpHOo86ZzpjOmc6fzqUsIM6gzqXOoc6Tzp/OoyDOms6RzpvOn86lIM6nzqnOoc6Zzp/OpSDOm86RzqPOmc6YzpnOn86lLCDOoc6fzqXOo86RIM6bzpnOnM6dzpcgzpvOkc6jzpnOmM6Zzp/OpSwgzqPOp86ZzqPOnM6RIM6bzpHOo86ZzpjOmc6fzqUsIM6kzpHOoM6VzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzqbOmc6fzqHOlc6kzpbOmc6UzpXOoyDOm86RzqPOmc6YzpnOn86lLCDOps6bzpHOnM6fzqXOoc6ZzpHOnc6RIM6bzpHOo86ZzpjOmc6fzqUsIM6mzp/Ooc6kzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzqfOkc6czpfOm86fIM6bzpHOo86ZzpjOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzpvOsc+DzrnOuM6vzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzIyMDAnLCBBcmVhOiAnzpHOk86ZzpEgzqbOqc6kzpnOkSDOmc6VzqHOkc6gzpXOpM6hzpHOoyDOm86RzqPOmc6YzpnOn86lLCDOkc6TzpnOkSDOps6pzqTOmc6RIM6jzpfOpM6VzpnOkc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6RzpPOmc6RzqPOnM6Vzp3On86jIM6bzpHOo86ZzpjOmc6fzqUsIM6RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOmc6VzqHOkc6gzpXOpM6hzpHOoyDOm86RzqPOmc6YzpnOn86lLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6ZzpXOoc6RzqDOlc6kzqHOkc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6RzpzOnM6fzqXOlM6RzqHOlc6jIM6ZzpXOoc6RzqDOlc6kzqHOkc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6Rzp3Okc6kzp/Om86XIM6bzpHOo86ZzpjOmc6fzqUsIM6SzpHOmc6dzpnOkSDOm86RzqPOmc6YzpnOn86lLCDOks6RzqPOmc6bzpnOms6XIM6bzpHOo86ZzpjOmc6fzqUsIM6TzpHOks6hzpnOm86XzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpPOoc6RIM6bzqXOk86ZzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzpTOoc6RzprOkc6bzpXOpc6hzpnOnyDOm86RzqPOmc6YzpnOn86lLCDOmM6hzqXOoM6kzpcgzpvOkc6jzpnOmM6Zzp/OpSwgzpnOlc6hzpEgzpzOn86dzpcgzqDOkc6dzpHOk86ZzpHOoyDOlc6ezpHOms6fzqXOo86kzpfOoyDOm86RzqPOmc6YzpnOn86lLCDOmc6VzqHOkSDOnM6fzp3OlyDOps6Rzp3Olc6hzqnOnM6Vzp3Ol86jIM6bzpHOo86ZzpjOmc6fzqUsIM6ZzpXOoc6RzqDOlc6kzqHOkSDOm86RzqPOmc6YzpnOn86lLCDOms6RzpLOn86lzqPOmc6fIM6bzpHOo86ZzpjOmc6fzqUsIM6azpHOl86czpXOnc6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzprOkc6bzpHOnM6RzqXOms6RIM6bzpHOo86ZzpjOmc6fzqUsIM6azpHOm86bzpnOmM6VzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzprOkc6bzp/Ok86VzqHOn86ZIM6bzpHOo86ZzpjOmc6fzqUsIM6azpHOnM6RzqHOkSDOmc6VzqHOkc6gzpXOpM6hzpHOoyDOm86RzqPOmc6YzpnOn86lLCDOms6RzpzOoM6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzprOkc6kzqkgzqfOqc6hzpnOnyDOm86RzqPOmc6YzpnOn86lLCDOms6Vzp3OpM6hzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzprOlc6mzpHOm86RIM6bzpHOo86ZzpjOmc6fzqUsIM6azp/Opc6kzqPOn86lzp3Okc6hzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzpzOkc6azqHOpc6bzpnOkSDOm86RzqPOmc6YzpnOn86lLCDOnM6VzpvOmc6jzqPOlc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6czpXOo86VzpvOlc6hzp/OmSDOm86RzqPOmc6YzpnOn86lLCDOnM6fzp3Okc6jzqTOl86hzpHOms6ZIM6bzpHOo86ZzpjOmc6fzqUsIM6dzpXOkSDOkc6dzpHOpM6fzpvOlyDOm86RzqPOmc6YzpnOn86lLCDOns6XzqHOn86azpHOnM6gzp/OoyDOmc6VzqHOkc6gzpXOpM6hzpHOoyDOm86RzqPOmc6YzpnOn86lLCDOn86hzp3Omc6RzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzqDOkc6dzpHOk86ZzpEgzprOkc6Szp/Opc6jzpnOn86lIM6bzpHOo86ZzpjOmc6fzqUsIM6gzpHOnc6pIM6nzqnOoc6Zzp8gzpvOkc6jzpnOmM6Zzp/OpSwgzqDOkc6nzpXOmc6RIM6RzpzOnM6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzqDOn86kzpHOnM6fzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzqHOmc6WzpEgzpnOlc6hzpHOoM6VzqTOoc6RzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzqPOkc6hzpHOpM6jzpkgzprOkc6czqDOn86jIM6bzpHOo86ZzpjOmc6fzqUsIM6jzqTOkc6lzqHOn86jIM6bzpHOo86ZzpjOmc6fzqUsIM6jzqTOn86czpnOnyDOm86RzqPOmc6YzpnOn86lLCDOo86lzprOmc6RIM6ZzpXOoc6RzqDOlc6kzqHOkc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6jzqbOkc6azp/Opc6hzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzqTOo86RzpzOkc6dzqTOl86jIM6bzpHOo86ZzpjOmc6fzqUsIM6mzpXOoc6czpEgzpvOkc6jzpnOmM6Zzp/OpSwgzqfOoc6lzqPOlyDOnc6XzqPOn86jIM6bzpHOo86ZzpjOmc6fzqUsIM6ozpHOmM6ZIM6bzpHOo86ZzpjOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzpvOsc+DzrnOuM6vzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzIzMDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6WzpHOms6hzp/OpSDOm86RzqPOmc6YzpnOn86lLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzqPOl86kzpXOmc6RzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpHOk86azpHOmM6ZzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzpHOlM6hzpHOks6RzqPOpM6fzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzpHOls6fzprOlc6hzpHOnM6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpHOnc6VzpzOn86czqXOm86ZzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzpHOoc6dzpnOms6fIM6bzpHOo86ZzpjOmc6fzqUsIM6RzqfOm86RzpTOmc6RIM6bzpHOo86ZzpjOmc6fzqUsIM6SzpnOk86bzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzpLOoc6lzqPOmc6UzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzpPOmc6Rzp3Opc6jzpHOlM6RIM6bzpHOo86ZzpjOmc6fzqUsIM6UzpnOn86dzqXOo86fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpTOoc6RzpPOn86dzpHOlM6RIM6bzpHOo86ZzpjOmc6fzqUsIM6WzpHOms6hzp/OoyDOm86RzqPOmc6YzpnOn86lLCDOls6fzqUgzpvOkc6jzpnOmM6Zzp/OpSwgzprOkc6czpHOoc6RIM6jzpfOpM6VzpnOkc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6azpHOoc6lzpTOmSDOo86XzqTOlc6ZzpHOoyDOm86RzqPOmc6YzpnOn86lLCDOms6RzqTOqSDOlM6hzqXOoyDOm86RzqPOmc6YzpnOn86lLCDOms6RzqTOqSDOlc6gzpnOo86azp/OoM6XIM6bzpHOo86ZzpjOmc6fzqUsIM6azpHOpM6pIM6WzpHOms6hzp/OoyDOm86RzqPOmc6YzpnOn86lLCDOms6VzpvOm86RzqHOmc6RIM6bzpHOo86ZzpjOmc6fzqUsIM6azpnOnM6fzqXOoc6ZzqnOpM6XzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzprOm86XzqPOmc6UzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzprOn86lzqHOlc6czpXOnc6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzprOoc6lzp/Onc6VzqHOmSDOm86RzqPOmc6YzpnOn86lLCDOms6lzqHOmc6RzpzOkc6UzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzpvOkc6TzprOkc6UzpEgzprOkc6hzqXOlM6Zzp/OpSDOm86RzqPOmc6YzpnOn86lLCDOm86RzpPOms6RzpTOkSDOm86ZzpjOmc6dzqnOnSDOm86RzqPOmc6YzpnOn86lLCDOm86lzpTOmc6RIM6bzpHOo86ZzpjOmc6fzqUsIM6czpHOoc6pzp3Omc6RIM6bzpHOo86ZzpjOmc6fzqUsIM6czpXOoc6kzqXOlM6ZzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzpzOl86kzpHOpM6fIM6bzpHOo86ZzpjOmc6fzqUsIM6ezpXOoc6fzprOkc6czqDOmc6RzqMgzpnOpM6Rzp3On86lIM6bzpHOo86ZzpjOmc6fzqUsIM6ezpfOoc6fzpvOmc6czp3OlyDOo86XzqTOlc6ZzpHOoyDOm86RzqPOmc6YzpnOn86lLCDOoM6RzpvOkc6ZzprOkc6jzqTOoc6fIM6bzpHOo86ZzpjOmc6fzqUsIM6gzpHOnc6RzpPOmc6RIM6mzpHOnc6VzqHOqc6czpXOnc6XIM6bzpHOo86ZzpjOmc6fzqUsIM6gzpHOns6ZzpzOkc6UzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzqDOkc6hzpHOo86gzp/Ooc6Zzp8gzpvOkc6jzpnOmM6Zzp/OpSwgzqDOlc6kzqHOkc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6gzpnOo86azp/Oms6VzqbOkc6bzp8gzpvOkc6jzpnOmM6Zzp/OpSwgzqHOn86lzqPOo86RIM6VzprOms6bzpfOo86ZzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzqPOkc6hzpHOnc6kzpHOoM6XzqfOn86jIM6bzpHOo86ZzpjOmc6fzqUsIM6jzpfOpM6VzpnOkSDOm86RzqPOmc6YzpnOn86lLCDOo86azp/OoM6XIM6bzpHOo86ZzpjOmc6fzqUsIM6jzqTOkc6lzqHOqc6czpXOnc6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzqPOps6RzprOkSDOmc6kzpHOnc6fzqUgzpvOkc6jzpnOmM6Zzp/OpSwgzqTOn86gzpvOn86lIM6bzpHOo86ZzpjOmc6fzqUsIM6kzqHOpc6gzpfOpM6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzqfOkc6czpXOls6Zzp8gzpvOkc6jzpnOmM6Zzp/OpSwgzqfOmc6pzp3OkSDOm86RzqPOmc6YzpnOn86lLCDOp86fzqfOm86RzprOmc6VzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzqfOqc6dzp/OoyDOm86RzqPOmc6YzpnOn86lJywgUHJlZmVjdHVyZTogJ86bzrHPg865zrjOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzcyNDAwJywgQXJlYTogJ86RzpPOmc6RIM6SzpHOoc6SzpHOoc6RIM6bzpHOo86ZzpjOmc6fzqUsIM6RzpPOmc6RIM6gzpXOm86RzpPOmc6RIM6bzpHOo86ZzpjOmc6fzqUsIM6RzpPOmc6fzqMgzpHOnc6kzqnOnc6Zzp/OoyDOm86RzqPOmc6YzpnOn86lLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6bzpnOnM6dzqnOnSDOm86RzqPOmc6YzpnOn86lLCDOkc6TzpnOn86jIM6azqnOnc6jzqTOkc6dzqTOmc6dzp/OoyDOnc6VzpHOoM6fzpvOl86jIM6bzpHOo86ZzpjOmc6fzqUsIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOnc6VzpHOoM6fzpvOlc6pzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpHOk86fzqHOn86ZIM6bzpHOo86ZzpjOmc6fzqUsIM6RzpTOoc6RzpLOkc6jzqTOn86jIM6bzpHOo86ZzpjOmc6fzqUsIM6RzpTOoc6ZzpHOnc6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpHOnM6lzpPOlM6RzpvOlc6RIM6bzpHOo86ZzpjOmc6fzqUsIM6RzpzOpc6TzpTOkc6bzp/OmSDOm86RzqPOmc6YzpnOn86lLCDOkc6czqXOk86UzpHOm86fzpvOkc6azprOn86jIM6bzpHOo86ZzpjOmc6fzqUsIM6Rzp3OqSDOkc6czqXOk86UzpHOm86fzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzpHOnc6pzpPOlc6ZzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzpHOpc6Tzp8gzpvOkc6jzpnOmM6Zzp/OpSwgzpLOn86lzpvOmc6jzpzOlc6dzpcgzpvOkc6jzpnOmM6Zzp/OpSwgzpLOoc6lzqPOlc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6TzpnOn86mzqXOoc6ZIM6bzpHOo86ZzpjOmc6fzqUsIM6UzpnOm86RzprOms6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpTOn86hzpnOlc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6UzqHOkc6azp/OoyDOm86RzqPOmc6YzpnOn86lLCDOlM6hzpHOo86ZIM6bzpHOo86ZzpjOmc6fzqUsIM6UzqXOnyDOoM6hzpnOnc6fzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzpXOoM6Rzp3OqSDOo86ZzqPOmc6fIM6bzpHOo86ZzpjOmc6fzqUsIM6WzpXOnc6ZzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzpbOn86lzqHOks6RIM6bzpHOo86ZzpjOmc6fzqUsIM6azpHOm86fzqMgzpvOkc6azprOn86jIM6RzpMuzp3Omc6azp/Om86Rzp/OpSDOm86RzqPOmc6YzpnOn86lLCDOms6RzqHOpM6jzpnOnc6ZzpHOnc6fzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzprOkc6hzqXOlM6ZIM6dzpXOkc6gzp/Om86XzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzprOn86lzpTOn86lzpzOkc6bzp/OoyDOm86RzqPOmc6YzpnOn86lLCDOms6fzqXOnc6RzpvOmSDOm86RzqPOmc6YzpnOn86lLCDOms6fzqXOoc6fzqXOnc6VzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzpvOkc6kzqPOmc6UzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzpvOmc6czp3Olc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6czpHOms6hzqXOk86Vzp3Onc6XzqPOkSDOm86RzqPOmc6YzpnOn86lLCDOnM6ZzpvOkc6kzp/OoyDOm86RzqPOmc6YzpnOn86lLCDOnM6fzp3OlyDOkc6hzpXOpM6Zzp/OpSDOm86RzqPOmc6YzpnOn86lLCDOnc6VzpHOoM6fzpvOlyDOm86RzqPOmc6YzpnOn86lLCDOnc6ZzprOl86YzpnOkc6dzp/OoyDOm86RzqPOmc6YzpnOn86lLCDOnc6ZzqPOoM6XzqTOkc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6dzp/Ops6RzpvOmc6RzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzp7Olc6hzpEgzp7Opc6bzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzp7Ol86hzp/Om86ZzpzOnc6XIM6dzpXOkc6gzp/Om86XzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzqDOkc6hzpHOm86ZzpEgzpzOmc6bzpHOpM6fzqUgzpvOkc6jzpnOmM6Zzp/OpSwgzqDOkc6kzqPOn86gzp/Opc6bzp/OoyDOm86RzqPOmc6YzpnOn86lLCDOoM6VzqHOkc6czqDOlc6bzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzqDOlc6hzp/Onc6ZzpTOlc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6gzpXOpM6hzp/OoyDOm86RzqPOmc6YzpnOn86lLCDOoM6bzpHOpM6lzqDOn86UzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzqDOpc6hzpPOn86jIM6SzqHOkc6nzpHOo86Zzp/OpSDOm86RzqPOmc6YzpnOn86lLCDOoc6fzqXOo86jzpHOoM6ZzpTOmc6RIM6bzpHOo86ZzpjOmc6fzqUsIM6hzqnOnM6Rzp3On86jIM6bzpHOo86ZzpjOmc6fzqUsIM6jzpXOm86Xzp3Okc6hzpkgzpvOkc6jzpnOmM6Zzp/OpSwgzqPOmc6jzpnOnyDOm86RzqPOmc6YzpnOn86lLCDOo86fzqXOks6bzp/OoyDOm86RzqPOmc6YzpnOn86lLCDOo86lzqHOnM6VzqPOnyDOm86RzqPOmc6YzpnOn86lLCDOpM6jzpHOnM6gzpnOnyDOm86RzqPOmc6YzpnOn86lLCDOps6Zzp3On86azpHOm86ZzpEgzpvOkc6jzpnOmM6Zzp/OpSwgzqbOoc6RzpjOmc6RzqMgzpvOkc6jzpnOmM6Zzp/OpSwgzqfOkc6lzpPOkc6jIM6bzpHOo86ZzpjOmc6fzqUsIM6nzp/Onc6UzqHOn86Szp/Om86RzprOn86ZIM6bzpHOo86ZzpjOmc6fzqUsIM6nzp/Opc6czpXOoc6ZzpHOms6fzqMgzpvOkc6jzpnOmM6Zzp/OpScsIFByZWZlY3R1cmU6ICfOm86xz4POuc64zq/Ov8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MTEwMCcsIEFyZWE6ICfOkc6TzpnOkSDOnM6RzqHOmc6dzpEgzpvOlc6jzpLOn86lLCDOkc6TzpnOkSDOpM6hzpnOkc6UzpEgzpHOps6RzpvOqc6dzpEgzpvOlc6jzpLOn86lLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzpvOn86lzqTOoc6fzqDOn86bzpXOqc6jIM6bzpXOo86Szp/OpSwgzpHOk86hzpnOm86ZzpEgzprOoc6RzqTOl86Tzp/OpSDOm86VzqPOks6fzqUsIM6RzpvOpc6mzpHOnc6kzpEgzpvOlc6jzpLOn86lLCDOkc6dzqkgzqfOkc6hzpHOnM6ZzpTOkSDOm86VzqPOks6fzqUsIM6RzqbOkc6bzqnOnc6RzqMgzpvOlc6jzpLOn86lLCDOkc6nzpvOmc6RIM6bzpXOo86Szp/OpSwgzpLOkc6hzpXOmc6RIM6bzpXOo86Szp/OpSwgzpjOlc6hzpzOlyDOm86VzqPOks6fzqUsIM6azpXOlM6hzp8gzpvOlc6jzpLOn86lLCDOms6fzqXOnM6ZzprOnyDOm86VzqPOks6fzqUsIM6azp/Opc6dzqTOn86lzqHOn86lzpTOmc6RIM6bzpXOo86Szp/OpSwgzprOoc6RzqTOl86Tzp/OoyDOm86VzqPOks6fzqUsIM6azqnOnM6XIM6bzpXOo86Szp/OpSwgzpvOkc6hzpnOo86fzqMgKM6uIM6bzpHOoc6jzp/OoykgzpvOlc6jzpLOn86lLCDOm86fzqXOpM6hzpEgzpjOlc6hzpzOl86jIM6bzpXOo86Szp/OpSwgzpvOn86lzqTOoc6RIM6bzpXOo86Szp/OpSwgzpvOn86lzqTOoc6fzqDOn86bzpcgzpjOlc6hzpzOl86jIM6bzpXOo86Szp/OpSwgzpzOkc6hzpzOkc6hzp8gzpzOn86hzpnOkc6jIM6bzpXOo86Szp/OpSwgzpzOmc6jzqTOlc6Tzp3OkSDOm86VzqPOks6fzqUsIM6czp/Onc6XIM6RzpPOmc6fzqUgzqHOkc6mzpHOl86bIM6bzpXOo86Szp/OpSwgzpzOn86hzpnOkSDOm86VzqPOks6fzqUsIM6czqXOpM6ZzpvOl86dzpcgzpvOlc6jzpLOn86lLCDOnc6VzpHOoM6fzpvOlyDOm86VzqPOks6fzqUsIM6dzpXOlc6jIM6azqXOlM6pzp3Omc6VzqMgzpvOlc6jzpLOn86lLCDOnc6XzqPOlc6bzpnOkSDOm86VzqPOks6fzqUsIM6ezpHOnM6gzpXOm86ZzpEgzpvOlc6jzpLOn86lLCDOn86lzqTOls6RIM6bzpXOo86Szp/OpSwgzqDOkc6czqbOmc6bzpEgzpvOlc6jzpLOn86lLCDOoM6Rzp3Okc6TzpnOkSDOm86VzqPOks6fzqUsIM6gzpHOnc6RzpPOmc6fzqXOlM6RIM6bzpXOo86Szp/OpSwgzqDOkc6hzpHOm86ZzpEgzpjOlc6hzpzOl86jIM6bzpXOo86Szp/OpSwgzqDOkc6hzpHOm86ZzpEgzpvOlc6jzpLOn86lLCDOoM6XzpPOlyDOm86VzqPOks6fzqUsIM6gzpvOmc6Tzp/Onc6ZIM6bzpXOo86Szp/OpSwgzqDOpc6hzpPOmSDOm86VzqPOks6fzqUsIM6gzqXOoc6Tzp/OmSDOmM6VzqHOnM6XzqMgzpvOlc6jzpLOn86lLCDOo86azpHOm86RIM6bzp/Opc6kzqHOqc6dIM6bzpXOo86Szp/OpSwgzqPOms6RzpvOkSDOnM6ZzqPOpM6VzpPOnc6pzp0gzpvOlc6jzpLOn86lLCDOo86azpHOm86RIM6dzpXOqc6dIM6azqXOlM6pzp3Omc6pzp0gzpvOlc6jzpLOn86lLCDOpM6Rzp7Omc6RzqHOp86VzqMgzpzOpc6kzpnOm86Xzp3Ol86jIM6bzpXOo86Szp/OpSwgzqTOn86lzpzOoM6VzqMgzpvOlc6jzpLOn86lLCDOps6lzpvOkc6azpnOnyDOoM6hzp/Oks6fzqPOms6ZzpTOkSDOm86VzqPOks6fzqUsIM6nzpHOoc6RzpzOmc6UzpEgzpvOlc6jzpLOn86lJywgUHJlZmVjdHVyZTogJ86bzq3Pg86yzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODExMDEnLCBBcmVhOiAnzpHOk86ZzpHOo86fzqMgzpvOlc6jzpLOn86lLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzpXOpc6VzqHOk86VzqTOn86lzpvOkc6jIM6bzpXOo86Szp/OpSwgzpHOo86pzpzOkc6kzp/OoyDOm86VzqPOks6fzqUsIM6TzpnOkc6bzp/OpSDOoM6XzpPOkc6UzpkgzpvOlc6jzpLOn86lLCDOmc6gzqDOlc6Zzp8gzpvOlc6jzpLOn86lLCDOms6RzpPOmc6Rzp3OmSDOm86VzqPOks6fzqUsIM6azpHOoc6Xzp3OlyDOm86VzqPOks6fzqUsIM6azpXOoc6RzpzOlc6ZzpEgzpvOlc6jzpLOn86lLCDOm86RzpzOoM6fzqUgzpzOpc6bzp/OmSDOm86VzqPOks6fzqUsIM6bzpHOoc6jzp/OoyDOlc6lzpXOoc6TzpXOpM6fzqXOm86RzqMgzpvOlc6jzpLOn86lLCDOnM6VzpPOkc6bzpcgzpvOmc6czp3OlyDOm86VzqPOks6fzqUsIM6dzqTOmc6gzpkgzqPOpc6azp/Opc6dzqTOkc6jIM6bzpXOo86Szp/OpSwgzqPOkc6dzpHOpM6fzqHOmc6fIM6bzpXOo86Szp/OpSwgzqPOms6RzpvOkSDOo86lzprOn86lzp3OpM6fzqMgzpvOlc6jzpLOn86lLCDOo86lzprOn86lzp3OpM6RIM6bzpXOo86Szp/OpScsIFByZWZlY3R1cmU6ICfOm86tz4POss6/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzgxMTAyJywgQXJlYTogJ86RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyAozpHOk86ZzpHOoyDOoM6RzqHOkc6jzprOlc6lzpfOoykgzpvOlc6jzpLOn86lLCDOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzpzOpc6kzpnOm86Xzp3Ol86jIM6bzpXOo86Szp/OpSwgzprOkc6dzqTOoc6ZIM6bzpXOo86Szp/OpSwgzpzOlc6jzpEgzpvOlc6jzpLOn86lLCDOnc6RzqDOlyDOm86VzqPOks6fzqUnLCBQcmVmZWN0dXJlOiAnzpvOrc+DzrLOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MTEwMycsIEFyZWE6ICfOkc6dzqTOmc6jzqPOkSDOm86VzqPOks6fzqUsIM6czp/Onc6XIM6RzpPOmc6fzqUgzpnOqc6Rzp3Onc6fzqUgzpjOlc6fzpvOn86Tzp/OpSDOm86VzqPOks6fzqUnLCBQcmVmZWN0dXJlOiAnzpvOrc+DzrLOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MTEwNCcsIEFyZWE6ICfOkc6TzpnOn86jIM6jzqTOlc6mzpHOnc6fzqMgzpvOlc6jzpLOn86lLCDOkc6jzqDOoc6XIM6gzpvOkc6azp/Opc6UzpEgzpvOlc6jzpLOn86lLCDOkc6jzqDOoc6fzp3Ol86jzpnOkSDOm86VzqPOks6fzqUsIM6RzqPOoM6hzp/OoM6fzqTOkc6czp/OoyDOm86VzqPOks6fzqUsIM6azpHOoM6XIM6bzpXOo86Szp/OpSwgzprOm86VzpnOqSDOm86VzqPOks6fzqUsIM6bzpHOk86azpHOlM6RIM6czpHOnc6kzpHOnM6RzpTOn86lIM6bzpXOo86Szp/OpSwgzpvOmc6czpHOnc6ZIM6azpHOoM6XzqMgzpvOlc6jzpLOn86lLCDOnM6Rzp3OpM6RzpzOkc6Uzp/OoyDOm86VzqPOks6fzqUsIM6czpHOpc6hzpcgzqDOm86RzprOn86lzpTOkSDOm86VzqPOks6fzqUsIM6czqDOkc6hzpzOoM6RzpvOmc6RzqMgzpvOlc6jzpLOn86lLCDOoM6RzpvOmc6fzqMgzpvOlc6jzpLOn86lLCDOoM6Rzp3Okc6TzpnOkSDOnM6Rzp3OpM6RzpzOkc6Uzp/OpSDOm86VzqPOks6fzqUsIM6gzpXOlM6XIM6bzpXOo86Szp/OpSwgzqDOlc6bzp/OoM6XIM6bzpXOo86Szp/OpSwgzqPOms6RzpvOkSDOo86lzprOkc6czpnOnc6VzpHOoyDOm86VzqPOks6fzqUsIM6jzqXOms6RzpzOmc6dzpXOkSDOm86VzqPOks6fzqUsIM6kzpHOns6ZzpHOoc6nzpXOoyDOnM6Rzp3OpM6RzpzOkc6Uzp/OpSDOm86VzqPOks6fzqUsIM6kzqPOn86dzpnOkSDOm86VzqPOks6fzqUsIM6kzqPOn86lzprOkc6bzpHOoyDOm86VzqPOks6fzqUnLCBQcmVmZWN0dXJlOiAnzpvOrc+DzrLOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MTEwNScsIEFyZWE6ICfOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzp3Ol86jzp/OoyDOm86VzqPOks6fzqUsIM6RzpPOoc6RIM6bzpXOo86Szp/OpSwgzpHOoM6fzpjOl86azpXOoyDOkc6TzqHOkc6jIM6bzpXOo86Szp/OpSwgzpXOoc6VzqPOn86jIM6bzpXOo86Szp/OpSwgzpvOpc6TzpXOoc6XIM6bzpXOo86Szp/OpSwgzpzOlc6jzp/OpM6fzqDOn86jIM6bzpXOo86Szp/OpSwgzqDOn86UzpHOoc6RzqMgzpvOlc6jzpLOn86lLCDOoM6fzqfOl86jIM6bzpXOo86Szp/OpSwgzqPOms6RzpvOkSDOlc6hzpXOo86fzqUgzpvOlc6jzpLOn86lLCDOpM6RzpLOkc6hzpkgzpvOlc6jzpLOn86lLCDOp86bzpnOkc6hzpEgzpXOoc6VzqPOn86lIM6bzpXOo86Szp/OpSwgzqfOoc6ZzqPOpM6fzqMgzpXOoc6VzqPOn86lIM6bzpXOo86Szp/OpSwgzqfOoc6fzqXOo86fzqMgzpXOoc6VzqPOn86lIM6bzpXOo86Szp/OpSwgzqjOmc6dzpnOkSDOlc6hzpXOo86fzqUgzpvOlc6jzpLOn86lJywgUHJlZmVjdHVyZTogJ86bzq3Pg86yzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODExMDYnLCBBcmVhOiAnzpHOk86Zzp/OoyDOks6RzqPOmc6bzpXOmc6fzqMgzpvOlc6jzpLOn86lLCDOkc6TzpvOlc6mzqXOoc6fzqMgzpvOlc6jzpLOn86lLCDOkc6gzpfOlM6ZzpEgzpvOlc6jzpLOn86lLCDOkc6lzpvOqc6dzpHOoyDOm86VzqPOks6fzqUsIM6TzpXOoc6Rzp3Omc6RIM6bzpXOo86Szp/OpSwgzpXOpc6hzpXOmc6RzprOlyDOm86VzqPOks6fzqUsIM6azpHOoc6ZzqnOnc6RzqMgzpvOlc6jzpLOn86lLCDOms6RzqTOqSDOpM6hzpnOpM6fzqMgzpvOlc6jzpLOn86lLCDOms6fzqXOps6fIM6Szp/Opc6dzp8gzpvOlc6jzpLOn86lLCDOm86RzpPOms6RzpTOkSDOo86azp/OoM6VzpvOn86lIM6bzpXOo86Szp/OpSwgzpvOmc6Tzp/Onc6RzqHOmSDOm86VzqPOks6fzqUsIM6czpHOoc6czpHOoc6fIM6gzpHOoM6gzpHOlM6fzqUgzpvOlc6jzpLOn86lLCDOnM6VzqPOkc6TzqHOn86jIM6bzpXOo86Szp/OpSwgzpzOpc6nzp/OoyDOm86VzqPOks6fzqUsIM6gzpHOm86RzpnOn86azpfOoM6fzqMgzpvOlc6jzpLOn86lLCDOoM6RzqDOoM6RzpTOn86jIM6bzpXOo86Szp/OpSwgzqDOl86TzpHOlM6RzprOmc6RIM6bzpXOo86Szp/OpSwgzqDOm86RzprOkc6Uzp/OoyDOm86VzqPOks6fzqUsIM6gzqXOoc6Tzp/OmSDOnM6VzqPOkc6TzqHOn86lIM6bzpXOo86Szp/OpSwgzqPOms6fzqDOlc6bzp/OoyDOm86VzqPOks6fzqUsIM6kzpHOoc6kzpkgzpvOlc6jzpLOn86lLCDOpM6jzpHOps6ZIM6bzpXOo86Szp/OpSwgzqTOo86ZzpvOmc6RIM6bzpXOo86Szp/OpSwgzqbOkc6hzpEgzpvOlc6jzpLOn86lLCDOps6kzpXOm86ZIM6bzpXOo86Szp/OpSwgzqfOkc6bzpHOpM6jzpXOoyDOm86VzqPOks6fzqUnLCBQcmVmZWN0dXJlOiAnzpvOrc+DzrLOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MTEwNycsIEFyZWE6ICfOkc6hzpnOo86SzpcgzpvOlc6jzpLOn86lLCDOlM6RzqbOmc6RIM6bzpXOo86Szp/OpSwgzpnOlc6hzpEgzpzOn86dzpcgzpvOlc6ZzpzOqc6dzp/OoyDOm86VzqPOks6fzqUsIM6azpHOm86bzp/Onc6XIM6bzpXOo86Szp/OpSwgzprOlc6hzpHOnM6ZIM6bzpXOo86Szp/OpSwgzprOlc6nzqHOkc6UzpEgzpvOlc6jzpLOn86lLCDOnM6fzp3OlyDOoM6Rzp3Okc6TzpnOkc6jIM6czqXOoc6jzpnOnS4gzpvOlc6ZzpzOqc6dzp/OoyDOm86VzqPOks6fzqUsIM6czqDOkc6bzpnOnc6XIM6bzpXOo86Szp/OpSwgzqDOkc6hzpHOms6fzpnOm86RIM6bzpXOo86Szp/OpSwgzqDOlc6kzqPOn86mzpHOoyDOm86VzqPOks6fzqUsIM6jzprOkc6bzpEgzprOkc6bzpvOn86dzpfOoyDOm86VzqPOks6fzqUnLCBQcmVmZWN0dXJlOiAnzpvOrc+DzrLOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MTEwOCcsIEFyZWE6ICfOkc6hzpPOlc6dzp3On86jIM6bzpXOo86Szp/OpSwgzpLOkc6mzpXOmc6fzqMgzpvOlc6jzpLOn86lLCDOlc6lzpjOkc6bzp/OpSDOm86VzqPOks6fzqUsIM6bzpXOoM6VzqTOpc6czp3On86jIM6bzpXOo86Szp/OpSwgzpzOl86YzqXOnM6dzpEgKM6czp/Om86lzpLOn86jKSDOm86VzqPOks6fzqUnLCBQcmVmZWN0dXJlOiAnzpvOrc+DzrLOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MTEwOScsIEFyZWE6ICfOkc6TzpnOkSDOks6RzqHOks6RzqHOkSDOnM6XzpjOpc6czp3Ol86jIM6bzpXOo86Szp/OpSwgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6gzpXOpM6hzpHOoyDOm86VzqPOks6fzqUsIM6RzpzOoM6VzpvOmc6RIM6bzpXOo86Szp/OpSwgzpHOnc6Rzp7On86jIM6jzprOn86lzqTOkc6hzp/OpSDOm86VzqPOks6fzqUsIM6bzpHOps6ZzqnOnc6RzqMgzpvOlc6jzpLOn86lLCDOnM6ZzqHOkc6UzpXOm86bzpnOkSDOm86VzqPOks6fzqUsIM6gzpXOpM6hzpEgzpvOlc6jzpLOn86lLCDOoM6VzqTOoc6ZIM6bzpXOo86Szp/OpSwgzqPOms6fzqXOpM6RzqHOn86jIM6bzpXOo86Szp/OpSwgzqPOpM6lzqjOlyDOm86VzqPOks6fzqUsIM6lzqjOl86bzp/OnM6VzqTOqc6gzp8gzpvOlc6jzpLOn86lJywgUHJlZmVjdHVyZTogJ86bzq3Pg86yzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODExMTAnLCBBcmVhOiAnzpHOoc6nzpHOmc6RIM6Rzp3OpM6ZzqPOo86RIM6bzpXOo86Szp/OpSwgzpLOkc6kzp/Opc6jzqPOkSDOm86VzqPOks6fzqUsIM6TzpHOks6RzpjOkc6jIM6bzpXOo86Szp/OpSwgzprOkc6bzp8gzpvOmc6czpHOnc6ZIM6bzpXOo86Szp/OpSwgzprOkc6czqDOn86jIM6bzpXOo86Szp/OpSwgzqDOpM6VzqHOn86lzp3OpM6RIM6bzpXOo86Szp/OpSwgzqHOlc6lzpzOkSDOm86VzqPOks6fzqUsIM6jzprOkc6bzp/Op86pzqHOmSDOm86VzqPOks6fzqUsIM6kzpbOmc6YzqHOkSDOm86VzqPOks6fzqUsIM6nzpnOlM6XzqHOkSDOm86VzqPOks6fzqUnLCBQcmVmZWN0dXJlOiAnzpvOrc+DzrLOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MTExMicsIEFyZWE6ICfOnM6VzpPOkc6bzp/Onc6XzqPOmSDOm86VzqPOks6fzqUsIM6jzpnOk86hzpnOnyDOm86VzqPOks6fzqUnLCBQcmVmZWN0dXJlOiAnzpvOrc+DzrLOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MTIwMCcsIEFyZWE6ICfOkc6TzpnOkSDOks6RzqHOks6RzqHOkSDOoM6bzqnOnM6RzqHOmc6fzqUgzpvOlc6jzpLOn86lLCDOkc6TzpnOn86jIM6ZzqPOmc6UzqnOoc6fzqMgzpvOlc6jzpLOn86lLCDOkc6azqHOkc6jzpnOnyDOm86VzqPOks6fzqUsIM6RzpzOoM6VzpvOmc6azp8gzpvOlc6jzpLOn86lLCDOkc6dzqkgzqfOqc6hzpnOnyDOm86VzqPOks6fzqUsIM6UzqHOn86kzpEgzpvOlc6jzpLOn86lLCDOlc6lzpHOk86TzpXOm86ZzqPOpM6hzpnOkSDOm86VzqPOks6fzqUsIM6azpHOpM6pIM6nzqnOoc6Zzp8gzpvOlc6jzpLOn86lLCDOms6fzpvOpc6czpLOkc6kzpXOoc6RIM6bzpXOo86Szp/OpSwgzprOn86lzqHOnc6VzpvOkSDOm86VzqPOks6fzqUsIM6czpXOk86RzpvOn86nzqnOoc6ZIM6bzpXOo86Szp/OpSwgzpzOlc6bzpnOnc6kzpEgzpvOlc6jzpLOn86lLCDOnM6VzqPOn86lzp3OkSDOm86VzqPOks6fzqUsIM6czpfOm86ZzpXOoyDOm86VzqPOks6fzqUsIM6dzpXOn86nzqnOoc6ZIM6bzpXOo86Szp/OpSwgzqDOkc6bzpHOmc6fzqfOqc6hzpkgzpvOlc6jzpLOn86lLCDOoM6RzqHOkc6bzpnOkSDOlM6hzp/OpM6RzqMgzpvOlc6jzpLOn86lLCDOoM6bzpHOk86ZzpEgzpvOlc6jzpLOn86lLCDOoM6bzqnOnM6RzqHOmSDOm86VzqPOks6fzqUsIM6hzpHOp86ZzpTOmSDOm86VzqPOks6fzqUsIM6jzqDOmc6UzpXOoyDOm86VzqPOks6fzqUsIM6kzqHOpc6Tzp/Onc6RzqMgzpvOlc6jzpLOn86lJywgUHJlZmVjdHVyZTogJ86bzq3Pg86yzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODEzMDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOoM6RzqXOm86fzqMgzpvOlc6jzpLOn86lLCDOkc6TzpnOn86jIM6mzqnOms6RzqMgzpvOlc6jzpLOn86lLCDOkc6nzpvOkc6UzpXOoc6XIM6bzpXOo86Szp/OpSwgzpLOkc6jzpnOm86ZzprOkSDOm86VzqPOks6fzqUsIM6SzpHOpM6VzqHOkSDOm86VzqPOks6fzqUsIM6SzqHOmc6jzpEgzpvOlc6jzpLOn86lLCDOk86XzqHOn86azp/OnM6VzpnOnyDOm86RzpzOkc6dzpTOoc6Zzp/OpSDOm86VzqPOks6fzqUsIM6YzpXOoc6czp/OoM6XzpPOlc6jIM6bzpXOo86Szp/OpSwgzprOkc6kzqkgzqPOpM6RzqXOoc6fzqMgzpvOlc6jzpLOn86lLCDOm86ZzpLOkc6UzpnOkSDOm86VzqPOks6fzqUsIM6bzpnOo86Szp/Ooc6Zzp8gzpvOlc6jzpLOn86lLCDOnc6lzqbOmc6UzpEgzpvOlc6jzpLOn86lLCDOoM6fzpvOmc6nzp3Omc6kzp/OoyDOm86VzqPOks6fzqUsIM6jzprOkc6bzpEgzqDOn86bzpnOp86dzpnOpM6fzqUgzpvOlc6jzpLOn86lLCDOo86azpHOnM6Zzp/Opc6UzpkgzpvOlc6jzpLOn86lLCDOo86kzpHOpc6hzp/OoyDOm86VzqPOks6fzqUnLCBQcmVmZWN0dXJlOiAnzpvOrc+DzrLOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MTQwMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6RzpPOms6RzqHOpc6pzp3Olc6jIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6RzpvOn86Tzp/Onc6XzqPOmSDOm86VzqPOks6fzqUsIM6Szp/Opc6dzpHOoc6ZzpEgzqDOlc6UzpnOnc6fzqUgzpvOl86czp3On86lIM6bzpXOo86Szp/OpSwgzpPOkc6bzpcgzprOkc6jzqDOkc6azpEgzpvOl86czp3On86lIM6bzpXOo86Szp/OpSwgzpTOkc6mzp3OlyDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lLCDOmM6Rzp3On86jIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6azpHOm86bzpnOmM6VzpEgzpvOl86czp3On86lIM6bzpXOo86Szp/OpSwgzprOkc6jzqDOkc6azpHOoyDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lLCDOms6RzqPOpM6hzpnOkSDOm86VzqPOks6fzqUsIM6azpHOpM6RzpvOkc6azprOnyDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lLCDOms6fzpzOoM6ZIM6dzpfOo86fzqMgzpvOlc6jzpLOn86lLCDOms6fzqHOnc6fzqMgzpvOl86czp3On86lIM6bzpXOo86Szp/OpSwgzpvOmc6SzpHOlM6fzqfOqc6hzpkgzpvOl86czp3On86lIM6bzpXOo86Szp/OpSwgzpvOmc6czpXOnc6RzqHOmc6RIM6bzpXOo86Szp/OpSwgzpzOpc6hzpnOnc6RIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6dzpXOkSDOms6fzqXOpM6RzpvOlyDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lLCDOnc6Vzp8gzqDOlc6UzpnOnc6fIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6gzpHOoc6RzpvOmc6RIM6YzpHOnc6fzqXOoyDOm86VzqPOks6fzqUsIM6gzpHOoc6RzpvOmc6RIM6gzpvOkc6kzpXOn86jIM6bzpXOo86Szp/OpSwgzqDOlc6UzpnOnc6fIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6gzpXOlM6Zzp3OnyDOnc6VzpHOoyDOms6fzqXOpM6RzpvOl86jIM6bzpXOo86Szp/OpSwgzqDOm86RzpPOmc6jzp/OoyDOnM6pzpvOn86jIM6bzpXOo86Szp/OpSwgzqDOm86RzqTOpSDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lLCDOoM6fzpvOmc6fzqfOnc6XIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6gzp/Ooc6kzpnOkc6dzp8gzpvOl86czp3On86lIM6bzpXOo86Szp/OpSwgzqPOkc6hzpTOkc6ZIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6kzqPOmc6czpHOnc6UzqHOmc6RIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6ozqXOm86bzp/OmSDOms6fzqHOnc6fzqUgzpvOl86czp3On86lIM6bzpXOo86Szp/OpScsIFByZWZlY3R1cmU6ICfOm86tz4POss6/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzgxNDAxJywgQXJlYTogJ86RzpPOmc6RIM6jzp/Ops6ZzpEgzpvOl86czp3On86lIM6bzpXOo86Szp/OpSwgzpHOk86Zzp/OoyDOkc6bzpXOns6Rzp3OlM6hzp/OoyDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lLCDOkc6TzpnOn86jIM6YzpXOn86UzqnOoc6fzqMgzpvOl86czp3On86lIM6bzpXOo86Szp/OpSwgzpHOlc6hzp/Om86ZzpzOlc6dzpHOoyDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lLCDOkc6dzpXOnM6fzpXOo86jzpEgzpvOpc6nzp3Oqc6dIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6RzqTOo86ZzprOlyDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lLCDOks6RzqHOn86jIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6Szp/Ooc6fzqPOms6fzqDOn86jIM6bzpXOo86Szp/OpSwgzprOkc6bzpvOmc6fzqDOlyDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lLCDOms6RzpzOmc6dzpnOkSDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lLCDOms6RzqHOoM6RzqPOmc6fIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6azp/Onc6kzpnOkc6jIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6azp/Onc6kzp/OoM6fzqXOm86ZIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6azp/Ooc6kzpnOo86pzp3Okc6jIM6bzpXOo86Szp/OpSwgzprOn86kzqPOmc6dzpHOoyDOoc6VzqDOkc6dzpnOlM6Zzp/OpSDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lLCDOms6fzqXOms6fzp3Ol86jzpkgzpvOlc6jzpLOn86lLCDOm86lzqfOnc6RIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6czp/Opc6UzqHOn86jIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6gzpHOnc6RzpPOmc6RIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6gzpvOkc6azpEgzpvOl86czp3On86lIM6bzpXOo86Szp/OpSwgzqDOoc6fzqDOn86lzpvOmSDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lLCDOoc6VzqDOkc6dzpnOlM6ZIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6hzp/Opc6jzqPOn86gzp/Opc6bzpkgzpvOl86czp3On86lIM6bzpXOo86Szp/OpSwgzqHOqc6czpHOnc6fIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6jzpXOoc6TzpnOpM6jzpkgzpvOlc6jzpLOn86lLCDOo86azpHOnc6UzpHOm86ZIM6bzpfOnM6dzp/OpSDOm86VzqPOks6fzqUsIM6mzpnOo86Zzp3OlyDOm86XzpzOnc6fzqUgzpvOlc6jzpLOn86lJywgUHJlZmVjdHVyZTogJ86bzq3Pg86yzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODE1MDAnLCBBcmVhOiAnzpHOk86Zzp/OmSDOkc6gzp/Oo86kzp/Om86fzpkgzpvOlc6jzpLOn86lLCDOkc6TzpnOn86jIM6VzqXOo86kzqHOkc6kzpnOn86jIM6dzpfOo86fzqMgzpvOlc6jzpLOn86lLCDOoc6fzqXOnM6gzp/OoyDOm86VzqPOks6fzqUnLCBQcmVmZWN0dXJlOiAnzpvOrc+DzrLOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMTA4MicsIEFyZWE6ICfOkc6TzpnOn86jIM6XzpvOmc6RzqMgzpvOlc6lzprOkc6UzpHOoywgzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6dzpfOoc6RzqMgzpvOlc6lzprOkc6UzpHOoywgzpHOk86Zzp/OoyDOoM6VzqTOoc6fzqMgzpvOlc6lzprOkc6UzpHOoywgzpHOmM6Rzp3Omc6fzp0gzpvOlc6lzprOkc6UzpHOoywgzpHOm86RzqTOoc6fIM6bzpXOpc6azpHOlM6RzqMsIM6SzpHOo86ZzpvOmc6azpcgzpvOlc6lzprOkc6UzpHOoywgzpLOn86lzqHOnc6ZzprOkSDOm86VzqXOms6RzpTOkc6jLCDOlM6hzpHOk86Rzp3OnyDOm86VzqXOms6RzpTOkc6jLCDOlc6lzpPOl86hzp/OoyDOm86VzqXOms6RzpTOkc6jLCDOms6fzpzOl86bzpnOnyDOm86VzqXOms6RzpTOkc6jLCDOms6fzp3OpM6RzqHOkc6Zzp3OkSDOm86VzqXOms6RzpTOkc6jLCDOnM6Rzp3Okc6jzpcgzpvOlc6lzprOkc6UzpHOoywgzpzOkc6hzpHOnc6kzp/Op86pzqHOmSDOm86VzqXOms6RzpTOkc6jLCDOnc6ZzprOn86bzpcgzpvOlc6lzprOkc6UzpHOoywgzqDOkc6dzqnOp86pzqHOmSDOm86VzqXOms6RzpTOkc6jLCDOoM6fzp3OpM6XIM6RzpPOmc6fzqUgzqDOlc6kzqHOn86lIM6bzpXOpc6azpHOlM6RzqMsIM6jzqXOks6fzqTOkSDOm86VzqXOms6RzpTOkc6jLCDOo86lzpLOoc6fzqMgzpvOlc6lzprOkc6UzpHOoywgzqbOpM6VzqHOnc6fIM6bzpXOpc6azpHOlM6RzqMsIM6nzp/Ooc6kzpHOpM6RIM6bzpXOpc6azpHOlM6RzqMnLCBQcmVmZWN0dXJlOiAnzpvOtc+FzrrOrM60zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzEwODQnLCBBcmVhOiAnzpzOlc6TzpHOnc6XzqPOmSDOm86VzqXOms6RzpTOkc6jLCDOnc6lzpTOoc6ZIM6bzpXOpc6azpHOlM6RzqMnLCBQcmVmZWN0dXJlOiAnzpvOtc+FzrrOrM60zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzExMDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOp86hzpnOo86kzp/Ops6fzqHOn86jIM6bzpXOpc6azpHOlM6RzqMsIM6RzqDOn86bzqDOkc6Zzp3OkSDOm86VzqXOms6RzpTOkc6jLCDOks6bzqXOp86fIM6bzpXOpc6azpHOlM6RzqMsIM6TzpXOnc6ZIM6bzpXOpc6azpHOlM6RzqMsIM6UzpXOo86ZzpzOmSDOm86VzqXOms6RzpTOkc6jLCDOlM6XzpzOn86jzpHOoc6ZIM6bzpXOpc6azpHOlM6RzqMsIM6VzqDOmc6jzprOn86gzp/OoyDOm86VzqXOms6RzpTOkc6jLCDOms6RzpvOkc6SzqHOn86jIM6bzpXOpc6azpHOlM6RzqMsIM6azpHOm86bzpnOk86fzp3Omc6fIM6bzpXOpc6azpHOlM6RzqMsIM6azpHOm86bzpnOmM6VzpEgzpvOlc6lzprOkc6UzpHOoywgzprOkc6hzpnOqc6kzpXOoyDOm86VzqXOms6RzpTOkc6jLCDOms6RzqTOn86lzp3OkSDOm86VzqXOms6RzpTOkc6jLCDOms6RzqTOqc6nzqnOoc6ZIM6bzpXOpc6azpHOlM6RzqMsIM6bzpXOpc6azpHOlM6RIM6bzpXOpc6azpHOlM6RzqMsIM6bzqXOk86ZzpEgzpvOlc6lzprOkc6UzpHOoywgzpzOkc6Uzp/Opc6hzpcgIM6dzpfOo86fzqMgzpvOlc6lzprOkc6UzpHOoywgzpzOlc6TzpHOm86fIM6RzqXOm86RzprOmSDOm86VzqXOms6RzpTOkc6jLCDOnM6ZzprOoc6fzqMgzpPOmc6RzpvOn86jIM6bzpXOpc6azpHOlM6RzqMsIM6dzpXOn86nzqnOoc6ZIM6bzpXOpc6azpHOlM6RzqMsIM6dzpnOms6ZzpHOnc6RIM6bzpXOpc6azpHOlM6RzqMsIM6gzpXOoc6ZzpLOn86bzpnOkSDOm86VzqXOms6RzpTOkc6jIM6bzpXOpc6azpHOlM6RzqMsIM6gzpXOoc6ZzpPOmc6RzpvOmSDOm86VzqXOms6RzpTOkc6jLCDOoM6fzqHOn86jIM6bzpXOpc6azpHOlM6RzqMsIM6hzpHOp86XIM6bzpXOpc6azpHOlM6RzqMsIM6jzprOn86hzqDOmc6fzqMgIM6dzpfOo86fzqMgzpvOlc6lzprOkc6UzpHOoywgzqPOoM6RzqHOpM6XICDOnc6XzqPOn86jIM6bzpXOpc6azpHOlM6RzqMsIM6kzqPOn86lzprOkc6bzpHOlM6VzqMgzpvOlc6lzprOkc6UzpHOoywgzqbOn86hzqTOmSDOnc6XzqPOn86jIM6bzpXOpc6azpHOlM6RzqMsIM6mzqHOpc6dzpnOnyDOm86VzqXOms6RzpTOkc6jLCDOp86RzqHOkc6UzpnOkc6kzpnOms6RIM6bzpXOpc6azpHOlM6RzqMnLCBQcmVmZWN0dXJlOiAnzpvOtc+FzrrOrM60zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzcwMDEnLCBBcmVhOiAnzpHOk86Zzp/OmSDOo86RzqHOkc6dzqTOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6Rzp3Okc6bzpfOqM6XIM6czpHOk86dzpfOo86ZzpHOoywgzpHOnc6XzpvOmc6fIM6czpHOk86dzpfOo86ZzpHOoywgzpXOm86ZzqTOo86RIM6czpHOk86dzpfOo86ZzpHOoywgzpbOkc6Tzp/Ooc6RIM6czpHOk86dzpfOo86ZzpHOoywgzprOkc6hzpHOks6pzpzOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6czpHOms6hzqXOoc6hzpHOp86XIM6czpHOk86dzpfOo86ZzpHOoywgzp/Oks6hzpnOn86jIM6czpHOk86dzpfOo86ZzpHOoywgzqDOn86lzqHOmSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6gzp/Opc6hzpnOkc6dzp/OoyDOo86kzpHOpc6hzp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6nzp/Ooc6VzqXOpM6fIM6czpHOk86dzpfOo86ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM6xzrPOvc63z4POr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM3MDAyJywgQXJlYTogJ86RzpzOoM6VzpvOmc6RIM6czpHOk86dzpfOo86ZzpHOoywgzpHOo86VzpvOmc6dzp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6RzqfOm86RzpTOmc6RzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOls6fzqHOnM6gzpHOlM6VzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOms6RzpvOpc6SzpnOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azpHOnc6RzqDOmc6kzqPOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azpHOo86kzqHOnyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azpHOpM6jzpHOoc6fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOms6fzpvOmc6fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOms6fzqXOms6fzqXOnc6RzqHOmc6VzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOnM6RzqHOkc6YzpEgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOnM6fzp3OlyDOlc6lzpHOk86TzpXOm86ZzqPOpM6hzpnOkc6jIM6czpHOk86dzpfOo86ZzpHOoywgzp7Okc6dzpXOnM6fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOns6Vzp3Omc6RIM6czpHOk86dzpfOo86ZzpHOoywgzqDOm86RzqTOkc6dzpnOkc6jIM6czpHOk86dzpfOo86ZzpHOoywgzqHOlc6gzpnOnyDOnc6XzqPOn86jIM6czpHOk86dzpfOo86ZzpHOoywgzqPOms6ZzpHOmM6fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOpM6hzp/Opc6bzpvOn86jIM6czpHOk86dzpfOo86ZzpHOoywgzqTOo86fzqXOk86azqHOmc6RICDOnc6XzqPOn86jIM6czpHOk86dzpfOo86ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM6xzrPOvc63z4POr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM3MDAzJywgQXJlYTogJ86RzpPOnc6pzp3OpM6RzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOms6RzpvOn86TzpfOoc6fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOnM6lzpvOn86ZIM6czpHOk86dzpfOo86ZzpHOoywgzqDOkc6dzp/Ooc6czp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6jzprOn86gzpXOm86fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOo86kzpHOps6lzpvOn86jIM6czpHOk86dzpfOo86ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM6xzrPOvc63z4POr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM3MDA1JywgQXJlYTogJ86RzpPOmc6fzqMgzqDOlc6kzqHOn86jICDOkc6bzp/Onc6dzpfOo86fzqUgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOkc6UzpXOm86mzp/OmSAgzp3Ol86jzp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6RzpvOn86dzp3Ol86jzp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6Szp/OpM6jzpcgzpHOm86fzp3Onc6XzqPOn86lIM6czpHOk86dzpfOo86ZzpHOoywgzpPOlc6hzpHOms6RzqMgzpHOm86fzp3Onc6XzqPOn86lIM6czpHOk86dzpfOo86ZzpHOoywgzpPOmc6fzqXOoc6RIM6dzpfOo86fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOmc6jzpnOqc6czpHOpM6RIM6czpHOk86dzpfOo86ZzpHOoywgzprOkc6bzpHOnM6RzprOmc6RICDOkc6bzp/Onc6dzpfOo86fzqUgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOms6lzqHOkSDOoM6Rzp3Okc6TzpnOkSDOnc6XzqPOn86jIM6czpHOk86dzpfOo86ZzpHOoywgzpzOkc6hzqDOn86lzp3OpM6RIM6RzpvOn86dzp3Ol86jzp/OpSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6czp/Opc6hzqTOlc6hzp8gzpzOkc6Tzp3Ol86jzpnOkc6jLCDOoM6RzqTOl86kzpfOoc6ZIM6RzpvOn86dzp3Ol86jzp/OpSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6gzpXOoc6ZzqPOpM6VzqHOkSAgzp3Ol86jzp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6gzpnOoM6VzqHOmSDOnc6XzqPOn86jIM6czpHOk86dzpfOo86ZzpHOoywgzqPOms6Rzp3OpM6Wzp/Opc6hzpEgIM6dzpfOo86fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOo86kzpXOnc6XIM6SzpHOm86RIM6RzpvOn86dzp3Ol86jzp/OpSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6nzqHOpc6jzpcgzpzOl86bzpnOkSDOkc6bzp/Onc6dzpfOo86fzqUgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOqM6RzpjOn86lzqHOkSDOnc6XzqPOn86jIM6czpHOk86dzpfOo86ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM6xzrPOvc63z4POr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM3MDA2JywgQXJlYTogJ86RzpPOmc6fzpkgzpHOoM6fzqPOpM6fzpvOn86ZIM6jzpfOoM6ZzpHOlM6fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOkc6TzpnOn86jIM6Rzp3OlM6hzpXOkc6jIM6czpHOk86dzpfOo86ZzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6gzqHOn86czqXOoc6Zzp/OpSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6RzqHOk86RzpvOkc6jzqTOlyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6Szp/OlM6Zzp3OmSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azpHOm86RzpzOn86jIM6czpHOk86dzpfOo86ZzpHOoywgzprOkc6bzpvOmc6YzpXOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azpHOo86kzqHOmSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azp/Opc6azp/Opc6bzpHOmc6ZzprOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6bzpHOpc6azp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6bzpXOps6fzprOkc6jzqTOoc6fIM6czpHOk86dzpfOo86ZzpHOoywgzpvOpc6hzpcgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOnM6RzqHOkc6YzpnOkc6jIM6czpHOk86dzpfOo86ZzpHOoywgzpzOlc6kzp/Op86ZIM6czpHOk86dzpfOo86ZzpHOoywgzpzOmc6azqHOnyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6czp/Ooc6kzpnOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6czp/Opc6jzpPOlc6jIM6czpHOk86dzpfOo86ZzpHOoywgzpzOpc6hzpnOn86SzqHOpc6kzpcgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOns6Zzp3On86SzqHOpc6jzpcgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOoM6RzpvOpM6jzpcgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOoM6Rzp/OpSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6gzpHOpM6hzpnOp86pzqHOmSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6gzpfOk86VzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOoM6bzpHOpM6Rzp3Omc6RIM6czpHOk86dzpfOo86ZzpHOoywgzqDOn86kzpnOo86kzpnOms6RIM6czpHOk86dzpfOo86ZzpHOoywgzqDOoc6fzpzOpc6hzpnOnyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6hzp/OlM6ZzpEgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOo86lzprOlyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6kzqHOn86nzpHOm86RIM6czpHOk86dzpfOo86ZzpHOoywgzqfOn86dzpTOoc6XIM6RzpzOnM6fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOp86fzqHOpM6fIM6czpHOk86dzpfOo86ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM6xzrPOvc63z4POr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM3MDA4JywgQXJlYTogJ86RzpPOmc6RIM6czpHOoc6Zzp3OkSDOoM6kzpXOm86Vzp/OpSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6RzpPOmc6fzqMgzpTOl86czpfOpM6hzpnOn86jIM6RzpvOnM6lzqHOn86lIM6czpHOk86dzpfOo86ZzpHOoywgzpHOnM6RzpvOmc6RzqDOn86bzpcgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOkc6nzpnOm86bzpXOmc6fIM6czpHOk86dzpfOo86ZzpHOoywgzpPOkc6SzqHOmc6Rzp3OlyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6UzqHOpc6czqnOnc6RzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOms6RzqHOkc6Szp/OpM6jzpHOms6ZIM6czpHOk86dzpfOo86ZzpHOoywgzpvOlc6ZzqfOn86lzqHOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6dzpfOlc6jIM6czpHOk86dzpfOo86ZzpHOoywgzqDOl86TzpHOlM6ZIM6czpHOk86dzpfOo86ZzpHOoywgzqPOn86lzqHOoM6XIM6czpHOk86dzpfOo86ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM6xzrPOvc63z4POr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM3MTAwJywgQXJlYTogJ86RzpPOmc6RIM6kzqHOmc6RzpTOkSDOkc6bzpzOpc6hzp/OpSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6RzpPOmc6fzpkgzpjOlc6fzpTOqc6hzp/OmSDOkc6bzpzOpc6hzp/OpSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzpHOm86czqXOoc6fzqUgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6VzqXOns6VzpnOnc6fzqXOoM6fzpvOl86jIM6czpHOk86dzpfOo86ZzpHOoywgzpHOmc6UzpnOnc6Zzp8gzpzOkc6Tzp3Ol86jzpnOkc6jLCDOkc6bzpzOpc6hzp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6Rzp3OmM6fzqTOn86gzp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6Rzp3OqSDOnM6RzqXOoc6fzpvOn86mzp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6RzqHOk86ZzpvOn86nzqnOoc6ZIM6czpHOk86dzpfOo86ZzpHOoywgzpLOoc6lzp3Okc6Zzp3OkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6VzqXOns6VzpnOnc6fzqXOoM6fzpvOlyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6WzpHOoc6azpHOlM6fzqfOqc6hzpkgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOms6RzqPOpM6hzpHOms6ZIM6czpHOk86dzpfOo86ZzpHOoywgzprOn86azprOqc6kzp/OmSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azp/Onc6kzpHOoc6fzpvOkc6azprOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azp/Ooc6mzpHOm86RzprOmSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azqHOn86azpnOnyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azqnOps6fzpkgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOnM6RzqXOoc6fzpvOn86mzp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6czpnOms6hzp/OmM6XzpLOlc6jIM6czpHOk86dzpfOo86ZzpHOoywgzpzOn86dzpcgzprOn86ZzpzOl86jzpXOqc6jIM6YzpXOn86kzp/Oms6fzqUgzp7Olc6dzpnOkc6jIM6RzpvOnM6lzqHOn86lIM6czpHOk86dzpfOo86ZzpHOoywgzp3Olc6fIM6azpHOo86kzqHOnyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6dzpXOn86jIM6gzpvOkc6kzpHOnc6fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOnc6Vzp/Op86pzqHOkc6azpkgzpHOm86czqXOoc6fzqUgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOnc6VzqHOkc6ZzpTOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6fzpjOoc6lzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOoM6RzqHOkc6bzpnOkSDOkc6bzpzOpc6hzp/OpSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6gzpXOoc6UzpnOms6RIM6czpHOk86dzpfOo86ZzpHOoywgzqDOm86RzqTOkc6dzp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6mzqXOm86RzprOlyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6nzp/Ooc6fzqPOpM6RzqPOmSDOnM6RzpPOnc6XzqPOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpzOsc6zzr3Ot8+Dzq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczNzMwMCcsIEFyZWE6ICfOkc6TzqHOmc6RIM6czpHOk86dzpfOo86ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM6xzrPOvc63z4POr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM3NDAwJywgQXJlYTogJ86RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOkc6TzqfOmc6RzpvOn86lIM6czpHOk86dzpfOo86ZzpHOoywgzpLOlc6bzpHOnc6ZzpTOmc6RIM6czpHOk86dzpfOo86ZzpHOoywgzpTOl86czpfOpM6hzpnOkc6UzpEgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOms6hzpnOmM6RzqHOmc6RIM6czpHOk86dzpfOo86ZzpHOoywgzpzOkc6hzpHOmM6fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOnc6VzpEgzpHOk86nzpnOkc6bzp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6jzqTOoc6RzqTOmc6pzqTOmc6azp8gzpHOlc6hzp/OlM6hzp/OnM6Zzp8gzp0uzpHOk86nzpnOkc6bzp/OpSDOnM6RzpPOnc6XzqPOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpzOsc6zzr3Ot8+Dzq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczNzUwMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzqbOlc6hzqnOnSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6RzpPOmc6fzqMgzpTOl86czpfOpM6hzpnOn86jIM6gzpXOoc6ZzpLOm86VzqDOpM6fzqUgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOkc6VzqHOmc6dzp8gzpzOkc6Tzp3Ol86jzpnOkc6jLCDOks6VzpvOlc6jzqTOmc6dzp8gzpzOkc6Tzp3Ol86jzpnOkc6jLCDOk86fzqXOoc6fzqXOnc6fzqPOpM6RzpLOm86fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOlc6bzpXOpc6YzpXOoc6fzqfOqc6hzpnOnyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azp/Oms6azpHOm86RzpnOmc6azpEgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOms6fzprOms6Zzp3OkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6czpnOms6hzp8gzqDOlc6hzpnOks6fzpvOkc6azpkgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOoM6VzqHOmc6SzpvOlc6gzqTOnyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6gzp/Om86lzpbOkc6ZzpnOms6RIM6czpHOk86dzpfOo86ZzpHOoywgzqPOpM6VzqbOkc6dzp/Oks6ZzprOlc6Zzp8gzpzOkc6Tzp3Ol86jzpnOkc6jLCDOp86bzp/OlyDOnM6RzpPOnc6XzqPOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpzOsc6zzr3Ot8+Dzq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczODAwMCcsIEFyZWE6ICfOhs6TzpnOn86jIM6ZzqnOhs6dzp3Ol86jIM6gzp/Ooc6kzpHOoSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azpHOpM6pzqfOj86hzpnOn86dIM6czpHOk86dzpfOo86ZzpHOoywgzprOn86lzprOn86OzqHOkc6SzpEgzpzOkc6azqHOpc6dzorOpM6jIM6czpHOk86dzpfOo86ZzpHOoywgzpzOkc6azqHOmc6dzorOpM6jzpEgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOoM6fzqHOpM6RzqHOmc6RIM6czpHOk86dzpfOo86ZzpHOoywgzqPOkc6dzpHOpM6MzqHOmc6fzp0gzqDOl86bzorOn86lIM6czpHOk86dzpfOo86ZzpHOoywgzqPOpM6RzpPOmc6GzqTOlc6jIM6czpHOk86dzpfOo86ZzpHOoywgzqfOhs6dzpnOkSDOnM6RzpPOnc6XzqPOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpzOsc6zzr3Ot8+Dzq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczODIyMScsIEFyZWE6ICfOks6fzpvOn86jIM6czpHOk86dzpfOo86ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM6xzrPOvc63z4POr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM4MjIyJywgQXJlYTogJ86Szp/Om86fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jJywgUHJlZmVjdHVyZTogJ86czrHOs869zrfPg86vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzgyMjMnLCBBcmVhOiAnzpLOn86bzp/OpSDOnM6RzpPOnc6XzqPOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpzOsc6zzr3Ot8+Dzq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczODMzMycsIEFyZWE6ICfOks6fzpvOn86jIM6czpHOk86dzpfOo86ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM6xzrPOvc63z4POr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM4MzM0JywgQXJlYTogJ86Szp/Om86fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jJywgUHJlZmVjdHVyZTogJ86czrHOs869zrfPg86vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzg0NDUnLCBBcmVhOiAnzp3Olc6RIM6ZzqnOnc6ZzpEgzpzOkc6Tzp3Ol86jzpnOkc6jJywgUHJlZmVjdHVyZTogJ86czrHOs869zrfPg86vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzg0NDYnLCBBcmVhOiAnzp3Olc6RIM6ZzqnOnc6ZzpEgzpzOkc6Tzp3Ol86jzpnOkc6jJywgUHJlZmVjdHVyZTogJ86czrHOs869zrfPg86vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzg1MDAnLCBBcmVhOiAnzpHOk86ZzpEgzqTOoc6ZzpHOlM6RIM6dzpfOm86VzpnOkc6jIM6czpHOk86dzpfOo86ZzpHOoywgzpHOk86Zzp/OoyDOkc6gzp/Oo86kzp/Om86fzqMgzp8gzp3Olc6fzqMgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOkc6TzpnOn86jIM6SzpvOkc6jzpnOn86jIM6czpHOk86dzpfOo86ZzpHOoywgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6dzpfOm86VzpnOkc6jIM6czpHOk86dzpfOo86ZzpHOoywgzpHOk86Zzp/OoyDOm86RzqXOoc6Vzp3OpM6Zzp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6RzpPOmc6fzqMgzpzOl86dzpHOoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6RzpPOmc6fzqMgzp/Onc6fzqXOps6hzpnOn86jIM6Szp/Om86fzqUgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOkc6bzpvOlyDOnM6VzqHOmc6RIM6czpHOk86dzpfOo86ZzpHOoywgzpHOnc6RzprOkc6jzpnOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6Rzp3Olc6czp/Opc6kzqPOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6Rzp3OqSDOks6fzpvOn86jIM6czpHOk86dzpfOo86ZzpHOoywgzpHOnc6pIM6TzpHOpM6WzpXOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6Rzp3OqSDOm86VzqfOqc6dzpnOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6SzpXOnc6VzqTOnyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6SzqHOn86nzpnOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6TzpvOkc6mzqXOoc6RIM6czpHOk86dzpfOo86ZzpHOoywgzpPOn86hzpnOpM6jzpEgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOlM6ZzpzOl86dzpnOnyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6UzqHOkc6azpXOmc6RIM6czpHOk86dzpfOo86ZzpHOoywgzpTOpc6fIM6hzpXOpc6czpHOpM6RIM6czpHOk86dzpfOo86ZzpHOoywgzpnOqc6bzprOn86jIM6czpHOk86dzpfOo86ZzpHOoywgzprOkc6azprOkc6Szp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azpHOnM6RzqHOmSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6azpHOnc6RzpvOmc6RIM6czpHOk86dzpfOo86ZzpHOoywgzprOkc6kzqkgzpPOkc6kzpbOlc6RIM6czpHOk86dzpfOo86ZzpHOoywgzprOkc6kzqkgzpvOlc6nzqnOnc6ZzpEgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOms6VzqHOkc6czpnOlM6ZIM6czpHOk86dzpfOo86ZzpHOoywgzprOlc6hzpHOo86VzpEgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOms6bzpfOnM6RIM6dzpXOkc6jIM6ZzqnOnc6ZzpHOoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6czpHOm86RzprOmc6fIM6czpHOk86dzpfOo86ZzpHOoywgzpzOlc6bzpnOo86jzpHOpM6ZzprOkSDOnM6RzpPOnc6XzqPOmc6RzqMsIM6czp/Onc6XIM6czpXOpM6RzpzOn86hzqbOqc6jzpXOqc6jIM6jzqnOpM6XzqHOn86jIM6mzpvOkc6czp/Opc6hzpnOn86lIM6czpHOk86dzpfOo86ZzpHOoywgzp3Olc6RIM6ZzqnOnc6ZzpEgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOoM6RzpvOkc6Zzp/Oms6RzqPOpM6hzp8gzpzOkc6Tzp3Ol86jzpnOkc6jLCDOoM6RzpvOmc6fzqXOoc6ZIM6czpHOk86dzpfOo86ZzpHOoywgzqDOm86RzqTOkc6dzpnOlM6ZzpEgzpzOkc6Tzp3Ol86jzpnOkc6jLCDOo86VzqHOks6Rzp3Okc6kzpXOoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6jzpXOo86azpvOnyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6jzqTOoc6fzqbOmc6bzp/OoyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6mzqXOpM6fzprOnyDOnM6RzpPOnc6XzqPOmc6RzqMsIM6nzqHOpc6jzpcgzpHOms6kzpcgzqDOkc6dzpHOk86ZzpHOoyDOnM6RzpPOnc6XzqPOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzpzOsc6zzr3Ot8+Dzq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNDAwMScsIEFyZWE6ICfOkc6hzpHOoM6fzpvOkc6azprOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6TzpnOkc6bzp/Oks6RIM6czpXOo86jzpfOnc6ZzpHOoywgzpPOm86lzqbOkc6UzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOlc6bzpHOmc6fzqbOpc6kzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOmc6azpvOkc6Zzp3OkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOm86bzpnOmM6VzpEgzqDOpc6bzp/OpSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azp/Ooc6lzqbOkc6jzpnOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azp/Opc6azprOn86lzp3Okc6hzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6hzpXOnM6czqXOlM6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6lzp3Ol86Tzp/OoyDOoM6lzpvOn86lIM6czpXOo86jzpfOnc6ZzpHOoywgzpzOlc6jzp/Op86pzqHOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czqDOkc6bzp/OlM6XzpzOkc6ZzpnOms6RIM6czpXOo86jzpfOnc6ZzpHOoywgzqDOkc6bzpHOmc6fzp3Olc6hzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6RzqDOoM6fzqXOm86ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6VzqHOmc6Szp/Om86RzprOmc6RIM6gzqXOm86fzqUgzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6VzqTOoc6fzqfOqc6hzpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6XzpTOkc6jzp/OoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpnOo86RzqPOms6Zzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6bzpHOpM6Rzp3On86jIM6gzqXOm86fzqUgzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6lzpvOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzqXOm86fzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOoc6pzpzOkc6dzp/OoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6jzp/Opc6bzpfOnc6RzqHOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6jzqTOlc6dzqnOo86ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOo86mzpHOms6kzpfOoc6ZzpEgzp3Ol86jzp/OoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6jzqfOmc6dzp/Om86RzprOms6RIM6gzqXOm86fzqUgzpzOlc6jzqPOl86dzpnOkc6jLCDOpM6hzpHOk86Rzp3OkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6nzpHOnc6UzqHOmc6dzp/OoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6nzqnOnM6RzqTOkc6UzpEgzpzOlc6jzqPOl86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86czrXPg8+DzrfOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjQwMDInLCBBcmVhOiAnzpHOk86hzpnOm86ZzpXOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzpvOm86RzpPOlyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6Rzp3OlM6Rzp3Omc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzpHOnc6Yzp/Opc6jzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOkc6hzqPOmc6dzp/OlyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6SzpHOm86lzqHOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6WzpXOoc6czqDOmc6jzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6WzpXOpc6Tzp/Om86RzqTOlc6Zzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOms6RzpvOkc6czpHOoc6RzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6RzpvOm86ZzqHOoc6fzpcgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6RzpvOpc6SzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOo86kzqHOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOpM6jzpHOoc6fzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6VzqbOkc6bzpnOnc6fzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6fzpPOp86lzpvOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azqHOn86dzqTOl86hzpXOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6bzpHOnM6gzpHOmc6dzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOm86fzqXOpM6hzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6RzpPOn86lzpvOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czpHOnc6kzpbOkc6hzpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6RzqXOoc6fzpzOnM6RzqTOmSDOmc6YzqnOnM6XzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6VzpvOmc6TzpHOm86RzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6VzqHOn86gzpcgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6ZzpvOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czp/Onc6XIM6Szp/Opc6bzprOkc6dzp/OpSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czp/Opc6jzqTOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6dzpXOn86nzqnOoc6ZIM6ZzpjOqc6czpfOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpXOpM6hzpHOm86pzp3OkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpXOpc6azp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOoc6VzqXOnM6RzqTOmc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzqPOmc6RzpzOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6jzprOkc6bzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOo86fzpvOkc6azpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOo86kzpHOmM6czp/OoyDOo86azpHOm86RzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOo86kzpXOnc6lzprOm86RzqHOn86jIM6czpXOo86jzpfOnc6ZzpHOoywgzqTOo86fzqXOms6RzpvOkc6ZzpnOms6RIM6czpXOo86jzpfOnc6ZzpHOoywgzqbOmc6bzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6nzqHOpc6jzp/OpM6fzqDOn86jIM6czpXOo86jzpfOnc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM61z4PPg863zr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI0MDA0JywgQXJlYTogJ86RzpPOmc6RIM6kzqHOmc6RzpTOkSDOp86RzqHOn86azp/OoM6VzpnOn86lIM6czpXOo86jzpfOnc6ZzpHOoywgzpHOk86Zzp/OmSDOkc6dzpHOoc6TzqXOoc6fzpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzpLOkc6jzpnOm86ZzqTOo86Zzp/OpSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzpPOmc6fzqMgzpnOo86ZzpTOqc6hzp/OoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzqfOkc6hzp/Oms6fzqDOmc6fzqUgzpzOlc6jzqPOl86dzpnOkc6jLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzqfOkc6hzp/Oms6fzqDOlc6Zzp/OpSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzprOoc6ZzqTOn86nzqnOoc6ZIM6czpXOo86jzpfOnc6ZzpHOoywgzpLOkc6jzpnOm86ZzqTOo86ZIM6czpXOo86jzpfOnc6ZzpHOoywgzpLOn86lzp3Okc6hzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6Vzp7On86nzpnOms6fIM6gzqXOm86ZzpHOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6WzpnOls6Rzp3Omc6fIM6czpXOo86jzpfOnc6ZzpHOoywgzprOkc6gzpvOkc6dzpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6fzpzOoM6fzpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6fzqHOqc6dzpcgzpzOlc6jzqPOl86dzpnOkc6jLCDOm86ZzpLOkc6UzpHOms6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6lzqHOpM6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6lzqPOpM6hzpHOms6ZIM6czpXOo86jzpfOnc6ZzpHOoywgzp3Olc6RIM6azp/Ooc6pzp3OlyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpXOoc6fzqXOm86ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6fzqTOkc6czpnOkSDOms6fzqHOqc6dzpfOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6lzpHOnM6VzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6mzpHOm86Rzp3OmM6XIM6czpXOo86jzpfOnc6ZzpHOoywgzqbOkc6dzpXOoc6pzpzOlc6dzpcgzpzOlc6jzqPOl86dzpnOkc6jLCDOp86RzqHOn86azp/OoM6VzpnOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6nzqHOpc6jzp/Oms6VzpvOm86RzqHOmc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzqfOqc6czpHOpM6VzqHOnyDOnM6VzqPOo86Xzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpzOtc+Dz4POt869zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNDAwNScsIEFyZWE6ICfOkc6TzpnOkSDOo86pzqTOl86hzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOkc6Tzp3Okc6dzqTOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzqfOm86RzpTOn86nzqnOoc6ZIM6czpXOo86jzpfOnc6ZzpHOoywgzpPOkc6czpLOoc6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6RzpvOkc6czpHOms6ZIM6RzqfOm86RzpTOn86nzqnOoc6Zzp/OpSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOo86kzpHOnc6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6fzprOms6Zzp3OnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6bzqXOms6ZzqPOo86RIM6czpXOo86jzpfOnc6ZzpHOoywgzpzOkc6YzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpHOnc6ZzqDOlc6hzpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6VzqTOkc6bzpnOlM6ZIM6czpXOo86jzpfOnc6ZzpHOoywgzqTOls6Rzp3Olc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzqTOoc6lzqDOlc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzqbOn86hzp/OmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6nzpXOm86pzp3Okc6hzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpzOtc+Dz4POt869zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNDAwNicsIEFyZWE6ICfOkc6dzpXOnM6fzpzOpc6bzp/OoyDOnM6VzpjOqc6dzpfOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6SzpHOoc6RzprOlc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzpPOoc6ZzpbOn86azpHOnM6gzp/OoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6UzpXOnc6kzqHOn86lzpvOmc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzpXOpc6RzpPOk86VzpvOmc6jzpzOn86jIM6czpXOo86jzpfOnc6ZzpHOoywgzprOkc6Zzp3On86lzqHOk86Zzp8gzqfOqc6hzpnOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOnM6RzqHOmc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzprOn86azprOmc6dzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azqHOl86kzpnOms6RIM6czpXOo86jzpfOnc6ZzpHOoywgzpvOkc6nzpHOnc6RzpTOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6bzp/Opc6kzqPOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czpXOmM6pzp3OlyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6dzpXOoc6Rzp3OpM6WzpnOlc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzqPOkc6gzpnOlc6dzqTOls6RIM6dzpfOo86fzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOo86nzpnOls6RIM6dzpfOo86fzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOpM6RzqDOmc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzqbOn86Zzp3Omc6azpcgzpzOlc6jzqPOl86dzpnOkc6jLCDOps6fzpnOnc6ZzprOn86lzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOp86fzqXOnc6RzprOmc6RIM6czpXOo86jzpfOnc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM61z4PPg863zr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI0MDA4JywgQXJlYTogJ86RzpPOmc6fzpkgzpjOlc6fzpTOqc6hzp/OmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzpPOmc6fzqMgzpHOmM6Rzp3Okc6jzpnOn86jIM6czpXOo86jzpfOnc6ZzpHOoywgzpHOk86hzpnOm86fzpLOn86lzp3OnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6Rzp3OqSDOnM6VzpvOoM6VzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6SzqHOkc6nzp/OoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6SzqHOpc6jzp/Opc6bzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOlM6RzqPOn86nzqnOoc6ZIM6czpXOo86jzpfOnc6ZzpHOoywgzpTOlc6jzqXOm86bzpHOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6UzpnOkc6Szp/Om86ZzqTOo86ZIM6czpXOo86jzpfOnc6ZzpHOoywgzpfOm86VzprOpM6hzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6RzqHOnc6RzqPOmc6fIM6czpXOo86jzpfOnc6ZzpHOoywgzprOkc6kzqkgzpzOlc6bzqDOlc6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6Vzp3OpM6hzpnOms6fIM6czpXOo86jzpfOnc6ZzpHOoywgzprOqc6dzqPOpM6Rzp3OpM6Zzp3On86ZIM6czpXOo86jzpfOnc6ZzpHOoywgzpzOkc6bzqTOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czpHOnc6UzqHOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czp/Onc6RzqPOpM6XzqHOkc6azpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6RzqHOkc6gzp/Opc6TzprOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpfOk86XIM6czpXOm86gzpXOmc6RzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6bzpHOpM6Rzp3OkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzp/Om86ZzqfOnc6XIM6czpXOo86jzpfOnc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM61z4PPg863zr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI0MDA5JywgQXJlYTogJ86Yzp/Opc6hzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpzOtc+Dz4POt869zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNDAxMScsIEFyZWE6ICfOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzqTOoc6ZzqbOpc6bzpnOkc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzpHOk86Zzp/OoyDOoM6VzqTOoc6fzqMgzqTOoc6ZzqbOpc6bzpnOkc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzpHOnM6mzpnOmM6VzpEgzqTOoc6ZzqbOpc6bzpnOkc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzpHOnc6pIM6UzqnOoc6Zzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOks6RzqPOmc6bzpnOms6fIM6czpXOo86jzpfOnc6ZzpHOoywgzpTOqc6hzpnOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOpM6pIM6RzpzOps6ZzpjOlc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzprOkc6kzqkgzpzOkc6bzpjOlyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azp/Oms6bzpHOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czpHOm86YzpcgzpzOlc6jzqPOl86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86czrXPg8+DzrfOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjQwMTYnLCBBcmVhOiAnzpHOm86kzp/OnM6ZzqHOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6Rzp3Okc6kzp/Om86ZzprOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6Rzp3OqSDOlM6fzpvOn86ZIM6czpXOo86jzpfOnc6ZzpHOoywgzpLOn86hzpXOmc6fIM6czpXOo86jzpfOnc6ZzpHOoywgzpTOlc6dzpTOoc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzprOkc6bzpnOkc6dzpHOmc6ZzprOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOnM6gzp/OoyDOkc6SzpnOkc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzprOkc6kzqkgzpTOn86bzp/OmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpXOnc6kzqHOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpnOpM6hzpnOlc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzprOoc6lzpEgzpLOoc6lzqPOlyDOoM6XzpPOkc6UzpnOqc6dIM6czpXOo86jzpfOnc6ZzpHOoywgzpvOkc6TzprOkc6UzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czpHOm86kzpEgzqPOpM6RzqXOoc6fzqDOl86TzpnOn86lIM6czpXOo86jzpfOnc6ZzpHOoywgzp/Ooc6fzpLOkc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzqDOl86TzpHOlM6ZzpEgzprOkc6bzpHOnM6pzp0gzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6bzpHOpM6pzpzOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6hzpnOls6Rzp3OkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6jzqTOkc6lzqHOn86gzpfOk86Zzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOpM6fzqXOnM6gzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6nzqnOoc6RIM6TzpHOmc6kzqPOqc6dIM6czpXOo86jzpfOnc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM61z4PPg863zr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI0MDIyJywgQXJlYTogJ86RzpPOmc6RIM6jzp/Ops6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOk86ZzpHOpM6hzpHOmc6ZzprOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6Vzp7Oqc6nzqnOoc6ZIM6czpXOo86jzpfOnc6ZzpHOoywgzpbOkc6nzpHOoc6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6RzpvOkc6czpnOpM6jzpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6RzpvOpc6SzpXOoyDOoM6hzp/Oo86XzpvOmc6fzqUgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6RzpzOoM6fzqMgzprOkc6hzpTOkc6czqXOm86XzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6RzqHOlM6RzpzOpc6bzpcgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6RzqTOkc6mzqXOk86Zzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOm86RzprOms6fzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOnc6Vzp8gzqDOoc6fzpHOo86kzpnOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpXOlM6Zzp3OnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpXOpM6hzp/Oks6fzqXOnc6ZIM6czpXOo86jzpfOnc6ZzpHOoywgzqDOoc6fzpHOo86kzpnOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzqHOn86jzpfOm86Zzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOpM6jzpXOoc6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOp86pzqHOkSDOlc6ezqnOp86pzqHOmc6fzqUgzpzOlc6jzqPOl86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86czrXPg8+DzrfOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjQxMDAnLCBBcmVhOiAnzpHOks6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOkc6TzpnOn86jIM6mzpvOqc6hzp/OoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzpnOmM6RzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzpnOoM6VzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzprOn86SzpnOpM6ZzprOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzprOoc6fzpPOmc6RzpvOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzpvOqc6dzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6Rzp3Olc6czp/OnM6lzpvOn86jIM6czpXOo86jzpfOnc6ZzpHOoywgzpHOnc6YzpXOmc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzpHOnc6kzpnOms6RzpvOkc6czp/OoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6Rzp3OqSDOkc6czqbOlc6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOkc6dzqkgzpLOlc6hzpPOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzqHOkc6nzp/Oks6RIM6czpXOo86jzpfOnc6ZzpHOoywgzpHOoc6Zzp/Op86pzqHOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzqPOoM6hzp/OoM6fzqXOm86ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOkc6jzqDOoc6fzqfOqc6czpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOlM6ZzpHOo86VzpvOm86RIM6czpXOo86jzpfOnc6ZzpHOoywgzpTOoc6fzqPOn86gzpfOk86XIM6czpXOo86jzpfOnc6ZzpHOoywgzpXOm86RzpnOn86nzqnOoc6ZIM6azpHOm86RzpzOqc6dIM6czpXOo86jzpfOnc6ZzpHOoywgzprOkc6bzpHOnM6RzqTOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOm86RzpzOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOm86bzpnOmM6VzpEgzprOkc6bzpHOnM6RzqTOkc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzprOkc6kzqPOkc6hzpHOmc6ZzprOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOpM6jzpnOms6fzpLOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOpM6pIM6RzpzOps6VzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOpM6pIM6SzpXOoc6TzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6fzqXOoc6XzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6fzqXOpM6RzpvOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6bzpHOmc6ZzprOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czpXOk86RzpvOlyDOnM6Rzp3OpM6Zzp3Olc6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6Vzp3Omc6dzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6ZzprOoc6RIM6czpHOnc6kzpnOnc6VzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czpnOms6hzp/OnM6Rzp3OlyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czp/Onc6XIM6SzpXOm86Rzp3Omc6UzpnOkc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzpzOn86dzpcgzpPOkc6hzpTOmc6azpnOn86lIM6czpXOo86jzpfOnc6ZzpHOoywgzpzOn86dzpcgzpTOmc6czpnOn86SzpfOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czqDOn86lzqHOnc6ZzpHOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6ezpXOoc6fzprOkc6czqDOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpHOoc6RzpvOmc6RIM6SzpXOoc6TzpHOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpXOoc6ZzpLOn86bzpHOms6ZzpEgzprOkc6bzpHOnM6pzp0gzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6XzpTOl86czpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6bzpHOpM6lIM6czpXOo86jzpfOnc6ZzpHOoywgzqDOoc6fzqbOl86kzpfOoyDOl86bzpnOkc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzqPOoM6VzqHOp86fzpPOlc6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOo86gzpnOpM6RzprOmc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzqPOqc6kzpfOoc6ZzpHOnc6ZzprOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6nzpHOoc6RzqXOk86XIM6jzqnOpM6XzqHOmc6Rzp3Omc6azqnOnSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6nzqHOmc6jzqTOn86mzpnOm86RzpnOmc6azpEgzpzOlc6jzqPOl86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86czrXPg8+DzrfOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjQxMzEnLCBBcmVhOiAnzprOkc6bzpHOnM6RzqTOkc6jIM6czpXOo86jzpfOnc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM61z4PPg863zr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI0MTMyJywgQXJlYTogJ86azpHOm86RzpzOkc6kzpHOoyDOnM6VzqPOo86Xzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpzOtc+Dz4POt869zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNDEzMycsIEFyZWE6ICfOms6RzpvOkc6czpHOpM6RzqMgzpzOlc6jzqPOl86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86czrXPg8+DzrfOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjQxMzQnLCBBcmVhOiAnzprOkc6bzpHOnM6RzqTOkc6jIM6czpXOo86jzpfOnc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOnM61z4PPg863zr3Or86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzI0MjAwJywgQXJlYTogJ86RzpLOoc6RzpzOmc6fIM6czpXOo86jzpfOnc6ZzpHOoywgzpHOk86Zzp/OoyDOkc6lzpPOn86lzqPOpM6Zzp3On86jIM6czpXOo86jzpfOnc6ZzpHOoywgzpHOk86Zzp/OoyDOms6pzp3Oo86kzpHOnc6kzpnOnc6fzqMgzpzOlc6jzqPOl86dzpfOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6Rzp3Okc6bzpfOqM6XIM6czpXOo86jzpfOnc6ZzpHOoywgzpLOlc6bzpnOms6RIM6czpXOo86jzpfOnc6ZzpHOoywgzpTOoc6RzprOn86dzpXOoc6ZIM6czpXOo86jzpfOnc6ZzpHOoywgzprOkc6hzqTOlc6hzp/Om86ZIM6czpXOo86jzpfOnc6ZzpHOoywgzpvOlc6lzprOn86nzqnOoc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzpvOpc6azp/OpM6hzpHOps6fzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6RzpTOlc6dzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6RzqXOoc6fzpzOnM6RzqTOmSDOoM6RzpzOmc6jzp/OpSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czpXOo86jzpfOnc6XIM6czpXOo86jzpfOnc6ZzpHOoywgzpzOn86jzqfOn86nzqnOoc6Zzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6lzpvOqc6dzpHOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czqXOoc6kzp/OoM6fzqTOkc6czpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6dzpXOn86nzqnOoc6ZIM6RzqHOmc6jzqTOn86czpXOnc6fzqXOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6ezpnOnc6fzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOoM6RzqHOkc6bzpnOkSDOks6VzpvOmc6azpHOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpnOm86RzpvOmc6jzqTOoc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzqDOmc6gzpXOoc6ZzqTOo86RIM6czpXOo86jzpfOnc6ZzpHOoywgzqPOoM6ZzqTOkc6bzpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOo86kzqHOlc6mzpnOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6nzqHOpc6jzp/Ops6fzqHOkSDOnM6VzqPOo86Xzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpzOtc+Dz4POt869zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNDMwMCcsIEFyZWE6ICfOkc6TzpnOkSDOms6lzqHOmc6RzprOlyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzpPOoc6ZzpvOn86jIM6kzqHOmc6mzqXOm86ZzpHOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6Vzp7On86nzpnOms6fIM6kzqHOmc6mzqXOm86ZzpHOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azp/Opc6dzqTOoc6ZIM6czpXOo86jzpfOnc6ZzpHOoywgzpvOkc6TzprOn86lzpLOkc6hzpTOn86jIM6czpXOo86jzpfOnc6ZzpHOoywgzpvOlc6czqDOlc6jzqTOlc6dzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOm86ZzpzOlc6dzpHOoc6ZIM6czpXOo86jzpfOnc6ZzpHOoywgzpzOlc6hzp/Om86ZzpjOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpvOkc6kzpcgzpzOlc6jzqPOl86dzpnOkc6jLCDOo86kzp/OnM6Zzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOps6ZzpvOmc6RzqTOoc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzqfOkc6bzpHOls6fzp3Omc6fIM6czpXOo86jzpfOnc6ZzpHOoywgzqfOoc6ZzqPOpM6ZzpHOnc6fzqXOoM6fzpvOlyDOnM6VzqPOo86Xzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpzOtc+Dz4POt869zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICcyNDQwMCcsIEFyZWE6ICfOkc6czqDOlc6bzp/Ops6lzqTOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6SzpHOm86kzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOks6RzqTOmc6RzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOks6hzp/OnM6fzp3Olc6hzpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOk86RzqHOk86RzpvOmc6Rzp3On86ZIM6czpXOo86jzpfOnc6ZzpHOoywgzprOkc6dzpHOm86fzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOm86VzqXOms6XIM6czpXOo86jzpfOnc6ZzpHOoywgzpzOkc6hzpHOmM6fzqDOn86bzpcgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6fzqXOls6RzprOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpfOk86RzpTOmc6RIM6kzqHOmc6mzqXOm86ZzpHOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzqHOqc6kzpcgzp3Ol86jzp/OoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzqXOoc6Tzp/OoyDOpM6hzpnOps6lzpvOmc6RzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOoc6ZzprOmc6RIM6czpXOo86jzpfOnc6ZzpHOoywgzqbOm86fzprOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6nzp/Op86bzpHOo86kzpcgzpzOlc6jzqPOl86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86czrXPg8+DzrfOvc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMjQ1MDAnLCBBcmVhOiAnzpHOk86ZzpHOnc6dzpHOms6XzqMgzpzOlc6jzqPOl86dzpnOkc6jLCDOkc6bzpnOnM6RzprOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6Rzp3Opc6UzqHOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6Rzp3OqSDOms6RzpvOnyDOnc6VzqHOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6RzqHOnM6Vzp3Omc6fzpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOks6hzqXOo86VzqMgzqTOoc6ZzqbOpc6bzpnOkc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzpLOoc6lzqPOlc6jIM6mzpnOm86ZzpHOpM6hzqnOnSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6UzpHOoc6RzqMgzqHOn86UzpnOkc6jIM6czpXOo86jzpfOnc6ZzpHOoywgzprOkc6azprOkc6SzpHOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOm86fIM6dzpXOoc6fIM6czpXOo86jzpfOnc6ZzpHOoywgzprOkc6bzp/Ok86VzqHOlc6jzpnOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6azpHOoc6Szp/Opc6dzpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOms6bzqnOnc6Zzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOms6lzqDOkc6hzpnOo86jzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6bzpHOnc6kzpbOn86lzp3Okc6kzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOm86lzprOn86lzpTOlc6jzpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6RzpvOlyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6czpXOnM6ZIM6czpXOo86jzpfOnc6ZzpHOoywgzpzOn86lzqHOmc6RzqTOkc6UzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6gzpvOlc6czpXOnc6ZzpHOnc6fzpkgzpzOlc6jzqPOl86dzpnOkc6jLCDOnM6lzpvOn86ZIM6czpXOo86jzpfOnc6ZzpHOoywgzpzOpc6hzp8gzpzOlc6jzqPOl86dzpnOkc6jLCDOns6XzqHOn86azpHOnM6gzp/OoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6gzpHOm86RzpnOkSDOks6hzqXOo86XIM6czpXOo86jzpfOnc6ZzpHOoywgzqDOlc6hzpTOmc6azp/Onc6VzqHOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6hzpHOoM6kzp/OoM6fzqXOm86fIM6czpXOo86jzpfOnc6ZzpHOoywgzqHOkc6nzpXOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6hzp/OlM6ZzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOoc6fzqXOls6RzprOmSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6jzpXOm86bzpHOoyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6jzqDOl86bzpnOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6jzqTOkc6jzpnOnyDOnM6VzqPOo86Xzp3Omc6RzqMsIM6kzpXOoc6ozpnOmM6VzpEgzpzOlc6jzqPOl86dzpnOkc6jLCDOpM6hzpnOoM6lzpvOkSDOnM6VzqPOo86Xzp3Omc6RzqMsIM6mzpHOoc6RzprOm86RzpTOkSDOnM6VzqPOo86Xzp3Omc6RzqMnLCBQcmVmZWN0dXJlOiAnzpzOtc+Dz4POt869zq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2NzA2MScsIEFyZWE6ICfOkc6SzpTOl86hzpEgzp7Okc6dzpjOl86jLCDOks6VzpvOn86dzpcgzp7Okc6dzpjOl86jLCDOk86azpnOqc6dzpEgzp7Okc6dzpjOl86jLCDOlM6RzqbOnc6XIM6ezpHOnc6YzpfOoywgzpXOoc6pzpTOmc6fzqMgzp7Okc6dzpjOl86jLCDOm86VzqXOms6ZzqDOn86jIM6ezpHOnc6YzpfOoywgzpzOkc6TzpPOkc6dzpEgzp7Okc6dzpjOl86jLCDOnM6Rzp3OlM6hzpEgzp7Okc6dzpjOl86jLCDOnM6VzpvOmc6jzqPOkSDOns6Rzp3OmM6XzqMsIM6czqXOoc6pzpTOkc6kzp8gzp7Okc6dzpjOl86jLCDOoM6RzpnOlM6ZzprOlc6jIM6azpHOpM6RzqPOms6Xzp3Oqc6jzpXOmc6jIM6ezpHOnc6YzpfOoywgzqDOlc6Wzp/Opc6bzpEgzp7Okc6dzpjOl86jLCDOoM6hzqnOpM6RzpPOn86hzpHOoyDOns6Rzp3OmM6XzqMsIM6jzprOkc6bzpEgzpHOks6UzpfOoc6pzp0gzp7Okc6dzpjOl86jJywgUHJlZmVjdHVyZTogJ86ezqzOvc64zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjcwNjInLCBBcmVhOiAnzpHOnc6pIM6azpHOoc6lzp/Ops6lzqTOnyDOns6Rzp3OmM6XzqMsIM6UzpHOo86ZzprOnyDOp86pzqHOmc6fIM6ezpHOnc6YzpfOoywgzpTOkc6mzp3Oqc6dzpHOoyDOns6Rzp3OmM6XzqMsIM6ZzqnOnc6ZzprOnyDOns6Rzp3OmM6XzqMsIM6azpHOm86bzpnOmM6VzpEgzp7Okc6dzpjOl86jLCDOms6RzpvOpc6SzpEgzp7Okc6dzpjOl86jLCDOms6RzqPOpM6Rzp3Omc6kzpfOoyDOns6Rzp3OmM6XzqMsIM6azpHOpM6pIM6ZzqnOnc6ZzprOnyDOns6Rzp3OmM6XzqMsIM6azpHOpM6pIM6azpHOoc6lzp/Ops6lzqTOnyDOns6Rzp3OmM6XzqMsIM6azp/OnM6dzpfOnc6RIM6ezpHOnc6YzpfOoywgzpvOlc6ZzpLOkc6UzpnOpM6XzqMgzp7Okc6dzpjOl86jLCDOm86lzprOn86UzqHOn86czpnOnyDOns6Rzp3OmM6XzqMsIM6czpHOoc6TzpHOoc6ZzqTOmSDOns6Rzp3OmM6XzqMsIM6dzpXOn86nzqnOoc6ZIM6ezpHOnc6YzpfOoywgzqPOmc6UzpfOoc6fzqDOlc6kzqHOkSDOns6Rzp3OmM6XzqMsIM6jzqTOkc6lzqHOn86lzqDOn86bzpcgzp7Okc6dzpjOl86jLCDOo86kzpHOpc6hzp/Op86pzqHOmSDOns6Rzp3OmM6XzqMsIM6lzpTOoc6RzpPOqc6TzpXOmc6fIM6ezpHOnc6YzpfOoycsIFByZWZlY3R1cmU6ICfOns6szr3OuM63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzY3MDY0JywgQXJlYTogJ86Rzp3OqSDOoM6fzpvOpc6jzpnOpM6fIM6ezpHOnc6YzpfOoywgzpLOkc6mzpHOmc6ZzprOkSDOns6Rzp3OmM6XzqMsIM6TzpXOnc6ZzqPOlc6RIM6ezpHOnc6YzpfOoywgzprOn86lzqTOo86fIM6ezpHOnc6YzpfOoywgzqDOn86bzqXOo86ZzqTOnyDOns6Rzp3OmM6XzqMsIM6jzqXOlM6Zzp3OlyDOns6Rzp3OmM6XzqMnLCBQcmVmZWN0dXJlOiAnzp7OrM69zrjOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2NzEwMCcsIEFyZWE6ICfOkc6ZzqnOoc6RIM6ezpHOnc6YzpfOoywgzpHOms6RzqHOoM6fIM6ezpHOnc6YzpfOoywgzpHOm86ZzprOn86nzqnOoc6ZIM6ezpHOnc6YzpfOoywgzpHOm86azqXOn86dzpcgzp7Okc6dzpjOl86jLCDOkc6bzpzOkSDOns6Rzp3OmM6XzqMsIM6Rzp3OmM6XzqHOnyDOns6Rzp3OmM6XzqMsIM6Rzp3OqSDOms6ZzqHOoc6RIM6ezpHOnc6YzpfOoywgzpHOo86azqXOoc6RIM6ezpHOnc6YzpfOoywgzpHOpc6ezpXOnc6kzpnOn86lIM6ezpHOnc6YzpfOoywgzpHOp86bzpHOlM6ZzpEgzp7Okc6dzpjOl86jLCDOks6Rzp3Omc6Rzp3OnyDOns6Rzp3OmM6XzqMsIM6SzpHOo86ZzpvOn86nzqnOoc6ZIM6ezpHOnc6YzpfOoywgzpLOlc6bzp/Op86pzqHOmSDOns6Rzp3OmM6XzqMsIM6TzpHOm86Rzp3OlyDOns6Rzp3OmM6XzqMsIM6TzpXOoc6RzprOkc6jIM6ezpHOnc6YzpfOoywgzpPOmc6RzpvOmc6jzqTOlc6hzpEgzp7Okc6dzpjOl86jLCDOk86fzqHOk86fzp3OkSDOns6Rzp3OmM6XzqMsIM6TzqHOl86Tzp/Ooc6fIM6ezpHOnc6YzpfOoywgzpTOmc6RzqbOn86hzp8gzp7Okc6dzpjOl86jLCDOlM6Zzp/OnM6XzpTOlc6ZzpEgzp7Okc6dzpjOl86jLCDOlM6hzp/Oo86VzqHOnyDOns6Rzp3OmM6XzqMsIM6VzqHOkc6dzp/OoyDOns6Rzp3OmM6XzqMsIM6VzqXOnM6fzpnOoc6fIM6ezpHOnc6YzpfOoywgzpbOn86lzpzOoM6fzqXOm86ZIM6ezpHOnc6YzpfOoywgzpjOlc6fzqTOn86azp/OoyDOns6Rzp3OmM6XzqMsIM6ZzqPOkc6ZzpEgzp7Okc6dzpjOl86jLCDOms6RzpvOm86ZzpjOlc6RIM6VzqXOnM6fzpnOoc6fzqUgzp7Okc6dzpjOl86jLCDOms6RzqDOnc6fzpHOnc6Yzp/OoyDOns6Rzp3OmM6XzqMsIM6azpXOpM6ZzprOmSDOns6Rzp3OmM6XzqMsIM6azpnOnM6czpXOoc6ZzpEgzp7Okc6dzpjOl86jLCDOms6ZzqHOoc6RIM6ezpHOnc6YzpfOoywgzprOn86kzpnOnc6fIM6ezpHOnc6YzpfOoywgzprOn86lzqTOo86fzpzOpc6kzpfOoyDOns6Rzp3OmM6XzqMsIM6azqHOkc6dzpnOkSDOns6Rzp3OmM6XzqMsIM6azqXOms6dzp/OoyDOns6Rzp3OmM6XzqMsIM6bzpHOnM6gzqHOmc6dzp8gzp7Okc6dzpjOl86jLCDOm86VzqXOms6XIM6ezpHOnc6YzpfOoywgzpvOlc6lzprOn86gzpXOpM6hzpEgzp7Okc6dzpjOl86jLCDOm86ZzpLOkc6Uzpkgzp7Okc6dzpjOl86jLCDOnM6RzpPOmc6azp8gzp7Okc6dzpjOl86jLCDOnM6Rzp3OpM6RzpnOnc6RIM6ezpHOnc6YzpfOoywgzpzOlc6TzpEgzpXOpc6czp/Omc6hzp8gzp7Okc6dzpjOl86jLCDOnM6VzpPOkSDOpM6lzpzOoM6Rzp3OnyDOns6Rzp3OmM6XzqMsIM6czpnOms6hzp8gzqTOpc6czqDOkc6dzp8gzp7Okc6dzpjOl86jLCDOnM6fzp3OlyDOpM6Rzp7Omc6RzqHOp86pzp0gzp7Okc6dzpjOl86jLCDOnM6lzprOlyDOns6Rzp3OmM6XzqMsIM6dzpXOkSDOnM6fzqHOo86Zzp3OlyDOns6Rzp3OmM6XzqMsIM6dzpXOn86jIM6WzqXOk86fzqMgzp7Okc6dzpjOl86jLCDOns6Rzp3OmM6XIM6ezpHOnc6YzpfOoywgzp/Okc6jzpnOoyDOns6Rzp3OmM6XzqMsIM6fzqHOlc6jzqTOmc6dzpcgzp7Okc6dzpjOl86jLCDOoM6RzpvOkc6ZzpEgzpTOlc6ezpHOnM6Vzp3OlyDOns6Rzp3OmM6XzqMsIM6gzpHOm86RzpnOkSDOnM6fzqHOo86Zzp3OlyDOns6Rzp3OmM6XzqMsIM6gzpHOm86RzpnOnyDOms6RzqTOoc6RzpzOmSDOns6Rzp3OmM6XzqMsIM6gzpHOm86RzpnOn86jIM6WzqXOk86fzqMgzp7Okc6dzpjOl86jLCDOoM6Rzp3Olc6gzpnOo86kzpfOnM6Zzp/Opc6gzp/Om86XIM6ezpHOnc6YzpfOoywgzqDOkc6dzpXOoc6ZIM6ezpHOnc6YzpfOoywgzqDOlc6bzpXOms6XzqTOnyDOns6Rzp3OmM6XzqMsIM6gzpXOpM6VzpnOnc6fzqMgzp7Okc6dzpjOl86jLCDOoM6VzqTOoc6fzqfOqc6hzpkgzp7Okc6dzpjOl86jLCDOoM6XzpPOkc6UzpnOkSDOns6Rzp3OmM6XzqMsIM6gzpnOm86XzpzOkSDOns6Rzp3OmM6XzqMsIM6gzp/Ooc6kzpEgzp7Okc6dzpjOl86jLCDOoM6hzpnOn86dzpnOnyDOns6Rzp3OmM6XzqMsIM6gzqHOn86jzpfOm86Zzp8gzp7Okc6dzpjOl86jLCDOoM6lzqHOk86fzqMgzp7Okc6dzpjOl86jLCDOoc6RzqfOlyDOns6Rzp3OmM6XzqMsIM6hzpXOpc6czpEgzp7Okc6dzpjOl86jLCDOoc6lzpzOlyDOns6Rzp3OmM6XzqMsIM6jzpXOm86VzqHOnyDOns6Rzp3OmM6XzqMsIM6jzpXOnM6VzpvOlyDOns6Rzp3OmM6XzqMsIM6jzpfOnM6Rzp3OpM6hzpEgzp7Okc6dzpjOl86jLCDOo86ZzqHOn86azp8gzp7Okc6dzpjOl86jLCDOo86czpnOnc6Yzpcgzp7Okc6dzpjOl86jLCDOo86fzqXOm86RIM6ezpHOnc6YzpfOoywgzqPOn86lzp3Omc6fIM6ezpHOnc6YzpfOoywgzqPOpM6RzpzOkc6kzpkgzp7Okc6dzpjOl86jLCDOo86kzpfOoc6ZzpPOnM6RIM6ezpHOnc6YzpfOoywgzqTOlc6azqTOqc6dIM6ezpHOnc6YzpfOoywgzqTOn86ezp/OpM6VzqMgzp7Okc6dzpjOl86jLCDOpM6hzpnOk86pzp3OnyDOns6Rzp3OmM6XzqMsIM6lzpTOoc6fzqfOqc6hzpnOnyDOns6Rzp3OmM6XzqMsIM6mzpXOm86pzp3OlyDOns6Rzp3OmM6XzqMsIM6mzpnOm86ZzpEgzp7Okc6dzpjOl86jLCDOp86hzqXOo86RIM6ezpHOnc6YzpfOoywgzqfOoc6lzqPOnyDOns6Rzp3OmM6XzqMsIM6pzqHOkc6Zzp8gzp7Okc6dzpjOl86jJywgUHJlZmVjdHVyZTogJ86ezqzOvc64zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjcyMDAnLCBBcmVhOiAnzpHOks6RzqTOnyDOns6Rzp3OmM6XzqMsIM6RzpPOmc6fzqMgzpHOmM6Rzp3Okc6jzpnOn86jIM6ezpHOnc6YzpfOoywgzpPOms6ZzpbOlc6bzpEgzp7Okc6dzpjOl86jLCDOlM6RzqPOn86nzqnOoc6ZIM6ezpHOnc6YzpfOoywgzpTOlc6azpHOoc6nzp8gzp7Okc6dzpjOl86jLCDOlc6ezp/Op86XIM6ezpHOnc6YzpfOoywgzpXOpc6bzpHOm86fIM6ezpHOnc6YzpfOoywgzpfOm86Zzp/Oms6Vzp3OpM6XzpzOkSDOns6Rzp3OmM6XzqMsIM6XzpvOmc6fzqDOlc6kzqHOkSDOns6Rzp3OmM6XzqMsIM6YzpHOm86RzqPOo86ZzpEgzp7Okc6dzpjOl86jLCDOms6Vzp3OpM6XzqTOlyDOns6Rzp3OmM6XzqMsIM6azp/Oo86czpfOpM6XIM6ezpHOnc6YzpfOoywgzprOn86jzqPOn86jIM6ezpHOnc6YzpfOoywgzprOoc6VzpzOkc6jzqTOlyDOns6Rzp3OmM6XzqMsIM6azqXOoc6dzp/OoyDOns6Rzp3OmM6XzqMsIM6azqXOqM6VzpvOlyDOns6Rzp3OmM6XzqMsIM6czpnOms6hzp/Op86pzqHOmSDOns6Rzp3OmM6XzqMsIM6dzpXOkSDOkc6czpnOo86fzqMgzp7Okc6dzpjOl86jLCDOnc6Vzp8gzpXOoc6RzqPOnM6Zzp8gzp7Okc6dzpjOl86jLCDOn86bzpLOmc6fIM6ezpHOnc6YzpfOoywgzp/Ooc6mzpHOnc6fIM6ezpHOnc6YzpfOoywgzqDOkc6bzpHOmc6fIM6VzqHOkc6jzpzOmc6fIM6ezpHOnc6YzpfOoywgzqDOkc6bzpHOmc6fIM6fzpvOks6Zzp8gzp7Okc6dzpjOl86jLCDOoM6fzpnOnM6dzpcgzp7Okc6dzpjOl86jLCDOoc6RzpTOmc6fzqPOpM6RzpjOnM6fzqMgzp7Okc6dzpjOl86jJywgUHJlZmVjdHVyZTogJ86ezqzOvc64zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjczMDAnLCBBcmVhOiAnzpHOmc6czp/Onc6Zzp8gzp7Okc6dzpjOl86jLCDOkc6azqHOkc6Zzp/OoyDOns6Rzp3OmM6XzqMsIM6Rzp3OqSDOmM6VzqHOnM6VzqMgzp7Okc6dzpjOl86jLCDOk86ZzpTOn86kzp/OoM6fzqMgzp7Okc6dzpjOl86jLCDOk86bzpHOpc6azpcgzp7Okc6dzpjOl86jLCDOlM6XzpzOkc6hzpnOnyDOns6Rzp3OmM6XzqMsIM6UzpnOkc6jzqDOkc6hzqTOnyDOns6Rzp3OmM6XzqMsIM6Uzp/Opc6hzpPOn86lzqTOmSDOns6Rzp3OmM6XzqMsIM6VzqfOmc6dzp/OoyDOns6Rzp3OmM6XzqMsIM6YzpXOoc6czpXOoyDOns6Rzp3OmM6XzqMsIM6ZzpHOnM6RzqTOmc6azpXOoyDOoM6XzpPOlc6jIM6ezpHOnc6YzpfOoywgzprOkc6bzp/OpM6lzqfOnyDOns6Rzp3OmM6XzqMsIM6azpXOnc6kzpHOpc6hzp/OoyDOns6Rzp3OmM6XzqMsIM6azpnOlM6RzqHOmc6jIM6ezpHOnc6YzpfOoywgzprOn86hzqXOps6XIM6ezpHOnc6YzpfOoywgzprOn86kzqTOkc6dzpcgzp7Okc6dzpjOl86jLCDOms6fzqTOpc6bzpcgzp7Okc6dzpjOl86jLCDOms6fzqXOnc6Uzp/Opc6hzp/OoyDOns6Rzp3OmM6XzqMsIM6bzqXOms6fzqTOn86gzp/OoyDOns6Rzp3OmM6XzqMsIM6czpXOlM6fzqXOo86RIM6ezpHOnc6YzpfOoywgzpzOlc6bzpnOks6fzpnOkSDOns6Rzp3OmM6XzqMsIM6czpXOo86VzqMgzpjOlc6hzpzOlc6jIM6ezpHOnc6YzpfOoywgzqDOkc6nzp3OlyDOns6Rzp3OmM6XzqMsIM6gzp/Om86lzqPOms6Zzp8gzp7Okc6dzpjOl86jLCDOoM6fzqTOkc6czp/Op86pzqHOmSDOns6Rzp3OmM6XzqMsIM6hzpXOnM6RzqTOmc6RIM6ezpHOnc6YzpfOoywgzqPOkc6kzqHOlc6jIM6ezpHOnc6YzpfOoywgzqTOlc6czpXOnc6fzqMgzp7Okc6dzpjOl86jLCDOpM6jzpHOm86RzqDOlc6kzpXOmc6dzp/OoyDOns6Rzp3OmM6XzqMnLCBQcmVmZWN0dXJlOiAnzp7OrM69zrjOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1ODAwMicsIEFyZWE6ICfOkc6TzpnOn86jIM6RzpjOkc6dzpHOo86Zzp/OoyDOoM6VzpvOm86XzqMsIM6RzpPOmc6fzqMgzpTOl86czpfOpM6hzpnOn86jIM6gzpXOm86bzpfOoywgzpHOnc6pIM6TzqHOkc6czpzOkc6kzpnOms6fIM6gzpXOm86bzpfOoywgzpHOoc6dzpnOo86jzpEgzqDOlc6bzpvOl86jLCDOlM6hzp/Oo86ZzpEgzqDOlc6bzpvOl86jLCDOls6VzqHOks6XIM6gzpXOm86bzpfOoywgzprOkc6kzqkgzpPOoc6RzpzOnM6RzqTOmc6azp8gzqDOlc6bzpvOl86jLCDOnc6VzpEgzp7Okc6dzpjOn86TzpnOkSDOoM6VzpvOm86XzqMsIM6dzpXOn86jIM6RzpPOmc6fzqMgzpHOmM6Rzp3Okc6dzpHOo86Zzp/OoyDOoM6VzpvOm86XzqMsIM6ezpHOnc6Yzp/Ok86ZzpEgzqDOlc6bzpvOl86jLCDOoM6Rzp3Okc6TzpnOpM6jzpEgzqDOlc6bzpvOl86jLCDOoM6VzqHOkc6ZzpEgzqDOlc6bzpvOl86jJywgUHJlZmVjdHVyZTogJ86gzq3Ou867zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTgwMDUnLCBBcmVhOiAnzp3Olc6RIM6gzpXOm86bzpEgzqDOlc6bzpvOl86jLCDOoM6VzpvOm86RIM6gzpXOm86bzpfOoycsIFByZWZlY3R1cmU6ICfOoM6tzrvOu86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU4MTAwJywgQXJlYTogJ86RzpzOoM6VzpvOmc6VzqMgzqDOlc6bzpvOl86jLCDOkc6ezp/OoyDOoM6VzpvOm86XzqMsIM6RzqHOkc6SzpfOo86jzp/OoyDOoM6VzpvOm86XzqMsIM6RzqHOp86fzp3OpM6ZzprOnyDOoM6VzpvOm86XzqMsIM6RzqPOks6VzqPOpM6RzqHOlc6Zzp8gzqDOlc6bzpvOl86jLCDOkc6nzpvOkc6Uzp/Op86pzqHOmSDOoM6VzpvOm86XzqMsIM6TzpnOkc6dzp3Omc6kzqPOkSDOoM6VzpvOm86XzqMsIM6TzqXOqM6fzqfOqc6hzpkgzqDOlc6bzpvOl86jLCDOlM6RzpzOmc6Rzp3OnyDOoM6VzpvOm86XzqMsIM6UzqHOn86jzpXOoc6fIM6gzpXOm86bzpfOoywgzpXOm86VzqXOmM6VzqHOn86nzqnOoc6ZIM6gzpXOm86bzpfOoywgzprOoc6pzpzOnc6XIM6gzpXOm86bzpfOoywgzpvOlc6gzqTOn86azpHOoc6lzpEgzqDOlc6bzpvOl86jLCDOnM6VzpvOmc6jzqPOmSDOoM6VzpvOm86XzqMsIM6czpXOo86ZzpHOnc6fIM6gzpXOm86bzpfOoywgzp3Olc6fzqMgzpzOpc6bzp/OpM6fzqDOn86jIM6gzpXOm86bzpfOoywgzqDOkc6bzpHOmc6mzqXOpM6fIM6gzpXOm86bzpfOoywgzqDOkc6bzpnOn86jIM6czqXOm86fzqTOn86gzp/OoyDOoM6VzpvOm86XzqMsIM6gzpHOoc6RzpvOmc6czp3OlyDOoM6VzpvOm86XzqMsIM6gzpXOnc6kzpHOoM6bzpHOpM6Rzp3OnyDOoM6VzpvOm86XzqMsIM6gzpvOkc6TzpnOkc6hzpkgzqDOlc6bzpvOl86jLCDOoM6fzp3OpM6fzqfOqc6hzpkgzqDOlc6bzpvOl86jLCDOpM6hzpnOps6lzpvOm86ZIM6gzpXOm86bzpfOoycsIFByZWZlY3R1cmU6ICfOoM6tzrvOu86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzU4MjAwJywgQXJlYTogJ86RzpPOmc6RIM6mzqnOpM6VzpnOnc6XIM6gzpXOm86bzpfOoywgzpHOk86hzpHOoyDOoM6VzpvOm86XzqMsIM6SzqHOpc6kzpEgzqDOlc6bzpvOl86jLCDOlc6UzpXOo86jzpEgzqDOlc6bzpvOl86jLCDOlc6azprOm86XzqPOmc6fzqfOqc6hzpkgzqDOlc6bzpvOl86jLCDOms6RzpnOo86RzqHOmc6Rzp3OkSDOoM6VzpvOm86XzqMsIM6azpHOoc6lzpTOmc6RIM6gzpXOm86bzpfOoywgzprOlc6hzpHOo86ZzpXOoyDOoM6VzpvOm86XzqMsIM6bzqXOms6fzpkgzqDOlc6bzpvOl86jLCDOnM6RzqHOk86RzqHOmc6kzpEgzqDOlc6bzpvOl86jLCDOnM6VzqPOl86czpXOoc6ZIM6gzpXOm86bzpfOoywgzp3Ol86jzpkgzqDOlc6bzpvOl86jLCDOoM6RzpvOkc6ZzpEgzqPOqc6kzpfOoc6RIM6gzpXOm86bzpfOoywgzqDOm86RzqTOkc6dzpcgzqDOlc6bzpvOl86jLCDOoM6hzp/Okc6jzqTOmc6fIM6gzpXOm86bzpfOoywgzqHOmc6WzpHOoc6Zzp8gzqDOlc6bzpvOl86jLCDOo86RzpzOkc6hzpnOnyDOoM6VzpvOm86XzqMsIM6jzqnOpM6XzqHOkSDOoM6VzpvOm86XzqMsIM6lzpTOoc6fzpfOm86VzprOpM6hzpnOms6fzqMgzqPOpM6RzpjOnM6fzqMgzpHOk86hzpEgzqDOlc6bzpvOl86jLCDOps6bzpHOnM6fzqXOoc6ZzpEgzqDOlc6bzpvOl86jJywgUHJlZmVjdHVyZTogJ86gzq3Ou867zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTgzMDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOm86fzqXOms6RzqMgzqDOlc6bzpvOl86jLCDOkc6azqHOn86bzpnOnM6dzpcgzqDOlc6bzpvOl86jLCDOk86RzpvOkc6kzpHOlM6VzqMgzqDOlc6bzpvOl86jLCDOlc6jzqnOks6RzpvOpM6RIM6gzpXOm86bzpfOoywgzprOoc6lzpEgzpLOoc6lzqPOlyDOoM6VzpvOm86XzqMsIM6jzqTOkc6lzqHOn86UzqHOn86czpkgzqDOlc6bzpvOl86jJywgUHJlZmVjdHVyZTogJ86gzq3Ou867zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTg0MDAnLCBBcmVhOiAnzpHOk86RzpjOlyDOoM6VzpvOm86XzqMsIM6RzpvOqc6hzp/OoyDOoM6VzpvOm86XzqMsIM6Rzp3OqSDOk86RzqHOlc6mzpkgzqDOlc6bzpvOl86jLCDOkc6dzqkgzqHOn86UzqnOnc6ZzpEgzqDOlc6bzpvOl86jLCDOkc6hzpnOlM6RzpnOkSDOoM6VzpvOm86XzqMsIM6RzqjOkc6bzp/OoyDOoM6VzpvOm86XzqMsIM6Szp/Ooc6VzpnOnc6fIM6gzpXOm86bzpfOoywgzpPOkc6hzpXOps6VzpnOn86dIM6gzpXOm86bzpfOoywgzpTOn86hzqnOmM6VzpEgzqDOlc6bzpvOl86jLCDOmM6Vzp/OlM6pzqHOkc6azpXOmc6fIM6gzpXOm86bzpfOoywgzpnOlM6RIM6gzpXOm86bzpfOoywgzprOkc6kzqkgzpPOkc6hzpXOps6ZIM6gzpXOm86bzpfOoywgzprOkc6kzqkgzprOn86hzqXOps6XIM6gzpXOm86bzpfOoywgzprOkc6kzqkgzqHOn86UzqnOnc6ZzpEgzqDOlc6bzpvOl86jLCDOms6hzpHOnc6VzpEgzqDOlc6bzpvOl86jLCDOms6pzp3Oo86kzpHOnc6kzpnOkSDOoM6VzpvOm86XzqMsIM6bzp/Opc6kzqHOkSDOm86fzqXOpM6hzpHOms6Zzp/OpSDOoM6VzpvOm86XzqMsIM6bzp/Opc6kzqHOkc6azpkgzqDOlc6bzpvOl86jLCDOm86lzprOn86jzqTOn86czp8gzqDOlc6bzpvOl86jLCDOnM6VzpPOkc6gzpvOkc6kzpHOnc6fzqMgzqDOlc6bzpvOl86jLCDOnM6XzpvOmc6RIM6gzpXOm86bzpfOoywgzpzOn86dzpHOo86kzpfOoc6RzprOmSDOoM6VzpvOm86XzqMsIM6dzpXOn86nzqnOoc6ZIM6gzpXOm86bzpfOoywgzp7Omc6mzpnOkc6dzpcgzqDOlc6bzpvOl86jLCDOn86hzpzOkSDOoM6VzpvOm86XzqMsIM6gzpXOpc6azqnOpM6fIM6gzpXOm86bzpfOoywgzqDOmc6gzpXOoc6ZzpXOoyDOoM6VzpvOm86XzqMsIM6gzp/Om86lzprOkc6hzqDOmc6fIM6gzpXOm86bzpfOoywgzqDOoc6fzpzOkc6nzp/OmSDOoM6VzpvOm86XzqMsIM6hzpnOls6fzqfOqc6hzpkgzqDOlc6bzpvOl86jLCDOo86RzqHOkc6azpfOnc6fzpkgzqDOlc6bzpvOl86jLCDOo86pzqPOkc6dzpTOoc6RIM6gzpXOm86bzpfOoywgzqTOo86RzprOn86ZIM6gzpXOm86bzpfOoywgzqXOlM6hzpHOmc6RIM6gzpXOm86bzpfOoywgzqfOoc6lzqPOkSDOoM6VzpvOm86XzqMsIM6nzqHOpc6jzpcgzqDOlc6bzpvOl86jJywgUHJlZmVjdHVyZTogJ86gzq3Ou867zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTg1MDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6gzpXOm86bzpfOoywgzpHOnc6lzpTOoc6fIM6gzpXOm86bzpfOoywgzpHOoc6jzpXOnc6ZIM6gzpXOm86bzpfOoywgzpHOo86gzqHOnyDOoM6VzpvOm86XzqMsIM6UzpHOps6dzpcgzqDOlc6bzpvOl86jLCDOms6RzpvOlyDOoM6VzpvOm86XzqMsIM6azpHOm86bzpnOoM6fzpvOlyDOoM6VzpvOm86XzqMsIM6azpHOm86lzpLOmc6RIM6gzpXOm86bzpfOoywgzpvOkc6azprOkSDOoM6VzpvOm86XzqMsIM6bzpnOmM6RzqHOmc6RIM6gzpXOm86bzpfOoywgzpvOmc6gzpHOoc6fIM6gzpXOm86bzpfOoywgzpvOmc6gzp/Op86pzqHOmSDOoM6VzpvOm86XzqMsIM6bzp/Opc6kzqHOn86nzqnOoc6ZIM6gzpXOm86bzpfOoywgzpzOkc6dzpTOkc6bzp8gzqDOlc6bzpvOl86jLCDOnM6RzqXOoc6fIM6gzpXOm86bzpfOoywgzpzOkc6lzqHOn86Szp/Opc6dzpkgzqDOlc6bzpvOl86jLCDOnc6VzpEgzpbOqc6XIM6gzpXOm86bzpfOoywgzqDOlc6kzqHOkc6ZzpEgzqDOlc6bzpvOl86jLCDOoM6bzpXOpc6hzqnOnM6RIM6gzpXOm86bzpfOoywgzqDOoc6fzqbOl86kzpfOoyDOl86bzpnOkc6jIM6gzpXOm86bzpfOoywgzqHOmc6Wzp8gzqDOlc6bzpvOl86jLCDOo86Rzp3OlM6RzpvOmSDOoM6VzpvOm86XzqMsIM6jzpXOks6RzqPOpM6ZzpHOnc6RIM6gzpXOm86bzpfOoywgzqPOms6lzpTOoc6RIM6gzpXOm86bzpfOoycsIFByZWZlY3R1cmU6ICfOoM6tzrvOu86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYwMDYyJywgQXJlYTogJ86azp/Ooc6Zzp3On86jIM6gzpnOlc6hzpnOkc6jLCDOoM6RzqHOkc6bzpnOkSDOms6fzqHOmc6dzp/OpSDOoM6ZzpXOoc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOoM65zrXPgc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjAwNjMnLCBBcmVhOiAnzpHOnc6pIM6jzprOn86kzpnOnc6RIM6gzpnOlc6hzpnOkc6jLCDOms6RzpvOpc6SzpnOkSDOks6RzqHOmc6azp/OpSDOoM6ZzpXOoc6ZzpHOoywgzpvOlc6gzqTOn86azpHOoc6lzpEgzqDOmc6VzqHOmc6RzqMsIM6bzpnOnM6Rzp3OmSDOm86ZzqTOn86nzqnOoc6fzqUgzqDOmc6VzqHOmc6RzqMsIM6gzpHOnc6kzpXOm86VzpfOnM6fzp3Okc6jIM6gzpnOlc6hzpnOkc6jLCDOoM6RzqHOkc6bzpnOkSDOo86azp/OpM6Zzp3Okc6jIM6gzpnOlc6hzpnOkc6jLCDOoM6bzpHOms6RIM6gzpnOlc6hzpnOkc6jLCDOoM6fzqHOn86ZIM6gzpnOlc6hzpnOkc6jLCDOo86azp/OpM6Zzp3OkSDOoM6ZzpXOoc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOoM65zrXPgc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjAwNjUnLCBBcmVhOiAnzpHOk86Zzp/OoyDOlM6XzpzOl86kzqHOmc6fzqMgzqDOn86hzqnOnSDOoM6ZzpXOoc6ZzpHOoywgzp3Olc6fzpkgzqDOn86hzp/OmSDOoM6ZzpXOoc6ZzpHOoywgzp3Olc6fzqMgzqDOkc6dzqTOlc6bzpXOl86czp/Onc6RzqMgzqDOmc6VzqHOmc6RzqMsIM6gzpHOoc6RzpvOmc6RIM6gzpHOnc6kzpXOm86VzpfOnM6fzp3OkSDOoM6ZzpXOoc6ZzpHOoywgzqDOm86RzqTOkc6czqnOnc6RzqMgzqDOmc6VzqHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzqDOuc61z4HOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYwMTAwJywgQXJlYTogJ86RzpPOmc6RIM6SzpHOoc6SzpHOoc6RIM6gzpnOlc6hzpnOkc6jLCDOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOoM6VzqTOoc6RzqMgzqDOmc6VzqHOmc6RzqMsIM6RzpPOmc6fzqMgzqPOoM6lzqHOmc6UzqnOnc6RzqMgzqDOmc6VzqHOmc6RzqMsIM6Rzp3OlM6hzp/OnM6RzqfOlyDOoM6ZzpXOoc6ZzpHOoywgzpHOnc6pIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzqDOmc6VzqHOmc6RzqMsIM6Rzp3OqSDOnM6XzpvOlc6RIM6gzpnOlc6hzpnOkc6jLCDOkc6hzqnOnc6RzqMgzqDOmc6VzqHOmc6RzqMsIM6SzqHOmc6RIM6gzpnOlc6hzpnOkc6jLCDOks6hzp/Onc6kzp/OpSDOoM6ZzpXOoc6ZzpHOoywgzpPOkc6dzp/Op86pzqHOkSDOoM6ZzpXOoc6ZzpHOoywgzpTOmc6fzp0gzqDOmc6VzqHOmc6RzqMsIM6VzpvOkc6kzp/Op86pzqHOmSDOoM6ZzpXOoc6ZzpHOoywgzpXOm86RzqbOn86jIM6gzpnOlc6hzpnOkc6jLCDOlc6ezp/Op86XIM6gzpnOlc6hzpnOkc6jLCDOms6RzpvOm86ZzpjOlc6RIM6gzpnOlc6hzpnOkc6jLCDOms6RzqHOmc6kzqPOkSDOoM6ZzpXOoc6ZzpHOoywgzprOkc6hzqXOlc6jIM6gzpnOlc6hzpnOkc6jLCDOms6RzqTOkc6bzqnOnc6ZzpEgzqDOmc6VzqHOmc6RzqMsIM6azpHOpM6VzqHOmc6dzpcgzqDOmc6VzqHOmc6RzqMsIM6azpHOpM6pIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzqDOmc6VzqHOmc6RzqMsIM6azpHOpM6pIM6czpfOm86VzpEgzqDOmc6VzqHOmc6RzqMsIM6azp/Onc6kzpHOoc6ZzqnOpM6ZzqPOo86RIM6gzpnOlc6hzpnOkc6jLCDOms6fzqXOms6azp/OoyDOoM6ZzpXOoc6ZzpHOoywgzpvOkc6Tzp/Ooc6hzpHOp86XIM6gzpnOlc6hzpnOkc6jLCDOm86fzqbOn86jIM6gzpnOlc6hzpnOkc6jLCDOnM6VzpvOmc6RzpTOmc6fIM6gzpnOlc6hzpnOkc6jLCDOnM6XzpvOmc6RIM6czpXOo86RzpnOkSDOoM6ZzpXOoc6ZzpHOoywgzpzOl86bzpnOkSDOoM6ZzpXOoc6ZzpHOoywgzpzOn86jzqfOn86gzp/OpM6RzpzOn86jIM6gzpnOlc6hzpnOkc6jLCDOnM6fzqPOp86fzqfOqc6hzpkgzqDOmc6VzqHOmc6RzqMsIM6dzpXOkSDOlc6mzpXOo86fzqMgzqDOmc6VzqHOmc6RzqMsIM6dzpXOkSDOpM6hzpHOoM6VzpbOn86lzp3OpM6RIM6gzpnOlc6hzpnOkc6jLCDOnc6VzpEgzqfOoc6Rzp3OlyDOoM6ZzpXOoc6ZzpHOoywgzp3Olc6fIM6azpXOoc6RzpzOmc6UzpkgzqDOmc6VzqHOmc6RzqMsIM6dzpXOn86azpHOmc6jzpHOoc6VzpnOkSDOoM6ZzpXOoc6ZzpHOoywgzp3Olc6fzqMgzpHOnc6pIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzqDOmc6VzqHOmc6RzqMsIM6fzpvOpc6czqDOmc6RzprOlyDOkc6azqTOlyDOoM6ZzpXOoc6ZzpHOoywgzqDOkc6bzpHOmc6fIM6VzpvOkc6kzp/Op86pzqHOmSDOoM6ZzpXOoc6ZzpHOoywgzqDOkc6bzpHOmc6fIM6azpXOoc6RzpzOmc6UzpkgzqDOmc6VzqHOmc6RzqMsIM6gzpHOoc6RzpvOmc6RIM6gzpnOlc6hzpnOkc6jLCDOoM6VzqHOmc6jzqTOkc6jzpcgzqDOmc6VzqHOmc6RzqMsIM6gzpXOpM6hzpEgzqDOmc6VzqHOmc6RzqMsIM6gzpvOkc6kzpHOnc6RzprOmc6RIM6gzpnOlc6hzpnOkc6jLCDOoM6hzp/Oo86XzpvOmc6fIM6gzpnOlc6hzpnOkc6jLCDOoc6RzqfOlyDOoM6ZzpXOoc6ZzpHOoywgzqHOl86kzpnOnc6XIM6gzpnOlc6hzpnOkc6jLCDOoc6lzpHOms6ZzpEgzqDOmc6VzqHOmc6RzqMsIM6jzpLOn86hzqnOnc6fzqMgzqDOmc6VzqHOmc6RzqMsIM6jzpXOks6RzqPOpM6XIM6gzpnOlc6hzpnOkc6jLCDOo86azp/OpM6VzpnOnc6RIM6gzpnOlc6hzpnOkc6jLCDOpM6fzp7OnyDOoM6ZzpXOoc6ZzpHOoywgzqTOoc6ZzpvOn86mzp/OoyDOoM6ZzpXOoc6ZzpHOoywgzqbOpM6VzqHOlyDOoM6ZzpXOoc6ZzpHOoywgzqbOqc6kzpXOmc6dzpEgzqDOmc6VzqHOmc6RzqMsIM6ozqXOp86ZzpHOpM6hzpnOms6fIM6dzp/Ooy/OnM6VzpnOnyDOoM6VzqTOoc6RzqMgzp/Om86lzpzOoM6fzqUgzqDOmc6VzqHOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzqDOuc61z4HOr86xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYwMjAwJywgQXJlYTogJ86bzpnOpM6fzqfOqc6hzp8gzqDOmc6VzqHOmc6RzqMsIM6czp/Onc6XIM6RzpPOmc6fzqUgzpTOmc6fzp3Opc6jzpnOn86lIM6gzpnOlc6hzpnOkc6jJywgUHJlZmVjdHVyZTogJ86gzrnOtc+Bzq/Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2MDMwMCcsIEFyZWE6ICfOkc6ZzpPOmc6dzpnOnyDOoM6ZzpXOoc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOoM65zrXPgc6vzrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDgwNjAnLCBBcmVhOiAnzpHOk86ZzpEgzprOpc6hzpnOkc6azpcgzqDOoc6VzpLOlc6WzpHOoywgzpHOk86ZzpEgzqDOkc6hzpPOkc6jIM6gzqHOlc6SzpXOls6RzqMsIM6RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOnc6ZzprOn86gzp/Om86VzqnOoyDOkc6hzqTOkc6jLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzqDOkc6hzpPOkc6jIM6gzqHOlc6SzpXOls6RzqMsIM6Rzp3OmM6fzqXOo86RIM6gzqHOlc6SzpXOls6RzqMsIM6SzqHOpc6jzpXOoyDOoM6hzpXOks6VzpbOkc6jLCDOm86ZzpLOkc6UzpHOoc6ZIM6gzqHOlc6SzpXOls6RzqMsIM6czpHOoc6RzqMgzqDOoc6VzpLOlc6WzpHOoywgzpzOn86hzqbOmc6fIM6YzpXOo86gzqHOqc6kzpnOkc6jLCDOoM6Rzp3Okc6TzpnOkSDOnc6XzqPOn86jIM6gzqHOlc6SzpXOls6RzqMsIM6gzpHOoc6TzpEgzqDOoc6VzpLOlc6WzpHOoywgzqPOkc6hzpHOms6Zzp3Omc6azp8gzqDOoc6VzpLOlc6WzpHOoywgzqPOoM6RzpjOkc6hzpHOmc6fzpkgzpjOlc6jzqDOoc6pzqTOmc6RzqMsIM6kzpbOkc6hzpEgzqDOoc6VzpLOlc6WzpHOoywgzqTOoc6ZzprOn86hzqbOnyDOoM6hzpXOks6VzpbOkc6jLCDOp86hzqXOo86fzpPOmc6RzpvOmSDOoM6hzpXOks6VzpbOkc6jJywgUHJlZmVjdHVyZTogJ86gz4HOrc6yzrXOts6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ4MDYxJywgQXJlYTogJ86RzpvOqc6dzpkgzqDOoc6VzpLOlc6WzpHOoywgzpHOnc6pIM6azp/OpM6jzpHOnc6fzqDOn86lzpvOnyDOoM6hzpXOks6VzpbOkc6jLCDOkc6dzqkgzqHOkc6nzpcgzqDOoc6VzpLOlc6WzpHOoywgzpLOoc6lzqPOn86lzpvOkSDOoM6hzpXOks6VzpbOkc6jLCDOl86bzpnOn86Szp/Opc6dzpkgzpHOoc6kzpHOoywgzprOkc6kzqkgzprOn86kzqPOkc6dzp/OoM6fzqXOm86fIM6gzqHOlc6SzpXOls6RzqMsIM6azpHOpM6pIM6hzpXOpc6czpHOpM6ZzpEgzqDOoc6VzpLOlc6WzpHOoywgzpvOn86lzqHOn86jIM6gzqHOlc6SzpXOls6RzqMsIM6dzpXOnyDOo86mzpfOnc6pzqTOnyDOoM6hzpXOks6VzpbOkc6jLCDOnc6Vzp/OoyDOqc6hzqnOoM6fzqMgzqDOoc6VzpLOlc6WzpHOoywgzqHOlc6lzpzOkc6kzpnOkSDOoM6hzpXOks6VzpbOkc6jLCDOo86VzqHOmc6WzpnOkc6dzpEgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOo86azpnOkc6UzpHOoyDOoM6hzpXOks6VzpbOkc6jLCDOo86kzpXOps6Rzp3OlyDOoM6hzpXOks6VzpbOkc6jLCDOo86lzprOmc6VzqMgzqPOlc6hzpnOls6ZzpHOnc6pzp0gzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOpM6hzpnOms6RzqPOpM6hzp8gzqDOoc6VzpLOlc6WzpHOoycsIFByZWZlY3R1cmU6ICfOoM+Bzq3Oss61zrbOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0ODA2MicsIEFyZWE6ICfOkc6XzpTOn86dzpkgzpHOp86VzqHOn86lzqPOmc6RzqMgzqDOoc6VzpLOlc6WzpHOoywgzpHOl86Uzp/Onc6ZzpEgzqDOoc6VzpLOlc6WzpHOoywgzpHOnM6czp/Opc6UzpnOkSDOoM6hzpXOks6VzpbOkc6jLCDOkc6dzqkgzqPOms6RzqbOmc6UzqnOpM6XIM6gzqHOlc6SzpXOls6RzqMsIM6RzqfOlc6hzp/Opc6jzpnOkSDOoM6hzpXOks6VzpbOkc6jLCDOks6RzpvOkc6dzpnOlM6fzqHOkc6nzpcgzqDOoc6VzpLOlc6WzpHOoywgzpLOkc6bzpHOnc6ZzpTOn86lzqPOo86RIM6gzqHOlc6SzpXOls6RzqMsIM6Szp/Opc6Szp/OoM6fzqTOkc6czp/OoyDOoM6hzpXOks6VzpbOkc6jLCDOks6hzpHOp86fzqMgzqDOoc6VzpLOlc6WzpHOoywgzpTOlc6jzqDOn86kzpnOms6fIM6gzqHOlc6SzpXOls6RzqMsIM6UzpnOms6fzqHOps6fIM6gzqHOlc6SzpXOls6RzqMsIM6VzprOms6bzpfOo86ZzpXOoyDOoM6hzpXOks6VzpbOkc6jLCDOmM6VzpzOlc6bzp8gzqDOoc6VzpLOlc6WzpHOoywgzprOkc6dzpHOm86bzpHOms6ZIM6gzqHOlc6SzpXOls6RzqMsIM6azpHOo86kzqHOmSDOk86fzqHOk86fzpzOpc6bzp/OpSDOkc6hzqTOkc6jLCDOms6RzqPOpM6hzpkgzqDOoc6VzpLOlc6WzpHOoywgzprOkc6kzqkgzpTOlc6jzqDOn86kzpnOms6fIM6gzqHOlc6SzpXOls6RzqMsIM6azpHOpM6pIM6jzprOkc6mzpnOlM6pzqTOlyDOoM6hzpXOks6VzpbOkc6jLCDOms6fzqHOpc6mzp/Opc6bzpEgzqDOoc6VzpLOlc6WzpHOoywgzprOn86hzqnOnc6XIM6gzqHOlc6SzpXOls6RzqMsIM6azp/Ooc6pzp3On86gzp/Opc6bzp8gzqDOoc6VzpLOlc6WzpHOoywgzprOn86lzprOms6fzqXOm86ZIM6gzqHOlc6SzpXOls6RzqMsIM6azqXOqM6VzpvOlyDOoM6hzpXOks6VzpbOkc6jLCDOm86fzqXOpM6jzpEgzqDOoc6VzpLOlc6WzpHOoywgzpvOpc6TzpnOkSDOoM6hzpXOks6VzpbOkc6jLCDOnM6VzqPOn86gzp/OpM6RzpzOnyDOoM6hzpXOks6VzpbOkc6jLCDOnM6fzqXOls6RzprOkc6ZzpnOms6RIM6gzqHOlc6SzpXOls6RzqMsIM6dzpHOoc6azpnOo86jzp/OoyDOoM6hzpXOks6VzpbOkc6jLCDOns6XzqHOn86bzp/Ops6fzqMgzqDOoc6VzpLOlc6WzpHOoywgzqDOkc6hzpHOm86ZzpEgzpLOoc6RzqfOn86lIM6gzqHOlc6SzpXOls6RzqMsIM6gzpHOoc6RzpvOmc6RIM6bzp/Opc6kzqPOkc6jIM6gzqHOlc6SzpXOls6RzqMsIM6jzprOlc6gzpHOo86kzp8gzqDOoc6VzpLOlc6WzpHOoywgzqPOpM6RzqXOoc6fzqfOqc6hzpkgzqDOoc6VzpLOlc6WzpHOoywgzqTOo86VzprOn86lzqHOmSDOoM6hzpXOks6VzpbOkc6jLCDOpM6jzp/Opc6azp3Omc6UzpEgzqDOoc6VzpLOlc6WzpHOoywgzqfOlc6ZzpzOkc6UzpkgzqDOoc6VzpLOlc6WzpHOoywgzqfOn86nzpvOkSDOoM6hzpXOks6VzpbOkc6jJywgUHJlZmVjdHVyZTogJ86gz4HOrc6yzrXOts6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQ4MTAwJywgQXJlYTogJ86RzpPOmc6fzpkgzpHOoM6fzqPOpM6fzpvOn86ZIM6gzqHOlc6SzpXOls6RzqMsIM6RzpPOmc6fzqMgzpjOqc6czpHOoyDOoM6hzpXOks6VzpbOkc6jLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzpzOmc6nzpHOm86ZzqTOo86Zzp/OpSDOoM6hzpXOks6VzpbOkc6jLCDOkc6hzqfOkc6TzpPOlc6bzp/OoyDOoM6hzpXOks6VzpbOkc6jLCDOms6RzpvOkc6czpnOpM6jzpkgzqDOoc6VzpLOlc6WzpHOoywgzprOkc6czpHOoc6Zzp3OkSDOoM6hzpXOks6VzpbOkc6jLCDOms6Rzp3Okc6bzpkgzqDOoc6VzpLOlc6WzpHOoywgzprOkc6jzqTOoc6fzqPOpc6azpnOkSDOoM6hzpXOks6VzpbOkc6jLCDOms6RzqTOqSDOnM6lzqHOo86Zzp3OlyDOoM6hzpXOks6VzpbOkc6jLCDOms6RzqTOqSDOoc6ZzpbOkSDOoM6hzpXOks6VzpbOkc6jLCDOms6hzqXOn86gzpfOk86XIM6gzqHOlc6SzpXOls6RzqMsIM6czpHOls6ZIM6gzqHOlc6SzpXOls6RzqMsIM6czpHOls6pzpzOkSDOoM6hzpXOks6VzpbOkc6jLCDOnM6VzpPOkc6UzpXOnc6UzqHOnyDOoM6hzpXOks6VzpbOkc6jLCDOnM6ZzqfOkc6bzpnOpM6jzpkgzqDOoc6VzpLOlc6WzpHOoywgzpzOpc6hzqPOmc6dzpcgzqDOoc6VzpLOlc6WzpHOoywgzpzOpc6kzpnOms6RzqMgzqDOoc6VzpLOlc6WzpHOoywgzp3Olc6RIM6YzpXOo86XIM6gzqHOlc6SzpXOls6RzqMsIM6dzpXOkSDOo86RzpzOqM6fzqXOnc6kzpEgzqDOoc6VzpLOlc6WzpHOoywgzp3Olc6RIM6jzpnOnc6pzqDOlyDOoM6hzpXOks6VzpbOkc6jLCDOnc6Vzp/Op86pzqHOmSDOoM6hzpXOks6VzpbOkc6jLCDOnc6ZzprOn86gzp/Om86XIM6gzqHOlc6SzpXOls6RzqMsIM6gzpHOnc6kzp/Oms6hzpHOpM6pzqHOkc6jIM6gzqHOlc6SzpXOls6RzqMsIM6gzpfOlM6XzpzOkSDOms6lzqHOkc6jIM6gzqHOlc6SzpXOls6RzqMsIM6gzqHOlc6SzpXOls6RIM6gzqHOlc6SzpXOls6RzqMsIM6gzqHOn86mzpfOpM6XzqMgzpfOm86ZzpHOoyDOoM6hzpXOks6VzpbOkc6jLCDOoc6ZzpbOkSDOoM6hzpXOks6VzpbOkc6jLCDOps6bzpHOnM6gzp/Opc6hzpEgzqDOoc6VzpLOlc6WzpHOoywgzqjOkc6YzpHOms6ZIM6gzqHOlc6SzpXOls6RzqMnLCBQcmVmZWN0dXJlOiAnzqDPgc6tzrLOtc62zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNDgyMDAnLCBBcmVhOiAnzpHOk86ZzpEgzqbOkc6dzpXOoc6pzpzOlc6dzpcgzpHOoc6kzpHOoywgzpHOnM6czp/OpM6fzqDOn86jIM6RzqHOpM6RzqMsIM6RzpzOoM6VzpvOmc6RIM6RzpzOnM6fzqTOn86gzp/OpSDOkc6hzqTOkc6jLCDOkc6dzqkgzpTOoc6lzpzOqc6dzpHOoyDOkc6hzqTOkc6jLCDOkc6dzqnOk86VzpnOkc6kzpEgzpHOoc6kzpHOoywgzpHOnc6pzpPOlc6Zzp8gzpHOoc6kzpHOoywgzpLOkc6YzqUgzpHOoc6kzpHOoywgzpLOn86lzpvOmc6jzqTOkSDOkc6hzqTOkc6jLCDOk86VzqHOn86gzpvOkc6kzpHOnc6fzqMgzpHOoc6kzpHOoywgzpPOms6fzqXOoc6RIM6RzqHOpM6RzqMsIM6Tzp/Ooc6Tzp/OnM6lzpvOn86jIM6RzqHOpM6RzqMsIM6TzqXOnM6dzp/OpM6fzqDOn86jIM6RzqHOpM6RzqMsIM6UzqHOpc6czqnOnc6RzqMgzpHOoc6kzpHOoywgzpTOoc6lzp/Ops6lzqTOnyDOkc6hzqTOkc6jLCDOms6RzpzOoM6XIM6RzqHOpM6RzqMsIM6azpXOoc6RzqPOqc6dzpEgzpHOoc6kzpHOoywgzprOm86VzpnOo86fzqXOoc6RIM6czp/Opc6WzpHOms6RzpnOmc6azqnOnSDOkc6hzqTOkc6jLCDOms6bzpXOmc6jzp/Opc6hzpEgzqbOmc6bzpnOoM6gzpnOkc6Uzp/OoyDOkc6hzqTOkc6jLCDOms6fzqXOms6bzpXOo86ZIM6ZzqnOkc6dzp3Omc6dzqnOnSwgzpzOkc6hzprOkc6kzpXOoyDOkc6hzqTOkc6jLCDOnc6VzpEgzprOlc6hzpHOo86fzqXOnc6kzpEgzpHOoc6kzpHOoywgzp3Olc6fzqMgzpPOn86hzpPOn86czqXOm86fzqMgzpHOoc6kzpHOoywgzqDOkc6ZzpTOn86gzp/Om86XIM6WzpfOoc6fzqUgzpHOoc6kzpHOoywgzqDOkc6dzpHOk86ZzpEgzpHOoc6kzpHOoywgzqDOkc6dzqTOkc6dzpHOo86jzpEgzpHOoc6kzpHOoywgzqDOlc6dzqTOlSDOoM6XzpPOkc6UzpnOkSDOkc6hzqTOkc6jLCDOoM6VzqTOoc6RIM6mzpnOm86ZzqDOoM6ZzpHOlM6fzqMgzpHOoc6kzpHOoywgzqDOn86kzpHOnM6ZzpEgzprOn86lzprOm86VzqPOmc6fzqUgzpnOqc6Rzp3Onc6Zzp3Oqc6dLCDOoc6pzpzOmc6RIM6RzqHOpM6RzqMsIM6jzqTOoc6fzpPOk86lzpvOlyDOkc6hzqTOkc6jLCDOpM6jzpHOk86azpHOoc6fzqDOn86lzpvOnyDOkc6hzqTOkc6jLCDOpc6UzqHOn86XzpvOlc6azqTOoc6ZzprOn86jIM6jzqTOkc6YzpzOn86jIM6bzp/Opc6hzp/OpSDOkc6hzqTOkc6jLCDOps6ZzpvOmc6gzqDOmc6RzpTOkSDOkc6hzqTOkc6jLCDOp86RzpvOmc6azpnOkSDOkc6hzqTOkc6jLCDOp86Rzp3On86gzp/Opc6bzp8gzpHOoc6kzpHOoycsIFByZWZlY3R1cmU6ICfOoM+Bzq3Oss61zrbOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0ODMwMCcsIEFyZWE6ICfOkc6TzpnOkSDOpM6hzpnOkc6UzpEgzqDOn86bzqXOo86kzpHOps6lzpvOn86lIM6gzqHOlc6SzpXOls6RzqMsIM6RzpPOmc6fzpkgzpHOoM6fzqPOpM6fzpvOn86ZIM6gzpHOoM6gzpHOlM6RzqTOqc6dIM6gzqHOlc6SzpXOls6RzqMsIM6RzpPOmc6fzqMgzqPOkc6SzpLOkc6jIM6TzpHOm86RzqTOkSDOoM6hzpXOks6VzpbOkc6jLCDOkc6jzqPOn86jIM6gzqHOlc6SzpXOls6RzqMsIM6TzpHOm86RzqTOkc6jIM6gzqHOlc6SzpXOls6RzqMsIM6TzpHOm86Xzp3OlyDOkc6hzqTOkc6jLCDOlc6bzpHOmc6RIM6gzqHOlc6SzpXOls6RzqMsIM6WzpXOoc6Szp8gzqDOoc6VzpLOlc6WzpHOoywgzpbOl86hzp/OoM6fzpvOlyDOkc6hzqTOkc6jLCDOmM6VzqPOoM6hzqnOpM6ZzprOnyDOoM6hzpXOks6VzpbOkc6jLCDOms6VzqHOkc6jzp/Oks6fIM6RzqHOpM6RzqMsIM6azqHOkc6dzpXOkSDOoM6hzpXOks6VzpbOkc6jLCDOnM6VzpvOmc6Rzp3OkSDOoM6hzpXOks6VzpbOkc6jLCDOnc6ZzprOn86bzpnOpM6jzpkgzqDOoc6VzpLOlc6WzpHOoywgzqDOkc6gzqDOkc6UzpHOpM6VzqMgzqDOoc6VzpLOlc6WzpHOoywgzqDOm86RzqTOkc6dzpnOkSDOoM6hzpXOks6VzpbOkc6jLCDOoM6fzpvOpc6jzqTOkc6mzqXOm86fIM6gzqHOlc6SzpXOls6RzqMsIM6hzpnOls6fzpLOn86lzp3OmSDOoM6hzpXOks6VzpbOkc6jLCDOpM6lzqHOk86ZzpEgzqDOoc6VzpLOlc6WzpHOoycsIFByZWZlY3R1cmU6ICfOoM+Bzq3Oss61zrbOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3NDA1MScsIEFyZWE6ICfOkc6XzpTOn86dzp/Op86pzqHOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6Rzp3Oqc6TzpXOmc6RIM6czqXOm86fzqDOn86kzpHOnM6fzqUgzqHOlc6YzqXOnM6dzp/OpSwgzpHOns6fzqMgzqHOlc6YzqXOnM6dzp/OpSwgzpHOo86kzqXOoc6RzprOmSDOl86hzpHOms6bzpXOmc6fzqUsIM6SzpXOnc6ZIM6hzpXOmM6lzpzOnc6fzqUsIM6TzqnOnc6ZzpXOoyDOnM6RzpvOlc6SzpnOls6Zzp/OpSDOl86hzpHOms6bzpXOmc6fzqUsIM6WzqnOnc6ZzpHOnc6RIM6hzpXOmM6lzpzOnc6fzqUsIM6azpHOm86lzpLOn86jIM6hzpXOmM6lzpzOnc6fzqUsIM6azpHOnM6RzqHOkc6azpkgzpfOoc6RzprOm86VzpnOn86lLCDOms6RzpzOkc6hzpnOqc6kzpfOoyDOl86hzpHOms6bzpXOmc6fzqUsIM6azpHOpM6VzqHOmc6Rzp3OkSDOoc6VzpjOpc6czp3On86lLCDOms6fzqXOoc6fzqXOpM6VzqMgzqHOlc6YzqXOnM6dzp/OpSwgzpvOmc6SzpHOlM6RIM6hzpXOmM6lzpzOnc6fzqUsIM6bzpnOks6RzpTOmc6RIM6hzpXOmM6lzpzOnc6fzqUsIM6czpHOoc6Zzp3Omc6Rzp3OkSDOoc6VzpjOpc6czp3On86lLCDOo86ZzqPOkc6hzqfOkSDOoc6VzpjOpc6czp3On86lJywgUHJlZmVjdHVyZTogJ86hzrXOuM+NzrzOvc63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzc0MDUyJywgQXJlYTogJ86RzpPOk86VzpvOmc6Rzp3OkSDOoc6VzpjOpc6czp3On86lLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzpXOoc6mzqnOnSDOoc6VzpjOpc6czp3On86lLCDOkc6bzqbOkSDOoc6VzpjOpc6czp3On86lLCDOkc6dzqkgzpLOmc6hzpHOnc6VzqDOmc6jzprOn86gzpcgzqHOlc6YzqXOnM6dzp/OpSwgzpHOnc6pIM6kzqHOmc6gzp/OlM6fIM6hzpXOmM6lzpzOnc6fzqUsIM6RzqHOp86RzpnOkSDOlc6bzpXOpc6YzpXOoc6dzpEgzqHOlc6YzqXOnM6dzp/OpSwgzpLOlc6hzpPOmc6Rzp3OkSDOoc6VzpjOpc6czp3On86lLCDOks6ZzqHOkc6dIM6VzqDOmc6jzprOn86gzpcgzqHOlc6YzqXOnM6dzp/OpSwgzpPOkc6hzpnOoM6RzqMgzqHOlc6YzqXOnM6dzp/OpSwgzpTOkc6mzp3OlyDOoc6VzpjOpc6czp3On86lLCDOlc6bzpXOpc6YzpXOoc6dzpEgzqHOlc6YzqXOnM6dzp/OpSwgzpXOoc6mzp/OmSDOoc6VzpjOpc6czp3On86lLCDOms6RzpvOkc6czpHOoyDOoc6VzpjOpc6czp3On86lLCDOms6RzpvOkc6dzpTOkc6hzpUgzqHOlc6YzqXOnM6dzp/OpSwgzprOkc6bzpvOlc6hzpPOn86jIM6hzpXOmM6lzpzOnc6fzqUsIM6azpXOoc6RzpzOqc6kzpEgzqHOlc6YzqXOnM6dzp/OpSwgzprOn86lzqbOlyDOoc6VzpjOpc6czp3On86lLCDOms6lzp3Ol86TzpnOkc6dzpEgzqHOlc6YzqXOnM6dzp/OpSwgzpvOkc6TzprOkSDOoc6VzpjOpc6czp3On86lLCDOm86RzqTOls6ZzpzOkc6jIM6hzpXOmM6lzpzOnc6fzqUsIM6czpHOk86dzpfOo86ZzpEgzqHOlc6YzqXOnM6dzp/OpSwgzpzOkc6hzpPOkc6hzpnOpM6VzqMgzqHOlc6YzqXOnM6dzp/OpSwgzpzOlc6bzpnOlM6fzp3OmSDOoc6VzpjOpc6czp3On86lLCDOnM6VzpvOmc6jzqPOn86lzqHOk86RzprOmSDOoc6VzpjOpc6czp3On86lLCDOn86hzpjOlc6jIM6hzpXOmM6lzpzOnc6fzqUsIM6gzpHOo86RzpvOmc6kzpXOoyDOoc6VzpjOpc6czp3On86lLCDOoM6VzqHOkc6czpEgzqHOlc6YzqXOnM6dzp/OpSwgzqDOmc6Tzp/Opc6dzpnOkc6dzpEgzqHOlc6YzqXOnM6dzp/OpSwgzqDOm86VzqXOoc6ZzpHOnc6RIM6hzpXOmM6lzpzOnc6fzqUsIM6gzqHOmc6dzp/OoyDOoc6VzpjOpc6czp3On86lLCDOoc6fzqXOoM6VzqMgzqHOlc6YzqXOnM6dzp/OpSwgzqPOms6fzqHOlM6ZzpvOnyDOoc6VzpjOpc6czp3On86lLCDOo86azp/Opc6bzp/Opc6mzpnOkSDOoc6VzpjOpc6czp3On86lLCDOo86kzpHOpc6hzqnOnM6Vzp3On86jIM6czqXOm86fzqDOn86kzpHOnM6fzqUgzqHOlc6YzqXOnM6dzp/OpSwgzqTOls6Rzp3Onc6RzprOmc6Rzp3OkSDOoc6VzpjOpc6czp3On86lLCDOp86Rzp3OmSDOkc6bzpXOns6Rzp3OlM6hzp/OpSDOoc6VzpjOpc6czp3On86lLCDOp86Rzp3On86YzpnOkc6dzpEgzqHOlc6YzqXOnM6dzp/OpSwgzqfOn86lzpzOlc6hzpkgzqHOlc6YzqXOnM6dzp/OpScsIFByZWZlY3R1cmU6ICfOoc61zrjPjc68zr3Ot8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3NDA1MycsIEFyZWE6ICfOkc6TzpHOm86ZzpHOnc6fzqMgzqHOlc6YzqXOnM6dzp/OpSwgzpHOk86ZzpEgzqDOkc6hzpHOo86azpXOpc6XIM6RzqHOlM6RzprOpM6fzqUgzqHOlc6YzqXOnM6dzp/OpSwgzpHOk86ZzpEgzqDOlc6bzpHOk86ZzpEgzqHOlc6YzqXOnM6dzp/OpSwgzpHOk86ZzpEgzqbOqc6kzpXOmc6dzpcgzprOlc6hzpHOnM6VIM6hzpXOmM6lzpzOnc6fzqUsIM6RzpPOmc6fzqMgzpLOkc6jzpnOm86VzpnOn86jIM6hzpXOmM6lzpzOnc6fzqUsIM6RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOnM6VzpvOkc6czqDOqc6dIM6hzpXOmM6lzpzOnc6fzqUsIM6RzpPOmc6fzqMgzqDOkc6lzpvOn86jIM6jzpHOms6kzp/Opc6hzpnOqc6dIM6hzpXOmM6lzpzOnc6fzqUsIM6RzpPOms6fzqXOo86VzpvOmc6Rzp3OkSDOoc6VzpjOpc6czp3On86lLCDOkc6azp/Opc6czpnOkSDOoc6VzpjOpc6czp3On86lLCDOkc6azqTOn86lzp3OpM6RIM6hzpXOmM6lzpzOnc6fzqUsIM6Rzp3OqSDOnM6lzp7On86hzqHOn86lzpzOkSDOoc6VzpjOpc6czp3On86lLCDOkc6hzpTOkc6azqTOn86jIM6RzpPOmc6fzqUgzpLOkc6jzpnOm86VzpnOn86lIM6hzpXOmM6lzpzOnc6fzqUsIM6RzqTOo86ZzqDOkc6UzpXOoyDOoc6VzpjOpc6czp3On86lLCDOks6RzqTOn86jIM6hzpXOmM6lzpzOnc6fzqUsIM6SzqHOpc6jzpXOoyDOkc6TzpnOn86lIM6SzpHOo86ZzpvOlc6Zzp/OpSDOoc6VzpjOpc6czp3On86lLCDOlM6RzqHOmc6SzpnOkc6dzpEgzqHOlc6YzqXOnM6dzp/OpSwgzpTOoc6ZzpzOmc6jzprOn86jIM6hzpXOmM6lzpzOnc6fzqUsIM6azpHOoc6Zzp3Olc6jIM6hzpXOmM6lzpzOnc6fzqUsIM6azpHOpM6jzp/Ok86hzpnOlM6RIM6hzpXOmM6lzpzOnc6fzqUsIM6azpHOpM6pIM6jzpHOms6kzp/Opc6hzpnOkSDOoc6VzpjOpc6czp3On86lLCDOms6Vzp3OpM6hzp/Op86pzqHOmSDOoc6VzpjOpc6czp3On86lLCDOms6VzqHOkc6czpXOoyDOoc6VzpjOpc6czp3On86lLCDOms6ZzqPOo86fzqMgzqHOlc6YzqXOnM6dzp/OpSwgzprOmc6jzqPOn86lIM6azpHOnM6gzp/OoyDOoc6VzpjOpc6czp3On86lLCDOms6fzprOms6Zzp3OkSDOp86pzqHOkc6mzpnOkSDOoc6VzpjOpc6czp3On86lLCDOms6hzpHOnc6RIM6hzpXOmM6lzpzOnc6fzqUsIM6azqHOpc6RIM6SzqHOpc6jzpcgzpvOkc6czqDOl86jIM6hzpXOmM6lzpzOnc6fzqUsIM6bzpHOnM6gzpnOnc6XIM6hzpXOmM6lzpzOnc6fzqUsIM6czpXOm86RzpzOoM6VzqMgzqHOlc6YzqXOnM6dzp/OpSwgzpzOn86lzqHOnc6VIM6hzpXOmM6lzpzOnc6fzqUsIM6czqXOns6fzqHOoc6fzqXOnM6RIM6hzpXOmM6lzpzOnc6fzqUsIM6dzpXOkSDOms6hzqXOkSDOks6hzqXOo86XIM6hzpXOmM6lzpzOnc6fzqUsIM6ezpfOoc6fzprOkc6czqDOn86jIM6hzpXOmM6lzpzOnc6fzqUsIM6fzqHOnc6VIM6hzpXOmM6lzpzOnc6fzqUsIM6gzpHOm86RzpnOn86bzp/Opc6kzqHOkSDOoc6VzpjOpc6czp3On86lLCDOoM6RzpvOlSDOoc6VzpjOpc6czp3On86lLCDOoM6Rzp7Omc6czpHOlM6ZzpEgzpTOpc6fIM6hzpXOmM6lzpzOnc6fzqUsIM6gzpHOns6ZzpzOkc6UzpnOkSDOlc6dzpEgzqHOlc6YzqXOnM6dzp/OpSwgzqDOm86RzqTOkc6dzpXOoyDOoc6VzpjOpc6czp3On86lLCDOo86RzprOpM6fzqXOoc6ZzpEgzqHOlc6YzqXOnM6dzp/OpSwgzqPOoM6XzpvOmSDOoc6VzpjOpc6czp3On86lLCDOpM6hzpnOn86gzpXOpM6hzpEgzqHOlc6YzqXOnM6dzp/OpSwgzqbOoc6RzqTOmSDOoc6VzpjOpc6czp3On86lJywgUHJlZmVjdHVyZTogJ86hzrXOuM+NzrzOvc63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzc0MDU1JywgQXJlYTogJ86RzqHOk86lzqHOn86lzqDOn86bzpcgzqHOlc6YzqXOnM6dzp/OpSwgzpHOoc6fzpvOmc6YzpkgzqHOlc6YzqXOnM6dzp/OpSwgzpHOoc6nzp/Onc6kzpnOms6XIM6hzpXOmM6lzpzOnc6fzqUsIM6RzqPOlyDOk86pzp3Omc6RIM6RzqDOn86azp/Ooc6pzp3On86lIM6nzpHOnc6ZzqnOnSwgzpXOoM6ZzqPOms6fzqDOlyDOoc6VzpjOpc6czp3On86lIM6hzpXOmM6lzpzOnc6fzqUsIM6azpHOoc6pzqTOlyDOoc6VzpjOpc6czp3On86lLCDOms6RzqTOqSDOoM6fzqHOn86jIM6hzpXOmM6lzpzOnc6fzqUsIM6azp/Opc6czpcgzqHOlc6YzqXOnM6dzp/OpSwgzpzOkc6hzp/Opc6bzp/OpSDOoc6VzpjOpc6czp3On86lLCDOnM6lzqHOmc6fzprOlc6mzpHOm86RIM6hzpXOmM6lzpzOnc6fzqUsIM6gzqXOoc6Tzp/OoyDOoc6VzpjOpc6czp3On86lJywgUHJlZmVjdHVyZTogJ86hzrXOuM+NzrzOvc63z4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzc0MDYwJywgQXJlYTogJ86RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzpHOk86Zzp/OpSDOks6RzqPOmc6bzpXOmc6fzqUgzqHOlc6YzqXOnM6dzp/OpSwgzpHOnM6czp/Opc6UzpkgzqHOlc6YzqXOnM6dzp/OpSwgzpHOnc6pIM6hzp/OlM6RzprOmc6dzp8gzqHOlc6YzqXOnM6dzp/OpSwgzpHOo86pzpzOkc6kzp/OoyDOoc6VzpjOpc6czp3On86lLCDOlM6RzpzOnc6fzp3OmSDOoc6VzpjOpc6czp3On86lLCDOms6RzpvOlyDOo86lzprOlc6RIM6hzpXOmM6lzpzOnc6fzqUsIM6azpHOm86lzqjOqSDOoc6VzpjOpc6czp3On86lLCDOms6RzpzOoM6fzqMgzqbOn86Zzp3Omc6azpEgzqHOlc6YzqXOnM6dzp/OpSwgzprOkc6dzpXOks6fzqMgzqHOlc6YzqXOnM6dzp/OpSwgzprOkc6kzqkgzpzOn86dzpcgzqDOoc6VzpLOlc6bzpfOoyDOoc6VzpjOpc6czp3On86lLCDOms6RzqTOqSDOoc6fzpTOkc6azpnOnc6fIM6hzpXOmM6lzpzOnc6fzqUsIM6bzpXOpc6azp/Ok86VzpnOkSDOoc6VzpjOpc6czp3On86lLCDOnM6RzqHOmc6fzqUgzqHOlc6YzqXOnM6dzp/OpSwgzpzOpc6hzpjOmc6Rzp3On86jIM6gzpvOkc6azpnOkc6jIM6hzpXOmM6lzpzOnc6fzqUsIM6czqXOoc6YzpnOn86jIM6mzp/Omc6dzpnOms6RIM6hzpXOmM6lzpzOnc6fzqUsIM6gzpHOm86RzpnOkSDOpM6RzpLOlc6hzp3OkSDOoc6VzpjOpc6czp3On86lLCDOoM6ZzqPOqSDOnM6fzp3OlyDOoM6hzpXOks6VzpvOlyDOoc6VzpjOpc6czp3On86lLCDOoM6bzpHOms6ZzpHOoyDOoc6VzpjOpc6czp3On86lLCDOoM6fzpvOpc6hzpnOls6fzqMgzqHOlc6YzqXOnM6dzp/OpSwgzqPOlc6bzpvOmc6RIM6hzpXOmM6lzpzOnc6fzqUsIM6jzp/Opc6UzpEgzqHOlc6YzqXOnM6dzp/OpSwgzqPOp86fzpnOnc6RzqHOmc6RIM6hzpXOmM6lzpzOnc6fzqUsIM6mzp/Omc6dzpnOms6RzqMgzqHOlc6YzqXOnM6dzp/OpScsIFByZWZlY3R1cmU6ICfOoc61zrjPjc68zr3Ot8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3NDA2MScsIEFyZWE6ICfOkc6TzpnOkSDOps6pzqTOlc6Zzp3OlyDOkc6czpHOoc6Zzp/OpSDOoc6VzpjOpc6czp3On86lLCDOkc6czpHOoc6ZIM6hzpXOmM6lzpzOnc6fzqUsIM6Rzp3OqSDOnM6VzqHOn86jIM6hzpXOmM6lzpzOnc6fzqUsIM6RzqDOn86jzqTOn86bzp/OmSDOoc6VzpjOpc6czp3On86lLCDOkc6hzpTOkc6azqTOn86jIM6RzpzOkc6hzpnOn86lIM6hzpXOmM6lzpzOnc6fzqUsIM6SzpnOo86kzpHOk86XIM6hzpXOmM6lzpzOnc6fzqUsIM6SzqHOpc6jzpXOoyDOkc6czpHOoc6Zzp/OpSDOoc6VzpjOpc6czp3On86lLCDOks6pzpvOlc6pzp3Olc6jIM6hzpXOmM6lzpzOnc6fzqUsIM6TzpXOnc6dzpEgzqHOlc6YzqXOnM6dzp/OpSwgzpPOlc6hzpHOms6RzqHOmSDOoc6VzpjOpc6czp3On86lLCDOk86fzqXOoc6Tzp/Opc6Yzp/OmSDOoc6VzpjOpc6czp3On86lLCDOlM6hzqXOk86ZzpXOoyDOoc6VzpjOpc6czp3On86lLCDOlc6bzpXOnc6VzqMgzqHOlc6YzqXOnM6dzp/OpSwgzpjOoc6fzp3On86jIM6hzpXOmM6lzpzOnc6fzqUsIM6azpHOm86fzpPOlc6hzp/OoyDOoc6VzpjOpc6czp3On86lLCDOms6RzqHOlM6RzprOmSDOoc6VzpjOpc6czp3On86lLCDOms6bzpfOo86ZzpTOmSDOoc6VzpjOpc6czp3On86lLCDOnM6VzqHOqc6dzpHOoyDOoc6VzpjOpc6czp3On86lLCDOnM6VzqPOn86dzpfOo86ZzpEgzqHOlc6YzqXOnM6dzp/OpSwgzpzOn86dzpHOo86kzpfOoc6RzprOmSDOoc6VzpjOpc6czp3On86lLCDOnM6fzp3OlyDOkc6jzqnOnM6RzqTOqc6dIM6hzpXOmM6lzpzOnc6fzqUsIM6fzqjOmc6TzpnOkc6jIM6hzpXOmM6lzpzOnc6fzqUsIM6gzpHOnc6kzpHOnc6RzqPOo86RIM6hzpXOmM6lzpzOnc6fzqUsIM6gzpHOpM6jzp/OoyDOoc6VzpjOpc6czp3On86lLCDOp86pzqHOlM6RzprOmc6fIM6hzpXOmM6lzpzOnc6fzqUnLCBQcmVmZWN0dXJlOiAnzqHOtc64z43OvM69zrfPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzQxMDAnLCBBcmVhOiAnzpHOk86ZzpEgzpXOmc6hzpfOnc6XIM6hzpXOmM6lzpzOnc6fzqUsIM6RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOkc6UzpXOm86VIM6hzpXOmM6lzpzOnc6fzqUsIM6RzpPOmc6RIM6kzqHOmc6RzpTOkSDOoc6VzpjOpc6czp3On86lLCDOkc6TzpnOn86jIM6Rzp3OlM6hzpXOkc6jIM6hzpXOmM6lzpzOnc6fzqUsIM6RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOkc6hzpzOlc6dzqnOnSDOoc6VzpjOpc6czp3On86lLCDOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOoc6VzpjOpc6czp3On86lLCDOkc6TzpnOn86jIM6czpHOoc6azp/OoyDOoc6VzpjOpc6czp3On86lLCDOkc6Tzp3OkSDOoc6VzpjOpc6czp3On86lLCDOkc6UzpXOm86VIM6hzpXOmM6lzpzOnc6fzqUsIM6RzpTOlc6bzpnOkc6dzp/OoyDOms6RzpzOoM6fzqMgzqHOlc6YzqXOnM6dzp/OpSwgzpHOnM6dzpHOpM6fzqMgzqHOlc6YzqXOnM6dzp/OpSwgzpHOnM6gzpXOm86RzprOmSDOoc6VzpjOpc6czp3On86lLCDOkc6dzqkgzpLOkc6bzqPOkc6czp/Onc6VzqHOnyDOoc6VzpjOpc6czp3On86lLCDOkc6dzqkgzpzOkc6bzpHOms6Zzp8gzqHOlc6YzqXOnM6dzp/OpSwgzpHOoc6czpXOnc6fzpkgzqHOlc6YzqXOnM6dzp/OpSwgzpHOo86kzpXOoc6ZIM6hzpXOmM6lzpzOnc6fzqUsIM6RzqTOo86ZzqDOn86gzp/Opc6bzp8gzqHOlc6YzqXOnM6dzp/OpSwgzpLOlc6UzpXOoc6fzpkgzqHOlc6YzqXOnM6dzp/OpSwgzpLOmc6fzpvOmSDOp86RzqHOkc6azpkgzqHOlc6YzqXOnM6dzp/OpSwgzpPOkc6bzpvOn86jIM6hzpXOmM6lzpzOnc6fzqUsIM6TzpXOnc6XIM6hzpXOmM6lzpzOnc6fzqUsIM6TzpXOoc6Rzp3Omc6fIM6hzpXOmM6lzpzOnc6fzqUsIM6TzpnOkc6dzp3On86lzpTOmSDOoc6VzpjOpc6czp3On86lLCDOk86fzqXOm86VzpTOmc6Rzp3OkSDOoc6VzpjOpc6czp3On86lLCDOk86pzp3Omc6RIM6hzpXOmM6lzpzOnc6fzqUsIM6UzpnOm86fzqbOnyDOoc6VzpjOpc6czp3On86lLCDOms6RzpLOn86lzqPOmSDOoc6VzpjOpc6czp3On86lLCDOms6RzqDOlc6UzpnOkc6dzpEgzqHOlc6YzqXOnM6dzp/OpSwgzprOkc6hzpUgzqHOlc6YzqXOnM6dzp/OpSwgzprOkc6hzp3Okc6kzpbOlc6jIM6hzpXOmM6lzpzOnc6fzqUsIM6azpHOo86kzpXOm86bzp/OoyDOoc6VzpjOpc6czp3On86lLCDOms6RzqTOqSDOks6RzpvOo86RzpzOn86dzpXOoc6fIM6hzpXOmM6lzpzOnc6fzqUsIM6azpHOpM6pIM6czpHOm86RzprOmc6fIM6hzpXOmM6lzpzOnc6fzqUsIM6azpHOqM6RzpvOmc6Rzp3OkSDOoc6VzpjOpc6czp3On86lLCDOms6fzp7Okc6hzpUgzqHOlc6YzqXOnM6dzp/OpSwgzprOpc6hzpnOkc6dzp3OkSDOoc6VzpjOpc6czp3On86lLCDOm86fzqXOpM6hzpEgzqHOlc6YzqXOnM6dzp/OpSwgzpzOkc6hzp/Opc6bzpHOoyDOoc6VzpjOpc6czp3On86lLCDOnM6VzpPOkc6bzp8gzpzOlc6kzp/Op86ZIM6hzpXOmM6lzpzOnc6fzqUsIM6czpXOo86XIM6hzpXOmM6lzpzOnc6fzqUsIM6czpnOms6hzpEgzpHOnc6pzpPOlc6ZzpEgKM6uIM6Rzp3Oqc6TzpXOmc6RIM6hzpXOmM6lzpzOnc6fzqUpIM6hzpXOmM6lzpzOnc6fzqUsIM6czpnOms6hzp8gzpzOlc6kzp/Op86ZIM6hzpXOmM6lzpzOnc6fzqUsIM6czpnOo86jzpnOoc6ZzpEgzqHOlc6YzqXOnM6dzp/OpSwgzpzOn86dzpcgzpHOoc6azpHOlM6Zzp/OpSDOoc6VzpjOpc6czp3On86lLCDOnM6fzp3On86gzpHOoc6ZIM6hzpXOmM6lzpzOnc6fzqUsIM6czqXOm86fzpkgzqHOlc6YzqXOnM6dzp/OpSwgzpzOpc6hzpjOmc6fzqMgzqPOlc6bzpvOmc6fzqUgzqHOlc6YzqXOnM6dzp/OpSwgzp7Ol86hzp8gzqfOqc6hzpnOnyDOoc6VzpjOpc6czp3On86lLCDOn86hzp/OoyDOoc6VzpjOpc6czp3On86lLCDOoM6RzpPOms6RzpvOn86nzqnOoc6ZIM6hzpXOmM6lzpzOnc6fzqUsIM6gzpHOnc6fzqHOkc6czpEgzqHOlc6YzqXOnM6dzp/OpSwgzqDOlc6hzpnOks6fzpvOmc6RIM6hzpXOmM6lzpzOnc6fzqUsIM6gzpXOpM6hzpXOoyDOoc6VzpjOpc6czp3On86lLCDOoM6XzpPOlyDOoc6VzpjOpc6czp3On86lLCDOoM6XzpPOmc6Rzp3On86jIM6azpHOnM6gzp/OoyDOoc6VzpjOpc6czp3On86lLCDOoM6ZzprOoc6XzqMgzqHOlc6YzqXOnM6dzp/OpSwgzqDOm86RzqTOkc6dzpnOkc6jIM6hzpXOmM6lzpzOnc6fzqUgzqHOlc6YzqXOnM6dzp/OpSwgzqDOoc6RzqPOmc6VzqMgzqHOlc6YzqXOnM6dzp/OpSwgzqDOoc6Zzp3Olc6UzpXOoyDOoc6VzpjOpc6czp3On86lLCDOoM6hzpnOnc6VzqMgzqHOlc6YzqXOnM6dzp/OpSwgzqHOlc6YzqXOnM6dzp8gzqHOlc6YzqXOnM6dzp/OpSwgzqHOn86lzqPOo86fzqPOoM6ZzqTOmSDOoc6VzpjOpc6czp3On86lLCDOo86VzpvOm86Zzp8gzqHOlc6YzqXOnM6dzp/OpSwgzqPOms6RzpvOlc6kzpEgzqHOlc6YzqXOnM6dzp/OpSwgzqPOpM6RzqXOoc6pzpzOlc6dzp/OoyDOkc6hzprOkc6UzpnOn86lIM6hzpXOmM6lzpzOnc6fzqUsIM6jzqbOkc6azpHOms6ZIM6hzpXOmM6lzpzOnc6fzqUsIM6jzqnOnM6RzqTOkc6jIM6hzpXOmM6lzpzOnc6fzqUsIM6kzqHOmc6RIM6czp/Onc6RzqPOpM6XzqHOmc6RIM6hzpXOmM6lzpzOnc6fzqUsIM6kzqPOlc6jzpzOlc6jIM6hzpXOmM6lzpzOnc6fzqUsIM6mzqHOkc6dzqTOls6VzqPOms6ZzpHOnc6RIM6czpXOpM6fzqfOmc6RIM6hzpXOmM6lzpzOnc6fzqUsIM6mzqnOpM6VzpnOnc6fzqMgzqHOlc6YzqXOnM6dzp/OpSwgzqfOkc6czpHOm86VzqXOoc6ZIM6hzpXOmM6lzpzOnc6fzqUsIM6nzpHOoc6azpnOkSDOoc6VzpjOpc6czp3On86lLCDOp86hzp/OnM6fzp3Okc6jzqTOl86hzpkgzqHOlc6YzqXOnM6dzp/OpScsIFByZWZlY3R1cmU6ICfOoc61zrjPjc68zr3Ot8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2OTEwMCcsIEFyZWE6ICfOkc6TzpnOkc6jzpzOkSDOoc6fzpTOn86gzpfOoywgzpHOk86Zzp/OmSDOmM6Vzp/OlM6pzqHOn86ZIM6hzp/OlM6fzqDOl86jLCDOkc6TzqHOn86kzpnOms6fIM6fzqHOps6Rzp3On86kzqHOn86mzpXOmc6fIM6hzp/OlM6fzqDOl86jLCDOkc6UzqHOmc6Rzp3OlyDOoc6fzpTOn86gzpfOoywgzpHOmc6TzpXOmc6hzp/OoyDOoc6fzpTOn86gzpfOoywgzpHOnM6RzqHOkc6dzqTOkSDOoc6fzpTOn86gzpfOoywgzpHOnM6SzqHOn86jzpnOkSDOoc6fzpTOn86gzpfOoywgzpHOnc6Yzp/Op86pzqHOmSDOoc6fzpTOn86gzpfOoywgzpHOnc6pIM6UzqHOn86jzpnOnc6XIM6hzp/OlM6fzqDOl86jLCDOkc6hzpHOpM6fzqMgzqHOn86Uzp/OoM6XzqMsIM6RzqHOlM6VzpnOkSDOoc6fzpTOn86gzpfOoywgzpHOoc6nzp/Onc6kzpnOms6RIM6hzp/OlM6fzqDOl86jLCDOkc6jzqnOnM6RzqTOn86ZIM6hzp/OlM6fzqDOl86jLCDOks6RzprOn86jIM6hzp/OlM6fzqDOl86jLCDOks6hzpHOk86ZzpEgzqHOn86Uzp/OoM6XzqMsIM6TzqHOkc6kzpnOnc6XIM6hzp/OlM6fzqDOl86jLCDOlM6hzqXOnM6XIM6hzp/OlM6fzqDOl86jLCDOlM6lzpzOlyDOoc6fzpTOn86gzpfOoywgzpfOps6RzpnOo86kzp/OoyDOoc6fzpTOn86gzpfOoywgzpjOkc6czp3OkSDOoc6fzpTOn86gzpfOoywgzpjOoc6lzpvOn86hzpnOnyDOoc6fzpTOn86gzpfOoywgzpnOkc6czqDOn86bzpcgzqHOn86Uzp/OoM6XzqMsIM6ZzqPOkc6bzp8gzqHOn86Uzp/OoM6XzqMsIM6ZzqTOlc6RIM6hzp/OlM6fzqDOl86jLCDOms6RzpvOkc6czp/Oms6RzqPOpM6hzp8gzqHOn86Uzp/OoM6XzqMsIM6azpHOm86bzpnOmM6VzpEgzqHOn86Uzp/OoM6XzqMsIM6azpHOm86bzpnOo86kzpcgzqHOn86Uzp/OoM6XzqMsIM6azpHOm86nzpHOoyDOoc6fzpTOn86gzpfOoywgzprOkc6hzqXOlM6ZzpEgzqHOn86Uzp/OoM6XzqMsIM6azpHOpM6pIM6UzqHOn86jzpnOnc6XIM6hzp/OlM6fzqDOl86jLCDOms6XzprOmc6UzpnOnyDOoc6fzpTOn86gzpfOoywgzprOn86czp/OpM6Xzp3OlyDOoc6fzpTOn86gzpfOoywgzprOn86jzpzOmc6fIM6hzp/OlM6fzqDOl86jLCDOms6hzqXOn86dzpXOoc6ZIM6hzp/OlM6fzqDOl86jLCDOm86RzpzOoM6hzp8gzqHOn86Uzp/OoM6XzqMsIM6czpHOpc6hzp/OnM6RzqTOmSDOoc6fzpTOn86gzpfOoywgzpzOlc6TzpEgzpTOn86lzprOkc6kzp8gzqHOn86Uzp/OoM6XzqMsIM6czpXOk86RIM6azqHOkc6dzp/Oks6fzqXOnc6ZIM6hzp/OlM6fzqDOl86jLCDOnM6VzpPOkc6bzpcgzpHOlM6RIM6hzp/OlM6fzqDOl86jLCDOnM6VzpvOlc6kzpcgzqHOn86Uzp/OoM6XzqMsIM6czpXOo86fzqfOqc6hzpkgzqHOn86Uzp/OoM6XzqMsIM6czpXOo86jzp/Opc6dzpcgzqHOn86Uzp/OoM6XzqMsIM6czpnOms6hzp8gzpTOn86lzprOkc6kzp8gzqHOn86Uzp/OoM6XzqMsIM6czpnOms6hzp8gzprOoc6Rzp3On86Szp/Opc6dzpkgzqHOn86Uzp/OoM6XzqMsIM6czpnOms6hzp8gzqDOkc6bzpvOkc6UzpnOnyDOoc6fzpTOn86gzpfOoywgzpzOpc6kzpnOms6RzqMgzqHOn86Uzp/OoM6XzqMsIM6dzpXOkSDOms6RzpvOm86ZzqPOpM6XIM6hzp/OlM6fzqDOl86jLCDOnc6Vzp8gzprOkc6bzpvOpc6dzqTOl86hzpkgzqHOn86Uzp/OoM6XzqMsIM6dzojOnyDOo86ZzpTOl86hzp/Op86pzqHOmSDOoc6fzpTOn86gzpfOoywgzp3Opc6czqbOkc6ZzpEgzqHOn86Uzp/OoM6XzqMsIM6fzpzOl86hzpnOms6fIM6hzp/OlM6fzqDOl86jLCDOoM6RzpPOn86lzqHOmc6RIM6hzp/OlM6fzqDOl86jLCDOoM6RzpvOm86RzpTOmc6fIM6hzp/OlM6fzqDOl86jLCDOoM6RzpzOps6fzqHOnyDOoc6fzpTOn86gzpfOoywgzqDOkc6dzpTOoc6fzqPOn86jIM6hzp/OlM6fzqDOl86jLCDOoM6RzqHOkc6UzpfOnM6XIM6hzp/OlM6fzqDOl86jLCDOoM6RzqTOlc6hzpzOkSDOoc6fzpTOn86gzpfOoywgzqDOn86hzqDOlyDOoc6fzpTOn86gzpfOoywgzqHOmc6WzqnOnM6RIM6hzp/OlM6fzqDOl86jLCDOoc6fzpTOmc6kzpfOoyDOoc6fzpTOn86gzpfOoywgzqPOkc6bzqDOlyDOoc6fzpTOn86gzpfOoywgzqPOkc6hzpHOms6Xzp3OlyDOoc6fzpTOn86gzpfOoywgzqPOmc6UzpfOoc6RzpTOlc6jIM6hzp/OlM6fzqDOl86jLCDOo86kzqXOm86RzqHOmSDOoc6fzpTOn86gzpfOoywgzqPOpc6czpLOn86bzpEgzqHOn86Uzp/OoM6XzqMsIM6jzqfOn86bzpcgzpHOo86kzqXOnc6fzpzOmc6RzqMgzqHOn86Uzp/OoM6XzqMsIM6kzqXOp86XzqHOnyDOoc6fzpTOn86gzpfOoywgzqXOps6Rzp3OpM6VzqMgzqHOn86Uzp/OoM6XzqMsIM6mzqXOm86RzprOkc6jIM6hzp/OlM6fzqDOl86jLCDOps6pzpvOlc6RIM6hzp/OlM6fzqDOl86jJywgUHJlZmVjdHVyZTogJ86hzr/OtM+Mz4DOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2OTIwMCcsIEFyZWE6ICfOkc6czpHOns6RzpTOlc6jIM6hzp/OlM6fzqDOl86jLCDOkc6dzqkgzpHOnM6Rzp7Okc6UzpXOoyDOoc6fzpTOn86gzpfOoywgzpHOo86kzqHOkc6ZzpEgzqHOn86Uzp/OoM6XzqMsIM6TzpHOm86Xzp3OlyDOoc6fzpTOn86gzpfOoywgzpTOmc6RzpvOkc6czqDOlyDOoc6fzpTOn86gzpfOoywgzpTOmc6nzpHOm86RIM6hzp/OlM6fzqDOl86jLCDOlc6lzpjOpc6czp8gzqHOn86Uzp/OoM6XzqMsIM6ZzpHOo86czp/OoyDOoc6fzpTOn86gzpfOoywgzpnOoM6gzpnOms6fIM6hzp/OlM6fzqDOl86jLCDOms6RzpLOn86jIM6hzp/OlM6fzqDOl86jLCDOms6fzqDOpM6VzqHOnyDOoc6fzpTOn86gzpfOoywgzprOoc6lzqPOpM6RzpvOlyDOoc6fzpTOn86gzpfOoywgzpvOl86dzp/OoyDOoc6fzpTOn86gzpfOoywgzpzOlc6TzpEgzqDOmc6jzqTOnyDOoc6fzpTOn86gzpfOoywgzpzOlc6bzpvOmc6kzpHOmc6dzpEgzqHOn86Uzp/OoM6XzqMsIM6czpnOo86nzp/OoyDOoc6fzpTOn86gzpfOoywgzpzOn86dzpHOp86fzpkgzqHOn86Uzp/OoM6XzqMsIM6czqnOo86RzpnOms6fIM6hzp/OlM6fzqDOl86jLCDOoM6Rzp3Olc6gzpnOo86kzpfOnM6Zzp/Opc6gzp/Om86XIM6hzp/OlM6fzqDOl86jLCDOoM6fzpvOpc6Rzp3OmM6fzqMgzqHOn86Uzp/OoM6XzqMsIM6gzp/Om86lzpHOoc6dzp8gzqHOn86Uzp/OoM6XzqMsIM6jzpfOnM6RIM6hzp/OlM6fzqDOl86jLCDOo86pzqPOpM6XzqMgzqHOn86Uzp/OoM6XzqMsIM6kzpHOk86TzpHOmc6fIM6hzp/OlM6fzqDOl86jLCDOpM6RzpvOl86jIM6hzp/OlM6fzqDOl86jLCDOpM6hzpnOms6fzqHOps6fIM6hzp/OlM6fzqDOl86jJywgUHJlZmVjdHVyZTogJ86hzr/OtM+Mz4DOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2OTMwMCcsIEFyZWE6ICfOkc6TzpnOn86nzqnOoc6ZIM6hzp/OlM6fzqDOl86jLCDOkc6TzqHOkSDOoc6fzpTOn86gzpfOoywgzpHOlc6kzp/Oms6fzqHOps6XIM6hzp/OlM6fzqDOl86jLCDOkc6VzqTOn86bzp/Ops6fzqMgzqHOn86Uzp/OoM6XzqMsIM6RzpzOps6ZzpEgzqHOn86Uzp/OoM6XzqMsIM6Rzp3OqSDOkc6jzprOl86kzpXOoyDOoc6fzpTOn86gzpfOoywgzpHOnc6pIM6azpHOnM6gzpcgzqHOn86Uzp/OoM6XzqMsIM6RzqHOmc6jzpLOlyDOoc6fzpTOn86gzpfOoywgzpHOoc6hzpnOkc6dzpEgzqHOn86Uzp/OoM6XzqMsIM6RzqHOo86RzprOlc6Zzp8gzqHOn86Uzp/OoM6XzqMsIM6RzqPOms6XzqTOlc6jIM6hzp/OlM6fzqDOl86jLCDOkc6kzpHOoc6dzpcgzpXOks6hzp/OpSwgzpHOpc6hzpEgzpXOks6hzp/OpSwgzpLOlc6bzprOmc6fIM6hzp/OlM6fzqDOl86jLCDOks6fzqXOoc6bzpEgzqHOn86Uzp/OoM6XzqMsIM6UzpHOoc6czpXOnc6XIM6hzp/OlM6fzqDOl86jLCDOlM6VzpnOm86Zzp3OkSDOoc6fzpTOn86gzpfOoywgzpTOmc6pzp3OlyDOoc6fzpTOn86gzpfOoywgzpTOn86azp/OoyDOoc6fzpTOn86gzpfOoywgzpTOoc6fzqPOmc6RIM6hzp/OlM6fzqDOl86jLCDOlc6SzqHOmc6dzp/OoyDOoc6fzpTOn86gzpfOoywgzpXOo86fzqfOlyDOoc6fzpTOn86gzpfOoywgzpfOoM6Zzp8gzqHOn86Uzp/OoM6XzqMsIM6ZzpHOo86Zzp8gzqHOn86Uzp/OoM6XzqMsIM6azpHOnM6gzp/OoyDOoc6fzpTOn86gzpfOoywgzprOkc6jzqPOmc6kzpXOoc6RIM6hzp/OlM6fzqDOl86jLCDOms6RzqTOqSDOms6RzpzOoM6XIM6hzp/OlM6fzqDOl86jLCDOms6VzqHOkc6jzpnOkSDOms6VzqfOoc6fzqUgzqHOn86Uzp/OoM6XzqMsIM6azpXOoc6RzqPOmc6RIM6jzqnOo86kzp/OpSDOoc6fzpTOn86gzpfOoywgzprOlc6nzqHOn86jIM6hzp/OlM6fzqDOl86jLCDOms6ZzpbOkc6hzpnOnyDOoc6fzpTOn86gzpfOoywgzprOmc6dzqXOoc6RIM6hzp/OlM6fzqDOl86jLCDOms6ZzqHOms6XIM6VzpLOoc6fzqUsIM6azp/OnM6RzqHOn86jIM6VzpLOoc6fzqUsIM6azqHOqc6SzqXOm86XIM6hzp/OlM6fzqDOl86jLCDOm86fzqbOkc6hzpnOnyDOoc6fzpTOn86gzpfOoywgzpvOpc6azpXOmc6fIM6hzp/OlM6fzqDOl86jLCDOnM6VzqPOpM6XIM6VzpLOoc6fzqUsIM6czpnOms6hzp8gzqDOmc6jzqTOnyDOoc6fzpTOn86gzpfOoywgzpzOmc6azqHOn86jIM6azpXOp86hzp/OoyDOoc6fzpTOn86gzpfOoywgzpzOn86dzpHOo86kzpfOoc6ZIM6hzp/OlM6fzqDOl86jLCDOnM6lzqPOpM6RzprOkc6jIM6hzp/OlM6fzqDOl86jLCDOnc6VzpEgzqPOkc6dzqTOkSDOoc6fzpTOn86gzpfOoywgzp3Olc6UzpEgzqHOn86Uzp/OoM6XzqMsIM6dzpXOpc6hzpEgzqHOn86Uzp/OoM6XzqMsIM6dzpnOms6XzqTOlc6jIM6hzp/OlM6fzqDOl86jLCDOoM6RzpvOkc6ZzpEgzprOoc6pzpLOpc6bzpcgzqHOn86Uzp/OoM6XzqMsIM6gzpHOoc6RzpvOmc6RIM6azqHOqc6SzqXOm86XIM6hzp/OlM6fzqDOl86jLCDOoM6RzqPOo86fzqMgzqHOn86Uzp/OoM6XzqMsIM6gzpXOoc6RzpzOkSDOlc6SzqHOn86lLCDOoM6VzqTOoc6pzqTOkSDOoc6fzpTOn86gzpfOoywgzqDOm86RzpPOmc6RIM6hzp/OlM6fzqDOl86jLCDOoM6hzqnOpM6RzqTOnyDOoc6fzpTOn86gzpfOoywgzqHOkc6TzpHOlM6RIM6hzp/OlM6fzqDOl86jLCDOo86RzqDOlc6jIM6hzp/OlM6fzqDOl86jLCDOo86azpHOm86pzpzOkSDOoc6fzpTOn86gzpfOoywgzqPOms6ZzpHOlM6RIM6hzp/OlM6fzqDOl86jLCDOo86kzpHOmM6cT86jIM6RzpvOlc6ezpHOnc6UzqHOn86lzqDOn86bzpfOoyDOlc6SzqHOn86lLCDOo86kzqHOn86mzpcgzqHOn86Uzp/OoM6XzqMsIM6jzqTOoc6lzpzOlyDOoc6fzpTOn86gzpfOoywgzqPOpc6azp/Ooc6RzqfOlyDOlc6SzqHOn86lLCDOpM6jzpnOps6bzpnOms6ZIM6hzp/OlM6fzqDOl86jLCDOpM6jzp/Opc6azpEgzqHOn86Uzp/OoM6XzqMsIM6mzpnOm86bzqXOoc6RIM6hzp/OlM6fzqDOl86jLCDOp86RzpzOl86bzp8gzprOlc6nzqHOn86lIM6hzp/OlM6fzqDOl86jLCDOp86RzpzOl86bzp8gzqPOkc6gzqnOnSDOoc6fzpTOn86gzpfOoywgzqfOkc6hzpHOlM6hzpEgzqHOn86Uzp/OoM6XzqMsIM6nzpvOn86XIM6hzp/OlM6fzqDOl86jJywgUHJlZmVjdHVyZTogJ86hzr/OtM+Mz4DOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2OTQwMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6nzpHOoc6RzpvOkc6czqDOn86jIM6hzp/OlM6fzqDOl86jLCDOkc6bzprOpc6pzp0gzqHOn86Uzp/OoM6XzqMsIM6RzpvOnM6lzqHOn86jIM6hzp/OlM6fzqDOl86jLCDOkc6czqDOlc6bzpHOms6ZzpEgzqHOn86Uzp/OoM6XzqMsIM6SzpXOnc6dzpEgzqHOn86Uzp/OoM6XzqMsIM6VzqHOk86Rzp3OlyDOoc6fzpTOn86gzpfOoywgzpnOnM6VzqHOn86jIM6hzp/OlM6fzqDOl86jLCDOm86VzqXOms6VzqMgzqHOn86Uzp/OoM6XzqMsIM6czpHOoc6pzp3Olc6ZzpEgzqHOn86Uzp/OoM6XzqMsIM6czpnOoc6Rzp3OkSDOoc6fzpTOn86gzpfOoywgzp3Olc6RIM6gzpXOpM6hzpEgzqHOn86Uzp/OoM6XzqMsIM6ezqXOm86RzpPOkc6dzpcgzqHOn86Uzp/OoM6XzqMsIM6gzpXOm86RzpPOmc6RIM6hzp/OlM6fzqDOl86jLCDOoM6bzpHOpM6Rzp3Omc6kzpfOoyDOoc6fzpTOn86gzpfOoywgzqDOoc6fzqPOms6lzp3Ol86kzpXOoyDOoc6fzpTOn86gzpfOoywgzqDOoc6fzqbOl86kzpfOoyDOl86bzpnOkc6jIM6hzp/OlM6fzqDOl86jLCDOo86RzpvOnM6pzp3OlyDOoc6fzpTOn86gzpfOoywgzqPOpM6RzpjOnM6fzqMgzpLOlc6dzp3Okc6jIM6hzp/OlM6fzqDOl86jJywgUHJlZmVjdHVyZTogJ86hzr/OtM+Mz4DOt8+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MzEwMCcsIEFyZWE6ICfOkc6TzpnOkSDOls6pzp3OlyDOo86RzpzOn86lLCDOkc6TzpnOkSDOnM6RzqHOms6VzpvOm86RIM6jzpHOnM6fzqUsIM6RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOo86RzpzOn86lLCDOkc6TzpnOkSDOpM6hzpnOkc6UzpEgzqPOkc6czp/OpSwgzpHOlyDOmM6Rzp3Okc6jzpfOoyDOo86RzpzOn86lLCDOkc6hzpPOpc6hzp/OoyDOo86RzpzOn86lLCDOkc6lzpvOkc6azpnOkSDOks6fzqXOoc6bzpnOqc6kzqnOnSDOo86RzpzOn86lLCDOks6RzpjOpSDOo86RzpzOn86lLCDOks6RzqHOlc6bzpvOkSDOo86RzpzOn86lLCDOks6fzqXOoc6bzpnOqc6kzpXOoyDOo86RzpzOn86lLCDOlM6ZzpHOoM6fzqHOpM6ZIM6jzpHOnM6fzqUsIM6UzqHOn86jzpnOkSDOo86RzpzOn86lLCDOls6VzqHOks6fzqUgzqPOkc6czp/OpSwgzpbOqc6fzpTOn86nzp/OoyDOoM6XzpPOlyDOo86RzpzOn86lLCDOms6RzpzOkc6hzpEgKM6SzpHOmM6lKSDOo86RzpzOn86lLCDOms6RzpzOoM6fzqMgzpLOn86lzqHOm86ZzqnOpM6pzp0gzqPOkc6czp/OpSwgzprOkc6jzp/Onc6XzqPOmSDOo86RzpzOn86lLCDOms6VzpTOoc6fIM6jzpHOnM6fzqUsIM6azpvOl86czpEgzqPOkc6czp/OpSwgzprOn86azprOkc6hzpkgzqPOkc6czp/OpSwgzprOn86lzpzOkc6hzpnOqc6dzpHOoyDOo86RzpzOn86lLCDOnM6RzprOoc6fzp3Ol86jzp8gzqPOkc6czp/OpSwgzpzOkc6hzpPOkc6hzpnOpM6VzqMgzqPOkc6czp/OpSwgzpzOlc6jzp/Oms6RzpzOoM6fzqMgzqPOkc6czp/OpSwgzpzOn86dzpcgzpLOoc6fzp3OpM6RIM6jzpHOnM6fzqUsIM6czqnOoc6RzpnOpM6fzqfOqc6hzpkgzqPOkc6czp/OpSwgzp3Omc6azp/Om86RIM6jzpHOnM6fzqUsIM6gzpHOm86RzpnOn86azpHOo86kzqHOnyDOo86RzpzOn86lLCDOoM6Rzp3Okc6ZzqTOo86RIM6jzpHOnM6fzqUsIM6gzpXOpM6RzpvOmc6UzpXOoyDOo86RzpzOn86lLCDOoM6fzqPOlc6ZzpTOqc6dzpnOnyDOo86RzpzOn86lLCDOoM6hzpHOo86fzp3Ol86jzpkgzqPOkc6czp/OpSwgzqPOkc6czp/OoyDOo86RzpzOn86lLCDOo86kzqHOn86TzpPOpc6bzp8gzpLOkc6YzpXOqc6jIM6jzpHOnM6fzqUsIM6kzp/Opc6hzprOn86czqXOm86pzp3Okc6jIM6jzpHOnM6fzqUsIM6mzpvOn86azpEgzqPOkc6czp/OpSwgzqfOkc6hzpHOpc6TzpcgzqPOkc6czp/OpSwgzqjOmc6bzpcgzpHOnM6czp/OoyDOo86RzpzOn86lJywgUHJlZmVjdHVyZTogJ86jzqzOvM6/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzgzMTAyJywgQXJlYTogJ86RzpPOmc6RIM6azqXOoc6ZzpHOms6XIM6jzpHOnM6fzqUsIM6SzpXOm86Rzp3Omc6UzpnOkSDOnM6RzqHOkc6Yzp/Oms6RzpzOoM6fzqUgzqPOkc6czp/OpSwgzpTOoc6RzprOkc6Zzp/OmSDOo86RzpzOn86lLCDOmc6jzqnOnM6RzqTOkSDOo86RzpzOn86lLCDOms6RzpvOm86ZzpjOlc6RIM6jzpHOnM6fzqUsIM6azpHOnM6gzp/OoyDOo86RzpzOn86lIM6jzpHOnM6fzqUsIM6azpHOnM6gzp/OoyDOo86azp/Opc6hzpHOmc6azqnOnSDOo86RzpzOn86lLCDOm86ZzpzOnc6ZzqnOnc6RzqMgzqPOkc6czp/OpSwgzpzOkc6hzpHOmM6fzprOkc6czqDOn86jIM6jzpHOnM6fzqUsIM6fzqHOnM6fzqMgzpHOk86Zzp/OpSDOmc6jzpnOlM6pzqHOn86lIM6jzpHOnM6fzqUsIM6fzqHOnM6fzqMgzpzOkc6hzpHOmM6fzprOkc6czqDOn86lIM6jzpHOnM6fzqUsIM6gzpHOm86RzpnOn86nzqnOoc6ZIM6jzpHOnM6fzqUsIM6jzpXOks6RzqPOpM6RzpnOmc6azpEgzqPOkc6czp/OpScsIFByZWZlY3R1cmU6ICfOo86szrzOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MzEwMycsIEFyZWE6ICfOkc6SzpHOnc6kzpkgzqPOkc6czp/OpSwgzpLOlc6hzpPOlyDOo86RzpzOn86lLCDOk86ZzqnOnc6ZzpTOlc6jIM6jzpHOnM6fzqUsIM6XzqHOkc6Zzp8gzqPOkc6czp/OpSwgzprOkc6hzqDOn86Szp/Om86fzqMgzqPOkc6czp/OpSwgzprOn86bzp/Onc6RIM6jzpHOnM6fzqUsIM6azqXOoc6TzpnOkc6dzp3OlyDOo86RzpzOn86lLCDOnM6RzqXOoc6RzqTOls6RzpnOn86ZIM6jzpHOnM6fzqUsIM6czp/Onc6XIM6czpXOk86RzpvOl86jIM6gzpHOnc6RzpPOmc6RzqMgzqPOkc6czp/OpSwgzpzOn86dzpcgzqTOmc6czpnOn86lIM6jzqTOkc6lzqHOn86lIM6jzpHOnM6fzqUsIM6czqXOm86fzpkgzqPOkc6czp/OpSwgzp3Olc6RIM6gzp/Om86XIM6jzpHOnM6fzqUsIM6gzpHOk86pzp3OlM6RzqMgzqPOkc6czp/OpSwgzqDOn86kzp/Oms6RzprOmSDOo86RzpzOn86lLCDOoM6fzqXOnc6kzpXOoyDOo86RzpzOn86lLCDOoM6lzpjOkc6Tzp/Ooc6VzpnOnyDOo86RzpzOn86lLCDOoc6ZzpbOn86SzqHOkc6nzp/OoyDOo86RzpzOn86lLCDOo86lzprOmc6RIM6jzpHOnM6fzqUsIM6nzqnOoc6RIM6jzpHOnM6fzqUnLCBQcmVmZWN0dXJlOiAnzqPOrM68zr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODMxMDQnLCBBcmVhOiAnzpHOoM6fzqPOpM6fzpvOn86jIM6gzpHOpc6bzp/OoyDOo86RzpzOn86lLCDOks6VzpvOkc6dzpnOlM6ZzpEgzprOn86lzpzOkc6ZzpnOms6pzp0gzqPOkc6czp/OpSwgzprOkc6bzp/Ok86VzqHOmc6azp8gzqPOkc6czp/OpSwgzprOn86lzpzOkc6ZzpnOms6RIM6jzpHOnM6fzqUsIM6azp/Opc6czpHOoc6RzpTOkc6Zzp/OmSDOo86RzpzOn86lLCDOm86ZzpzOnc6fzp3Okc6azpkgzqPOkc6czp/OpSwgzpzOlc6jzp/Ok86VzpnOnyDOo86RzpzOn86lLCDOnM6VzqTOn86nzpkgzqPOkc6czp/OpSwgzp3Olc6fzqfOqc6hzpkgzqPOkc6czp/OpSwgzp/Ooc6czp/OoyDOms6fzqXOnM6RzpnOmc6azqnOnSDOo86RzpzOn86lLCDOoM6Rzp3OlM6hzp/Oo86fIM6jzpHOnM6fzqUsIM6gzpXOoc6hzpcgzqPOkc6czp/OpSwgzqDOlc6lzprOn86jIM6jzpHOnM6fzqUsIM6gzqXOoc6Tzp/OoyDOo86RzpzOn86lLCDOo86RzpzOmc6fzqDOn86lzpvOkSDOnc6XzqPOn86jIM6jzpHOnM6fzqUsIM6jzprOn86lzqHOkc6ZzpnOms6RIM6jzpHOnM6fzqUsIM6jzqDOkc6YzpHOoc6RzpnOn86ZIM6jzpHOnM6fzqUnLCBQcmVmZWN0dXJlOiAnzqPOrM68zr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODMyMDAnLCBBcmVhOiAnzpHOk86Zzp/OmSDOmM6Vzp/OlM6pzqHOn86ZIM6jzpHOnM6fzqUsIM6RzpPOmc6fzqMgzpTOl86czpfOpM6hzpnOn86jIM6jzpHOnM6fzqUsIM6RzpPOmc6fzqMgzpfOm86ZzpHOoyDOo86RzpzOn86lLCDOkc6TzpnOn86jIM6azqnOnc6jzqTOkc6dzqTOmc6dzp/OoyDOo86RzpzOn86lLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzprOkc6hzpvOn86SzpHOo86Zzp/OpSDOo86RzpzOn86lLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzp3Ol86jzp/OoyDOo86RzpzOn86lLCDOkc6TzpnOn86jIM6gzpHOnc6kzpXOm86VzpfOnM6pzp0gzqPOkc6czp/OpSDOo86RzpzOn86lLCDOkc6czqDOlc6bzp/OoyDOo86RzpzOn86lLCDOkc6jzqDOoc6fzqfOn86hzqTOmSDOo86RzpzOn86lLCDOks6RzpvOlc6fzp3OpM6RzpTOlc6jIM6jzpHOnM6fzqUsIM6SzqHOpc6jzpXOoyDOms6fzp3OpM6RzprOkc6ZzprOqc6dIM6jzpHOnM6fzqUsIM6TzpHOm86RzpbOmc6fIM6jzpHOnM6fzqUsIM6azpHOoc6bzp/Oks6RzqPOmSDOo86RzpzOn86lLCDOms6RzqPOpM6Rzp3Olc6RIM6jzpHOnM6fzqUsIM6azp/Onc6kzpHOmc6ZzprOkSDOo86RzpzOn86lLCDOms6fzp3OpM6RzprOkc6ZzpnOms6RIM6jzpHOnM6fzqUsIM6azp/Oo86czpHOlM6RzpnOn86ZIM6jzpHOnM6fzqUsIM6bzpXOms6RIM6jzpHOnM6fzqUsIM6bzpnOks6RzpTOkc6azpkgzqPOkc6czp/OpSwgzpzOkc6dzp/Om86RzqTOlc6jIM6jzpHOnM6fzqUsIM6czp/Onc6XIM6gzqHOn86mzpfOpM6XIM6XzpvOmc6RIM6jzpHOnM6fzqUsIM6dzpXOnyDOms6RzqHOm86fzpLOkc6jzpkgzqPOkc6czp/OpSwgzp3Omc6azp/Om86fzqXOlM6VzqMgzqPOkc6czp/OpSwgzqDOm86RzqTOkc6dzp/OoyAozpLOkc6YzqUpIM6jzpHOnM6fzqUsIM6gzpvOkc6kzpHOnc6fzqMgzprOkc6hzpvOn86SzpHOo86Zzp/OpSDOo86RzpzOn86lLCDOoM6fzqTOkc6czpkgzqPOkc6czp/OpSwgzqPOkc6azprOn86lzpvOkc6ZzpnOms6RIM6jzpHOnM6fzqUsIM6jzp/Opc6hzpfOlM6VzqMgzqPOkc6czp/OpSwgzqPOpM6RzqXOoc6Zzp3Ol86UzpXOoyDOo86RzpzOn86lLCDOpc6UzqHOn86lzqPOo86RIM6jzpHOnM6fzqUsIM6nzpHOpM6WzpfOo86kzpHOnM6fzqXOm86XzpTOlc6jIM6jzpHOnM6fzqUnLCBQcmVmZWN0dXJlOiAnzqPOrM68zr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODMzMDAnLCBBcmVhOiAnzpHOk86ZzpEgzprOpc6hzpnOkc6azpcgzqDOlc6hzpTOmc6azpnOn86lIM6jzpHOnM6fzqUsIM6RzpPOmc6fzqMgzprOl86hzqXOms6fzqMgzqPOkc6czp/OpSwgzpHOk86Zzp/OoyDOoM6Rzp3OpM6VzpvOlc6XzpzOqc6dIM6ZzprOkc6hzpnOkc6jIM6jzpHOnM6fzqUsIM6SzpHOoc6UzpHOoc6RzpTOlc6jIM6jzpHOnM6fzqUsIM6SzpHOqc6dzpcgzqPOkc6czp/OpSwgzpXOns6pIM6mzpHOoc6fzqMgzqPOkc6czp/OpSwgzpjOlc6hzpzOkSDOm86VzqXOms6RzpTOkc6jIM6ZzprOkc6hzpnOkc6jIM6jzpHOnM6fzqUsIM6YzpXOoc6czpEgzqPOkc6czp/OpSwgzprOkc6kzpHOps6lzpPOmc6fIM6jzpHOnM6fzqUsIM6azpnOn86dzpnOnyDOo86RzpzOn86lLCDOm86RzqHOlM6RzpTOlc6jIM6jzpHOnM6fzqUsIM6bzpnOks6RzpTOmSDOo86RzpzOn86lLCDOnM6RzqXOoc6RzqTOnyDOo86RzpzOn86lLCDOnM6RzqXOoc6ZzprOkc6kzp8gzqPOkc6czp/OpSwgzpzOl86bzpXOqc6gzp8gzqPOkc6czp/OpSwgzpzOn86dzpcgzpvOlc6lzprOkc6UzpHOoyDOlc6lzpHOk86TzpXOm86ZzqPOnM6fzqMgzqPOkc6czp/OpSwgzpzOn86dzp/Oms6RzpzOoM6Zzp8gzqPOkc6czp/OpSwgzp7Opc6bzp/Oo86lzqHOpM6XzqMgzqPOkc6czp/OpSwgzp/Ons6VzpEgzqPOkc6czp/OpSwgzqDOlc6hzpTOmc6azpkgzqPOkc6czp/OpSwgzqDOm86RzpPOmc6RIM6RzpMuzprOl86hzqXOms6fzqUgzqPOkc6czp/OpSwgzqDOm86fzqXOnM6RzqHOmSDOo86RzpzOn86lLCDOpM6jzp/Opc6hzpXOlM6VzqMgzqPOkc6czp/OpSwgzqbOkc6dzpHOoc6ZIM6jzpHOnM6fzqUsIM6nzqHOpc6jzp/Oo86kzp/OnM6fzqMgzqPOkc6czp/OpScsIFByZWZlY3R1cmU6ICfOo86szrzOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MzMwMScsIEFyZWE6ICfOkc6TzpnOn86jIM6UzpfOnM6XzqTOoc6Zzp/OoyDOmc6azpHOoc6ZzpHOoyDOo86RzpzOn86lLCDOkc6TzpnOn86jIM6gzp/Om86lzprOkc6hzqDOn86jIM6jzpHOnM6fzqUsIM6RzpzOkc6bzp8gzqPOkc6czp/OpSwgzpHOoc6czpXOnc6ZzqPOpM6XzqMgzqHOkc6nzqnOnSDOo86RzpzOn86lLCDOks6hzpHOms6RzpTOlc6jIM6hzpHOp86pzp0gzqPOkc6czp/OpSwgzpPOmc6RzpvOmc6jzprOkc6hzpkgzqHOkc6nzqnOnSDOo86RzpzOn86lLCDOms6RzpvOkc6czp/OoyDOo86RzpzOn86lLCDOms6RzqHOlc6jIM6hzpHOp86pzp0gzqPOkc6czp/OpSwgzprOkc6hzprOmc6dzpHOk86hzpkgzqPOkc6czp/OpSwgzprOkc6jzqTOkc6dzpnOlc6jIM6hzpHOp86pzp0gzqPOkc6czp/OpSwgzprOkc6kzqkgzqHOkc6nzpXOoyDOo86RzpzOn86lLCDOms6fzqXOnc6ZzpHOlM6fzpkgzqHOkc6nzqnOnSDOo86RzpzOn86lLCDOm86RzpPOms6RzpTOkSDOoc6RzqfOqc6dIM6jzpHOnM6fzqUsIM6bzpHOqM6RzqfOkc6UzpXOoyDOoc6RzqfOqc6dIM6jzpHOnM6fzqUsIM6bzp/OnM6SzpHOoc6UzpHOlM6VzqMgzqPOkc6czp/OpSwgzpzOkc6TzpPOkc6dzpnOpM6XzqMgzqPOkc6czp/OpSwgzpzOkc6dzpTOoc6ZzpEgzqHOkc6nzqnOnSDOo86RzpzOn86lLCDOnM6RzqXOoc6ZzpHOnc6dzp/OoyDOoc6RzqfOqc6dIM6jzpHOnM6fzqUsIM6czp/Onc6XIM6czp/Opc6dzqTOlSDOo86RzpzOn86lLCDOnc6Rzp3On86lzqHOkc6jIM6jzpHOnM6fzqUsIM6ezpfOnc6kzpEgzqHOkc6nzqnOnSDOo86RzpzOn86lLCDOoM6VzpbOmc6fIM6hzpHOp86pzp0gzqPOkc6czp/OpSwgzqDOoc6fzpXOo86gzpXOoc6RIM6hzpHOp86pzp0gzqPOkc6czp/OpSwgzqDOoc6fzqbOl86kzpfOoyDOl86bzpnOkc6jIM6hzpHOp86pzp0gzqPOkc6czp/OpSwgzqTOoc6RzqDOkc6bzp8gzqPOkc6czp/OpSwgzqTOo86RzprOkc6UzpXOoyDOoc6RzqfOqc6dIM6jzpHOnM6fzqUsIM6nzqHOmc6jzqTOn86jIM6hzpHOp86pzp0gzqPOkc6czp/OpScsIFByZWZlY3R1cmU6ICfOo86szrzOv8+FJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc4MzMwMicsIEFyZWE6ICfOkc6TzpnOkSDOms6lzqHOmc6RzprOlyDOlc6lzpTOl86bzp/OpSDOo86RzpzOn86lLCDOkc6azpHOnM6RzqTOoc6RIM6jzpHOnM6fzqUsIM6RzqHOlc6Yzp/Opc6jzpEgzqPOkc6czp/OpSwgzpHOpc6bzpHOms6ZIM6hzpHOp86pzp0gzqPOkc6czp/OpSwgzpTOkc6mzp3OlyDOo86RzpzOn86lLCDOlM6VzprOkc6azpnOkSDOo86RzpzOn86lLCDOlM6hzp/Opc6kzqPOn86lzpvOkc6jIM6jzpHOnM6fzqUsIM6VzqXOlM6XzpvOn86jIM6jzpHOnM6fzqUsIM6azpHOm86RzpzOn86dzpHOoc6ZIM6jzpHOnM6fzqUsIM6azpHOm86RzpzOn86lzqHOmc6UzpEgzqPOkc6czp/OpSwgzprOkc6czqDOn86jIM6ZzprOkc6hzpnOkc6jIM6jzpHOnM6fzqUsIM6azpHOoc6RzpLOn86jzqTOkc6czp8gzqPOkc6czp/OpSwgzprOlc6hzpHOnM6VzpnOnyDOo86RzpzOn86lLCDOms6fzqPOn86ZzprOmc6RIM6jzpHOnM6fzqUsIM6azqHOlc6czpHOo86kzpcgzqPOkc6czp/OpSwgzprOpc6gzpHOoc6ZzqPOo86ZIM6RzqHOlc6Yzp/Opc6jzpHOoyDOo86RzpzOn86lLCDOms6lzqDOkc6hzpnOo86jzpkgzqPOkc6czp/OpSwgzpzOkc6hzpHOmM6fIM6jzpHOnM6fzqUsIM6ezpHOnc6YzpcgzpnOms6RzqHOmc6RzqMgzqPOkc6czp/OpSwgzqDOlc6hzpEgzpHOoc6VzpjOn86lzqPOkSDOo86RzpzOn86lLCDOoM6XzpPOlyDOo86RzpzOn86lLCDOoM6bzpHOk86ZzpEgzpTOkc6mzp3Ol86jIM6jzpHOnM6fzqUsIM6jzqTOkc6SzpvOn86jIM6jzpHOnM6fzqUsIM6jzqTOlc6bzpkgzqPOkc6czp/OpSwgzqbOn86Zzp3Omc6azpHOoyDOo86RzpzOn86lLCDOps6hzpHOnc6kzpHOpM6fIM6jzpHOnM6fzqUsIM6mzqXOpM6VzpzOkSDOo86RzpzOn86lJywgUHJlZmVjdHVyZTogJ86jzqzOvM6/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzgzNDAwJywgQXJlYTogJ86RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzpjOlc6hzpzOkc6jzqTOl86jIM6jzpHOnM6fzqUsIM6RzpPOmc6fzqMgzpzOl86dzpHOoyDOnc6XzqPOn86jIM6jzpHOnM6fzqUsIM6RzpvOkc6kzp/Onc6XzqPOmSDOo86RzpzOn86lLCDOkc6dzpjOoc6pzqDOn86mzpHOoyDOo86RzpzOn86lLCDOlM6RzqbOnc6fzpvOmc6VzqMgzqbOn86lzqHOnc6pzp0gzqPOkc6czp/OpSwgzpjOpc6czpHOmc6dzpEgzp3Ol86jzp/OoyDOo86RzpzOn86lLCDOmM6lzpzOkc6Zzp3Okc6azpkgzqbOn86lzqHOnc6pzp0gzqPOkc6czp/OpSwgzprOkc6czpHOoc6ZIM6mzp/Opc6hzp3Oqc6dIM6jzpHOnM6fzqUsIM6azpHOnM6gzpkgzqbOn86lzqHOnc6pzp0gzqPOkc6czp/OpSwgzprOkc6czqDOmSDOp86hzqXOo86fzpzOl86bzpXOkc6jIM6mzp/Opc6hzp3Oqc6dIM6jzpHOnM6fzqUsIM6azpXOoc6RzpzOlc6ZzpTOn86lIM6mzp/Opc6hzp3Oqc6dIM6jzpHOnM6fzqUsIM6azpnOo86XzqHOmc6RIM6jzpHOnM6fzqUsIM6czpHOms6hzp/Onc6XzqPOmSDOo86RzpzOn86lLCDOnM6ZzprOoc6fzqMgzpHOnc6YzqHOqc6gzp/Ops6RzpPOn86jIM6jzpHOnM6fzqUsIM6gzpvOkc6TzpnOkSDOps6fzqXOoc6dzqnOnSDOo86RzpzOn86lLCDOoM6bzpHOms6RIM6jzpHOnM6fzqUsIM6gzpvOkc6azpHOms6ZIM6jzpHOnM6fzqUsIM6jzqTOoc6fzpPOk86lzpvOnyDOps6fzqXOoc6dzqnOnSDOo86RzpzOn86lLCDOps6fzqXOoc6dzp/OmSDOnc6XzqPOn86jIM6jzpHOnM6fzqUsIM6nzqHOpc6jzp/OnM6XzpvOlc6RIM6mzp/Opc6hzp3Oqc6dIM6jzpHOnM6fzqUnLCBQcmVmZWN0dXJlOiAnzqPOrM68zr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjIwNDEnLCBBcmVhOiAnzpTOn86czpnOoc6fzqMgzqPOlc6hzqHOqc6dLCDOnM6ZzprOoc6fIM6jzp/Opc6bzpkgzqPOlc6hzqHOqc6dLCDOnc6VzpEgzqbOpc6bzpcgzqPOlc6hzqHOqc6dLCDOoM6RzpvOkc6Zzp/Oms6pzpzOlyDOo86VzqHOoc6pzp0sIM6hzp/OlM6fzpvOmc6Szp/OoyDOo86VzqHOoc6pzp0nLCBQcmVmZWN0dXJlOiAnzqPOtc+Bz4HPjs69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2MjA0MicsIEFyZWE6ICfOkc6TzqHOmc6Rzp3OlyDOo86VzqHOoc6pzp0sIM6UzpfOnM6XzqTOoc6RIM6jzpXOoc6hzqnOnSwgzpzOlc6jzp/Ooc6hzpHOp86XIM6jzpXOoc6hzqnOnSwgzp3Olc6RIM6WzpnOp86dzpcgzqPOlc6hzqHOqc6dLCDOo86azp/OoM6ZzpEgzqPOlc6hzqHOqc6dLCDOo86mzpXOm86Zzp3On86jIM6jzpXOoc6hzqnOnScsIFByZWZlY3R1cmU6ICfOo861z4HPgc+Ozr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYyMDQ3JywgQXJlYTogJ86RzpPOk86ZzqPOpM6RIM6jzpXOoc6hzqnOnSwgzpHOnc6pIM6jzqXOnM6Szp/Om86XIM6jzpXOoc6hzqnOnSwgzpfOm86Zzp/Oms6pzpzOlyDOo86VzqHOoc6pzp0sIM6azp/Ooc6czpnOo86kzpEgzqPOlc6hzqHOqc6dLCDOms6hzpfOnc6ZzpTOkSDOo86VzqHOoc6pzp0sIM6czp/Onc6XIM6VzpnOms6fzqPOmc6mzp/Omc6dzpnOo86jzpfOoyDOo86VzqHOoc6pzp0sIM6dzpXOkSDOnM6gzpHOps6hzpEgzqPOlc6hzqHOqc6dLCDOoM6hzqnOpM6XIM6jzpXOoc6hzqnOnSwgzqPOpc6czpLOn86bzpcgzqPOlc6hzqHOqc6dJywgUHJlZmVjdHVyZTogJ86jzrXPgc+Bz47OvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjIwNDknLCBBcmVhOiAnzpHOk86Zzp/OoyDOlM6XzpzOl86kzqHOmc6fzqMgzqPOlc6hzqHOqc6dLCDOkc6XzpTOn86dzp/Op86pzqHOmSDOo86VzqHOoc6pzp0sIM6VzqXOms6RzqHOoM6ZzpEgzqPOlc6hzqHOqc6dLCDOmc6SzpfOoc6RIM6jzpXOoc6hzqnOnSwgzpzOkc6lzqHOn86YzpHOm86RzqPOo86RIM6jzpXOoc6hzqnOnSwgzqTOoc6RzpPOmc6bzp/OoyDOo86VzqHOoc6pzp0nLCBQcmVmZWN0dXJlOiAnzqPOtc+Bz4HPjs69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2MjA1NScsIEFyZWE6ICfOkc6dzqkgzqDOn86hzp/Omc6RIM6jzpXOoc6hzqnOnSwgzprOkc6bzp/Op86pzqHOmSDOo86VzqHOoc6pzp0sIM6azpHOo86kzpHOnc6fzqXOo86jzpEgzqPOlc6hzqHOqc6dLCDOms6RzqTOqSDOoM6fzqHOn86ZzpEgzqPOlc6hzqHOqc6dLCDOms6VzqHOms6Zzp3OlyDOo86VzqHOoc6pzp0sIM6bzpnOks6RzpTOmc6RIM6jzpXOoc6hzqnOnSwgzpzOkc6azqHOmc6dzpnOpM6jzpEgzqPOlc6hzqHOqc6dLCDOnM6fzp3Okc6jzqTOl86hzpHOms6ZIM6jzpXOoc6hzqnOnSwgzp3Olc6fzqfOqc6hzpkgzqPOmc6dzqTOmc6azpfOoyDOo86VzqHOoc6pzp0sIM6gzpHOnc6RzpPOmc6RIM6czpHOms6hzpnOnc6ZzqTOo86RzqMgzqPOlc6hzqHOqc6dLCDOoM6bzpHOpM6Rzp3Okc6azpnOkSDOo86VzqHOoc6pzp0sIM6jzpnOlM6XzqHOn86nzqnOoc6ZIM6jzpXOoc6hzqnOnSwgzqPOpM6RzqXOoc6fzpTOoc6fzpzOmSDOo86VzqHOoc6pzp0nLCBQcmVmZWN0dXJlOiAnzqPOtc+Bz4HPjs69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2MjEwMCcsIEFyZWE6ICfOkc6TzpnOkSDOlc6bzpXOnc6XIM6jzpXOoc6hzqnOnSwgzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOo86VzqHOoc6pzp0sIM6RzpTOlc6bzqbOmc6azp8gzqPOlc6hzqHOqc6dLCDOkc6dzqkgzpLOoc6fzp3OpM6fzqUgzqPOlc6hzqHOqc6dLCDOkc6dzqkgzprOkc6czpfOm86RIM6jzpXOoc6hzqnOnSwgzpHOnc6pIM6fzqHOlc6Zzp3OlyDOo86VzqHOoc6pzp0sIM6SzpHOm86kzp/OpM6fzqDOmSDOo86VzqHOoc6pzp0sIM6SzpHOnM6SzpHOms6fzqXOo86jzpEgzqPOlc6hzqHOqc6dLCDOlc6bzpHOmc6pzp3Okc6jIM6jzpXOoc6hzqnOnSwgzpXOoM6kzpHOnM6lzpvOn86ZIM6jzpXOoc6hzqnOnSwgzprOkc6bzpEgzpTOlc6dzpTOoc6RIM6jzpXOoc6hzqnOnSwgzprOkc6kzqkgzprOkc6czpfOm86RIM6jzpXOoc6hzqnOnSwgzprOkc6kzqkgzpzOlc6kzp/Op86ZIM6jzpXOoc6hzqnOnSwgzprOkc6kzqkgzpzOl86kzqHOn86lzqPOmSDOo86VzqHOoc6pzp0sIM6azpHOpM6pIM6nzqHOmc6jzqTOn86jIM6jzpXOoc6hzqnOnSwgzprOn86lzpLOn86lzprOm86Zzp8gzqPOlc6hzqHOqc6dLCDOms6fzqXOnM6RzqHOmc6RIM6jzpXOoc6hzqnOnSwgzprOoc6Zzp3On86jIM6jzpXOoc6hzqnOnSwgzprOqc6dzqPOpM6Rzp3OpM6Zzp3Okc6kzp8gzqPOlc6hzqHOqc6dLCDOm86VzqXOms6pzp3Okc6jIM6jzpXOoc6hzqnOnSwgzpzOkc6hzpzOkc6hzpHOoyDOo86VzqHOoc6pzp0sIM6czpXOo86fzprOqc6czpcgzqPOlc6hzqHOqc6dLCDOnM6XzqTOoc6fzqXOo86ZIM6jzpXOoc6hzqnOnSwgzpzOn86dzpcgzqTOmc6czpnOn86lIM6gzqHOn86UzqHOn86czp/OpSDOo86VzqHOoc6pzp0sIM6czp/Onc6fzpLOoc6lzqPOlyDOo86VzqHOoc6pzp0sIM6czp/Onc6fzprOms6bzpfOo86ZzpEgzqPOlc6hzqHOqc6dLCDOnc6VzpEgzqTOpc6hzp/Om86fzpcgzqPOlc6hzqHOqc6dLCDOnc6Vzp8gzqPOn86lzpvOmSDOo86VzqHOoc6pzp0sIM6dzpXOn86nzqnOoc6ZIM6jzpXOoc6hzqnOnSwgzp7Ol86hzp/OpM6fzqDOn86jIM6jzpXOoc6hzqnOnSwgzp/Omc6dzp/Opc6jzqPOkSDOo86VzqHOoc6pzp0sIM6fzqHOlc6Zzp3OlyDOo86VzqHOoc6pzp0sIM6gzpHOoc6RzpvOmc6czp3Omc6fIM6jzpXOoc6hzqnOnSwgzqDOlc6gzp/Onc6ZzpEgzqPOlc6hzqHOqc6dLCDOoM6hzp/Oks6RzqTOkc6jIM6jzpXOoc6hzqnOnSwgzqPOlc6hzqHOlc6jIM6jzpXOoc6hzqnOnSwgzqPOms6fzqTOn86lzqPOo86RIM6jzpXOoc6hzqnOnSwgzqPOms6fzqXOpM6RzqHOmSDOo86VzqHOoc6pzp0sIM6nzpnOn86dzp/Op86pzqHOmSDOo86VzqHOoc6pzp0sIM6nzqHOpc6jzp/OoM6XzpPOlyDOo86VzqHOoc6pzp0sIM6ozqXOp86ZzprOnyDOo86VzqHOoc6pzp0nLCBQcmVmZWN0dXJlOiAnzqPOtc+Bz4HPjs69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2MjEyMScsIEFyZWE6ICfOo86VzqHOoc6VzqMgzqPOlc6hzqHOqc6dJywgUHJlZmVjdHVyZTogJ86jzrXPgc+Bz47OvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjIxMjInLCBBcmVhOiAnzqPOlc6hzqHOlc6jIM6jzpXOoc6hzqnOnScsIFByZWZlY3R1cmU6ICfOo861z4HPgc+Ozr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYyMTIzJywgQXJlYTogJ86jzpXOoc6hzpXOoyDOo86VzqHOoc6pzp0nLCBQcmVmZWN0dXJlOiAnzqPOtc+Bz4HPjs69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2MjEyNCcsIEFyZWE6ICfOo86VzqHOoc6VzqMgzqPOlc6hzqHOqc6dJywgUHJlZmVjdHVyZTogJ86jzrXPgc+Bz47OvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjIxMjUnLCBBcmVhOiAnzqPOlc6hzqHOlc6jIM6jzpXOoc6hzqnOnScsIFByZWZlY3R1cmU6ICfOo861z4HPgc+Ozr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYyMjAwJywgQXJlYTogJ86RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOo86VzqHOoc6pzp0sIM6Rzp3OmM6XIM6jzpXOoc6hzqnOnSwgzpHOp86Zzp3On86jIM6jzpXOoc6hzqnOnSwgzpLOlc6hzpPOlyDOo86VzqHOoc6pzp0sIM6UzpHOps6dzpcgzqPOlc6hzqHOqc6dLCDOlM6XzpzOl86kzqHOmc6kzqPOmSDOo86VzqHOoc6pzp0sIM6WzpXOoc6Szp/Op86pzqHOmSDOo86VzqHOoc6pzp0sIM6YzpXOoc6czpEgzqPOlc6hzqHOqc6dLCDOms6RzqPOpM6Rzp3On86nzqnOoc6ZIM6jzpXOoc6hzqnOnSwgzpvOkc6TzprOkc6UzpkgzqPOlc6hzqHOqc6dLCDOm86VzqXOms6fzqTOn86gzp/OoyDOo86VzqHOoc6pzp0sIM6bzqXOk86RzqHOmc6RIM6jzpXOoc6hzqnOnSwgzp3Omc6TzqHOmc6kzpEgzqPOlc6hzqHOqc6dLCDOnc6ZzprOn86azpvOlc6ZzpEgzqPOlc6hzqHOqc6dLCDOn86hzpXOo86azpXOmc6RIM6jzpXOoc6hzqnOnSwgzqDOkc6kzqHOmc6azpnOnyDOo86VzqHOoc6pzp0sIM6jzpfOo86RzpzOmc6RIM6jzpXOoc6hzqnOnSwgzqPOmc6kzp/Op86pzqHOmSDOo86VzqHOoc6pzp0sIM6kzpXOoc6gzp3OlyDOo86VzqHOoc6pzp0sIM6mzpvOkc6czqDOn86lzqHOnyDOo86VzqHOoc6pzp0sIM6nzp/Opc6czp3Omc6azp8gzqPOlc6hzqHOqc6dJywgUHJlZmVjdHVyZTogJ86jzrXPgc+Bz47OvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjIzMDAnLCBBcmVhOiAnzpHOk86azpnOo86kzqHOnyDOo86VzqHOoc6pzp0sIM6RzqfOm86RzpTOn86nzqnOoc6ZIM6jzpXOoc6hzqnOnSwgzpLOkc6czpLOkc6azp/Ops6lzqTOnyDOo86VzqHOoc6pzp0sIM6TzpXOps6lzqHOn86lzpTOmSDOo86VzqHOoc6pzp0sIM6YzpXOoc6czp/OoM6XzpPOlyDOo86VzqHOoc6pzp0sIM6azpHOnM6RzqHOqc6kzp8gzqPOlc6hzqHOqc6dLCDOms6RzqDOnc6fzqbOpc6kzp8gzqPOlc6hzqHOqc6dLCDOms6RzqHOpc6Uzp/Op86pzqHOmSDOo86VzqHOoc6pzp0sIM6azpHOpM6pIM6RzpzOoM6VzpvOmc6RIM6jzpXOoc6hzqnOnSwgzpvOn86lzqTOoc6RIM6jzpnOlM6XzqHOn86azpHOo86kzqHOn86lIM6jzpXOoc6hzqnOnSwgzpzOlc6bzpXOnc6ZzprOmc6kzqPOmSDOo86VzqHOoc6pzp0sIM6gzpHOm86RzpnOn86azpHOo86kzqHOnyDOo86VzqHOoc6pzp0sIM6gzqHOn86czpHOp86pzp3Okc6jIM6jzpXOoc6hzqnOnSwgzqPOmc6UzpfOoc6fzprOkc6jzqTOoc6fIM6jzpXOoc6hzqnOnSwgzqPOpM6RzpjOnM6fzqMgzqPOmc6UzpfOoc6fzprOkc6jzqTOoc6fzqUgzqPOlc6hzqHOqc6dLCDOo86kzqHOpc6czp/Onc6fzqfOqc6hzpkgzqPOlc6hzqHOqc6dLCDOo86nzpnOo86kzp/Om86ZzpjOn86jIM6jzpXOoc6hzqnOnSwgzqbOkc6ZzpEgzqDOlc6kzqHOkSDOo86VzqHOoc6pzp0sIM6nzpHOoc6fzqDOnyDOo86VzqHOoc6pzp0sIM6nzp/Ooc6kzpXOoc6fIM6jzpXOoc6hzqnOnScsIFByZWZlY3R1cmU6ICfOo861z4HPgc+Ozr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYyNDAwJywgQXJlYTogJ86RzpzOnM6fzqXOlM6ZzpEgzqPOlc6hzqHOqc6dLCDOkc6dzpHOk86Vzp3Onc6XzqPOlyDOo86VzqHOoc6pzp0sIM6SzpHOm86kzpXOoc6fIM6jzpXOoc6hzqnOnSwgzpLOkc6czpLOkc6azpnOkSDOo86VzqHOoc6pzp0sIM6UzpHOo86fzqfOqc6hzpkgzqPOlc6hzqHOqc6dLCDOl86hzpHOms6bzpXOmc6RIM6jzpXOoc6hzqnOnSwgzprOkc6hzqDOlc6hzpcgzqPOlc6hzqHOqc6dLCDOms6fzpnOnM6XzqPOlyDOo86VzqHOoc6pzp0sIM6bzpnOmM6fzqTOn86gzp/OoyDOo86VzqHOoc6pzp0sIM6bzpnOnM6dzp/Op86pzqHOmSDOo86VzqHOoc6pzp0sIM6gzp/Onc6kzpnOo86czpXOnc6fIM6jzpXOoc6hzqnOnSwgzqPOkc6hzpHOms6RzqTOo86Rzp3Okc6ZzpnOms6fIM6jzpXOoc6hzqnOnSwgzqPOmc6czqnOnc6RzqMgzqPOlc6hzqHOqc6dLCDOp86VzpnOnM6RzqHOoc6fzqMgzqPOlc6hzqHOqc6dLCDOp86hzqXOo86fzqfOqc6hzpHOps6RIM6jzpXOoc6hzqnOnSwgzqjOqc6czp/OpM6fzqDOmSDOo86VzqHOoc6pzp0nLCBQcmVmZWN0dXJlOiAnzqPOtc+Bz4HPjs69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MjAzMCcsIEFyZWE6ICfOnM6VzpPOkc6bzpEgzprOkc6bzqXOks6ZzpEgzqTOoc6ZzprOkc6bzqnOnScsIFByZWZlY3R1cmU6ICfOpM+BzrnOus6szrvPic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MjAzMScsIEFyZWE6ICfOk86hzpnOls6Rzp3OnyDOpM6hzpnOms6RzpvOqc6dLCDOls6RzqHOms6fzqMgzqTOoc6ZzprOkc6bzqnOnSwgzprOlc6hzpHOnM6ZzpTOmSDOpM6hzpnOms6RzpvOqc6dLCDOms6bzp/Oms6fzqTOn86jIM6kzqHOmc6azpHOm86pzp0sIM6gzpHOnc6RzpPOmc6kzqPOkSDOpM6hzpnOms6RzpvOqc6dLCDOoM6Xzp3Olc6ZzpHOoyDOpM6hzpnOms6RzpvOqc6dLCDOps6RzqHOms6RzpTOqc6dzpEgzqTOoc6ZzprOkc6bzqnOnScsIFByZWZlY3R1cmU6ICfOpM+BzrnOus6szrvPic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc0MjAzMicsIEFyZWE6ICfOkc6TzpnOn86jIM6SzpfOo86jzpHOoc6ZzqnOnSDOpM6hzpnOms6RzpvOqc6dLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzpXOm86RzqTOl86jIM6kzqHOmc6azpHOm86pzp0sIM6RzpPOmc6fzqMgzpTOl86czpfOpM6hzpnOn86jIM6hzp/OoM6fzqTOn86lIM6kzqHOmc6azpHOm86pzp0sIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzqHOn86gzp/OpM6fzqUgzqTOoc6ZzprOkc6bzqnOnSwgzpHOk86Zzp/OoyDOms6pzp3Oo86kzpHOnc6kzpnOnc6fzqMgzqTOoc6ZzprOkc6bzqnOnSwgzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6kzqHOmc6azpHOm86pzp0sIM6RzpPOmc6fzqMgzqDOoc6fzprOn86gzpnOn86jIM6kzqHOmc6azpHOm86pzp0sIM6Rzp3OqSDOoM6RzpvOkc6Zzp/Oms6RzqHOpc6RIM6kzqHOmc6azpHOm86pzp0sIM6SzpHOms6RzqHOmSDOlM6VzqPOl86jIM6kzqHOmc6azpHOm86pzp0sIM6SzpvOkc6kzpHOnc6Vzp/OmSDOpM6hzpnOms6RzpvOqc6dLCDOks6bzpHOp86RIM6kzqHOmc6azpHOm86pzp0sIM6SzqHOn86dzqTOlc6hzp8gzqTOoc6ZzprOkc6bzqnOnSwgzpTOlc6jzpcgzqTOoc6ZzprOkc6bzqnOnSwgzpTOoc6fzqPOn86nzqnOoc6ZIM6kzqHOmc6azpHOm86pzp0sIM6VzpvOkc6kzpcgzqTOoc6ZzprOkc6bzqnOnSwgzpbOqc6TzqHOkc6mzpHOmc6ZzprOkSDOpM6hzpnOms6RzpvOqc6dLCDOmc6jzpnOqc6czpHOpM6RIM6kzqHOmc6azpHOm86pzp0sIM6azpHOm86bzpnOmM6VzpEgzqDOpc6dzpTOkc6ZzqnOnSDOpM6hzpnOms6RzpvOqc6dLCDOms6RzpvOn86TzpfOoc6fzpkgzqTOoc6ZzprOkc6bzqnOnSwgzprOkc6hzqXOlc6jIM6jzqTOn86lzqHOnc6RzqHOkc6ZzprOqc6dIM6kzqHOmc6azpHOm86pzp0sIM6azpHOo86kzpHOnc6VzpEgzqPOpM6fzqXOoc6dzpHOoc6RzpnOmc6azqnOnSDOpM6hzpnOms6RzpvOqc6dLCDOms6RzqTOqSDOoM6RzpvOkc6Zzp/Oms6RzqHOpc6RIM6kzqHOmc6azpHOm86pzp0sIM6azp/OpM6hzqnOnc6Zzp8gzqTOoc6ZzprOkc6bzqnOnSwgzpvOn86TzpPOmc6VzqMgzprOn86kzqHOqc6dzpnOn86lIM6kzqHOmc6azpHOm86pzp0sIM6bzp/Ok86TzpnOlc6jIM6hzp/OoM6fzqTOn86lIM6kzqHOmc6azpHOm86pzp0sIM6czpXOo86XIM6gzpHOm86RzpnOn86azpHOoc6lzpEgzqTOoc6ZzprOkc6bzqnOnSwgzpzOn86dzpcgzpTOn86lzqPOmc6azp/OpSDOpM6hzpnOms6RzpvOqc6dLCDOnM6fzp3OlyDOms6fzpnOnM6XzqPOlc6pzqMgzpjOlc6fzqTOn86azp/OpSDOk86azp/Opc6hzpHOoyDOpM6hzpnOms6RzpvOqc6dLCDOnc6VzqHOkc6ZzpTOn86nzqnOoc6ZIM6kzqHOmc6azpHOm86pzp0sIM6ezqXOm86fzqfOqc6hzpkgzqTOoc6ZzprOkc6bzqnOnSwgzqDOkc6bzpHOmc6fzqfOqc6hzpkgzqDOpc6dzpTOkc6ZzqnOnSDOpM6hzpnOms6RzpvOqc6dLCDOoM6Rzp3Okc6TzpnOkSDOoM6lzp3OlM6RzpnOqc6dIM6kzqHOmc6azpHOm86pzp0sIM6gzpHOnc6RzpPOmc6RIM6hzp/OoM6fzqTOn86lIM6kzqHOmc6azpHOm86pzp0sIM6gzpHOnc6RzpPOmc6pzqTOkc6ZzpnOms6RIM6kzqHOmc6azpHOm86pzp0sIM6gzpXOoc6kzp/Opc6bzpkgzqTOoc6ZzprOkc6bzqnOnSwgzqDOlc6kzqHOn86nzqnOoc6ZIM6kzqHOmc6azpHOm86pzp0sIM6gzp/Om86lzpjOlc6RIM6hzp/OoM6fzqTOn86lIM6kzqHOmc6azpHOm86pzp0sIM6gzqXOm86XIM6kzqHOmc6azpHOm86pzp0sIM6gzqXOoc6hzpEgzqTOoc6ZzprOkc6bzqnOnSwgzqHOn86gzp/OpM6fIM6kzqHOmc6azpHOm86pzp0sIM6jzqTOn86lzqHOnc6RzqHOkc6ZzpnOms6RIM6kzqHOmc6azpHOm86pzp0sIM6kzqPOlc6azp/Opc6hzpEgzqTOoc6ZzprOkc6bzqnOnSwgzqbOn86hzqTOqc6jzpkgzqTOoc6ZzprOkc6bzqnOnSwgzqjOkc6hzqHOnyDOpM6hzpnOms6RzpvOqc6dJywgUHJlZmVjdHVyZTogJ86kz4HOuc66zqzOu8+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQyMTAwJywgQXJlYTogJ86RzpPOmc6RIM6azqXOoc6ZzpHOms6XIM6kzqHOmc6azpHOm86pzp0sIM6RzpPOoc6VzpvOmc6RIM6kzqHOmc6azpHOm86pzp0sIM6RzpzOnM6fzqXOlM6ZzpEgzqTOoc6ZzprOkc6bzqnOnSwgzpHOnc6kzpHOm86bzpHOns6ZzpzOkSDOpM6hzpnOms6RzpvOqc6dLCDOkc6gzp/Oo86kzp/Om86fzpkgzqTOoc6ZzprOkc6bzqnOnSwgzpHOoc6UzpHOnc6Zzp8gzqTOoc6ZzprOkc6bzqnOnSwgzpLOkc6bzpHOnM6Rzp3OlM6hzpkgzqTOoc6ZzprOkc6bzqnOnSwgzpLOkc6bzqTOmc6dzp8gzqTOoc6ZzprOkc6bzqnOnSwgzpPOlc6dzpXOo86Zzp8gzqTOoc6ZzprOkc6bzqnOnSwgzpPOm86Zzp3On86jIM6kzqHOmc6azpHOm86pzp0sIM6Tzp/OnM6mzp/OmSDOpM6hzpnOms6RzpvOqc6dLCDOk86fzqHOk86fzpPOpc6hzpkgzqTOoc6ZzprOkc6bzqnOnSwgzpTOlc6dzpTOoc6fzqfOqc6hzpnOnyDOpM6hzpnOms6RzpvOqc6dLCDOlM6ZzpHOm86VzprOpM6fIM6kzqHOmc6azpHOm86pzp0sIM6UzpnOm86fzqbOnyDOk86fzqHOk86fzpPOpc6hzpnOn86lIM6kzqHOmc6azpHOm86pzp0sIM6UzpnOoM6fzqTOkc6czp/OoyDOpM6hzpnOms6RzpvOqc6dLCDOlM6hzp/Oo86VzqHOnyDOpM6hzpnOms6RzpvOqc6dLCDOlM6hzp/Oo86fzqDOl86TzpcgzqTOoc6ZzprOkc6bzqnOnSwgzpXOm86VzqXOmM6VzqHOn86nzqnOoc6ZIM6kzqHOmc6azpHOm86pzp0sIM6VzpvOm86Xzp3On86azpHOo86kzqHOnyDOpM6hzpnOms6RzpvOqc6dLCDOlc6ezpHOm86fzqbOn86jIM6kzqHOmc6azpHOm86pzp0sIM6WzpfOm86VzqXOpM6XIM6kzqHOmc6azpHOm86pzp0sIM6azpHOm86fzp3Olc6hzpkgzqTOoc6ZzprOkc6bzqnOnSwgzprOkc6hzqXOkc6ZIM6kzqHOmc6azpHOm86pzp0sIM6azpHOpM6pIM6VzpvOkc6kzpcgzqTOoc6ZzprOkc6bzqnOnSwgzprOlc6mzpHOm86fzpLOoc6lzqPOnyDOpM6hzpnOms6RzpvOqc6dLCDOms6XzqDOkc6azpkgzqTOoc6ZzprOkc6bzqnOnSwgzprOn86azprOn86dzpEgzqTOoc6ZzprOkc6bzqnOnSwgzprOn86hzpcgzqTOoc6ZzprOkc6bzqnOnSwgzprOn86lzpzOkc6hzpnOkSDOpM6hzpnOms6RzpvOqc6dLCDOms6hzpfOnc6ZzqTOo86RIM6kzqHOmc6azpHOm86pzp0sIM6bzpHOk86azpHOlM6ZzpEgzqTOoc6ZzprOkc6bzqnOnSwgzpvOlc6gzqTOn86azpHOoc6lzpEgzqTOoc6ZzprOkc6bzqnOnSDOpM6hzpnOms6RzpvOqc6dLCDOm86VzqbOkc6ZzpnOms6RIM6kzqHOmc6azpHOm86pzp0sIM6bzpnOm86fzqDOoc6RzqPOnyDOpM6hzpnOms6RzpvOqc6dLCDOm86ZzqDOmc6fzqTOkSDOpM6hzpnOms6RzpvOqc6dLCDOm86fzpPOk86RzprOmSDOpM6hzpnOms6RzpvOqc6dLCDOm86fzpPOk86fzqMgzqTOoc6ZzprOkc6bzqnOnSwgzpvOpc6TzpHOoc6ZzpEgzqTOoc6ZzprOkc6bzqnOnSwgzpzOkc6kzqPOn86lzprOkc6ZzpnOms6RIM6kzqHOmc6azpHOm86pzp0sIM6czpXOk86RzpvOnyDOms6VzqbOkc6bzp/Oks6hzqXOo86fIM6kzqHOmc6azpHOm86pzp0sIM6czpXOk86RzpvOn86nzqnOoc6Zzp8gzqTOoc6ZzprOkc6bzqnOnSwgzpzOlc6TzpHOoc6nzpcgzqTOoc6ZzprOkc6bzqnOnSwgzpzOlc6bzpnOk86fzqMgzqTOoc6ZzprOkc6bzqnOnSwgzpzOlc6jzpnOkc6azpEgzqTOoc6ZzprOkc6bzqnOnSwgzpzOn86lzqHOmc6RIM6kzqHOmc6azpHOm86pzp0sIM6dzp/OnM6XIM6kzqHOmc6azpHOm86pzp0sIM6ezqXOm86fzqDOkc6hzp/Omc6azp8gzqTOoc6ZzprOkc6bzqnOnSwgzp/Opc6hzpHOnc6fzqMgzqTOoc6ZzprOkc6bzqnOnSwgzqDOkc6bzpHOmc6fzpzOn86dzpHOo86kzpfOoc6fIM6kzqHOmc6azpHOm86pzp0sIM6gzpHOm86RzpnOn86gzqXOoc6Tzp/OoyDOpM6hzpnOms6RzpvOqc6dLCDOoM6RzqHOkc6gzp/OpM6RzpzOn86jIM6kzqHOmc6azpHOm86pzp0sIM6gzpHOpM6fzqXOm86ZzpEgzqTOoc6ZzprOkc6bzqnOnSwgzqDOlc6hzpTOmc6azp/Ooc6hzpHOp86XIM6kzqHOmc6azpHOm86pzp0sIM6gzpXOpM6hzp/OoM6fzqHOn86jIM6kzqHOmc6azpHOm86pzp0sIM6gzpfOk86XIM6kzqHOmc6azpHOm86pzp0sIM6gzpnOkc6bzpXOmc6RIM6kzqHOmc6azpHOm86pzp0sIM6gzpvOkc6kzpHOnc6fzqMgzqTOoc6ZzprOkc6bzqnOnSwgzqDOoc6Zzp3On86jIM6kzqHOmc6azpHOm86pzp0sIM6gzqHOn86UzqHOn86czp/OoyDOpM6hzpnOms6RzpvOqc6dLCDOoM6lzqHOk86VzqTOn86jIM6kzqHOmc6azpHOm86pzp0sIM6hzpHOns6RIM6kzqHOmc6azpHOm86pzp0sIM6hzpnOls6RzqHOlc6Zzp8gzqTOoc6ZzprOkc6bzqnOnSwgzqHOmc6WzqnOnM6RIM6kzqHOmc6azpHOm86pzp0sIM6hzp/Ok86azpnOkSDOpM6hzpnOms6RzpvOqc6dLCDOo86azpHOm86RIM6kzqHOmc6azpHOm86pzp0sIM6jzqXOms6VzpEgzqTOoc6ZzprOkc6bzqnOnSwgzqPOqc6kzpfOoc6RIM6kzqHOmc6azpHOm86pzp0sIM6kzpHOns6ZzpHOoc6nzpXOoyDOpM6hzpnOms6RzpvOqc6dLCDOpM6hzpnOms6RzpvOkSDOpM6hzpnOms6RzpvOqc6dLCDOps6Rzp3Olc6hzqnOnM6Vzp3OlyDOpM6hzpnOms6RzpvOqc6dLCDOps6XzprOlyDOpM6hzpnOms6RzpvOqc6dLCDOps6ZzpvOpc6hzpEgzqTOoc6ZzprOkc6bzqnOnSwgzqbOm86RzpzOn86lzpvOmc6fIM6kzqHOmc6azpHOm86pzp0sIM6mzqnOpM6RzpTOkSDOpM6hzpnOms6RzpvOqc6dLCDOp86RzpnOlM6VzpzOlc6dzpcgzqTOoc6ZzprOkc6bzqnOnSwgzqfOoc6lzqPOkc6lzpPOlyDOpM6hzpnOms6RzpvOqc6dJywgUHJlZmVjdHVyZTogJ86kz4HOuc66zqzOu8+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzQyMjAwJywgQXJlYTogJ86RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOms6RzpvOkc6czqDOkc6azpHOoyDOpM6hzpnOms6RzpvOqc6dLCDOkc6TzpnOn86ZIM6YzpXOn86UzqnOoc6fzpkgzpLOkc6jzpnOm86ZzprOl86jIM6kzqHOmc6azpHOm86pzp0sIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOo86gzpHOmM6RzpTOqc6dIM6kzqHOmc6azpHOm86pzp0sIM6RzpPOnc6Rzp3OpM6ZzpEgzqTOoc6ZzprOkc6bzqnOnSwgzpHOl86UzqnOnc6RIM6kzqHOmc6azpHOm86pzp0sIM6RzpzOoM6VzpvOmc6RIM6azpvOlc6Zzp3On86lIM6kzqHOmc6azpHOm86pzp0sIM6Rzp3Okc6bzpfOqM6XIM6kzqHOmc6azpHOm86pzp0sIM6RzqXOoc6RIM6kzqHOmc6azpHOm86pzp0sIM6SzpHOo86ZzpvOmc6azpcgzqTOoc6ZzprOkc6bzqnOnSwgzpLOmc6kzp/Opc6czpHOoyDOpM6hzpnOms6RzpvOqc6dLCDOks6bzpHOp86RzpLOkSDOpM6hzpnOms6RzpvOqc6dLCDOk86bzqXOms6fzpzOl86bzpXOkSDOpM6hzpnOms6RzpvOqc6dLCDOlM6ZzpHOks6RIM6kzqHOmc6azpHOm86pzp0sIM6YzpXOn86gzpXOpM6hzpEgzqTOoc6ZzprOkc6bzqnOnSwgzprOkc6azp/OoM6bzpXOpc6hzpkgzqTOoc6ZzprOkc6bzqnOnSwgzprOkc6bzpHOnM6gzpHOms6RIM6kzqHOmc6azpHOm86pzp0sIM6azpHOm86fzpPOoc6ZzpHOnc6XIM6kzqHOmc6azpHOm86pzp0sIM6azpHOo86kzqHOkc6azpkgzqTOoc6ZzprOkc6bzqnOnSwgzprOm86VzpnOnc6fzqMgzqTOoc6ZzprOkc6bzqnOnSwgzprOn86dzpHOms6ZzpEgzqTOoc6ZzprOkc6bzqnOnSwgzprOn86hzp/OnM6XzpvOmc6RIM6kzqHOmc6azpHOm86pzp0sIM6azp/Ooc6lzpTOkc6bzpvOn86jIM6kzqHOmc6azpHOm86pzp0sIM6azp/Opc6kzqPOn86lzqbOm86ZzpHOnc6XIM6kzqHOmc6azpHOm86pzp0sIM6azqHOpc6RIM6SzqHOpc6jzpcgzqTOoc6ZzprOkc6bzqnOnSwgzpzOkc6bzpHOms6RzqPOmSDOpM6hzpnOms6RzpvOqc6dLCDOnM6VzpPOkc6bzpcgzprOlc6hzpHOo86VzpEgzqTOoc6ZzprOkc6bzqnOnSwgzpzOn86dzpcgzpHOk86ZzpHOoyDOpM6hzpnOkc6Uzp/OoyDOnM6VzqTOlc6pzqHOqc6dIM6kzqHOmc6azpHOm86pzp0sIM6czp/Onc6XIM6RzpPOmc6fzqUgzqPOpM6VzqbOkc6dzp/OpSDOnM6VzqTOlc6pzqHOqc6dIM6kzqHOmc6azpHOm86pzp0sIM6czp/Onc6XIM6RzpPOmc6pzp0gzqDOkc6dzqTOqc6dIM6SzpHOoc6bzpHOkc6cIM6czpXOpM6VzqnOoc6pzp0gzqTOoc6ZzprOkc6bzqnOnSwgzpzOn86dzpcgzpLOmc6kzp/Opc6czpEgzpzOlc6kzpXOqc6hzqnOnSDOpM6hzpnOms6RzpvOqc6dLCDOnM6fzp3OlyDOms6fzpnOnM6XzqPOlc6pzqMgzpjOlc6fzqTOn86azp/OpSDOo86kzpHOk86ZzpHOlM6pzp0gzqTOoc6ZzprOkc6bzqnOnSwgzpzOn86dzpcgzpzOlc6kzpHOnM6fzqHOps6pzqPOlc6pzqMgzqPOqc6kzpfOoc6RIM6czpXOpM6VzqnOoc6pzp0gzqTOoc6ZzprOkc6bzqnOnSwgzpzOn86lzqHOk86azpHOnc6XIM6kzqHOmc6azpHOm86pzp0sIM6czqDOkc6jzpnOkSDOms6bzpXOmc6dzp/OpSDOpM6hzpnOms6RzpvOqc6dLCDOnM6lzprOkc6dzpcgzqTOoc6ZzprOkc6bzqnOnSwgzp3Olc6RIM6WzqnOlyDOkc6lzqHOkc6jIM6kzqHOmc6azpHOm86pzp0sIM6ezpfOoc6fzprOkc6czqDOn86jIM6kzqHOmc6azpHOm86pzp0sIM6fzp7Opc6dzpXOmc6RIM6kzqHOmc6azpHOm86pzp0sIM6fzqHOmM6fzpLOn86lzp3OmSDOpM6hzpnOms6RzpvOqc6dLCDOoM6RzpvOkc6Zzp/Op86pzqHOmSDOms6RzpvOkc6czqDOkc6azpHOoyDOpM6hzpnOms6RzpvOqc6dLCDOoM6Rzp3Okc6TzpnOkSDOnM6RzpvOkc6azpHOo86Zzp/OpSDOpM6hzpnOms6RzpvOqc6dLCDOoM6VzqHOmc6jzqTOlc6hzpEgzqTOoc6ZzprOkc6bzqnOnSwgzqDOlc6lzprOlyDOpM6hzpnOms6RzpvOqc6dLCDOoM6bzpHOpM6Rzp3Omc6jzqTOn86jIM6kzqHOmc6azpHOm86pzp0sIM6jzpHOoc6RzprOl86dzpEgzqTOoc6ZzprOkc6bzqnOnSwgzqPOoM6RzpjOkc6UzpXOoyDOpM6hzpnOms6RzpvOqc6dLCDOo86kzpHOk86ZzpHOlM6VzqMgzqTOoc6ZzprOkc6bzqnOnSwgzqTOoc6ZzqbOpc6bzpvOmc6RIM6kzqHOmc6azpHOm86pzp0sIM6kzqHOpc6TzqnOnc6RIM6kzqHOmc6azpHOm86pzp0sIM6nzqHOpc6jzpnOnc6fIM6kzqHOmc6azpHOm86pzp0sIM6nzqHOpc6jzp/OnM6XzpvOlc6RIM6kzqHOmc6azpHOm86pzp0nLCBQcmVmZWN0dXJlOiAnzqTPgc65zrrOrM67z4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzUwMDEnLCBBcmVhOiAnzpvOlc6azp/Opc6dzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOnM6RzpvOlc6jzpnOnc6RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpzOn86dzpcgzpHOk86Zzp/OpSDOk86VzqnOoc6TzpnOn86lIM6mzpjOmc6pzqTOmc6Uzp/OoycsIFByZWZlY3R1cmU6ICfOps64zrnPjs+EzrnOtM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM1MDA1JywgQXJlYTogJ86YzpXOn86bzp/Ok86fzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOm86RzpPOn86dzpfOo86ZIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpzOkc6WzpkgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOnM6RzqHOpM6Zzp3OnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6czpXOpM6RzpvOm86VzpnOkSDOm86RzqHOpc6czp3Okc6jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpzOlc6kzpHOm86bzpXOmc6fIM6kzqPOn86lzprOms6RzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOnM6ZzprOoc6fzpLOmc6Szp/OoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6gzqHOn86jzprOpc6dzpHOoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6kzqHOkc6TzpHOnc6RIM6mzpjOmc6pzqTOmc6Uzp/OoycsIFByZWZlY3R1cmU6ICfOps64zrnPjs+EzrnOtM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM1MDA2JywgQXJlYTogJ86RzpPOmc6fzqMgzprOqc6dzqPOpM6Rzp3OpM6Zzp3On86jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpHOms6kzpcgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOkc6jzqDOoc6fzp3Olc6hzpkgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOm86fzpPOk86fzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOnc6Vzp/Op86pzqHOmSDOkc6TzpnOn86lIM6azqnOnc6jzqTOkc6dzqTOmc6dzp/OpSDOps6YzpnOqc6kzpnOlM6fzqMnLCBQcmVmZWN0dXJlOiAnzqbOuM65z47PhM65zrTOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczNTAwOCcsIEFyZWE6ICfOms6RzpzOlc6dzpEgzpLOn86lzqHOm86RIM6mzpjOmc6pzqTOmc6Uzp/Ooywgzp3Olc6fIM6YzqHOn86dzpnOnyDOps6YzpnOqc6kzpnOlM6fzqMnLCBQcmVmZWN0dXJlOiAnzqbOuM65z47PhM65zrTOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczNTAwOScsIEFyZWE6ICfOkc6TzpnOkSDOkc6ZzprOkc6kzpXOoc6Zzp3OlyDOms6RzpnOnc6fzqXOoc6TzpnOn86lIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpHOk86ZzpEgzqTOoc6ZzpHOlM6RIM6bzp/Oms6hzpnOlM6fzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOkc6TzpnOn86jIM6jzpXOoc6RzqbOlc6ZzpwgzpvOn86azqHOmc6Uzp/OoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6RzpPOmc6fzqMgzqfOkc6hzpHOm86RzpzOoM6fzqMgzpvOn86azqHOmc6Uzp/OoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6YzpXOoc6czp/OoM6lzpvOlc6jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzprOkc6Zzp3On86lzqHOk86Zzp8gzqbOmM6ZzqnOpM6ZzpTOn86jLCDOms6RzpvOm86ZzpTOoc6fzpzOnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6azpHOoc6RzpLOmc6UzpnOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6azpHOoc6lzpEgzpvOn86azqHOmc6Uzp/OoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6azpHOoc6lzpEgzqHOn86UzqnOnc6ZzpHOoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6azp/OnM6dzpnOnc6RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpvOn86lzqTOoc6RIM6YzpXOoc6czp/OoM6lzpvOqc6dIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpzOlc6dzpTOlc6dzpnOpM6jzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOnM6pzpvOn86jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzqHOlc6TzprOmc6dzpnOnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6jzprOkc6hzqbOlc6ZzpEgzqbOmM6ZzqnOpM6ZzpTOn86jJywgUHJlZmVjdHVyZTogJ86mzrjOuc+Oz4TOuc60zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzUwMTAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6Uzp/OnM6fzprOn86lIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpHOk86Zzp/OoyDOo86kzpXOps6Rzp3On86jIM6Uzp/OnM6fzprOn86lIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpHOk86hzpHOoM6ZzpTOmc6RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpHOnc6RzpLOoc6RIM6czpHOk86dzpfOo86ZzpHOoywgzpHOnc6pIM6RzpPOn86hzpnOkc6dzpcgzpLOn86ZzqnOpM6ZzpHOoywgzpHOp86bzpHOlM6ZzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOks6RzqHOlM6RzpvOlyDOps6YzpnOqc6kzpnOlM6fzqMsIM6SzpXOm86VzqPOmc6pzqTOlc6jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpLOn86lzpbOmc6fIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpPOkc6SzqHOkc6azpnOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6TzpXOoc6RzprOm86Zzp8gzqbOmM6ZzqnOpM6ZzpTOn86jLCDOlM6fzpzOn86azp/OoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6VzprOms6RzqHOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6VzpvOlc6fzqXOo86RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpjOkc6lzpzOkc6azp8gzqbOmM6ZzqnOpM6ZzpTOn86jLCDOms6RzqHOpc6VzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOms6fzqHOn86czpfOm86VzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOm86VzqXOms6RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpvOn86lzqTOoc6RIM6azpHOmc6kzqPOl86jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpzOkc6azqHOn86bzpnOks6RzpTOnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6czpHOms6hzqXOoc6hzpHOp86XIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpzOkc6dzqTOkc6jzpnOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6czpXOm86ZzqTOkc6ZzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOnM6VzqTOkc6bzpvOlc6Zzp8gzp/OnM6SzqHOmc6RzprOl86jIM6mzpjOmc6pzqTOmc6Uzp/Ooywgzp3Olc6RIM6czpHOms6hzpnOo86XIM6mzpjOmc6pzqTOmc6Uzp/Ooywgzp3Olc6fIM6czp/Onc6RzqPOpM6XzqHOmSDOps6YzpnOqc6kzpnOlM6fzqMsIM6dzpXOn86jIM6gzpHOm86RzpzOkc6jIM6mzpjOmc6pzqTOmc6Uzp/Ooywgzp3Olc6fzqfOqc6hzpkgzpTOn86czp/Oms6fzqUgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOns6lzp3Omc6RzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOn86czpLOoc6ZzpHOms6XIM6mzpjOmc6pzqTOmc6Uzp/OoywgzqDOkc6bzpHOnM6RzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoM6Rzp3Okc6TzpnOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6gzpXOoc6ZzpLOn86bzpkgzpTOn86czp/Oms6fzqUgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoM6VzqTOoc6ZzpvOmc6RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzqDOlc6kzqHOqc6kzp8gzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoM6fzpvOpc6UzpXOnc6UzqHOmSDOps6YzpnOqc6kzpnOlM6fzqMsIM6gzp/Opc6hzp3Okc6hzpkgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOo86azp/OoM6ZzpEgzqbOkc6hzqPOkc6bzqnOnSDOm86RzqHOmc6jzpfOoywgzqPOn86mzpnOkc6UzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOo86kzpHOmM6czp/OoyDOlM6fzpzOn86azp/OpSDOps6YzpnOqc6kzpnOlM6fzqMsIM6mzqXOm86ZzpHOlM6pzp0gzqbOmM6ZzqnOpM6ZzpTOn86jJywgUHJlZmVjdHVyZTogJ86mzrjOuc+Oz4TOuc60zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzUwMTEnLCBBcmVhOiAnzpHOoc6nzpHOnc6Zzp8gzqbOmM6ZzqnOpM6ZzpTOn86jLCDOkc6jzpLOlc6jzqTOmc6fIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpLOmc6kzp/Om86XIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpPOmc6Rzp3Onc6ZzqTOo86fzqUgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOk86hzpHOnM6czpXOnc6XIM6mzpjOmc6pzqTOmc6Uzp/OoywgzprOkc6jzqTOoc6ZIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpvOmc6kzp/Oo86VzpvOnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6bzp/Opc6kzqHOkSDOoM6bzpHOpM6lzqPOpM6fzpzOn86lIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpzOkc6azqHOkc6azqnOnM6XIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpzOkc6azqHOlyDOps6YzpnOqc6kzpnOlM6fzqMsIM6gzpHOm86RzpnOkSDOk86ZzpHOnc6dzpnOpM6jzp/OpSDOps6YzpnOqc6kzpnOlM6fzqMsIM6gzpHOm86Zzp/Opc6hzpkgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoM6RzqDOoM6RzqMgKM6czpXOo86fzqfOqc6hzpkpIM6mzpjOmc6pzqTOmc6Uzp/OoywgzqDOm86RzqTOpc6jzqTOn86czp8gzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoM6kzpXOm86VzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoc6fzpLOn86bzpnOkc6hzpkgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOpM6hzpnOm86fzqbOnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6kzqPOn86lzprOms6RIM6mzpjOmc6pzqTOmc6Uzp/OoycsIFByZWZlY3R1cmU6ICfOps64zrnPjs+EzrnOtM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM1MDEyJywgQXJlYTogJ86bzpHOoc6lzpzOnc6RIM6mzpjOmc6pzqTOmc6Uzp/OoycsIFByZWZlY3R1cmU6ICfOps64zrnPjs+EzrnOtM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzM1MDE0JywgQXJlYTogJ86Rzp3OmM6XzpvOlyDOps6YzpnOqc6kzpnOlM6fzqMnLCBQcmVmZWN0dXJlOiAnzqbOuM65z47PhM65zrTOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczNTAxNScsIEFyZWE6ICfOkc6TzpnOkSDOnM6RzqHOmc6dzpEgzpvOn86azqHOmc6Uzp/OoyDOks6fzpnOqc6kzpnOkc6jLCDOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzqTOmc6Yzp/Ooc6VzpHOoyDOks6fzpnOqc6kzpnOkc6jLCDOkc6dzpjOn86nzqnOoc6ZIM6Szp/Omc6pzqTOmc6RzqMsIM6SzpHOo86ZzpvOmc6azpEgzpLOn86ZzqnOpM6ZzpHOoywgzprOkc6kzqkgzqTOmc6Yzp/Ooc6VzpEgzpLOn86ZzqnOpM6ZzpHOoywgzpzOn86UzpkgzpLOn86ZzqnOpM6ZzpHOoywgzqDOkc6hzp/Ooc6ZIM6Szp/Omc6pzqTOmc6RzqMsIM6kzpnOmM6fzqHOlc6RIM6Szp/Omc6pzqTOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzqbOuM65z47PhM65zrTOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczNTAxNicsIEFyZWE6ICfOkc6bzqnOnc6ZzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOkc6czpHOm86pzqTOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6RzqHOk86lzqHOn86nzqnOoc6Zzp8gzqbOmM6ZzqnOpM6ZzpTOn86jLCDOks6RzqHOms6RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpLOkc6jzpnOm86ZzprOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6ZzpXOoc6RIM6czp/Onc6XIM6RzpPOkc6YzqnOnc6fzqMgzpvOpc6nzp3On86lIM6mzpjOmc6pzqTOmc6Uzp/OoywgzprOkc6gzp3On86nzqnOoc6ZIM6mzpjOmc6pzqTOmc6Uzp/OoywgzprOkc6jzqTOkc6dzpXOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6bzpHOlM6ZzprOn86lIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpvOn86lzqTOoc6RIM6lzqDOkc6kzpfOoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6bzqXOp86dzp8gzqbOmM6ZzqnOpM6ZzpTOn86jLCDOnM6RzpPOn86lzpvOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6czpXOns6ZzpHOpM6VzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOnM6VzqPOn86nzqnOoc6ZIM6mzpjOmc6pzqTOmc6Uzp/Ooywgzp3Olc6RIM6lzqDOkc6kzpcgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOnc6Vzp/Op86pzqHOmSDOpc6gzpHOpM6XzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoM6VzqHOmc6Szp/Om86ZIM6jzqDOlc6hzqfOlc6ZzpHOlM6fzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoM6VzqHOmc6jzqTOlc6hzpkgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoM6lzqHOk86fzqMgzqXOoM6RzqTOl86jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzqHOn86UzqnOnc6ZzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOo86lzprOkc6jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzqXOoM6RzqTOlyDOps6YzpnOqc6kzpnOlM6fzqMnLCBQcmVmZWN0dXJlOiAnzqbOuM65z47PhM65zrTOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczNTEwMCcsIEFyZWE6ICfOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzqbOmM6ZzqnOpM6ZzpTOn86jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpHOk86hzpHOlM6fzqXOm86RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpHOk86hzpnOm86ZzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOkc6czp/Opc6hzpnOnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6Rzp3OqSDOks6RzqHOlM6RzqTOlc6jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpHOnc6pIM6UzpHOnM6RzqPOpM6RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpHOpc6bzpHOms6Zzp8gzqbOmM6ZzqnOpM6ZzpTOn86jLCDOk86fzqHOk86fzqDOn86kzpHOnM6fzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOlM6VzpvOps6Zzp3OnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6UzpnOks6hzpcgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOlM6lzp8gzpLOn86lzp3OkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6VzpvOlc6lzpjOlc6hzp/Op86pzqHOmSDOps6YzpnOqc6kzpnOlM6fzqMsIM6WzpHOms6RzpnOmc6azpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOls6XzpvOlc6lzqTOnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6XzqHOkc6azpvOlc6ZzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOms6RzpvOkc6czpHOms6ZIM6mzpjOmc6pzqTOmc6Uzp/OoywgzprOkc6kzqkgzpTOkc6czpHOo86kzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOms6fzpzOnM6RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzprOn86czqDOn86kzpHOlM6VzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOms6fzqXOnM6RzqHOmc6kzqPOmSDOps6YzpnOqc6kzpnOlM6fzqMsIM6azqnOo86kzpHOm86Vzp7Ol86jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpvOkc6czpnOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6bzpXOmc6Rzp3On86azpvOkc6UzpkgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOm86ZzpzOn86TzpHOoc6UzpnOnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6bzp/Ok86TzpnOpM6jzpnOnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6bzqXOk86RzqHOmc6RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpzOlc6TzpHOm86XIM6SzqHOpc6jzpcgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOnM6fzp3OlyDOkc6dzqTOmc6dzpnOpM6jzpfOoyDOms6RzpvOkc6czpHOms6Zzp/OpSDOps6YzpnOqc6kzpnOlM6fzqMsIM6czp/Onc6XIM6TzpXOnc6XzqPOmc6fzqUgzpjOlc6fzqTOn86azp/OpSDOlM6RzpzOkc6jzqTOkc6jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpzOn86dzpcgzpPOn86hzpPOn86VzqDOl86azp/On86lIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpzOn86jzqfOn86azpHOoc6lzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOnM6fzqPOp86fzqfOqc6hzpkgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOnc6VzpEgzqDOkc6lzpvOmc6Rzp3OlyDOps6YzpnOqc6kzpnOlM6fzqMsIM6dzpXOnyDOms6hzpnOms6VzpvOm86fIM6mzpjOmc6pzqTOmc6Uzp/Ooywgzp/Omc6kzpcgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoM6RzpvOkc6Zzp/Op86pzqHOmSDOm86ZzpzOn86TzpHOoc6UzpnOn86lIM6mzpjOmc6pzqTOmc6Uzp/OoywgzqDOkc6lzpvOmc6Rzp3OlyDOps6YzpnOqc6kzpnOlM6fzqMsIM6hzp/OlM6ZzqTOo86RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzqPOms6RzpzOnc6fzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOo86kzpHOpc6hzp/OoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6jzqTOmc6hzqbOkc6azpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOpc6UzqHOn86czqXOm86fzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOps6hzpHOnc6kzpbOl86jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzqfOkc6bzpLOkc6dzqTOls6RzpnOmc6azpEgzqbOmM6ZzqnOpM6ZzpTOn86jJywgUHJlZmVjdHVyZTogJ86mzrjOuc+Oz4TOuc60zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzUxMzEnLCBBcmVhOiAnzpvOkc6czpnOlc6pzp0gzqbOmM6ZzqnOpM6ZzpTOkc6jJywgUHJlZmVjdHVyZTogJ86mzrjOuc+Oz4TOuc60zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzUxMzInLCBBcmVhOiAnzpvOkc6czpnOlc6pzp0gzqbOmM6ZzqnOpM6ZzpTOkc6jJywgUHJlZmVjdHVyZTogJ86mzrjOuc+Oz4TOuc60zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzUxMzMnLCBBcmVhOiAnzpvOkc6czpnOlc6pzp0gzqbOmM6ZzqnOpM6ZzpTOkc6jJywgUHJlZmVjdHVyZTogJ86mzrjOuc+Oz4TOuc60zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzUyMDAnLCBBcmVhOiAnzpHOk86ZzpEgzpHOmc6azpHOpM6VzqHOmc6dzpcgzpvOn86azqHOmc6Uzp/OoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6RzpPOmc6fzqMgzpLOm86RzqPOmc6fzqMgzpHOpM6RzpvOkc6dzqTOl86jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6bzp/Oms6hzpnOlM6fzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOkc6Tzp3Okc6dzqTOlyDOps6YzpnOqc6kzpnOlM6fzqMsIM6Rzp3Okc6SzqHOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6RzqHOms6ZzqTOo86RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpHOpM6RzpvOkc6dzqTOlyDOps6YzpnOqc6kzpnOlM6fzqMsIM6RzqTOkc6bzpHOnc6kzp/Onc6XzqPOmSDOps6YzpnOqc6kzpnOlM6fzqMsIM6Tzp/Opc6bzpXOnM6Zzp8gzqbOmM6ZzqnOpM6ZzpTOn86jLCDOlc6ezpHOoc6nzp/OoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6VzqXOms6RzpvOpc6gzqTOn86jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpbOlc6bzpnOnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6azpHOm86RzqDOn86UzpkgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOms6RzpvOpc6ozqkgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOms6fzpvOkc6azpEgKM6uIM6azqXOoc6kzqnOnc6XKSDOps6YzpnOqc6kzpnOlM6fzqMsIM6azqXOoM6RzqHOmc6jzqPOmSDOps6YzpnOqc6kzpnOlM6fzqMsIM6azqXOoc6kzqnOnc6XIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpzOlc6TzpHOoM6bzpHOpM6Rzp3On86jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzpzOlc6bzpnOlM6fzp3OmSDOps6YzpnOqc6kzpnOlM6fzqMsIM6czp/Onc6XIM6RzpPOmc6pzp0gzpHOnc6RzqHOk86lzqHOqc6dIM6RzqTOkc6bzpHOnc6kzpfOoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6gzpHOm86ZzqHOoc6fzpnOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6jzprOkc6bzpEgzqbOmM6ZzqnOpM6ZzpTOn86jJywgUHJlZmVjdHVyZTogJ86mzrjOuc+Oz4TOuc60zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzUzMDAnLCBBcmVhOiAnzpHOk86ZzpEgzpzOkc6hzpnOnc6RIM6mzpjOmc6pzqTOmc6Uzp/OoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6Rzp3Opc6UzqHOnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6RzqfOmc6dzp/OoyDOps6YzpnOqc6kzpnOlM6fzqMsIM6SzpHOo86ZzpvOmc6azpcgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOlM6hzpXOoM6Rzp3OnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6UzqHOn86jzpnOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6azpHOoc6RzpLOn86czqXOm86fzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOms6fzqXOks6VzpvOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6azp/Opc6kzqPOn86lzqHOnyDOps6YzpnOqc6kzpnOlM6fzqMsIM6czpXOm86ZzqPOo86ZzpEgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOnc6VzqHOkc6ZzpTOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6gzpHOm86RzpnOn86azpXOoc6RzqPOlc6RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzqDOkc6dzp/Ooc6RzpzOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6gzpHOoc6RzpvOmc6RIM6RzqfOmc6dzp/OpSDOps6YzpnOqc6kzpnOlM6fzqMsIM6gzpHOoc6RzpvOmc6RIM6hzpHOp86pzp0gzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoM6VzqTOkc6hzpHOlM6VzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoM6bzpHOms6VzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoM6bzpHOpM6Rzp3Omc6RzqMgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOoc6RzqfOlc6jIM6mzpjOmc6pzqTOmc6Uzp/OoywgzqPOms6RzqPOnM6RzpTOkSDOps6YzpnOqc6kzpnOlM6fzqMsIM6jzqTOpc6bzpnOlM6RIM6mzpjOmc6pzqTOmc6Uzp/OoywgzqbOn86lzqHOnc6fzpkgzqbOmM6ZzqnOpM6ZzpTOn86jLCDOps6kzpnOm86ZzpEgzqbOmM6ZzqnOpM6ZzpTOn86jJywgUHJlZmVjdHVyZTogJ86mzrjOuc+Oz4TOuc60zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTMwNzAnLCBBcmVhOiAnzpHOnc6kzpnOk86fzp3OnyDOps6bzqnOoc6Zzp3Okc6jLCDOnM6Rzp3Omc6RzprOmSDOps6bzqnOoc6Zzp3Okc6jLCDOoM6VzpvOkc6hzpPOn86jIM6mzpvOqc6hzpnOnc6RzqMsIM6mzpHOoc6RzpPOk86ZIM6mzpvOqc6hzpnOnc6RzqMsIM6mzpnOm86pzqTOkc6jIM6mzpvOqc6hzpnOnc6RzqMnLCBQcmVmZWN0dXJlOiAnzqbOu8+Oz4HOuc69zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNTMwNzEnLCBBcmVhOiAnzpHOnc6pIM6RzqfOm86RzpTOkSDOps6bzqnOoc6Zzp3Okc6jLCDOkc6nzpvOkc6UzpEgzqbOm86pzqHOmc6dzpHOoywgzpPOmc6fzqXOoc6fzqXOms6ZIM6mzpvOqc6hzpnOnc6RzqMsIM6czpXOm86ZzqTOlyDOps6bzqnOoc6Zzp3Okc6jLCDOo86azp/OoM6fzqMgzqbOm86pzqHOmc6dzpHOoycsIFByZWZlY3R1cmU6ICfOps67z47Pgc65zr3Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1MzA3MycsIEFyZWE6ICfOm86VzqfOn86Szp8gzqbOm86pzqHOmc6dzpHOoycsIFByZWZlY3R1cmU6ICfOps67z47Pgc65zr3Osc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc1MzA3NycsIEFyZWE6ICfOkc6TzpnOn86jIM6RzqfOmc6bzpvOlc6Zzp/OoyDOnc6XzqPOn86jIM6mzpvOqc6hzpnOnc6RzqMsIM6RzpPOmc6fzqMgzpPOlc6hzpzOkc6dzp/OoyDOps6bzqnOoc6Zzp3Okc6jLCDOks6hzp/Onc6kzpXOoc6fIM6mzpvOqc6hzpnOnc6RzqMsIM6azpHOm86bzpnOmM6VzpEgzqbOm86pzqHOmc6dzpHOoywgzprOkc6hzqXOlc6jIM6mzpvOqc6hzpnOnc6RzqMsIM6bzpHOmc6czp/OoyDOps6bzqnOoc6Zzp3Okc6jLCDOm86VzqXOms6pzp3Okc6jIM6mzpvOqc6hzpnOnc6RzqMsIM6czpfOm86VzqnOnc6RzqMgzqbOm86pzqHOmc6dzpHOoywgzpzOmc6azqHOn86bzpnOnM6dzpcgzqbOm86pzqHOmc6dzpHOoywgzp/Ons6lzpEgzqbOm86pzqHOmc6dzpHOoywgzqDOm86RzqTOpSDOps6bzqnOoc6Zzp3Okc6jLCDOoM6lzpvOlyDOkc6TzpnOn86lIM6RzqfOmc6bzpvOlc6Zzp/OpSDOps6bzqnOoc6Zzp3Okc6jLCDOqM6RzqHOkc6UzpXOoyDOps6bzqnOoc6Zzp3Okc6jJywgUHJlZmVjdHVyZTogJ86mzrvPjs+BzrnOvc6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzUzMTAwJywgQXJlYTogJ86RzpPOmc6RIM6gzpHOoc6RzqPOms6VzqXOlyDOps6bzqnOoc6Zzp3Okc6jLCDOkc6TzpnOn86jIM6RzpjOkc6dzpHOo86Zzp/OoyDOps6bzqnOoc6Zzp3Okc6jLCDOkc6TzpnOn86jIM6SzpHOoc6Yzp/Om86fzpzOkc6Zzp/OoyDOps6bzqnOoc6Zzp3Okc6jLCDOkc6azqHOmc6kzpHOoyDOps6bzqnOoc6Zzp3Okc6jLCDOkc6bzqnOnc6RIM6mzpvOqc6hzpnOnc6RzqMsIM6RzpzOnM6fzqfOqc6hzpkgzqbOm86pzqHOmc6dzpHOoywgzpHOnc6pIM6azpHOm86bzpnOnc6ZzprOlyDOps6bzqnOoc6Zzp3Okc6jLCDOkc6dzqkgzprOm86VzpnOnc6VzqMgzqbOm86pzqHOmc6dzpHOoywgzpHOnc6pIM6lzpTOoc6fzqXOo86jzpEgzqbOm86pzqHOmc6dzpHOoywgzpHOoc6czpXOnc6fzqfOqc6hzpkgzqbOm86pzqHOmc6dzpHOoywgzpHOpM6hzpHOoM6fzqMgzqbOm86pzqHOmc6dzpHOoywgzpTOoc6fzqPOn86gzpfOk86XIM6mzpvOqc6hzpnOnc6RzqMsIM6VzpjOnc6ZzprOnyDOps6bzqnOoc6Zzp3Okc6jLCDOmc6kzpXOkSDOps6bzqnOoc6Zzp3Okc6jLCDOms6RzpvOn86TzpXOoc6ZzqTOo86RIM6mzpvOqc6hzpnOnc6RzqMsIM6azpHOpM6pIM6azpHOm86bzpnOnc6ZzprOlyDOps6bzqnOoc6Zzp3Okc6jLCDOms6RzqTOqSDOms6bzpXOmc6dzpXOoyDOps6bzqnOoc6Zzp3Okc6jLCDOms6bzpHOlM6fzqHOoc6RzqfOlyDOps6bzqnOoc6Zzp3Okc6jLCDOms6fzpnOnM6XzqPOmc6jIM6kzpfOoyDOmM6Vzp/OpM6fzprOn86lIM6mzpvOqc6hzpnOnc6RzqMsIM6azp/Om86nzpnOms6XIM6mzpvOqc6hzpnOnc6RzqMsIM6azp/Ooc6lzqbOlyDOps6bzqnOoc6Zzp3Okc6jLCDOms6hzpHOpM6VzqHOnyDOps6bzqnOoc6Zzp3Okc6jLCDOm86VzqDOpM6fzprOkc6hzqXOlc6jIM6mzpvOqc6hzpnOnc6RzqMsIM6czpHOoc6Zzp3OkSDOps6bzqnOoc6Zzp3Okc6jLCDOnM6VzqPOn86azpHOnM6gzp/OoyDOps6bzqnOoc6Zzp3Okc6jLCDOnM6VzqPOn86dzpfOo86ZIM6mzpvOqc6hzpnOnc6RzqMsIM6czpXOo86fzqfOqc6hzpkgzqbOm86pzqHOmc6dzpHOoywgzp3Olc6fzqMgzprOkc6lzprOkc6jzp/OoyDOps6bzqnOoc6Zzp3Okc6jLCDOnc6Vzp/Op86pzqHOkc6azpkgzqbOm86pzqHOmc6dzpHOoywgzp3Omc6azpcgzqbOm86pzqHOmc6dzpHOoywgzqDOkc6bzpHOmc6jzqTOoc6RIM6mzpvOqc6hzpnOnc6RzqMsIM6gzpHOoM6gzpHOk86ZzpHOnc6dzpfOoyDOps6bzqnOoc6Zzp3Okc6jLCDOoM6RzqHOn86hzpXOmc6fIM6mzpvOqc6hzpnOnc6RzqMsIM6gzpXOoc6RzqPOnM6RIM6mzpvOqc6hzpnOnc6RzqMsIM6gzp/Om86lzqDOm86RzqTOkc6dzp/OoyDOps6bzqnOoc6Zzp3Okc6jLCDOoM6fzpvOpc6gzp/OpM6RzpzOn86jIM6mzpvOqc6hzpnOnc6RzqMsIM6gzqHOqc6kzpcgzqbOm86pzqHOmc6dzpHOoywgzqPOmc6czp/OoyDOmc6pzpHOnc6dzpnOlM6XzqMgzqbOm86pzqHOmc6dzpHOoywgzqPOms6fzqDOmc6RIM6mzpvOqc6hzpnOnc6RzqMsIM6kzqHOmc6Rzp3OpM6RzqbOpc6bzpvOmc6RIM6mzpvOqc6hzpnOnc6RzqMsIM6kzqHOmc6Szp/Opc6dzp8gzqbOm86pzqHOmc6dzpHOoywgzqTOoc6ZzqDOn86kzpHOnM6fzqMgzqbOm86pzqHOmc6dzpHOoywgzqTOoc6fzqDOkc6Zzp/Opc6nzp/OoyDOps6bzqnOoc6Zzp3Okc6jLCDOpc6UzqHOn86lzqPOo86RIM6mzpvOqc6hzpnOnc6RzqMsIM6mzpvOkc6czqDOn86lzqHOnyDOps6bzqnOoc6Zzp3Okc6jLCDOps6bzqnOoc6Zzp3OkSDOps6bzqnOoc6Zzp3Okc6jJywgUHJlZmVjdHVyZTogJ86mzrvPjs+BzrnOvc6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzUzMjAwJywgQXJlYTogJ86RzpPOmc6fzqMgzqDOkc6dzqTOlc6bzpXOl86czqnOnSDOps6bzqnOoc6Zzp3Okc6jLCDOkc6czqXOnc6kzpHOmc6fIM6mzpvOqc6hzpnOnc6RzqMsIM6Rzp3Okc6bzpfOqM6XIM6mzpvOqc6hzpnOnc6RzqMsIM6SzpXOk86fzqHOkSDOps6bzqnOoc6Zzp3Okc6jLCDOm86VzpLOkc6ZzpEgzqbOm86pzqHOmc6dzpHOoywgzqDOlc6kzqHOlc6jIM6mzpvOqc6hzpnOnc6RzqMsIM6hzp/OlM6pzp3OnyDOps6bzqnOoc6Zzp3Okc6jLCDOo86pzqTOl86hzpHOoyDOps6bzqnOoc6Zzp3Okc6jJywgUHJlZmVjdHVyZTogJ86mzrvPjs+BzrnOvc6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzUzNTMzJywgQXJlYTogJ86gzpHOpc6bzp/OpSDOnM6VzpvOkSDOmM6VzqPOo86RzpvOn86dzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzqbOu8+Oz4HOuc69zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzMwNTInLCBBcmVhOiAnzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6dzpfOo86fzqMgzqbOqc6azpnOlM6fzqMsIM6RzqjOl86mzpnOkSDOnc6XzqPOn86jIM6mzqnOms6ZzpTOn86jLCDOk86RzpvOkc6ezpnOlM6ZIM6mzqnOms6ZzpTOn86jJywgUHJlZmVjdHVyZTogJ86mz4nOus6vzrTOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMzA1MycsIEFyZWE6ICfOkc6Szp/Ooc6fzqMgzqbOqc6azpnOlM6fzqMsIM6RzpnOk86ZzqTOmc6fIM6mzqnOms6ZzpTOn86jLCDOks6hzpHOmc6bzpEgzqbOqc6azpnOlM6fzqMsIM6UzpHOps6dzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOlM6ZzpHOms6fzqDOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOlM6pzqHOmc6azp8gzqbOqc6azpnOlM6fzqMsIM6azpHOm86bzpnOnyDOps6pzprOmc6Uzp/OoywgzprOkc6hzp/Opc6kzpXOoyDOps6pzprOmc6Uzp/OoywgzprOm86XzpzOkSDOm86ZzpTOn86hzprOmc6fzqUgzqbOqc6azpnOlM6fzqMsIM6azp/Onc6ZzpHOms6fzqMgzqbOqc6azpnOlM6fzqMsIM6bzpXOpc6azpEgzqbOqc6azpnOlM6fzqMsIM6bzpXOpc6azpHOlM6ZzqTOmSDOps6pzprOmc6Uzp/OoywgzpvOmc6Uzp/Ooc6ZzprOmSDOps6pzprOmc6Uzp/OoywgzpzOkc6bzpHOnc6UzqHOmc6dzp8gzqbOqc6azpnOlM6fzqMsIM6gzpHOm86RzpnOn86azpHOo86kzqHOnyDOps6pzprOmc6Uzp/OoywgzqDOlc6dzqTOkc6gzp/Om86XIM6mzqnOms6ZzpTOn86jLCDOo86azpHOm86fzqXOm86RIM6mzqnOms6ZzpTOn86jLCDOo86lzprOlc6RIM6mzqnOms6ZzpTOn86jLCDOpM6hzpnOks6ZzpTOmSDOps6pzprOmc6Uzp/OoycsIFByZWZlY3R1cmU6ICfOps+JzrrOr860zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzMwNTQnLCBBcmVhOiAnzpTOlc6bzqbOn86ZIM6mzqnOms6ZzpTOn86jLCDOms6RzpvOkc6dzpnOkSDOks6fzpnOqc6kzpnOkc6jLCDOms6hzp/Oms6ZIM6UzpXOm86mzqnOnSDOks6fzpnOqc6kzpnOkc6jJywgUHJlZmVjdHVyZTogJ86mz4nOus6vzrTOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMzA1NicsIEFyZWE6ICfOkc6TzpnOn86jIM6gzp/Om86lzprOkc6hzqDOn86jIM6czpHOm86RzpzOkc6kzqnOnSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOk86hzpfOk86fzqHOmc6kzpnOms6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6UzqHOn86jzpHOpM6fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6VzqXOoM6RzpvOmc6fIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOnM6gzp/OoyDOlc6lzqDOkc6bzpnOn86lIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6azpHOo86kzqHOkc6azpkgzpXOpc6gzpHOm86Zzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOms6bzpfOnM6RIM6VzqXOoM6RzpvOmc6fzqUgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpvOn86TzpPOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpHOk86fzqXOm86RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpHOm86RzpzOkc6kzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOkc6dzpHOk86fzqXOm86XIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6czpHOoc6RzpjOmc6RzqMgKM6ezqXOlM6ZzpHOoykgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpzOn86dzpHOo86kzpfOoc6RzprOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6RzpvOkc6Zzp/OnM6lzpvOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6gzpHOoc6RzpvOmc6RIM6jzpXOoc6Tzp/Opc6bzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6VzqXOms6RzprOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6XzpPOlyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOoM6lzqHOk86fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqPOlc6hzpPOn86lzpvOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86azpHOm86pzpzOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOpM6hzpnOms6fzqHOps6fIM6VzqXOoM6RzpvOmc6fzqUgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqbOmc6bzp/OmM6VzpcgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqfOmc6bzpnOkc6Uzp/OpSDOkc6ZzqTOqc6bL86dzpnOkc6jJywgUHJlZmVjdHVyZTogJ86mz4nOus6vzrTOsc+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICczMzA1NycsIEFyZWE6ICfOkc6dzqkgzpzOoM6hzpHOm86fzqMgzpLOn86ZzqnOpM6ZzpHOoywgzpHOoM6fzqPOpM6fzpvOmc6RzqMgzpLOn86ZzqnOpM6ZzpHOoywgzpLOkc6hzpPOmc6Rzp3OlyDOks6fzpnOqc6kzpnOkc6jLCDOk86hzpHOks6ZzpEgzpLOn86ZzqnOpM6ZzpHOoywgzpXOoM6kzpHOm86fzqbOn86jIM6Szp/Omc6pzqTOmc6RzqMsIM6azpHOm86fzqPOms6fzqDOlyDOks6fzpnOqc6kzpnOkc6jLCDOms6RzqPOpM6VzpvOm86ZzpEgzpLOn86ZzqnOpM6ZzpHOoywgzpvOmc6bzpHOmc6RIM6Szp/Omc6pzqTOmc6RzqMsIM6czpHOoc6Zzp/Om86RzqTOkSDOks6fzpnOqc6kzpnOkc6jLCDOnM6gzqHOkc6bzp/OoyDOks6fzpnOqc6kzpnOkc6jLCDOn86Zzp3On86nzqnOoc6ZIM6Szp/Omc6pzqTOmc6RzqMsIM6gzpHOm86RzpnOn86nzqnOoc6ZIM6UzqnOoc6ZzpXOqc6dIM6Szp/Omc6pzqTOmc6RzqMsIM6jzprOm86XzpjOoc6fIM6Szp/Omc6pzqTOmc6RzqMsIM6jzqTOkc6YzpzOn86jIM6Uzp/OnM6fzprOn86lIM6Szp/Omc6pzqTOmc6RzqMnLCBQcmVmZWN0dXJlOiAnzqbPic66zq/OtM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzMzMDU4JywgQXJlYTogJ86RzpPOmc6RIM6VzpnOoc6Xzp3OlyDOms6RzpvOm86ZzpjOlc6RzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzpHOk86Zzp/OmSDOoM6Rzp3OpM6VzqMgzqbOqc6azpnOlM6fzqMsIM6RzpPOmc6fzqMgzpnOqc6Rzp3Onc6XzqMgzp3Ol86jzp/OoyDOps6pzprOmc6Uzp/OoywgzpHOk86Zzp/OoyDOnc6ZzprOn86bzpHOn86jIM6azpHOm86bzpnOmM6VzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzp3Ol86jzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6TzpnOn86jIM6jzqDOpc6hzpnOlM6pzp3Okc6jIM6azpHOm86bzpnOmM6VzpHOoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOkc6czqXOk86UzpHOm86ZzpEgzqbOqc6azpnOlM6fzqMsIM6TzpvOpc6mzpHOlM6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6UzpHOps6dzp/Op86pzqHOmSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOlc6bzpHOmc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6VzqHOkc6kzpXOmc6dzpcgzqbOqc6azpnOlM6fzqMsIM6azpHOm86bzpnOmM6VzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzprOm86fzpLOmc6dzp/OoyDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOnM6RzprOoc6Zzp3OlyDOps6pzprOmc6Uzp/OoywgzpzOl86bzpXOkSDOps6pzprOmc6Uzp/Ooywgzp3Olc6fzpkgzpHOk86Zzp/OmSAgzqDOkc6dzqTOlc6jIM6mzqnOms6ZzpTOn86jLCDOn86hzpzOn86jIM6bzpXOnM6fzp3Omc6RzqMgzqbOqc6azpnOlM6fzqMsIM6gzpHOnc6fzqHOnM6fzqMgzqbOqc6azpnOlM6fzqMsIM6gzpHOoc6RzpvOmc6RIM6RzpPOmc6pzp0gzqDOkc6dzqTOqc6dIM6mzqnOms6ZzpTOn86jLCDOoM6RzqHOkc6bzpnOkSDOpM6fzpvOn86mzqnOnc6RIM6mzqnOms6ZzpTOn86jLCDOoM6hzpHOo86fzqXOlM6ZICDOnc6XzqPOn86jIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6jzqDOl86bzpnOkSDOkc6ZzqTOqc6bL86dzpnOkc6jLCDOo86pzqTOkc6Zzp3OkSDOps6pzprOmc6Uzp/OoywgzqTOn86bzp/Ops6pzp3Okc6jIM6mzqnOms6ZzpTOn86jLCDOpM6hzpnOls6fzp3Omc6RIM6dzpfOo86fzqMgzpHOmc6kzqnOmy/Onc6ZzpHOoywgzqbOm86RzpzOoM6fzqXOoc6RzprOmc6RIM6RzpnOpM6pzpsvzp3Omc6RzqMsIM6nzpHOnc6ZzpEgzpHOmc6kzqnOmy/Onc6ZzpHOoycsIFByZWZlY3R1cmU6ICfOps+JzrrOr860zrHPgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnMzMxMDAnLCBBcmVhOiAnzpHOk86ZzpEgzpXOpc6YzqXOnM6ZzpEgzqbOqc6azpnOlM6fzqMsIM6RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOkc6czqbOmc6jzqPOkc6jIM6mzqnOms6ZzpTOn86jLCDOkc6TzpnOn86jIM6azqnOnc6jzqTOkc6dzqTOmc6dzp/OoyDOkc6czqbOmc6jzqPOkc6jIM6mzqnOms6ZzpTOn86jLCDOkc6czqbOmc6jzqPOkSDOps6pzprOmc6Uzp/OoywgzpLOmc6dzpnOkc6dzpcgzqbOqc6azpnOlM6fzqMsIM6Szp/Opc6dzpnOp86pzqHOkSDOps6pzprOmc6Uzp/OoywgzpTOoc6fzqPOn86nzqnOoc6ZIM6mzqnOms6ZzpTOn86jLCDOlc6bzpHOmc6pzp3Okc6jIM6mzqnOms6ZzpTOn86jLCDOnM6fzp3Okc6jzqTOl86hzpkgzqDOoc6fzqPOl86bzpnOn86lIM6mzqnOms6ZzpTOn86jLCDOoM6Vzp3OpM6Vzp/Ooc6ZzpEgzqbOqc6azpnOlM6fzqMsIM6gzqHOn86jzpfOm86Zzp8gzqbOqc6azpnOlM6fzqMsIM6jzpXOoc6dzpnOms6RzprOmSDOps6pzprOmc6Uzp/OoywgzqTOoc6ZzqTOkc6ZzpEgzqbOqc6azpnOlM6fzqMnLCBQcmVmZWN0dXJlOiAnzqbPic66zq/OtM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzMzMjAwJywgQXJlYTogJ86RzpPOmc6fzqMgzpHOmM6Rzp3Okc6jzpnOn86jIM6mzqnOms6ZzpTOn86jLCDOkc6TzpnOn86jIM6azqnOnc6jzqTOkc6dzqTOmc6dzp/OoyAgzp3Ol86jzp/OoyDOps6pzprOmc6Uzp/OoywgzpnOpM6VzpEgzqbOqc6azpnOlM6fzqMsIM6azpnOoc6hzpEgzqbOqc6azpnOlM6fzqMnLCBQcmVmZWN0dXJlOiAnzqbPic66zq/OtM6xz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYzMDcyJywgQXJlYTogJ86SzpHOm86kzpkgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6UzpXOo86kzpXOnc6ZzprOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOkc6bzpHOnM6ZzqTOo86ZIM6nzpHOm86azpnOlM6ZzprOl86jLCDOms6fzqXOps6fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6gzpHOoc6RzpvOmc6RIM6jzqXOms6VzpHOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzqDOm86RzqTOkc6dzpnOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzqPOkc6hzqTOlyDOp86RzpvOms6ZzpTOmc6azpfOoywgzqPOpc6azpXOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzqTOn86hzqnOnc6XIM6nzpHOm86azpnOlM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86nzrHOu866zrnOtM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2MzA3MycsIEFyZWE6ICfOkc6TzpnOkSDOkc6dzpHOo86kzpHOo86ZzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6RzpPOmc6fzqMgzqDOoc6fzpTOoc6fzpzOn86jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOk86RzpvOkc6hzpnOnc6fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6TzpHOm86RzqTOmc6jzqTOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpPOlc6hzp/OoM6bzpHOpM6Rzp3On86jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOlM6fzqXOnM6gzpnOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOmc6fzqXOoc6azqTOo86fzpPOm86fzqUgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6czp/Onc6XIM6RzpPOmc6RzqMgzpHOnc6RzqPOpM6RzqPOmc6RzqMgzqbOkc6hzpzOkc6azp/Om86lzqTOoc6ZzpHOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzqDOkc6bzpHOmc6fzqfOqc6hzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6hzpnOls6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOo86Rzp3OkSDOp86RzpvOms6ZzpTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOp86xzrvOus65zrTOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjMwNzQnLCBBcmVhOiAnzpHOoc6dzpHOmc6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOks6RzqHOks6RzqHOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOkc6lzprOkc6dzpHOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzp3Olc6fzqfOqc6hzpkgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6gzpHOm86RzpnOn86nzqnOoc6ZIM6nzpHOm86azpnOlM6ZzprOl86jLCDOo86kzpHOnc6fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzqfOsc67zrrOuc60zrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYzMDc1JywgQXJlYTogJ86RzpzOnM6fzqXOm86ZzpHOnc6XIM6dzpfOo86fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6TzpHOks6hzpHOlM6ZzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6Tzp/OnM6RzqTOmSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpTOoc6Vzp3Omc6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOlc6bzpXOpc6YzpXOoc6fzp3Ol86jzp/OoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzpnOlc6hzpnOo86jzp/OoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOn86lzpzOmc6kzqPOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOoc6lzp/Onc6VzqHOmSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpvOmc6czpHOnc6ZIM6RzpzOnM6fzqXOm86ZzpHOnc6XzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6bzpnOnM6Rzp3OmSDOmc6VzqHOmc6jzqPOn86lIM6nzpHOm86azpnOlM6ZzprOl86jLCDOnM6VzqTOn86nzpkgzpHOk86Zzp/OpSDOoM6RzqXOm86fzqUgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6dzpXOkSDOoc6fzpTOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzp7Ol86hzp/OoM6fzqTOkc6czp8gzqfOkc6bzprOmc6UzpnOms6XzqMsIM6fzqXOoc6Rzp3On86gzp/Om86XIM6nzpHOm86azpnOlM6ZzprOl86jLCDOo86azpHOm86RIM6dzpXOqc6dIM6hzp/OlM6pzp0gzqfOkc6bzprOmc6UzpnOms6XzqMsIM6kzqHOpc6gzpfOpM6XIM6dzpfOo86fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzqfOsc67zrrOuc60zrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYzMDc3JywgQXJlYTogJ86RzpPOmc6fzqMgzpPOlc6pzqHOk86Zzp/OoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOnc6VzpHOoyDOo86azpnOqc6dzpfOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzpHOls6RzqDOmc6azp8gzprOkc6jzqPOkc6dzpTOoc6VzpnOkc6jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOkc6mzqXOpM6fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6TzpvOpc6mzp/Onc6VzqHOmSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpXOm86Rzp3OlyDOp86RzpvOms6ZzpTOmc6azpfOoywgzpXOpc6Uzp/OoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOkc6bzpHOnc6UzqHOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOkc6bzpvOmc6YzpXOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOkc6bzp/Opc6kzqPOmc6azp/OoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOkc6jzqPOkc6dzpTOoc6RIM6gzpHOm86bzpHOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOkc6jzqPOkc6dzpTOoc6VzpnOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOkc6jzqPOkc6dzpTOoc6Xzp3OnyDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOoc6lzp/OoM6XzpPOlyDOp86RzpvOms6ZzpTOmc6azpfOoywgzpvOlc6lzprOlyDOoM6VzqHOmc6jzqTOlc6hzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6czp/Om86RzpkgzprOkc6bzqXOks6RzpkgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6czqDOn86lzpvOkc6czpHOpM6jzpnOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzp3Olc6RIM6jzprOmc6pzp3OlyDOp86RzpvOms6ZzpTOmc6azpfOoywgzp3Olc6RIM6mzqnOms6RzpnOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzqDOn86jzpXOmc6UzpkgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6gzqXOoc6Tzp/OoyDOo86Rzp3OlyDOp86RzpvOms6ZzpTOmc6azpfOoywgzqPOkc6dzpcgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6jzpnOks6XzqHOlyDOp86RzpvOms6ZzpTOmc6azpfOoywgzqPOms6RzpvOkSDOps6fzqXOoc6azpHOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzqPOqc6bzpfOnc6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOps6fzqXOoc6azpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6mzqXOm86RzprOlc6jIM6azpHOoc6RzprOkc6bzpvOn86lIM6nzpHOm86azpnOlM6ZzprOl86jLCDOps6lzpvOkc6azpXOoyDOms6RzqPOo86Rzp3OlM6hzpHOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzqbOpc6bzpHOms6VzqMgzp7Olc6dzp/Ops6pzp3OpM6fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6nzqHOn86lzqPOn86lIM6nzpHOm86azpnOlM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86nzrHOu866zrnOtM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2MzA3OCcsIEFyZWE6ICfOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6RzqPOo86RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOks6fzqXOoc6Szp/Opc6hzp/OpSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpTOmc6RzqDOn86hzp/OoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOkc6hzqXOlM6ZIM6nzpHOm86azpnOlM6ZzprOl86jLCDOms6fzqXOnc6ZzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6bzpHOk86fzp3Ol86jzpkgzqfOkc6bzprOmc6UzpnOms6XzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6bzpHOpM6fzqXOoc6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOm86ZzpLOoc6fzqfOmc6fIM6nzpHOm86azpnOlM6ZzprOl86jLCDOnM6VzqTOkc6TzprOmc6kzqPOmSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpzOlc6kzpHOnM6fzqHOps6pzqPOlyDOp86RzpvOms6ZzpTOmc6azpfOoywgzp/Ooc6czp/OoyDOoM6Rzp3Okc6TzpnOkc6jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOoM6bzpHOnc6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOoM6lzqHOk86RzpTOmc6azpnOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzqPOkc6bzp/Onc6ZzprOmc6fzqUgzqfOkc6bzprOmc6UzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzqfOsc67zrrOuc60zrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYzMDgwJywgQXJlYTogJ86RzpPOmc6fzqMgzqDOkc6lzpvOn86jIM6azpHOm86bzpnOms6hzpHOpM6VzpnOkc6jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOkc6TzpnOn86jIM6gzpHOpc6bzp/OoyDOnc6ZzprOl86kzpfOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzpXOm86RzpnOn86nzqnOoc6ZzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6azqHOl86dzpcgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6bzpHOms6azqnOnM6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOnc6VzpEgzpPOqc6dzpnOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzp3Olc6RIM6XzqHOkc6azpvOlc6ZzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6dzpXOkSDOms6RzpvOm86ZzprOoc6RzqTOlc6ZzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6dzpXOkSDOo86ZzpvOkc6kzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6dzpXOn86nzqnOoc6RzprOmSDOp86RzpvOms6ZzpTOmc6azpfOoywgzqDOlc6kzqHOkc6bzqnOnc6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOoc6fzpTOn86azpfOoM6fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzqfOsc67zrrOuc60zrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYzMDgxJywgQXJlYTogJ86RzpbOkc6gzpnOms6fIM6dzpXOn86lIM6czpHOoc6czpHOoc6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOk86RzpvOl86dzpcgzp3Olc6fzqUgzpzOkc6hzpzOkc6hzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6VzpvOmc6RIM6RzpPOmc6fzqUgzp3Omc6azp/Om86Rzp/OpSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpXOm86ZzpEgzp3Omc6azpfOpM6XIM6nzpHOm86azpnOlM6ZzprOl86jLCDOmM6VzqPOlyDOms6RzpvOpc6SzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6azpHOm86fzpPOoc6ZzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6bzpHOk86fzpzOkc6dzqTOoc6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOm86ZzpzOkc6dzpkgzprOkc6hzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6dzpXOn86jIM6czpHOoc6czpHOoc6RzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6gzpHOoc6RzpTOlc6ZzqPOn86jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOoM6RzqHOmM6Vzp3Oqc6dzpHOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzqPOoM6RzpjOmc6VzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6jzqTOpc6bzpHOlM6RzqHOmSDOp86RzpvOms6ZzpTOmc6azpfOoywgzqTOoc6ZzqDOn86kzpHOnM6fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6nzpvOmc6RzpTOn86lIM6nzpHOm86azpnOlM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86nzrHOu866zrnOtM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2MzA4NScsIEFyZWE6ICfOkc6TzpnOkSDOoM6RzqHOkc6jzprOlc6lzpcgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6RzpPOmc6fzqMgzp3Omc6azp/Om86Rzp/OoyDOoM6RzpvOmc6fzqXOoc6Zzp/OpSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpPOm86RzqHOn86azpHOks6fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6bzpXOpc6azpXOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzpvOn86lzqTOoc6RIM6RzpPOmc6RzqMgzqDOkc6hzpHOo86azpXOpc6XzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6ezqXOnc6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOoM6RzpvOmc6fzqXOoc6ZIM6nzpHOm86azpnOlM6ZzprOl86jLCDOoM6Rzp3On86hzpHOnM6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOoM6VzqXOms6fzqfOqc6hzpkgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6gzpfOk86RzpTOkc6azpkgzqDOn86bzqXOp86hzp/Onc6fzqUgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6gzpfOk86RzpTOkc6azpkgzqPOpc6azpXOkc6jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOoM6fzpvOpc6nzqHOn86dzp8gzqfOkc6bzprOmc6UzpnOms6XzqMsIM6mzqHOkc6czpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6nzpHOnc6ZzqnOpM6XzqMgzqfOkc6bzprOmc6UzpnOms6XzqMnLCBQcmVmZWN0dXJlOiAnzqfOsc67zrrOuc60zrnOus6uz4InIH0sXG5cdHsgUG9zdGFsQ29kZTogJzYzMDg2JywgQXJlYTogJ86SzpnOk86bzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6azpHOoc6lzpXOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzprOkc6ozpHOm86RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOnM6VzqTOn86nzpkgzqfOn86lzqHOnM6ZzqTOo86RzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6czp/Onc6XIM6SzpHOpM6fzqDOlc6UzpnOn86lIM6nzpHOm86azpnOlM6ZzprOl86jLCDOnM6fzp3OlyDOlc6jzqbOmc6TzpzOlc6dzp/OpSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpzOn86dzpcgzpnOks6XzqHOqc6dIM6nzpHOm86azpnOlM6ZzprOl86jLCDOnM6fzp3OlyDOms6RzqHOkc6azpHOm86bzp/OpSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpzOn86dzpcgzprOn86lzqTOm86fzqXOnM6fzqXOo86Zzp/OpSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpzOn86dzpcgzpzOlc6TzpnOo86kzpfOoyDOm86RzqXOoc6RzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6czp/Onc6XIM6gzpHOnc6kzp/Oms6hzpHOpM6fzqHOn86jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOnM6fzp3OlyDOo86kzpHOpc6hzp/Onc6ZzprOl86kzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6czp/Onc6XIM6mzpnOm86fzpjOlc6fzqUgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6czp/Onc6XIM6nzpnOm86ZzpHOnc6UzpHOoc6Zzp/OpSDOp86RzpvOms6ZzpTOmc6azpfOoywgzqDOoc6fzpLOkc6kzpEtzpzOn86hzqbOn86dzp/OpSDOp86RzpvOms6ZzpTOmc6azpfOoywgzqPOms6XzqTOlyDOkc6TzpnOn86lIM6Rzp3OlM6hzpXOn86lIM6SzpHOpM6fzqDOlc6UzpnOn86lICwgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6jzprOl86kzpcgzpHOk86Zzp/OpSDOlM6XzpzOl86kzqHOmc6fzqUgzpLOkc6kzp/OoM6VzpTOmc6fzqUsIM6nzpHOm86azpnOlM6ZzprOl86jLCDOo86azpfOpM6XIM6RzpPOmc6fzqUgzpTOl86czpfOpM6hzpnOn86lKM6bzpHOms6fzqPOms6XzqTOlykgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6jzprOl86kzpcgzpHOk86Zzp/OpSDOoM6Rzp3OpM6VzpvOlc6XzpzOn86dzp/OoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzqPOms6XzqTOlyDOoM6hzp/Ops6XzqTOn86lIM6XzpvOmc6fzqUgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6jzprOl86kzpcgzqTOmc6czpnOn86lIM6gzqHOn86UzqHOn86czp/OpSDOmc6SzpfOoc6pzp0gzqfOkc6bzprOmc6UzpnOms6XzqMsIM6jzprOl86kzpcgzqTOmc6czpnOn86lIM6gzqHOn86UzqHOn86czp/OpSDOnM6VzpPOmc6jzqTOl86jIM6bzpHOpc6hzpHOoyDOp86RzpvOms6ZzpTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOp86xzrvOus65zrTOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjMwODcnLCBBcmVhOiAnzpLOn86lzpvOlc6lzqTOl86hzpnOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpTOkc6mzp3OlyDOkc6TzpnOn86lIM6fzqHOn86lzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6azpHOoc6fzqXOm86ZzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6azpHOpM6fzqXOnc6RzprOmc6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOms6VzqHOkc6jzpnOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpzOn86dzpcgzpHOk86Zzp/OpSDOlM6Zzp/Onc6lzqPOmc6fzqUgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6czp/Onc6XIM6RzpPOmc6fzqUgzqDOkc6dzqTOlc6bzpXOl86czp/Onc6fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6czp/Onc6XIM6RzpPOmc6fzqUgzqDOkc6lzpvOn86lIM6nzpHOm86azpnOlM6ZzprOl86jLCDOnM6fzp3OlyDOlM6fzqfOlc6ZzpHOoc6Zzp/OpSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpzOn86dzpcgzpbOqc6TzqHOkc6mzp/OpSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpzOn86dzpcgzprOqc6dzqPOpM6RzpzOn86dzpnOpM6fzqUgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6czp/Onc6XIM6ezpXOnc6fzqbOqc6dzqTOn86jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOnM6fzp3OlyDOns6XzqHOn86gzp/OpM6RzpzOn86lIM6nzpHOm86azpnOlM6ZzprOl86jLCDOnM6fzp3OlyDOn86jzpnOn86lIM6TzqHOl86Tzp/Ooc6Zzp/OpSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpzOn86dzpcgzqPOmc6czqnOnc6fzqMgzqDOlc6kzqHOkc6jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOnc6VzpEgzqPOms6XzqTOlyDOp86RzpvOms6ZzpTOmc6azpfOoywgzqPOms6XzqTOlyDOkc6TzpnOkc6jIM6Rzp3Onc6XzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6jzprOl86kzpcgzpHOk86ZzpHOoyDOpM6hzpnOkc6Uzp/OoyAozprOkc6lzqPOn86azpHOm86lzpLOmc6pzp0pIM6nzpHOm86azpnOlM6ZzprOl86jLCDOo86azpfOpM6XIM6VzqXOkc6TzpPOlc6bzpnOo86czp/OpSDOmM6Vzp/OpM6fzprOn86jKM6ezpXOnc6fzqbOqc6dzqTOn86jKSDOp86RzpvOms6ZzpTOmc6azpfOoywgzqPOms6XzqTOlyDOmM6Vzp/OpM6fzprOn86lKM6dzpXOkSDOo86azpfOpM6XKSDOp86RzpvOms6ZzpTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOp86xzrvOus65zrTOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjMwODgnLCBBcmVhOiAnzpHOk86ZzpEgzprOpc6hzpnOkc6azpcgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6RzpPOmc6fzpkgzpjOlc6fzpTOqc6hzp/OmSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOnc6ZzprOl86kzpfOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzpHOmc6czqDOlc6bzpnOpM6jzpkgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6TzpHOm86Xzp3OlyDOkc6TzpnOn86lIM6dzpnOms6fzpvOkc6fzqUgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6VzpvOkc6ZzqnOnc6RzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6WzqnOk86hzpHOps6fzqUgzpHOk86Zzp/OpSDOnc6ZzprOn86bzpHOn86lIM6nzpHOm86azpnOlM6ZzprOl86jLCDOl86czpXOoc6XIM6VzpvOmc6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOms6VzpvOpc6mzp/OoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzp3Omc6azpfOpM6XIM6nzpHOm86azpnOlM6ZzprOl86jLCDOoM6VzqHOmc6jzqTOlc6hzpkgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6gzqXOoc6Tzp/OoyDOo86ZzpjOqc6dzpnOkc6jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOo86gzpHOm86RzpjOoc6fzp3Ol86jzpnOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzqPOp86fzpnOnc6ZzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6mzqTOlc6hzqnOpM6XIM6nzpHOm86azpnOlM6ZzprOl86jJywgUHJlZmVjdHVyZTogJ86nzrHOu866zrnOtM65zrrOrs+CJyB9LFxuXHR7IFBvc3RhbENvZGU6ICc2MzEwMCcsIEFyZWE6ICfOks6hzpHOo86kzpHOnM6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOk86VzqHOkc6azpnOnc6XIM6nzpHOm86azpnOlM6ZzprOl86jLCDOlM6ZzpHOo86kzpHOpc6hzqnOo86XIM6gzpHOm86RzpnOn86azpHOo86kzqHOn86lIM6nzpHOm86azpnOlM6ZzprOl86jLCDOms6RzpvOpc6SzpXOoyDOoM6fzpvOpc6TzqXOoc6fzqUgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6azpXOm86bzpkgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6gzpHOm86RzpnOn86azpHOo86kzqHOnyDOp86RzpvOms6ZzpTOmc6azpfOoywgzqDOkc6kzpXOm86ZzpTOkc6jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOoM6fzpvOpc6TzqXOoc6fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6kzpHOns6ZzpHOoc6nzpfOoyDOp86RzpvOms6ZzpTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOp86xzrvOus65zrTOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNjMyMDAnLCBBcmVhOiAnzpHOk86Zzp/OoyDOnM6RzpzOkc6jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOkc6TzpnOn86jIM6gzpHOnc6kzpXOm86VzpfOnM6pzp0gzqfOkc6bzprOmc6UzpnOms6XzqMsIM6SzpXOoc6TzpnOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzpTOmc6fzp3Opc6jzpnOn86lIM6nzpHOm86azpnOlM6ZzprOl86jLCDOls6pzpPOoc6RzqbOn86lIM6nzpHOm86azpnOlM6ZzprOl86jLCDOnM6fzqXOoc6ZzpXOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzp3Olc6RIM6czp/Opc6UzpHOnc6ZzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6dzpXOkSDOoM6bzpHOk86ZzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6dzpXOkSDOoM6fzqTOlc6ZzpTOkc6ZzpEgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6dzpXOkSDOpM6Vzp3Olc6Uzp/OoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzp/Om86lzp3OmM6fzqMgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6gzpHOoM6RIM6RzpvOqc6dzpkgzqfOkc6bzprOmc6UzpnOms6XzqMsIM6gzpHOoc6RzpvOmc6RIM6UzpnOn86dzqXOo86Zzp/OpSDOp86RzpvOms6ZzpTOmc6azpfOoywgzqDOkc6hzpHOm86ZzpEgzp3Olc6RzqMgzqTOoc6ZzpPOm86ZzpHOoyDOp86RzpvOms6ZzpTOmc6azpfOoywgzqDOn86hzqTOkc6hzpnOkSDOp86RzpvOms6ZzpTOmc6azpfOoywgzqDOn86hzqTOlc6jIM6nzpHOm86azpnOlM6ZzprOl86jLCDOo86XzpzOkc6dzqTOoc6RIM6nzpHOm86azpnOlM6ZzprOl86jLCDOo86pzpbOn86gzp/Om86XIM6nzpHOm86azpnOlM6ZzprOl86jLCDOps6bzp/Ok86XzqTOkSDOp86RzpvOms6ZzpTOmc6azpfOoycsIFByZWZlY3R1cmU6ICfOp86xzrvOus65zrTOuc66zq7PgicgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzMwMDEnLCBBcmVhOiAnzpHOk86ZzpEgzprOpc6hzpnOkc6azpcgzqfOkc6dzpnOqc6dLCDOkc6TzpnOkSDOpM6hzpnOkc6UzpEgzqPOlc6bzpnOnc6fzqUgzqfOkc6dzpnOqc6dLCDOkc6TzpnOn86ZIM6YzpXOn86UzqnOoc6fzpkgzqPOms6bzpHOks6fzqDOn86lzpvOqc6dIM6nzpHOnc6ZzqnOnSwgzpHOk86Zzp/OoyDOoM6RzqXOm86fzqMgzpLOn86lzqTOkSDOp86Rzp3Omc6pzp0sIM6RzpbOn86TzqXOoc6VzqMgzpLOn86lzqTOkSDOp86Rzp3Omc6pzp0sIM6RzpbOn86TzqXOoc6VzqMgzqDOkc6bzpHOmc6fzqfOqc6hzpHOoyDOp86Rzp3Omc6pzp0sIM6RzpzOoM6VzpvOn86jIM6TzpHOpc6Uzp/OpSDOp86Rzp3Omc6pzp0sIM6Rzp3Opc6UzqHOn86ZIM6nzpHOnc6ZzqnOnSwgzpHOoc6nzp/Onc6kzpnOms6fIM6nzpHOnc6ZzqnOnSwgzpHOo86mzpXOnc6UzpnOm86VzqMgzqfOkc6dzpnOqc6dLCDOkc6nzpvOkc6UzpnOkc6azpXOoyDOp86Rzp3Omc6pzp0sIM6SzpHOpM6jzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOks6bzpnOmM6ZzpHOoyDOp86Rzp3Omc6pzp0sIM6Szp/Opc6kzpHOoyDOp86Rzp3Omc6pzp0sIM6TzpHOpc6Uzp/OoM6fzqXOm86RIM6nzpHOnc6ZzqnOnSwgzpPOmc6RzpvOn86jIM6nzpHOnc6ZzqnOnSwgzpPOoc6XzpPOn86hzpnOkc6dzpEgzqPOkc6hzpHOms6Xzp3Okc6jIM6nzpHOnc6ZzqnOnSwgzprOkc6bzpHOnM6Zzp/OoyDOp86Rzp3Omc6pzp0sIM6azpHOm86RzpzOn86jIM6nzpHOnc6ZzqnOnSwgzprOkc6czpHOpM6VzqHOkSDOp86Rzp3Omc6pzp0sIM6azpHOoc6RzpLOlSDOk86RzqXOlM6fzqUgzqfOkc6dzpnOqc6dLCDOms6RzqPOpM6hzpkgzpPOkc6lzpTOn86lIM6nzpHOnc6ZzqnOnSwgzprOmc6kzqXOoc6fzqMgzqfOkc6dzpnOqc6dLCDOms6fzp3OpM6fzprOpc6dzpfOk86ZIM6nzpHOnc6ZzqnOnSwgzprOn86lzp3OpM6fzqXOoc6RIM6nzpHOnc6ZzqnOnSwgzpvOkc6TzprOkc6UzpHOoyDOp86Rzp3Omc6pzp0sIM6bzpHOms6azp/OoyDOo86azpvOkc6Szp/OoM6fzqXOm86RzqMgzqfOkc6dzpnOqc6dLCDOm86ZzpLOkc6UzpkgzpLOn86lzqTOkSDOp86Rzp3Omc6pzp0sIM6czpHOnc6RzqTOmc6Rzp3OkSDOp86Rzp3Omc6pzp0sIM6czp/Opc6jzqTOkc6azp/OoyDOp86Rzp3Omc6pzp0sIM6gzpHOm86RzpnOn86nzqnOoc6RIM6nzpHOnc6ZzqnOnSwgzqDOm86RzqTOkc6dzpXOoyDOo86VzpvOmc6dzp/OpSDOp86Rzp3Omc6pzp0sIM6gzpvOkc6kzpHOnc6fzqMgzqPOlc6bzpnOnc6fzqUgzqfOkc6dzpnOqc6dLCDOoM6hzp/OlM6hzp/OnM6Zzp8gzqfOkc6dzpnOqc6dLCDOo86RzqHOkc6azpfOnc6RIM6nzpHOnc6ZzqnOnSwgzqPOms6bzpHOks6fzqDOn86lzpvOkSDOp86Rzp3Omc6pzp0sIM6jzqDOkc6dzpnOkc6azp/OoyDOp86Rzp3Omc6pzp0sIM6jzqTOkc6lzqHOn86jIM6jzpXOm86Zzp3On86lIM6nzpHOnc6ZzqnOnSwgzqbOkc6hzpHOk86TzpkgzqPOlc6bzpnOnc6fzqUgzqfOkc6dzpnOqc6dLCDOps6pzprOmc6RIM6TzpHOpc6Uzp/OpSDOp86Rzp3Omc6pzp0sIM6nzpHOo86Zzp8gzqfOkc6dzpnOqc6dLCDOp86fzp3OlM6hzp/OoyDOp86Rzp3Omc6pzp0nLCBQcmVmZWN0dXJlOiAnzqfOsc69zq/Pic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MzAwMicsIEFyZWE6ICfOkc6dzqkgzprOlc6mzpHOm86RIM6nzpHOnc6ZzqnOnSwgzpHOnc6pzqPOms6VzpvOlyDOp86Rzp3Omc6pzp0sIM6SzpvOkc6nzpXOoc6pzp3Omc6kzpnOo86jzpEgzqfOkc6dzpnOqc6dLCDOks6fzqXOms6fzpvOmc6VzqMgzqfOkc6dzpnOqc6dLCDOk86RzpLOkc6bzp/OnM6fzqXOoc6ZIM6nzpHOnc6ZzqnOnSwgzpTOlc6czqDOm86RIM6nzpHOnc6ZzqnOnSwgzpTOoc6fzpzOn86dzpXOoc6fIM6nzpHOnc6ZzqnOnSwgzpXOm86bzpfOnc6ZzprOnyDOp86Rzp3Omc6pzp0sIM6Wzp/Opc6dzpHOms6ZIM6nzpHOnc6ZzqnOnSwgzprOkc6azp/OoM6VzqTOoc6fzqMgzqfOkc6dzpnOqc6dLCDOms6RzpvOm86ZzpjOlc6RIM6azpnOo86jzpHOnM6fzqUgzqfOkc6dzpnOqc6dLCDOms6RzqTOqSDOms6VzqbOkc6bzpEgzqfOkc6dzpnOqc6dLCDOms6RzqbOn86lzqHOn86jIM6nzpHOnc6ZzqnOnSwgzprOlc6nzqHOlc6jIM6nzpHOnc6ZzqnOnSwgzprOn86kzqPOpc6mzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOms6fzqXOm86azp/Opc6YzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOm86XzpTOmc6Rzp3OkSDOp86Rzp3Omc6pzp0sIM6bzpnOnM6dzpcgzprOpc6UzqnOnc6ZzpHOoyDOp86Rzp3Omc6pzp0sIM6bzp/Opc6mzpHOoc6UzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOnM6VzqPOkSDOks6fzqXOms6fzpvOmc6VzqMgzqfOkc6dzpnOqc6dLCDOnM6VzqPOkc6lzpvOmc6RIM6nzpHOnc6ZzqnOnSwgzpzOlc6kzp/Op86ZIM6jzpnOoc6ZzpvOmc6fzqUgzqfOkc6dzpnOqc6dLCDOnM6ZzqfOkc6bzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOnM6fzqXOm86RzpzOlc6hzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOnM6gzp/Opc6TzpnOn86lzprOm86ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzp3Olc6RzqHOkSDOlc6jzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOnc6Vzp8gzqfOqc6hzpnOnyDOms6lzpTOqc6dzpnOkc6jIM6nzpHOnc6ZzqnOnSwgzp3Olc6hzpHOpM6WzpnOkSDOp86Rzp3Omc6pzp0sIM6dzpXOoc6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzqDOkc6bzpHOmc6RIM6hzp/Opc6czpHOpM6RIM6nzpHOnc6ZzqnOnSwgzqDOlc6kzqHOlc6jIM6azqXOlM6pzp3Omc6RzqMgzqfOkc6dzpnOqc6dLCDOoM6XzpPOlyDOp86Rzp3Omc6pzp0sIM6gzpvOkc6kzpHOnc6VzqMgzprOmc6jzqPOkc6czp/OpSDOp86Rzp3Omc6pzp0sIM6gzp/Om86VzpzOkc6hzqfOmSDOp86Rzp3Omc6pzp0sIM6gzp/Onc6kzpnOms6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzqPOmc6hzpnOm86ZIM6nzpHOnc6ZzqnOnSwgzqbOqc6kzp/Oms6RzpTOnyDOp86Rzp3Omc6pzp0sIM6nzqHOpc6jzpHOpc6TzpcgzqfOkc6dzpnOqc6dJywgUHJlZmVjdHVyZTogJ86nzrHOvc6vz4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzMwMDMnLCBBcmVhOiAnzpHOoc6czpXOnc6fzpkgzqfOkc6dzpnOqc6dLCDOms6RzpvOkc6czpkgzpHOoM6fzprOqc6hzp/Onc6fzqUgzqfOkc6dzpnOqc6dLCDOms6RzpvOpc6SzpXOoyDOp86Rzp3Omc6pzp0sIM6azqXOoc6ZzpHOms6fzqPOlc6bzpvOmc6RIM6nzpHOnc6ZzqnOnSwgzpzOkc6nzpHOmc6hzp/OmSDOp86Rzp3Omc6pzp0sIM6dzpXOnyDOp86pzqHOmc6fIM6RzqDOn86azp/Ooc6hzqnOnc6fzqUgzqfOkc6dzpnOqc6dLCDOoM6hzp/Oks6RzqHOnM6RIM6nzpHOnc6ZzqnOnSwgzqHOkc6czp3OlyDOp86Rzp3Omc6pzp0sIM6jzpHOnM6pzp3Okc6jIM6nzpHOnc6ZzqnOnSwgzqPOpM6lzpvOn86jIM6nzpHOnc6ZzqnOnSwgzqTOo86ZzpLOkc6hzpHOoyDOp86Rzp3Omc6pzp0sIM6mzpHOoc6RzpPOk86ZIM6RzqDOn86azp/Ooc6pzp3On86lIM6nzpHOnc6ZzqnOnSwgzqfOmc6bzpnOn86czp/Opc6Uzp/OpSDOp86Rzp3Omc6pzp0nLCBQcmVmZWN0dXJlOiAnzqfOsc69zq/Pic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MzAwNCcsIEFyZWE6ICfOkc6TzpnOn86ZIM6RzqDOn86jzqTOn86bzp/OmSDOp86Rzp3Omc6pzp0sIM6RzpvOmc6Tzp/OmSDOp86Rzp3Omc6pzp0sIM6Rzp3Omc6jzpHOoc6RzprOmSDOp86Rzp3Omc6pzp0sIM6RzqHOnM6Zzp8gzqfOkc6dzpnOqc6dLCDOks6RzpzOks6RzprOkc6UzpXOoyDOp86Rzp3Omc6pzp0sIM6TzqHOl86Tzp/Ooc6ZzpHOnc6RIM6gzpvOlc6czpXOnc6ZzpHOnc6pzp0gzqfOkc6dzpnOqc6dLCDOlM6VzqPOoM6fzqTOmc6azp8gzqfOkc6dzpnOqc6dLCDOlM6hzqXOoyDOp86Rzp3Omc6pzp0sIM6azpHOks6RzpvOm86RzqHOmc6Rzp3OkSDOp86Rzp3Omc6pzp0sIM6azpHOlM6hzp/OoyDOp86Rzp3Omc6pzp0sIM6azpHOms6fzpTOmc6azpkgzqfOkc6dzpnOqc6dLCDOms6RzpvOm86ZzpjOlc6RIM6jzpXOm86Zzp3On86lIM6nzpHOnc6ZzqnOnSwgzprOkc6dzqTOkc6dzp/OoyDOp86Rzp3Omc6pzp0sIM6azp/OoM6VzqTOn86ZIM6nzpHOnc6ZzqnOnSwgzpvOn86mzp/OoyDOp86Rzp3Omc6pzp0sIM6czpHOoc6fzqXOlM6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzpzOn86kzpbOmc6Rzp3OkSDOp86Rzp3Omc6pzp0sIM6gzpHOm86bzpfOms6RzqHOmc6Rzp3OkSDOp86Rzp3Omc6pzp0sIM6gzpHOnc6pIM6mzpvOqc6hzpnOkSDOp86Rzp3Omc6pzp0sIM6gzpHOoM6gzpHOlM6ZzpHOnc6RIM6azpHOms6fzpTOmc6azp/OpSDOp86Rzp3Omc6pzp0sIM6gzpvOlc6czpXOnc6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzqPOoM6Zzp3OkSDOp86Rzp3Omc6pzp0sIM6jzqbOkc6azp/OoyDOp86Rzp3Omc6pzp0sIM6kzqHOkc6nzpnOnc6ZzpHOms6fzqMgzqfOkc6dzpnOqc6dLCDOps6bzqnOoc6ZzpEgzqfOkc6dzpnOqc6dLCDOp86hzqXOo86fzqDOl86TzpcgzqfOkc6dzpnOqc6dLCDOqM6RzqHOmc6Rzp3OkSDOp86Rzp3Omc6pzp0nLCBQcmVmZWN0dXJlOiAnzqfOsc69zq/Pic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MzAwNScsIEFyZWE6ICfOkc6TzpnOkSDOp86Rzp3Omc6pzp0sIM6RzpvOmc6azpnOkc6dzp/OoyDOp86Rzp3Omc6pzp0sIM6RzqDOn86YzpfOms6VzqMgzqfOkc6dzpnOqc6dLCDOkc6jzprOn86hzpTOkc6bzp/OoyDOp86Rzp3Omc6pzp0sIM6SzpHOpM6fzpvOkc6azprOn86jIM6nzpHOnc6ZzqnOnSwgzpXOoM6ZzqPOms6fzqDOlyDOms6lzpTOqc6dzpnOkc6jIM6nzpHOnc6ZzqnOnSwgzpbOn86lzqHOks6RIM6nzpHOnc6ZzqnOnSwgzprOkc6hzpHOnc6fzqMgzqfOkc6dzpnOqc6dLCDOms6RzqHOlc6jIM6azqXOlM6pzp3Omc6RzqMgzqfOkc6dzpnOqc6dLCDOms6fzqXOps6fzqMgzqfOkc6dzpnOqc6dLCDOms6lzqHOpM6pzpzOkc6Uzp/OoyDOp86Rzp3Omc6pzp0sIM6bzpHOk86Tzp/OoyDOp86Rzp3Omc6pzp0sIM6bzpHOms6azp/OmSDOms6lzpTOqc6dzpnOkc6jIM6nzpHOnc6ZzqnOnSwgzpzOkc6dzp/Om86Zzp/OoM6fzqXOm86fIM6nzpHOnc6ZzqnOnSwgzpzOlc6jzprOm86RIM6nzpHOnc6ZzqnOnSwgzpzOoM6RzqDOmc6fzpvOn86jIM6nzpHOnc6ZzqnOnSwgzp3Olc6RIM6hzp/Opc6czpHOpM6RIM6nzpHOnc6ZzqnOnSwgzp3OpM6VzqHOlc6jIM6nzpHOnc6ZzqnOnSwgzp/OnM6RzpvOn86jIM6nzpHOnc6ZzqnOnSwgzp/Ooc6Yzp/Opc6dzpkgzqfOkc6dzpnOqc6dLCDOoM6RzqDOoM6RzpTOmc6Rzp3OkSDOms6lzpTOqc6dzpnOkc6jIM6nzpHOnc6ZzqnOnSwgzqDOoc6RzqPOlc6jIM6nzpHOnc6ZzqnOnSwgzqPOlc6czqDOoc6pzp3Okc6jIM6nzpHOnc6ZzqnOnSwgzqPOms6Zzp3Olc6jIM6nzpHOnc6ZzqnOnSwgzqPOms6fzp3Omc6Wzp8gzqfOkc6dzpnOqc6dLCDOps6fzqXOoc6dzpXOoyDOp86Rzp3Omc6pzp0sIM6nzpvOmc6RzqHOnyDOp86Rzp3Omc6pzp0sIM6nzqnOo86kzpcgzqfOkc6dzpnOqc6dLCDOqM6RzpjOn86TzpnOkc6dzp3On86jIM6nzpHOnc6ZzqnOnScsIFByZWZlY3R1cmU6ICfOp86xzr3Or8+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzczMDA2JywgQXJlYTogJ86RzpPOmc6fzqMgzpHOnc6kzqnOnc6Zzp/OoyDOlc6gzpnOo86azp/OoM6XzqMgzqfOkc6dzpnOqc6dLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzpbOpc6czqDOoc6RzpPOn86lIM6nzpHOnc6ZzqnOnSwgzpHOnc6pIM6Szp/Opc6SzpXOoyDOp86Rzp3Omc6pzp0sIM6RzqPOoM6hzpEgzp3Olc6hzpEgzqfOkc6dzpnOqc6dLCDOkc6jzqTOoc6RzqTOl86Tzp/OoyDOp86Rzp3Omc6pzp0sIM6RzqPOpM6hzpnOms6RzqMgzqfOkc6dzpnOqc6dLCDOkc6mzqHOkc6kzpEgzqfOkc6dzpnOqc6dLCDOks6RzpPOmSDOp86Rzp3Omc6pzp0sIM6SzpHOo86ZzpvOmc6Rzp3OkSDOp86Rzp3Omc6pzp0sIM6SzpHOo86ZzpvOn86gzp/Opc6bzp8gzqfOkc6dzpnOqc6dLCDOks6Vzp3Omc6fIM6nzpHOnc6ZzqnOnSwgzpLOn86lzpLOlc6jIM6nzpHOnc6ZzqnOnSwgzpPOlc6hzpHOms6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzpPOm86pzqPOo86RIM6nzpHOnc6ZzqnOnSwgzpPOoc6RIM6azpXOoc6RIM6nzpHOnc6ZzqnOnSwgzpTOkc6hzpzOkc6hzp/Op86pzqHOmSDOp86Rzp3Omc6pzp0sIM6UzpXOm86ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzpTOoc6RzprOn86dzpEgzprOmc6jzqPOkc6czp/OpSDOp86Rzp3Omc6pzp0sIM6UzqHOkc6azp/Onc6RIM6nzpHOnc6ZzqnOnSwgzpXOoM6ZzqPOms6fzqDOlyAgzprOmc6jzqPOkc6czp/OpSDOp86Rzp3Omc6pzp0sIM6WzqXOnM6gzqHOkc6Tzp/OoyDOp86Rzp3Omc6pzp0sIM6azpHOm86RzpzOmSDOms6ZzqPOo86RzpzOn86lIM6nzpHOnc6ZzqnOnSwgzprOkc6bzqXOlM6fzp3Omc6RIM6nzpHOnc6ZzqnOnSwgzprOkc6czpHOoc6RIM6UzpXOm86ZzpHOnc6pzp0gzqfOkc6dzpnOqc6dLCDOms6RzpzOkc6hzpEgzprOkc6bzqXOlM6fzp3Omc6RzqMgzqfOkc6dzpnOqc6dLCDOms6RzpzOmc6jzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOms6RzqHOmM6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzprOn86bzqXOnM6SzpHOoc6ZIM6nzpHOnc6ZzqnOnSwgzprOn86lzpzOn86lzpvOmSDOp86Rzp3Omc6pzp0sIM6azqHOpc6RIM6SzqHOpc6jzpcgzqfOkc6dzpnOqc6dLCDOm86fzqXOms6fzqXOnM6ZzqfOlc6bzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOnM6RzqHOkc6Yzp/Oms6VzqbOkc6bzpEgzqfOkc6dzpnOqc6dLCDOnM6VzpvOmc6jzqPOn86lzqHOk86VzpnOnyDOp86Rzp3Omc6pzp0sIM6czpXOpM6fzqfOmSDOms6RzqHOqc6dIM6nzpHOnc6ZzqnOnSwgzpzOmc6dzqnOmM6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzpzOn86YzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOnM6fzp3OlyDOn86UzpfOk86XzqTOoc6ZzpHOoyDOms6lzqHOmc6RzqMgzpPOqc6dzpnOkc6jIM6nzpHOnc6ZzqnOnSwgzp3On86nzpnOkSDOp86Rzp3Omc6pzp0sIM6gzpHOnc6VzpjOl86czp/OoyDOp86Rzp3Omc6pzp0sIM6gzpHOoc6RzpvOmc6RIM6nzpHOnc6ZzqnOnSwgzqDOlc6kzpHOm86ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzqDOpc6hzpPOn86jIM6UzpXOm86ZzpHOnc6pzp0gzqfOkc6dzpnOqc6dLCDOoc6RzpLOlM6fzqXOp86RIM6nzpHOnc6ZzqnOnSwgzqHOkc6gzpHOnc6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzqHOn86UzqnOoM6fzqMgzqfOkc6dzpnOqc6dLCDOo86azpHOps6ZzqnOpM6VzqMgzqfOkc6dzpnOqc6dLCDOo86azp/Opc6kzpXOm86pzp3Okc6jIM6nzpHOnc6ZzqnOnSwgzqPOoM6XzpvOmc6RIM6nzpHOnc6ZzqnOnSwgzqTOkc6lzqHOqc6dzpnOpM6XzqMgzqfOkc6dzpnOqc6dJywgUHJlZmVjdHVyZTogJ86nzrHOvc6vz4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzMwMDcnLCBBcmVhOiAnzpHOm86ZzprOkc6czqDOn86jIM6nzpHOnc6ZzqnOnSwgzpHOoc6VzpLOmc6kzpfOoyDOp86Rzp3Omc6pzp0sIM6RzqPOoM6hzp/Opc6bzpnOkc6dzp/OmSDOp86Rzp3Omc6pzp0sIM6RzqfOkc6kzpbOl86azpnOkSDOp86Rzp3Omc6pzp0sIM6SzpHOpM6fzqXOlM6ZzpHOoc6XzqMgzqfOkc6dzpnOqc6dLCDOks6RzqbOlc6jIM6nzpHOnc6ZzqnOnSwgzpLOoc6lzqPOlc6jIM6RzqDOn86azp/Ooc6hzqnOnc6fzqUgzqfOkc6dzpnOqc6dLCDOk86VzqnOoc6TzpnOn86lzqDOn86bzpcgzqfOkc6dzpnOqc6dLCDOlM6hzpHOnM6ZzpEgzqfOkc6dzpnOqc6dLCDOlc6czqDOoc6fzqPOnc6VzqHOn86jIM6nzpHOnc6ZzqnOnSwgzprOkc6SzpHOm86bzp/OoyDOp86Rzp3Omc6pzp0sIM6azpHOks6hzp/OoyDOp86Rzp3Omc6pzp0sIM6azpHOo86kzpXOm86bzp/OoyDOp86Rzp3Omc6pzp0sIM6azp/Opc6hzp3Okc6jIM6nzpHOnc6ZzqnOnSwgzprOoc6RzqDOlyDOp86Rzp3Omc6pzp0sIM6czpHOls6RICDOkc6gzp/Oms6fzqHOqc6dzp/OpSDOp86Rzp3Omc6pzp0sIM6czpHOmM6VzqMgzqfOkc6dzpnOqc6dLCDOnM6VzqTOkc6czp/Ooc6mzqnOo86XIM6nzpHOnc6ZzqnOnSwgzpzOlc6kzp/Op86ZIM6RzqDOn86azp/Ooc6pzp3On86lIM6nzpHOnc6ZzqnOnSwgzpzOn86lzqHOmSDOk86VzqnOoc6TzpnOn86lzqDOn86bzpXOqc6jIM6nzpHOnc6ZzqnOnSwgzp3Omc6gzp/OoyDOp86Rzp3Omc6pzp0sIM6gzpHOoc6RzpvOmc6RIM6azp/Opc6hzp3OkSDOp86Rzp3Omc6pzp0sIM6gzpHOpM6XzpzOkSDOp86Rzp3Omc6pzp0sIM6mzpnOm86ZzqDOoM6fzqMgzqfOkc6dzpnOqc6dLCDOps6fzp3Olc6jIM6nzpHOnc6ZzqnOnSwgzqbOpc6bzpHOms6XIM6nzpHOnc6ZzqnOnSwgzqfOkc6czqDOkc6YzpEgzqfOkc6dzpnOqc6dJywgUHJlZmVjdHVyZTogJ86nzrHOvc6vz4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzMwMTEnLCBBcmVhOiAnzpHOk86ZzpEgzqHOn86lzpzOlc6bzpcgzqfOkc6dzpnOqc6dLCDOkc6TzpnOn86jIM6ZzqnOkc6dzp3Ol86jIM6nzpHOnc6ZzqnOnSwgzpHOk86Zzp/OoyDOnc6VzprOpM6RzqHOmc6fzqMgzqfOkc6dzpnOqc6dLCDOkc6dzqnOoM6fzpvOlyAgzqfOkc6dzpnOqc6dLCDOkc6hzpHOlM6RzpnOnc6RIM6nzpHOnc6ZzqnOnSwgzpHOo86mzpXOnc6Uzp/OoyDOp86Rzp3Omc6pzp0sIM6Szp/Opc6SzpHOoyDOp86Rzp3Omc6pzp0sIM6SzqHOkc6jzprOkc6jIM6nzpHOnc6ZzqnOnSwgzpLOoc6ZzqTOn86czpHOoc6kzpcgzqfOkc6dzpnOqc6dLCDOmc6czqDOoc6fzqMgzqfOkc6dzpnOqc6dLCDOms6RzpvOm86ZzprOoc6RzqTOl86jIM6nzpHOnc6ZzqnOnSwgzprOkc6ozp/OlM6RzqPOn86jIM6nzpHOnc6ZzqnOnSwgzprOn86czpnOpM6RzpTOlc6jIM6nzpHOnc6ZzqnOnSwgzpvOmc6SzpHOnc6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzpvOn86lzqTOoc6fIM6nzpHOnc6ZzqnOnSwgzp3On86czpnOms6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzqDOkc6bzpHOmc6RIM6RzpPOmc6RIM6hzp/Opc6czpXOm86XIM6nzpHOnc6ZzqnOnSwgzqDOkc6kzqPOmc6Rzp3On86jIM6nzpHOnc6ZzqnOnSwgzqPOms6RzpvOqc6kzpcgzqfOkc6dzpnOqc6dLCDOps6hzpHOk86azp/Oms6RzqPOpM6VzpvOnyAozqDOkc6hzpHOlM6VzpnOo86fzqMpIM6nzpHOnc6ZzqnOnSwgzqfOqc6hzpEgzqPOps6RzprOmc6pzp0gzqfOkc6dzpnOqc6dJywgUHJlZmVjdHVyZTogJ86nzrHOvc6vz4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzMwMTQnLCBBcmVhOiAnzpHOk86ZzpEgzpzOkc6hzpnOnc6RIM6nzpHOnc6ZzqnOnSwgzpLOoc6lzqPOlc6jIM6azqXOlM6pzp3Omc6RzqMgzqfOkc6dzpnOqc6dLCDOk86VzqHOkc6dzpkgzqfOkc6dzpnOqc6dLCDOms6fzpnOm86RzpTOkSDOp86Rzp3Omc6pzp0sIM6azp/Onc6kzp/OnM6RzqHOmSDOp86Rzp3Omc6pzp0sIM6azqXOoM6RzqHOmc6jzqPOn86jIM6nzpHOnc6ZzqnOnSwgzpvOn86lzqTOoc6RzprOmSDOp86Rzp3Omc6pzp0sIM6czpHOm86VzpzOlSDOp86Rzp3Omc6pzp0sIM6czpHOoc6fzqXOm86ZzpHOp86ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzpzOlc6kzp/Op86ZIM6azp/Onc6kzp/OnM6RzqHOmc6fzqUgzqfOkc6dzpnOqc6dLCDOnM6fzpTOmSDOp86Rzp3Omc6pzp0sIM6ezpHOnM6fzqXOlM6fzqfOqc6hzpkgzqfOkc6dzpnOqc6dLCDOns6XzqHOn86azpHOnM6gzpkgzqfOkc6dzpnOqc6dLCDOoM6RzpvOkc6Zzp8gzpPOlc6hzpHOnc6ZIM6nzpHOnc6ZzqnOnSwgzqDOkc6kzpXOm86bzpHOoc6ZIM6nzpHOnc6ZzqnOnSwgzqDOm86RzqTOkc6dzpnOkc6jIM6nzpHOnc6ZzqnOnScsIFByZWZlY3R1cmU6ICfOp86xzr3Or8+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzczMTAwJywgQXJlYTogJ86RzpPOmc6RIM6WzqnOnc6XIM6nzpHOnc6ZzqnOnSwgzpHOk86ZzpEgzqTOoc6ZzpHOlM6RIM6czp/Onc6RzqPOpM6XzqHOmSDOp86Rzp3Omc6pzp0sIM6RzpPOmc6fzpkgzpjOlc6fzpTOqc6hzp/OmSDOnc6VzpHOoyDOms6lzpTOqc6dzpnOkc6jIM6nzpHOnc6ZzqnOnSwgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6azqXOlM6pzp3Omc6RzqMgzqfOkc6dzpnOqc6dLCDOkc6TzpnOn86jIM6dzpnOms6fzpvOkc6fzqMgzqfOkc6dzpnOqc6dLCDOkc6TzpnOn86jIM6fzp3On86lzqbOoc6Zzp/OoyDOp86Rzp3Omc6pzp0sIM6RzpXOoc6fzpTOoc6fzpzOmc6fICjOoM6VzqHOmc6fzqfOlyDOo86kzpXOoc6dzqnOnSkgzqfOkc6dzpnOqc6dLCDOkc6azqHOn86gzp/Om86XIM6nzpHOnc6ZzqnOnSwgzpHOm86VzqTOoc6fzqXOks6RzqHOmSDOp86Rzp3Omc6pzp0sIM6Rzp3Olc6czp/OnM6lzpvOn86ZIM6nzpHOnc6ZzqnOnSwgzpHOoc6Tzp/Opc6bzpXOoyDOkc6hzqnOnc6Zzp/OpSDOp86Rzp3Omc6pzp0sIM6RzqHOk86fzqXOm86ZzpTOlc6jIM6jzqbOkc6azpnOqc6dIM6nzpHOnc6ZzqnOnSwgzpHOoc6pzp3OmSDOp86Rzp3Omc6pzp0sIM6RzqfOm86RzpTOlc6jIM6nzpHOnc6ZzqnOnSwgzpLOkc6czpLOkc6azp/OoM6fzqXOm86fIM6nzpHOnc6ZzqnOnSwgzpLOkc6hzqXOoM6VzqTOoc6fIM6nzpHOnc6ZzqnOnSwgzpPOkc6bzpHOpM6RzqMgzqfOkc6dzpnOqc6dLCDOk86RzpvOl86dzpcgzqfOkc6dzpnOqc6dLCDOk86VzqHOn86bzpHOms6azp/OoyDOp86Rzp3Omc6pzp0sIM6TzpXOoc6fzqDOoc6Zzp3On86jIM6nzpHOnc6ZzqnOnSwgzpPOn86lzpLOlc6hzp3Olc6kzp8gzpzOn86dzpHOo86kzpfOoc6ZIM6nzpHOnc6ZzqnOnSwgzpTOkc6hzpHOpM6jzp/OoyDOp86Rzp3Omc6pzp0sIM6Wzp/Ooc6dzpHOlM6XzqMgzqfOkc6dzpnOqc6dLCDOmM6VzqHOmc6jzp8gzqfOkc6dzpnOqc6dLCDOmM6lzpzOmc6RIM6nzpHOnc6ZzqnOnSwgzprOkc6YzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOms6RzpvOkc6YzpHOoyDOp86Rzp3Omc6pzp0sIM6azpHOm86fzqHOoc6fzqXOnM6RIM6nzpHOnc6ZzqnOnSwgzprOkc6czqDOkc6dzpkgzqfOkc6dzpnOqc6dLCDOms6RzpzOoM6fzpkgzqfOkc6dzpnOqc6dLCDOms6RzqTOqSDOnM6RzqHOkc6YzpkgzqfOkc6dzpnOqc6dLCDOms6RzqTOqc6nzqnOoc6ZIM6nzpHOnc6ZzqnOnSwgzprOn86dzqTOn86gzp/Opc6bzpEgzqfOkc6dzpnOqc6dLCDOms6fzqHOkc6azpnOlc6jIM6nzpHOnc6ZzqnOnSwgzprOn86lzpzOkc6hzpXOoyDOp86Rzp3Omc6pzp0sIM6azp/Opc6dzp/Opc6gzpnOlM6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzpvOn86lzpvOn86jIM6nzpHOnc6ZzqnOnSwgzpvOpc6TzpnOlM6VzqMgzqfOkc6dzpnOqc6dLCDOnM6RzpTOkc6hzp8gzqfOkc6dzpnOqc6dLCDOnM6RzpvOkc6ezpEgzqfOkc6dzpnOqc6dLCDOnM6RzqHOkc6YzpkgzqfOkc6dzpnOqc6dLCDOnM6RzqHOnM6RzqHOkc6jIM6nzpHOnc6ZzqnOnSwgzpzOn86dzpcgzpHOk86ZzpHOoyDOpM6hzpnOkc6UzpHOoyDOpM6WzpHOk86azpHOoc6fzpvOqc6dIM6nzpHOnc6ZzqnOnSwgzpzOn86dzpcgzprOpc6hzpnOkc6jIM6RzpPOk86VzpvOqc6dIM6RzpMuzpnOqc6Rzp0uzpPOn86lzpLOlc6hzp0uIM6nzpHOnc6ZzqnOnSwgzpzOn86lzpbOn86lzqHOkc6jIM6nzpHOnc6ZzqnOnSwgzpzOpc6bzqnOnc6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzp3Olc6hzp/Oms6fzqXOoc6fzqMgzqfOkc6dzpnOqc6dLCDOn86RzqPOlyDOp86Rzp3Omc6pzp0sIM6gzpHOls6Zzp3On86jIM6nzpHOnc6ZzqnOnSwgzqDOkc6dzpHOk86ZzpEgzqfOkc6dzpnOqc6dLCDOoM6VzqHOmc6Szp/Om86ZzpEgzprOpc6UzqnOnc6ZzpHOoyDOp86Rzp3Omc6pzp0sIM6gzpvOkc6kzqXOks6fzpvOkSDOp86Rzp3Omc6pzp0sIM6gzp/OpM6ZzqPOpM6XzqHOmc6RIM6nzpHOnc6ZzqnOnSwgzqDOpc6YzpHOoc6ZIM6nzpHOnc6ZzqnOnSwgzqPOoM6XzpvOmc6RzqHOmc6RIM6nzpHOnc6ZzqnOnSwgzqPOpM6RzpvOn86jIM6nzpHOnc6ZzqnOnSwgzqPOpM6RzqXOoc6fzqMgzpHOms6hzqnOpM6XzqHOmc6fzqUgzqfOkc6dzpnOqc6dLCDOo86kzpXOoc6dzpXOoyAoJiAxMTUgzqDOnCkgzqfOkc6dzpnOqc6dLCDOpM6VzqHOo86Rzp3Okc6jIM6nzpHOnc6ZzqnOnSwgzqTOo86RzprOmc6jzqTOoc6RIM6nzpHOnc6ZzqnOnSwgzqfOkc6dzpnOkSDOp86Rzp3Omc6pzp0sIM6nzp/Ooc6UzpHOms6ZIM6nzpHOnc6ZzqnOnSwgzqfOqc6hzpHOps6RzprOmc6RIM6nzpHOnc6ZzqnOnScsIFByZWZlY3R1cmU6ICfOp86xzr3Or8+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzczMTMxJywgQXJlYTogJ86nzpHOnc6ZzpEgzqfOkc6dzpnOqc6dJywgUHJlZmVjdHVyZTogJ86nzrHOvc6vz4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzMxMzInLCBBcmVhOiAnzqfOkc6dzpnOkSDOp86Rzp3Omc6pzp0nLCBQcmVmZWN0dXJlOiAnzqfOsc69zq/Pic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MzEzMycsIEFyZWE6ICfOp86Rzp3Omc6RIM6nzpHOnc6ZzqnOnScsIFByZWZlY3R1cmU6ICfOp86xzr3Or8+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzczMTM0JywgQXJlYTogJ86nzpHOnc6ZzpEgzqfOkc6dzpnOqc6dJywgUHJlZmVjdHVyZTogJ86nzrHOvc6vz4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzMxMzUnLCBBcmVhOiAnzqfOkc6dzpnOkSDOp86Rzp3Omc6pzp0nLCBQcmVmZWN0dXJlOiAnzqfOsc69zq/Pic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MzEzNicsIEFyZWE6ICfOp86Rzp3Omc6RIM6nzpHOnc6ZzqnOnScsIFByZWZlY3R1cmU6ICfOp86xzr3Or8+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzczMTM3JywgQXJlYTogJ86nzpHOnc6ZzpEgzqfOkc6dzpnOqc6dJywgUHJlZmVjdHVyZTogJ86nzrHOvc6vz4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzMyMDAnLCBBcmVhOiAnzpHOoM6kzpXOoc6RIM6nzpHOnc6ZzqnOnSwgzqDOm86RzqTOkc6dzpkgzqfOkc6dzpnOqc6dLCDOo86fzqXOlM6RICDOp86Rzp3Omc6pzp0sIM6kzqPOmc6azpHOm86RzqHOmc6RIM6azqXOlM6pzp3Omc6RzqMgzqfOkc6dzpnOqc6dJywgUHJlZmVjdHVyZTogJ86nzrHOvc6vz4nOvScgfSxcblx0eyBQb3N0YWxDb2RlOiAnNzMzMDAnLCBBcmVhOiAnzpLOkc6dzqTOlc6jICDOp86Rzp3Omc6pzp0sIM6azqHOpc6fIM6dzpXOoc6fIM6nzpHOnc6ZzqnOnSwgzpzOn86lzqHOnc6ZzpXOoyDOp86Rzp3Omc6pzp0nLCBQcmVmZWN0dXJlOiAnzqfOsc69zq/Pic69JyB9LFxuXHR7IFBvc3RhbENvZGU6ICc3MzQwMCcsIEFyZWE6ICfOkc6TzpnOn86jIM6Rzp3OpM6pzp3Omc6fzqMgzprOkc6bzpvOlc6hzpPOmc6Rzp3Oqc6dIM6nzpHOnc6ZzqnOnSwgzpHOk86Zzp/OoyDOk86VzqnOoc6TzpnOn86jIM6azpnOo86jzpHOnM6fzqUgzqfOkc6dzpnOqc6dLCDOkc6Wzp/Ok86lzqHOkc6jIM6nzpHOnc6ZzqnOnSwgzpHOnc6pIM6UzqHOkc6gzpHOnc6ZzpHOoyDOp86Rzp3Omc6pzp0sIM6RzqHOnM6Vzp3On86nzqnOoc6ZIM6nzpHOnc6ZzqnOnSwgzpLOkc6hzpTOmc6Rzp3OkSDOp86Rzp3Omc6pzp0sIM6TzpHOm86fzqXOks6RzqMgzqfOkc6dzpnOqc6dLCDOk86hzpHOnM6Szp/Opc6jzpEgzqfOkc6dzpnOqc6dLCDOk86hzpfOk86fzqHOmc6Rzp3OkSDOoM6fzpvOpc6hzqHOl86dzpnOkc6jIM6nzpHOnc6ZzqnOnSwgzpTOkc6mzp3OlyDOp86Rzp3Omc6pzp0sIM6UzpXOoc6czpnOls6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzpTOoc6RzqDOkc6dzpnOkc6jIM6nzpHOnc6ZzqnOnSwgzpXOm86RzqbOn86dzpfOo86fzqMgzqfOkc6dzpnOqc6dIM6nzpHOnc6ZzqnOnSwgzpbOkc6nzpHOoc6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzpbOlc6hzpLOmc6Rzp3OkSDOp86Rzp3Omc6pzp0sIM6azpHOks6fzqXOo86ZIM6nzpHOnc6ZzqnOnSwgzprOkc6bzpvOlc6hzpPOmc6Rzp3OkSDOp86Rzp3Omc6pzp0sIM6azpHOm86fzqXOlM6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzprOkc6bzqXOks6ZzpHOnc6XIM6nzpHOnc6ZzqnOnSwgzprOkc6hzpXOps6ZzpvOmc6Rzp3OkSDOp86Rzp3Omc6pzp0sIM6azpHOo86kzpXOm86ZIM6azpnOo86jzpHOnM6fzqUgzqfOkc6dzpnOqc6dLCDOms6RzqTOls6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzprOkc6kzqkgzqDOkc6bzpHOmc6fzprOkc6jzqTOoc6fIM6nzpHOnc6ZzqnOnSwgzprOlc6hzpEgzqfOkc6dzpnOqc6dLCDOms6ZzqPOo86RzpzOn86jIM6nzpHOnc6ZzqnOnSwgzprOn86azprOmc6dzp8gzpzOlc6kzp/Op86ZIM6nzpHOnc6ZzqnOnSwgzprOn86bzpXOnc6XIM6nzpHOnc6ZzqnOnSwgzprOn86hzqbOkc6bzqnOnc6RzqMgzqfOkc6dzpnOqc6dLCDOms6fzqTOo86ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzprOn86lzprOn86lzp3Okc6hzpEgzqfOkc6dzpnOqc6dLCDOms6fzqXOnc6fzqXOoM6ZzqTOo86RIM6nzpHOnc6ZzqnOnSwgzprOn86lzqHOmM6ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzpvOmc6czpXOnc6ZzqPOms6fzqMgzqfOkc6dzpnOqc6dLCDOm86fzqXOo86RzprOmc6VzqMgzqfOkc6dzpnOqc6dLCDOm86lzqHOmc6UzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOnM6Rzp3Olc6hzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOnM6RzqHOlc6UzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOnM6Vzp3Omc6Rzp3OkSDOp86Rzp3Omc6pzp0sIM6czpXOoc6RzpTOkSDOp86Rzp3Omc6pzp0sIM6czpXOpM6fzqfOmSDOm86fzqXOo86RzprOmc6fzqUgzqfOkc6dzpnOqc6dLCDOnc6Vzp8gzqfOqc6hzpnOnyDOms6ZzqPOo86RzpzOn86lIM6nzpHOnc6ZzqnOnSwgzp3Oqc6gzpfOk86VzpnOkSDOp86Rzp3Omc6pzp0sIM6gzpHOoM6gzpHOk86ZzpHOnc6dzpHOms6XzpTOlc6jIM6nzpHOnc6ZzqnOnSwgzqDOlc6hzpLOn86bzpHOms6ZzpEgzqfOkc6dzpnOqc6dLCDOoM6ZzqDOlc6hzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOoM6bzpHOms6RzpvOqc6dzpEgzqfOkc6dzpnOqc6dLCDOoM6fzpvOm86lzqHOl86dzpnOkSDOp86Rzp3Omc6pzp0sIM6gzp/OpM6RzpzOmc6UzpEgzqfOkc6dzpnOqc6dLCDOoM6lzqHOk86fzqMgzprOmc6jzqPOkc6czp/OpSDOp86Rzp3Omc6pzp0sIM6hzp/Oms6azpEgzqfOkc6dzpnOqc6dLCDOo86mzpHOms6fzqDOl86TzpHOlM6ZIM6nzpHOnc6ZzqnOnSwgzqTOoc6RzqfOl86bzp/OoyDOp86Rzp3Omc6pzp0sIM6kzqHOmc6RzpvOqc6dzpnOkSDOp86Rzp3Omc6pzp0sIM6kzqPOmc6azpHOm86RzqHOmc6RICDOms6ZzqPOo86RzpzOn86lIM6nzpHOnc6ZzqnOnSwgzqbOkc6bzpHOo86RzqHOnc6RIM6nzpHOnc6ZzqnOnSwgzqbOkc6bzpXOm86ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzqbOn86lzqHOnc6RzpTOn86jIM6nzpHOnc6ZzqnOnSwgzqbOpM6VzqHOn86bzpHOms6azpEgzqfOkc6dzpnOqc6dLCDOp86RzpnOoc6VzpjOmc6Rzp3OkSDOp86Rzp3Omc6pzp0sIM6nzpHOoc6RzqXOk86XIM6nzpHOnc6ZzqnOnSwgzqfOkc6hzqfOkc6bzpnOkc6dzpEgzqfOkc6dzpnOqc6dLCDOp86fzqHOlc6lzqTOmc6Rzp3OkSDOp86Rzp3Omc6pzp0sIM6nzp/Opc6UzpHOm86ZzpHOnc6RIM6nzpHOnc6ZzqnOnSwgzqfOoc6lzqPOn86jzprOkc6bzpnOpM6ZzqPOo86RIM6nzpHOnc6ZzqnOnScsIFByZWZlY3R1cmU6ICfOp86xzr3Or8+Jzr0nIH0sXG5cdHsgUG9zdGFsQ29kZTogJzgyMTAwJywgQXJlYTogJ86RzpPOmc6RIM6VzqHOnM6Zzp/Onc6XIM6nzpnOn86lLCDOkc6TzpnOn86jIM6TzpXOqc6hzpPOmc6fzqMgzqPOpc6azp/Opc6jzpfOoyDOp86Zzp/OpSwgzpHOk86Zzp/OoyDOmc6pzpHOnc6dzpfOoyDOp86Zzp/OpSwgzpHOnM6gzpXOm86fzqMgzqfOmc6fzqUsIM6Rzp3Okc6SzpHOpM6fzqMgzqfOmc6fzqUsIM6RzqXOk86pzp3Opc6czpEgzqfOmc6fzqUsIM6SzpHOo86ZzpvOlc6pzp3On86ZzprOnyDOp86Zzp/OpSwgzpLOlc6hzpLOlc6hzpHOpM6fIM6nzpnOn86lLCDOks6bzqXOp86RzpTOkSDOp86Zzp/OpSwgzpLOn86azpHOoc6ZzpEgzqfOmc6fzqUsIM6Szp/Opc6Uzp/OpM6fzqDOn86jIM6nzpnOn86lLCDOks6fzqXOnc6fIM6nzpnOn86lLCDOk86Zzp/Oo86pzp3Okc6jIM6nzpnOn86lLCDOk86hzpnOlM6ZzpEgzqfOmc6fzqUsIM6UzpHOps6dzqnOnc6RzqMgzqfOmc6fzqUsIM6UzpXOm86mzpnOnc6ZIM6nzpnOn86lLCDOls6lzqbOmc6RzqMgzqfOmc6fzqUsIM6YzqXOnM6ZzpHOnc6RIM6nzpnOn86lLCDOms6RzpvOm86ZzpzOkc6jzpnOkSDOp86Zzp/OpSwgzprOkc6hzpTOkc6czqXOm86RIM6nzpnOn86lLCDOms6RzqHOpc6VzqMgzqfOmc6fzqUsIM6azpHOoc6mzpHOoyDOp86Zzp/OpSwgzprOkc6kzpHOoc6hzpHOms6kzpfOoyDOp86Zzp/OpSwgzprOlc6hzpHOnM6VzpnOkSDOp86Zzp/OpSwgzprOn86Zzp3OlyDOp86Zzp/OpSwgzpvOlc6lzprOqc6dzpnOkSDOp86Zzp/OpSwgzpvOmc6bzpnOms6RzqMgzqfOmc6fzqUsIM6czp/Onc6XIM6RzpPOmc6fzqUgzprOqc6dL86dzp/OpSDOps6hzpHOk86azp/Oki4gzqfOmc6fzqUsIM6czp/Onc6XIM6RzpPOmc6fzqUgzpzOl86dzpEgzqfOmc6fzqUsIM6czp/Onc6XIM6RzpPOmc6fzqUgzqPOpM6VzqbOkc6dzp/OpSDOp86Zzp/OpSwgzpzOn86dzpcgzpHOk86ZzqnOnSDOoM6RzqTOlc6hzqnOnSDOp86Zzp/OpSwgzpzOn86dzpcgzpzOpc6hzqPOmc6dzpnOlM6Zzp/OpSDOp86Zzp/OpSwgzpzOn86dzpcgzqDOkc6dzpHOk86ZzpHOoyDOms6fzpnOnC7OoM6bzpHOms6ZzpTOmc6pzqTOmc6jLiDOp86Zzp/OpSwgzpzOn86dzpcgzqTOkc6ezpnOkc6hzqfOqc6dIM6nzpnOn86lLCDOnM6lzqHOnM6XzpPOms6ZIM6nzpnOn86lLCDOnc6Vzp3Ol86kzpEgzqfOmc6fzqUsIM6dzpXOn86nzqnOoc6ZIM6nzpnOn86lLCDOoM6RzpPOmc6UzpEgzqfOmc6fzqUsIM6gzpHOoc6RzpvOmc6RIM6RzpPOmc6RzqMgzqbOqc6kzpXOmc6dzpfOoyDOp86Zzp/OpSwgzqfOmc6fzqMgzqfOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzqfOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzgyMTAxJywgQXJlYTogJ86RzpPOmc6fzqMgzqDOkc6dzqTOlc6bzpXOl86czqnOnSDOnc6XzqPOn86jIM6nzpnOn86lLCDOkc6hzqfOn86dzqTOn86dzpfOo86fIM6fzpnOnc6fzqXOo86jzqnOnSDOp86Zzp/OpSwgzpHOo86gzpHOm86RzpjOoc6fzprOkc6czqDOn86jIM6fzpnOnc6fzqXOo86jzqnOnSDOp86Zzp/OpSwgzpLOkc6kzp/OoyDOp86Zzp/OpSwgzpPOkc6ZzpTOn86lzqHOn86dzpfOo86fzqMgzqfOmc6fzqUsIM6azpHOo86kzqHOnyDOn86Zzp3On86lzqPOo86pzp0gzqfOmc6fzqUsIM6czp/Onc6RzqbOpM6XzqMgzqfOmc6fzqUsIM6czp/Onc6fzpvOmc6RIM6nzpnOn86lLCDOnc6VzprOpM6RIM6nzpnOn86lLCDOnc6XzqPOmSDOoM6Rzp3Okc6TzpnOkc6jIM6nzpnOn86lLCDOn86Zzp3On86lzqPOo86VzqMgzqfOmc6fzqUsIM6gzpHOo86RzqMgzp3Ol86jzp/OoyDOp86Zzp/OpSwgzqDOn86dzqTOmc6azp/Onc6XzqPOmSDOp86Zzp/OpSwgzqDOoc6RzqPOn86dzpfOo86ZzpEgzqfOmc6fzqUsIM6jzpHOnc6kzpEgzqDOkc6dzpHOk86ZzpEgzqfOmc6fzqUsIM6jzprOm86RzpLOmc6RIM6nzpnOn86lLCDOps6bzpHOpM6jzpnOkSDOp86Zzp/OpScsIFByZWZlY3R1cmU6ICfOp86vzr/PhScgfSxcblx0eyBQb3N0YWxDb2RlOiAnODIxMDInLCBBcmVhOiAnzpHOk86Zzp/OoyDOo86kzpXOps6Rzp3On86jIM6czpHOo86kzpnOp86pzqHOmc6pzp0gzqfOmc6fzqUsIM6RzpvOnM6lzqHOn86jIM6nzpnOn86lLCDOkc6hzpzOn86bzpnOkSDOp86Zzp/OpSwgzpLOkc6SzpnOm86fzpkgzqfOmc6fzqUsIM6SzpXOnc6VzqTOmc6azp8gzqfOmc6fzqUsIM6SzpXOo86jzpEgzqfOmc6fzqUsIM6Uzp/OpM6ZzpEgzqDOpc6hzpPOmc6fzqUgzqfOmc6fzqUsIM6VzpvOkc6kzpEgzqfOmc6fzqUsIM6VzpzOoM6fzqHOlc6Zzp/OoyDOp86Zzp/OpSwgzpXOns6pIM6UzpnOlM6lzpzOkSDOp86Zzp/OpSwgzpjOn86bzp/OoM6fzqTOkc6czpkgzqfOmc6fzqUsIM6azpHOm86RzpzOqc6kzpcgzqfOmc6fzqUsIM6azpHOm86fzpPOlc6hzp/OoyDOp86Zzp/OpSwgzprOkc6hzqXOnc6kzpEgzqfOmc6fzqUsIM6azqnOnM6XIM6nzpnOn86lLCDOm86ZzpjOmc6fIM6nzpnOn86lLCDOm86ZzpzOkc6dzpkgzpvOmc6YzpnOn86lIM6nzpnOn86lLCDOm86ZzpzOlc6dzpHOoyAozqDOkc6jzpEgzpvOmc6czpHOnc6ZKSDOp86Zzp/OpSwgzpzOlc6hzpnOms6fzqXOnc6kzpEgzqfOmc6fzqUsIM6czpXOo86RIM6UzpnOlM6lzpzOkSDOp86Zzp/OpSwgzpzOlc6jzqTOkSDOp86Zzp/OpSwgzpzOn86dzpcgzpHOk86Zzp/OpSDOk86VzqnOoc6TzpnOn86lIM6nzpnOn86lLCDOnc6XzqPOkc6azpkgzqfOmc6fzqUsIM6fzpvOpc6czqDOn86ZIM6nzpnOn86lLCDOoM6RzqTOoc6ZzprOkSDOp86Zzp/OpSwgzqDOlc6bzpHOk86fzp3Ol86jzp/OoyDOp86Zzp/OpSwgzqDOm86RzprOkSDOp86Zzp/OpSwgzqDOpc6hzpPOmSDOp86Zzp/OpSwgzqTOoc6RzqfOpc6bzpnOkSDOp86Zzp/OpSwgzqfOkc6bzprOlc6Zzp8gzqfOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzqfOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzgyMTAzJywgQXJlYTogJ86RzpPOmc6RzqPOnM6RzqTOkSDOms6VzqHOkc6czp/OpSDOp86Zzp/OpSwgzpHOk86ZzpHOo86czpHOpM6RIM6bzpXOoM6kzp/OoM6fzpTOqc6dIM6nzpnOn86lLCDOkc6TzpnOnyDOk86RzpvOkSDOp86Zzp/OpSwgzpHOk86Zzp/OoyDOkc6ZzpzOmc6bzpnOkc6dzp/OoyDOp86Zzp/OpSwgzpHOk86Zzp/OoyDOmc6jzpnOlM6pzqHOn86jIM6nzpnOn86lLCDOkc6mzqHOn86UzpnOo86ZzpEgzqfOmc6fzqUsIM6Szp/Om86ZzqPOo86fzqMgzqfOmc6fzqUsIM6UzpnOlc6lzqfOkSDOp86Zzp/OpSwgzpXOk86hzpfOk86fzqHOn86jIM6nzpnOn86lLCDOlc6Wzp/Opc6jzpEgzqfOmc6fzqUsIM6azpHOpM6RzpLOkc6jzpcgzqfOmc6fzqUsIM6azpXOoc6RzpzOn86jIM6SzpnOms6Zzp/OpSDOp86Zzp/OpSwgzprOlc6hzpHOnM6fzqMgzqfOmc6fzqUgzqfOmc6fzqUsIM6azp/Oo86azpnOnc6RzqMgzqfOmc6fzqUsIM6azp/Oo86czpHOlM6fzqMgzqfOmc6fzqUsIM6azp/Opc6hzp/Opc6dzpnOkSDOp86Zzp/OpSwgzpvOlc6gzqTOn86gzp/OlM6RIM6nzpnOn86lLCDOm86XzpzOnc6ZzpEgzqfOmc6fzqUgzqfOmc6fzqUsIM6bzpnOnM6ZzpEgzqfOmc6fzqUsIM6czpHOnc6RzpPOoc6fzqMgzqfOmc6fzqUsIM6czpHOoc6czpHOoc6fIM6nzpnOn86lLCDOnM6VzpvOkc6dzpnOn86jIM6nzpnOn86lLCDOnM6fzp3OlyDOkc6TzpnOkc6jIM6czpHOoc6azpXOm86bzpHOoyDOp86Zzp/OpSwgzpzOn86dzpcgzpHOk86ZzpHOoyDOnM6RzqTOoc6pzp3Ol86jIM6nzpHOm86Rzp3OlM6hzqnOnSDOp86Zzp/OpSwgzpzOn86dzpcgzpHOk86Zzp/OpSDOnM6RzqHOms6fzqUgzqfOmc6fzqUsIM6dzpHOk86fzqMgzqfOmc6fzqUsIM6dzpXOkSDOoM6fzqTOkc6czpnOkSDOp86Zzp/OpSwgzp3Olc6dzpfOpM6fzqXOoc6ZzpEgzqfOmc6fzqUsIM6gzpHOoc6gzpHOoc6ZzpEgzqfOmc6fzqUsIM6gzpnOoc6RzpzOkSDOp86Zzp/OpSwgzqDOmc6jzqDOmc6bzp/Opc6dzqTOkSDOp86Zzp/OpSwgzqDOpc6hzpPOmc6RIM6nzpnOn86lLCDOo86ZzpTOl86hzp/Opc6dzqTOkSDOp86Zzp/OpSwgzqPOms6RzqHOmc6pzqTOl86jIM6nzpnOn86lLCDOpM6hzqXOoM6VzqMgzqfOmc6fzqUsIM6nzpHOm86Rzp3OlM6hzpEgzqfOmc6fzqUsIM6nzpnOn86lIM6gzpXOoc6Zzp/Op86XIM6bzpfOnM6dzp/OoyDOp86Zzp/OpSwgzqfOqc6hzpcgzqfOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzqfOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzgyMTA0JywgQXJlYTogJ86RzpPOmc6fIM6dzpnOms6fzpvOkc6azpkgzqfOmc6fzqUsIM6Rzp3OpM6ZzqjOkc6hzpEgzqfOmc6fzqUsIM6UzpHOms6RzpvOmc6fIM6nzpnOn86lLCDOms6RzqTOqSDOnc6XzqPOmSDOp86Zzp/OpSwgzpzOn86dzpcgzprOn86ZzpzOl86jzpXOqc6jIM6YzpXOn86kzp/Oms6fzqUgzqjOkc6hzqnOnSDOp86Zzp/OpSwgzqjOkc6hzpEgzqfOmc6fzqUnLCBQcmVmZWN0dXJlOiAnzqfOr86/z4UnIH0sXG5cdHsgUG9zdGFsQ29kZTogJzgyMzAwJywgQXJlYTogJ86RzpPOoc6VzpvOqc6gzp/OoyDOp86Zzp/OpSwgzpHOnM6RzpTOlc6jIM6nzpnOn86lLCDOks6ZzprOmc6fIM6nzpnOn86lLCDOk86bzpHOo86kzqHOmc6RIM6nzpnOn86lLCDOms6RzpzOoM6ZzpEgzqfOmc6fzqUsIM6azpXOoc6kzpfOoyDOp86Zzp/OpSwgzprOl86gzp/Opc6hzpnOlc6jIM6nzpnOn86lLCDOm86RzpPOms6RzpTOkSDOp86Zzp/OpSwgzpzOkc6hzpPOkc6hzpnOpM6ZIM6nzpnOn86lLCDOnc6VzpEgzpzOn86dzpcgzqfOmc6fzqUsIM6gzpHOnc6kzp/Opc6azpnOn86jIM6nzpnOn86lLCDOoM6RzqHOkc6bzpnOkSDOkc6czpHOlM6VzqnOnSDOp86Zzp/OpSwgzqDOmc6kzqXOn86jIM6nzpnOn86lLCDOo86RzqHOkc6azpfOnc6fzqDOlc6kzqHOkSDOp86Zzp/OpSwgzqPOoM6RzqHOpM6fzqXOnc6kzpEgzqfOmc6fzqUsIM6jzqTOoc6fzpLOmc6bzpkgzqfOmc6fzqUsIM6jzqXOms6ZzpHOlM6RIM6nzpnOn86lLCDOps6lzqTOkSDOp86Zzp/OpScsIFByZWZlY3R1cmU6ICfOp86vzr/PhScgfVxuXTtcblxudmFyIGdlbmRlcnMgPSBbe1xuICAgIE5hbWU6ICfOhs+Bz4HOtc69JyxcbiAgICBDb2RlOiAnbWFsZSdcbn0se1xuICAgIE5hbWU6ICfOmM6uzrvPhScsXG4gICAgQ29kZTogJ2ZlbWFsZSdcbn1dO1xuXG52YXIgZGVwYXJ0bWVudHMgPSBbe1xuICAgIE5hbWU6ICfOpM68zq7OvM6xIM6czrfPh86xzr3Ouc66z47OvSDOoM67zrfPgc6/z4bOv8+BzrnOus6uz4InLFxuICAgIENvZGU6ICdJQ0UnXG59LCB7XG4gICAgTmFtZTogJ86kzrzOrs68zrEgzpfOu861zrrPhM+Bzr/Ou8+MzrPPic69IM6czrfPh86xzr3Ouc66z47OvScsXG4gICAgQ29kZTogJ0nOlUUnXG59XVxuXG52YXIgY29udGV4dCA9IG5ldyBEYXRhQ29udGV4dCgpO1xuXG5jb250ZXh0LkFkZERhdGFTb3VyY2UobmV3IERhdGFTb3VyY2UoJ3Bvc3RhbENvZGVzJywgcG9zdGFsQ29kZXMpKTtcbmNvbnRleHQuQWRkRGF0YVNvdXJjZShuZXcgRGF0YVNvdXJjZSgnZ2VuZGVycycsIGdlbmRlcnMpKTtcbmNvbnRleHQuQWRkRGF0YVNvdXJjZShuZXcgRGF0YVNvdXJjZSgnZGVwYXJ0bWVudHMnLCBkZXBhcnRtZW50cykpO1xuXG5cbnZhciBwYWdlID0gbmV3IFJvd0NvbnRhaW5lcih7XG4gICAgSWQ6IEd1aWQuTmV3R3VpZCgpLFxuICAgIENzc0NsYXNzZXM6IFsncm93JywgJ2QtZmxleCcsICdqdXN0aWZ5LWNvbnRlbnQtY2VudGVyJ10sXG4gICAgQ2hpbGRyZW46IFtcbiAgICAgICAgbmV3IENvbHVtbkNvbnRhaW5lcih7XG4gICAgICAgICAgICBJZDogR3VpZC5OZXdHdWlkKCksXG4gICAgICAgICAgICBXaWR0aDogMTIsXG4gICAgICAgICAgICBXaWR0aERlc2t0b3A6IDEwLFxuICAgICAgICAgICAgQ2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICBuZXcgRm9ybUNvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgIElkOiBmb3JtSWQsXG4gICAgICAgICAgICAgICAgICAgIENoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQWN0aW9uQ29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZDogR3VpZC5OZXdHdWlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEZvcm1TdWJtaXRBY3Rpb25Db250cm9sKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElkOiBzdWJtaXRBY3Rpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1JZDogZm9ybUlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNvbnRleHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgY29udGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUm93Q29udGFpbmVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZDogR3VpZC5OZXdHdWlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENvbHVtbkNvbnRhaW5lcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZDogR3VpZC5OZXdHdWlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaWR0aDogMTIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaWR0aERlc2t0b3A6IDYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZXh0Q29udHJvbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElkOiBHdWlkLk5ld0d1aWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGl0bGU6IFwizozOvc6/zrzOsVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcmlhTGFiZWw6IFwizozOvc6/zrzOsVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGFjZUhvbGRlcjogXCLOjM69zr/OvM6xXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlcXVpcmVkOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgY29udGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRleHRDb250cm9sKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWQ6IEd1aWQuTmV3R3VpZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaXRsZTogXCLOlc+Az47Ovc+FzrzOv1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcmlhTGFiZWw6IFwizpXPgM+Ozr3Phc68zr9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxhY2VIb2xkZXI6IFwizpXPgM+Ozr3Phc68zr9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVxdWlyZWQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dENvbnRyb2woe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZDogR3VpZC5OZXdHdWlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlOiBcIs6gzrHPhM+Bz47Ovc+FzrzOv1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcmlhTGFiZWw6IFwizqDOsc+Ez4HPjs69z4XOvM6/XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsYWNlSG9sZGVyOiBcIs6gzrHPhM+Bz47Ovc+FzrzOv1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXF1aXJlZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNvbnRleHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTZWxlY3RDb250cm9sKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWQ6IEd1aWQuTmV3R3VpZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaXRsZTogXCLOps+NzrvOv1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcmlhTGFiZWw6IFwizqbPjc67zr9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxlYXNlU2VsZWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9va3VwRGF0YVNvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZTogJ2dlbmRlcnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGV4dEZpZWxkOiAnTmFtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWx1ZUZpZWxkOiAnQ29kZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgU2VsZWN0Q29udHJvbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElkOiBHdWlkLk5ld0d1aWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGl0bGU6IFwizqTOvM6uzrzOsVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcmlhTGFiZWw6IFwizqTOvM6uzrzOsVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGVhc2VTZWxlY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb29rdXBEYXRhU291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lOiAnZGVwYXJ0bWVudHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGV4dEZpZWxkOiAnTmFtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWx1ZUZpZWxkOiAnQ29kZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dENvbnRyb2woe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZDogR3VpZC5OZXdHdWlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlOiBcIs6Rz4HOuc64zrzPjM+CIM68zrfPhM+Bz47Ov8+FXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFyaWFMYWJlbDogXCLOkc+BzrnOuM68z4zPgiDOvM63z4TPgc+Ozr/PhVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGFjZUhvbGRlcjogXCLOkc+BzrnOuM68z4zPgiDOvM63z4TPgc+Ozr/PhVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXF1aXJlZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNvbnRleHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZXh0QXJlYUNvbnRyb2woe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZDogR3VpZC5OZXdHdWlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlOiBcIs6Rzr3Osc+AzrfPgc6vzrFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJpYUxhYmVsOiBcIs6Rzr3Osc+AzrfPgc6vzrFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxhY2VIb2xkZXI6IFwizpHOvc6xz4DOt8+Bzq/OsVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgY29udGV4dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgY29udGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb2x1bW5Db250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWQ6IEd1aWQuTmV3R3VpZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2lkdGg6IDEyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2lkdGhEZXNrdG9wOiA2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dENvbnRyb2woe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZDogR3VpZC5OZXdHdWlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlOiBcIs6kzrfOu86tz4bPic69zr8gKM6/zrnOus6vzrHPgilcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJpYUxhYmVsOiBcIs6kzrfOu86tz4bPic69zr8gKM6/zrnOus6vzrHPgilcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxhY2VIb2xkZXI6IFwizqTOt867zq3Phs+Jzr3OvyAozr/Ouc66zq/Osc+CKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXF1aXJlZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNvbnRleHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZXh0Q29udHJvbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElkOiBHdWlkLk5ld0d1aWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGl0bGU6IFwizqTOt867zq3Phs+Jzr3OvyAozrrOuc69zrfPhM+MKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcmlhTGFiZWw6IFwizqTOt867zq3Phs+Jzr3OvyAozrrOuc69zrfPhM+MKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGFjZUhvbGRlcjogXCLOpM63zrvOrc+Gz4nOvc6/ICjOus65zr3Ot8+Ez4wpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlcXVpcmVkOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgY29udGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRleHRDb250cm9sKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWQ6IEd1aWQuTmV3R3VpZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaXRsZTogXCJFbWFpbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcmlhTGFiZWw6IFwiRW1haWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxhY2VIb2xkZXI6IFwiRW1haWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVxdWlyZWQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dENvbnRyb2woe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZDogR3VpZC5OZXdHdWlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlOiBcIs6UzrnOtc+FzrjPhc69z4POt1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcmlhTGFiZWw6IFwizpTOuc61z4XOuM+Fzr3Pg863XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsYWNlSG9sZGVyOiBcIs6UzrnOtc+FzrjPhc69z4POt1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXF1aXJlZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNvbnRleHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTZWxlY3RDb250cm9sKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWQ6IEd1aWQuTmV3R3VpZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaXRsZTogXCLOpC7Omi5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJpYUxhYmVsOiBcIs6kLs6aLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGVhc2VTZWxlY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb29rdXBEYXRhU291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lOiAncG9zdGFsQ29kZXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGV4dEZpZWxkOiAnUG9zdGFsQ29kZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWx1ZUZpZWxkOiAnUG9zdGFsQ29kZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dENvbnRyb2woe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZDogR3VpZC5OZXdHdWlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlOiBcIs6gz4zOu863XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFyaWFMYWJlbDogXCLOoM+MzrvOt1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGFjZUhvbGRlcjogXCLOoM+MzrvOt1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFkT25seTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVxdWlyZWQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGV4dENvbnRyb2woe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZDogR3VpZC5OZXdHdWlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlOiBcIs6gzrXPgc65z4bOrc+BzrXOuc6xXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFyaWFMYWJlbDogXCLOoM61z4HOuc+Gzq3Pgc61zrnOsVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGFjZUhvbGRlcjogXCLOoM61z4HOuc+Gzq3Pgc61zrnOsVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFkT25seTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVxdWlyZWQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgY29udGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDb2x1bW5Db250YWluZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWQ6IEd1aWQuTmV3R3VpZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2lkdGg6IDEyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQnV0dG9uQ29udHJvbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElkOiBHdWlkLk5ld0d1aWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGl0bGU6ICfOlc+Az4zOvM61zr3OvyDOks6uzrzOsScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjdGlvbklkOiBzdWJtaXRBY3Rpb25JZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNvbnRleHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNvbnRleHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgY29udGV4dClcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sIGNvbnRleHQpXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sIGNvbnRleHQpXG4gICAgXVxufSwgY29udGV4dClcblxuLy8gdmFyIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwYWdlJylbMF0gYXMgSFRNTEVsZW1lbnQ7XG4vL1xuLy8gcGFnZS5CdWlsZCgpO1xuLy8gcGFnZS5SZW5kZXIoYm9keSk7XG4vLyBwYWdlLkJpbmQoKTtcblxudmFyIGRhdGFTb3VyY2UgPSBjb250ZXh0LkdldCgncG9zdGFsQ29kZXMnKTtcblxuY29uc29sZS5sb2coZGF0YVNvdXJjZSk7XG5cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vVGhlbWUvdHMvaW5kZXgudHNcIik7XG4iXSwic291cmNlUm9vdCI6IiJ9